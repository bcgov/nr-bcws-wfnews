name: Build Android

env:
  WEBADE_JCRS_URL: ${{ secrets.WEBADE_JCRS_URL }}
  NPMRC: ${{ secrets.NPMRC }}
  PACKAGE_NAME: ${{ secrets.KEY_ALIAS }}


# Controls when the workflow will run
on: workflow_call

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      ANGULAR_DIRECTORY: ./client/wfnews-war/src/main/angular
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      
      - name: Add .npmrc file
        run: echo -e $NPMRC > ${{ env.ANGULAR_DIRECTORY }}/.npmrc
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          # cache-dependency-path: ${{ env.ANGULAR_DIRECTORY }}/package-lock.json

      # - name: Cache node modules
      #   id: cache-npm
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-

      # - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      #   name: List the state of node modules
      #   continue-on-error: true
      #   run: npm list

      - name: Install Ionic
        run: npm install -g @ionic/cli

      - name: Install app dependencies
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        run: npm install --legacy-peer-deps

      - name: Prepare app for build
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        run: ionic capacitor sync android --prod

      # ## cache to reduce future builds
      # - name: Cache Gradle
      #   uses: actions/cache@v3
      #   with:
      #     path: | 
      #       ~/.gradle/caches
      #       ~/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        working-directory: ./android
        run: chmod +x ./gradlew

      - uses: sparkfabrik/android-build-action@v1.4.0
        name: Build AAB and upload to Play Store
        with:
          build-type: "bundle"
          gradle-task: "bundleRelease"
          increment-build-number: false
          # package-name: ${{ env.PACKAGE_NAME }}
          # keystore-content: ${{ secrets.KEYSTORE_CONTENT }}
          # keystore-password: ${{ secrets.KEYSTORE_PASSWORD }}
          # key-alias: ${{ secrets.KEY_ALIAS }}
          # json-key-data: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
          # upload-to-play-store: true
          project-path: '${{ env.ANGULAR_DIRECTORY }}/android/'
          output-path: wfnews-release-${{ github.sha }}.aab
  
      - uses: actions/upload-artifact@v3
        name: Upload AAB to GitHub
        with:
          name: wfnews-release-${{ github.sha }}.aab
          path: '${{ env.ANGULAR_DIRECTORY }}/android/wfnews-release-${{ github.sha }}.aab'
          retention-days: 3

      - name: Post to a Slack channel
        id: slack
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'wildfire-build-notifier'
          slack-message: "Android build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}