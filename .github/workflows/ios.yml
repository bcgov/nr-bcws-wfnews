name: Build iOS

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      build_environment:
        description: 'Build Environment'
        type: string
        required: true
      upload_to_app_store:
        description: 'Upload to App Store'
        type: boolean
        required: true
  workflow_dispatch:
    inputs:
      build_environment:
        description: 'Build Environment'
        type: choice
        options:
          - development
          - production
        default: 'development'
      upload_to_app_store:
        description: 'Upload to App Store'
        type: boolean
        default: false
  # Remove this push after first run
  push:
    branches:
      - main
      - mobile-build-automation

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      ANGULAR_DIRECTORY: ./client/wfnews-war/src/main/angular
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set short git commit SHA
        id: vars
        if: always()
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"

      - name: Add .npmrc file
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        env:
          NPMRC: ${{ secrets.NPMRC }}
        run: |
          echo -n "$NPMRC" > .npmrc

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Configure ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
          bundler-cache: true

      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Install Ionic
        run: npm install -g @ionic/cli

      - name: Install app dependencies
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        run: npm install --legacy-peer-deps

      - name: Prepare app for build
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        env:
          BUILD_FLAG: ${{ inputs.build_environment == 'production' && '--prod' || '' }}
        run: ionic capacitor sync android $BUILD_FLAG

      - name: Add Google Services file
        working-directory: "${{ env.ANGULAR_DIRECTORY }}/ios/App/App"
        env:
          GOOGLE_FILE: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
        run: |
          echo -n "$GOOGLE_FILE" > GoogleService-Info.plist

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build archive
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        run: |
          xcodebuild -scheme "App" \
          -workspace ./ios/App/App.xcworkspace \
          -archivePath $RUNNER_TEMP/App.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive

      - name: Export IPA
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/App.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/App.ipa
          retention-days: 3

      - name: "Upload app to TestFlight"
        uses: apple-actions/upload-testflight-build@v1
        if: ${{ inputs.upload_to_app_store == true }}
        with:
          app-path: "output.ipa"
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER_95 }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY_95 }}

      - name: Post to a Slack channel
        id: slack
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        env:
          STATUS_EMOJI: ${{ job.status == 'success' && ':white_check_mark:' || ':x:' }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'wildfire-build-notifier'
          slack-message: ":apple_mac: - ${{ steps.vars.outputs.short_sha }} : ${{ env.STATUS_EMOJI }} ${{ job.status }} \n Environment: ${{ github.event.inputs.build_environment }} \n Upload to App Store: ${{ github.event.inputs.upload_to_app_store }}"
        
