name: Build iOS

# Controls when the workflow will run
on: workflow_call

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      ANGULAR_DIRECTORY: ./client/wfnews-war/src/main/angular
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Add .npmrc file
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        run: /bin/echo -e "$NPMRC" > .npmrc

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          # cache: 'npm'
          # cache-dependency-path: ${{ env.ANGULAR_DIRECTORY }}/package-lock.json

      - name: Configure ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
          bundler-cache: true

      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      # - name: Cache node modules
      #   id: cache-npm
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      #       ${{ runner.os }}-build-
      #       ${{ runner.os }}-
  
      # - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
      #   name: List the state of node modules
      #   continue-on-error: true
      #   run: npm list

      - name: Install Ionic
        run: npm install -g @ionic/cli

      - name: Install app dependencies
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        run: npm install --legacy-peer-deps

      - name: Prepare app for build
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        run: ionic capacitor sync ios --prod

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: build archive
        working-directory: ${{ env.ANGULAR_DIRECTORY }}
        run: |
          xcodebuild -scheme "App" \
          -workspace ./ios/App/App.xcworkspace \
          -archivePath $RUNNER_TEMP/App.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive

      - name: export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/App.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/App.ipa
          retention-days: 3

      # - name: "Upload app to TestFlight"
      #   uses: apple-actions/upload-testflight-build@v1
      #   with:
      #     app-path: "output.ipa"
      #     issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      #     api-key-id: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER_95 }}
      #     api-private-key: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY_95 }}

      # - name: Post to a Slack channel
      #   id: slack
      #   if: always()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     # Slack channel id, channel name, or user id to post message.
      #     # See also: https://api.slack.com/methods/chat.postMessage#channels
      #     # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
      #     channel-id: 'wildfire-build-notifier'
      #     slack-message: "iOS build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
