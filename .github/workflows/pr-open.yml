name: "Pull Request"

on:
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  TRIGGERS: ('client/' 'server/' '.github/workflows')
  NAME: gfp

jobs:
  check:
    name: Check
    outputs:
      build: ${{ steps.check.outputs.build }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check and process modified files
        id: check
        run: |
          # Fetch main to diff against
          git fetch origin main:refs/remotes/origin/master
          # Trigger build if diff matches any triggers
          TRIGGERS=${{ env.TRIGGERS }}
          while read -r check
          do
              for t in "${TRIGGERS[@]}"; do
                  if [[ "${check}" =~ "${t}" ]]
                  then
                      # Output build=true for next steps
                      echo "::set-output name=build::true"
                      echo -e "${t}\n --> ${check}\n"
                      exit 0
                  fi
              done
          done < <(git diff origin/main --name-only)
          echo "Build and deploy workflows not triggered"

  trivy-repo:
    name: Trivy-Repo
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.3.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  build-server:
    name: Build-Server
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Server Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./server/
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-server
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-client:
    name: Build-Client
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Client Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./client/
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-client
          cache-from: type=gha
          cache-to: type=gha,mode=max

  tests-client:
    name: Tests-Client
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          cd client
          npm ci
          npm test

  # Update to trigger junit on Java server
  tests-server:
    name: Tests-Server
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          cd server
          mvn test

  trivy-server:
    name: Trivy-Server
    needs:
      - build-server
      - build-client
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.3.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-server
          ignore-unfixed: true
          severity: CRITICAL
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  trivy-client:
    name: Trivy-Client
    needs:
      - build-server
      - build-client
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.3.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-client
          ignore-unfixed: true
          severity: CRITICAL
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
