{"version":3,"file":"node_modules_capacitor_network_dist_esm_web_js.js","mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA,SAASC,oBAAT,GAAgC;AAC5B,QAAMC,UAAU,GAAGC,MAAM,CAACC,SAAP,CAAiBF,UAAjB,IACfC,MAAM,CAACC,SAAP,CAAiBC,aADF,IAEfF,MAAM,CAACC,SAAP,CAAiBE,gBAFrB;AAGA,MAAIC,MAAM,GAAG,SAAb;AACA,QAAMC,IAAI,GAAGN,UAAU,GAAGA,UAAU,CAACM,IAAX,IAAmBN,UAAU,CAACO,aAAjC,GAAiD,IAAxE;;AACA,MAAID,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AAClC,YAAQA,IAAR;AACI;AACA,WAAK,WAAL;AACA,WAAK,UAAL;AACID,QAAAA,MAAM,GAAG,UAAT;AACA;;AACJ,WAAK,MAAL;AACIA,QAAAA,MAAM,GAAG,MAAT;AACA;;AACJ,WAAK,UAAL;AACA,WAAK,MAAL;AACA,WAAK,OAAL;AACIA,QAAAA,MAAM,GAAG,MAAT;AACA;;AACJ,WAAK,OAAL;AACA,WAAK,SAAL;AACIA,QAAAA,MAAM,GAAG,SAAT;AACA;AACJ;;AACA,WAAK,SAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACIA,QAAAA,MAAM,GAAG,UAAT;AACA;;AACJ,WAAK,IAAL;AACIA,QAAAA,MAAM,GAAG,MAAT;AACA;;AACJ;AACI;AA5BR;AA8BH;;AACD,SAAOA,MAAP;AACH;;AACM,MAAMG,UAAN,SAAyBV,sDAAzB,CAAmC;AACtCW,EAAAA,WAAW,GAAG;AACV;;AACA,SAAKC,YAAL,GAAoB,MAAM;AACtB,YAAMC,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,YAAMa,MAAM,GAAG;AACXC,QAAAA,SAAS,EAAE,IADA;AAEXF,QAAAA,cAAc,EAAEA;AAFL,OAAf;AAIA,WAAKG,eAAL,CAAqB,qBAArB,EAA4CF,MAA5C;AACH,KAPD;;AAQA,SAAKG,aAAL,GAAqB,MAAM;AACvB,YAAMH,MAAM,GAAG;AACXC,QAAAA,SAAS,EAAE,KADA;AAEXF,QAAAA,cAAc,EAAE;AAFL,OAAf;AAIA,WAAKG,eAAL,CAAqB,qBAArB,EAA4CF,MAA5C;AACH,KAND;;AAOA,QAAI,OAAOX,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,MAAAA,MAAM,CAACe,gBAAP,CAAwB,QAAxB,EAAkC,KAAKN,YAAvC;AACAT,MAAAA,MAAM,CAACe,gBAAP,CAAwB,SAAxB,EAAmC,KAAKD,aAAxC;AACH;AACJ;;AACKE,EAAAA,SAAS,GAAG;AAAA;;AAAA;AACd,UAAI,CAAChB,MAAM,CAACC,SAAZ,EAAuB;AACnB,cAAM,KAAI,CAACgB,WAAL,CAAiB,sDAAjB,CAAN;AACH;;AACD,YAAML,SAAS,GAAGZ,MAAM,CAACC,SAAP,CAAiBiB,MAAnC;AACA,YAAMR,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,YAAMa,MAAM,GAAG;AACXC,QAAAA,SADW;AAEXF,QAAAA,cAAc,EAAEE,SAAS,GAAGF,cAAH,GAAoB;AAFlC,OAAf;AAIA,aAAOC,MAAP;AAVc;AAWjB;;AAlCqC;AAoC1C,MAAMQ,OAAO,GAAG,IAAIZ,UAAJ,EAAhB","sources":["./node_modules/@capacitor/network/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\nfunction translatedConnection() {\r\n    const connection = window.navigator.connection ||\r\n        window.navigator.mozConnection ||\r\n        window.navigator.webkitConnection;\r\n    let result = 'unknown';\r\n    const type = connection ? connection.type || connection.effectiveType : null;\r\n    if (type && typeof type === 'string') {\r\n        switch (type) {\r\n            // possible type values\r\n            case 'bluetooth':\r\n            case 'cellular':\r\n                result = 'cellular';\r\n                break;\r\n            case 'none':\r\n                result = 'none';\r\n                break;\r\n            case 'ethernet':\r\n            case 'wifi':\r\n            case 'wimax':\r\n                result = 'wifi';\r\n                break;\r\n            case 'other':\r\n            case 'unknown':\r\n                result = 'unknown';\r\n                break;\r\n            // possible effectiveType values\r\n            case 'slow-2g':\r\n            case '2g':\r\n            case '3g':\r\n                result = 'cellular';\r\n                break;\r\n            case '4g':\r\n                result = 'wifi';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport class NetworkWeb extends WebPlugin {\r\n    constructor() {\r\n        super();\r\n        this.handleOnline = () => {\r\n            const connectionType = translatedConnection();\r\n            const status = {\r\n                connected: true,\r\n                connectionType: connectionType,\r\n            };\r\n            this.notifyListeners('networkStatusChange', status);\r\n        };\r\n        this.handleOffline = () => {\r\n            const status = {\r\n                connected: false,\r\n                connectionType: 'none',\r\n            };\r\n            this.notifyListeners('networkStatusChange', status);\r\n        };\r\n        if (typeof window !== 'undefined') {\r\n            window.addEventListener('online', this.handleOnline);\r\n            window.addEventListener('offline', this.handleOffline);\r\n        }\r\n    }\r\n    async getStatus() {\r\n        if (!window.navigator) {\r\n            throw this.unavailable('Browser does not support the Network Information API');\r\n        }\r\n        const connected = window.navigator.onLine;\r\n        const connectionType = translatedConnection();\r\n        const status = {\r\n            connected,\r\n            connectionType: connected ? connectionType : 'none',\r\n        };\r\n        return status;\r\n    }\r\n}\r\nconst Network = new NetworkWeb();\r\nexport { Network };\r\n"],"names":["WebPlugin","translatedConnection","connection","window","navigator","mozConnection","webkitConnection","result","type","effectiveType","NetworkWeb","constructor","handleOnline","connectionType","status","connected","notifyListeners","handleOffline","addEventListener","getStatus","unavailable","onLine","Network"],"sourceRoot":"webpack:///"}