import { NoopScrollStrategy } from '@angular/cdk/overlay';
let uniqueId = 0;
export class OwlDialogConfig {
    constructor() {
        /**
         * ID of the element that describes the dialog.
         * @type {string}
         * @default {null}
         * */
        this.ariaDescribedBy = null;
        /**
         * Whether to focus the dialog when the dialog is opened
         * @type {boolean}
         * @default {true}
         * */
        this.autoFocus = true;
        /** Whether the dialog has a backdrop. */
        this.hasBackdrop = true;
        /** Data being injected into the child component. */
        this.data = null;
        /** Whether the user can use escape or clicking outside to close a modal. */
        this.disableClose = false;
        /**
         * The ARIA role of the dialog element.
         * @type {'dialog' | 'alertdialog'}
         * @default {'dialog'}
         * */
        this.role = 'dialog';
        /**
         * Custom class for the pane
         * */
        this.paneClass = '';
        /**
         * Mouse Event
         * */
        this.event = null;
        /**
         * Custom class for the backdrop
         * */
        this.backdropClass = '';
        /**
         * Whether the dialog should close when the user goes backwards/forwards in history.
         * */
        this.closeOnNavigation = true;
        /** Width of the dialog. */
        this.width = '';
        /** Height of the dialog. */
        this.height = '';
        /**
         * The max-width of the overlay panel.
         * If a number is provided, pixel units are assumed.
         * */
        this.maxWidth = '85vw';
        /**
         * The scroll strategy when the dialog is open
         * Learn more this from https://material.angular.io/cdk/overlay/overview#scroll-strategies
         * */
        this.scrollStrategy = new NoopScrollStrategy();
        this.id = `owl-dialog-${uniqueId++}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWNvbmZpZy5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXBpY2stZGF0ZXRpbWUvc3JjL2xpYi9kaWFsb2cvZGlhbG9nLWNvbmZpZy5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQUUsa0JBQWtCLEVBQWtCLE1BQU0sc0JBQXNCLENBQUM7QUFFMUUsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBaUJqQixNQUFNLE9BQU8sZUFBZTtJQTRHeEI7UUExR0E7Ozs7YUFJSztRQUNFLG9CQUFlLEdBQW1CLElBQUksQ0FBQztRQUU5Qzs7OzthQUlLO1FBQ0UsY0FBUyxHQUFJLElBQUksQ0FBQztRQUV6Qix5Q0FBeUM7UUFDbEMsZ0JBQVcsR0FBSSxJQUFJLENBQUM7UUFPM0Isb0RBQW9EO1FBQzdDLFNBQUksR0FBUyxJQUFJLENBQUM7UUFFekIsNEVBQTRFO1FBQ3JFLGlCQUFZLEdBQUksS0FBSyxDQUFDO1FBUTdCOzs7O2FBSUs7UUFDRSxTQUFJLEdBQThCLFFBQVEsQ0FBQztRQUVsRDs7YUFFSztRQUNFLGNBQVMsR0FBdUIsRUFBRSxDQUFDO1FBRTFDOzthQUVLO1FBQ0UsVUFBSyxHQUFnQixJQUFJLENBQUM7UUFHakM7O2FBRUs7UUFDRSxrQkFBYSxHQUF1QixFQUFFLENBQUM7UUFHOUM7O2FBRUs7UUFDRSxzQkFBaUIsR0FBYSxJQUFJLENBQUM7UUFFMUMsMkJBQTJCO1FBQ3BCLFVBQUssR0FBWSxFQUFFLENBQUM7UUFFM0IsNEJBQTRCO1FBQ3JCLFdBQU0sR0FBWSxFQUFFLENBQUM7UUFjNUI7OzthQUdLO1FBQ0UsYUFBUSxHQUFxQixNQUFNLENBQUM7UUFZM0M7OzthQUdLO1FBQ0UsbUJBQWMsR0FBb0IsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO1FBTTlELElBQUksQ0FBQyxFQUFFLEdBQUcsY0FBYyxRQUFRLEVBQUUsRUFBRSxDQUFDO0lBQ3pDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBkaWFsb2ctY29uZmlnLmNsYXNzXHJcbiAqL1xyXG5pbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5vb3BTY3JvbGxTdHJhdGVneSwgU2Nyb2xsU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XHJcblxyXG5sZXQgdW5pcXVlSWQgPSAwO1xyXG5cclxuLyoqIFBvc3NpYmxlIG92ZXJyaWRlcyBmb3IgYSBkaWFsb2cncyBwb3NpdGlvbi4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEaWFsb2dQb3NpdGlvbiB7XHJcbiAgICAvKiogT3ZlcnJpZGUgZm9yIHRoZSBkaWFsb2cncyB0b3AgcG9zaXRpb24uICovXHJcbiAgICB0b3A/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqIE92ZXJyaWRlIGZvciB0aGUgZGlhbG9nJ3MgYm90dG9tIHBvc2l0aW9uLiAqL1xyXG4gICAgYm90dG9tPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKiBPdmVycmlkZSBmb3IgdGhlIGRpYWxvZydzIGxlZnQgcG9zaXRpb24uICovXHJcbiAgICBsZWZ0Pzogc3RyaW5nO1xyXG5cclxuICAgIC8qKiBPdmVycmlkZSBmb3IgdGhlIGRpYWxvZydzIHJpZ2h0IHBvc2l0aW9uLiAqL1xyXG4gICAgcmlnaHQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPd2xEaWFsb2dDb25maWcge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSUQgb2YgdGhlIGVsZW1lbnQgdGhhdCBkZXNjcmliZXMgdGhlIGRpYWxvZy5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiBAZGVmYXVsdCB7bnVsbH1cclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgYXJpYURlc2NyaWJlZEJ5Pzogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRvIGZvY3VzIHRoZSBkaWFsb2cgd2hlbiB0aGUgZGlhbG9nIGlzIG9wZW5lZFxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKiBAZGVmYXVsdCB7dHJ1ZX1cclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgYXV0b0ZvY3VzPyA9IHRydWU7XHJcblxyXG4gICAgLyoqIFdoZXRoZXIgdGhlIGRpYWxvZyBoYXMgYSBiYWNrZHJvcC4gKi9cclxuICAgIHB1YmxpYyBoYXNCYWNrZHJvcD8gPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3VzdG9tIHN0eWxlIGZvciB0aGUgYmFja2Ryb3BcclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgYmFja2Ryb3BTdHlsZT86IGFueTtcclxuXHJcbiAgICAvKiogRGF0YSBiZWluZyBpbmplY3RlZCBpbnRvIHRoZSBjaGlsZCBjb21wb25lbnQuICovXHJcbiAgICBwdWJsaWMgZGF0YT86IGFueSA9IG51bGw7XHJcblxyXG4gICAgLyoqIFdoZXRoZXIgdGhlIHVzZXIgY2FuIHVzZSBlc2NhcGUgb3IgY2xpY2tpbmcgb3V0c2lkZSB0byBjbG9zZSBhIG1vZGFsLiAqL1xyXG4gICAgcHVibGljIGRpc2FibGVDbG9zZT8gPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIElEIGZvciB0aGUgbW9kYWwuIElmIG9taXR0ZWQsIGEgdW5pcXVlIG9uZSB3aWxsIGJlIGdlbmVyYXRlZC5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKiAqL1xyXG4gICAgcHVibGljIGlkPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIEFSSUEgcm9sZSBvZiB0aGUgZGlhbG9nIGVsZW1lbnQuXHJcbiAgICAgKiBAdHlwZSB7J2RpYWxvZycgfCAnYWxlcnRkaWFsb2cnfVxyXG4gICAgICogQGRlZmF1bHQgeydkaWFsb2cnfVxyXG4gICAgICogKi9cclxuICAgIHB1YmxpYyByb2xlPzogJ2RpYWxvZycgfCAnYWxlcnRkaWFsb2cnID0gJ2RpYWxvZyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDdXN0b20gY2xhc3MgZm9yIHRoZSBwYW5lXHJcbiAgICAgKiAqL1xyXG4gICAgcHVibGljIHBhbmVDbGFzcz86IHN0cmluZyB8IHN0cmluZ1tdID0gJyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNb3VzZSBFdmVudFxyXG4gICAgICogKi9cclxuICAgIHB1YmxpYyBldmVudD86IE1vdXNlRXZlbnQgPSBudWxsO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEN1c3RvbSBjbGFzcyBmb3IgdGhlIGJhY2tkcm9wXHJcbiAgICAgKiAqL1xyXG4gICAgcHVibGljIGJhY2tkcm9wQ2xhc3M/OiBzdHJpbmcgfCBzdHJpbmdbXSA9ICcnO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhlIGRpYWxvZyBzaG91bGQgY2xvc2Ugd2hlbiB0aGUgdXNlciBnb2VzIGJhY2t3YXJkcy9mb3J3YXJkcyBpbiBoaXN0b3J5LlxyXG4gICAgICogKi9cclxuICAgIHB1YmxpYyBjbG9zZU9uTmF2aWdhdGlvbj86IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIC8qKiBXaWR0aCBvZiB0aGUgZGlhbG9nLiAqL1xyXG4gICAgcHVibGljIHdpZHRoPzogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgLyoqIEhlaWdodCBvZiB0aGUgZGlhbG9nLiAqL1xyXG4gICAgcHVibGljIGhlaWdodD86IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1pbi13aWR0aCBvZiB0aGUgb3ZlcmxheSBwYW5lbC5cclxuICAgICAqIElmIGEgbnVtYmVyIGlzIHByb3ZpZGVkLCBwaXhlbCB1bml0cyBhcmUgYXNzdW1lZC5cclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgbWluV2lkdGg/OiBudW1iZXIgfCBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWluLWhlaWdodCBvZiB0aGUgb3ZlcmxheSBwYW5lbC5cclxuICAgICAqIElmIGEgbnVtYmVyIGlzIHByb3ZpZGVkLCBwaXhlbCB1bml0cyBhcmUgYXNzdW1lZC5cclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgbWluSGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1heC13aWR0aCBvZiB0aGUgb3ZlcmxheSBwYW5lbC5cclxuICAgICAqIElmIGEgbnVtYmVyIGlzIHByb3ZpZGVkLCBwaXhlbCB1bml0cyBhcmUgYXNzdW1lZC5cclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgbWF4V2lkdGg/OiBudW1iZXIgfCBzdHJpbmcgPSAnODV2dyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWF4LWhlaWdodCBvZiB0aGUgb3ZlcmxheSBwYW5lbC5cclxuICAgICAqIElmIGEgbnVtYmVyIGlzIHByb3ZpZGVkLCBwaXhlbCB1bml0cyBhcmUgYXNzdW1lZC5cclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgbWF4SGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xyXG5cclxuXHJcbiAgICAvKiogUG9zaXRpb24gb3ZlcnJpZGVzLiAqL1xyXG4gICAgcHVibGljIHBvc2l0aW9uPzogRGlhbG9nUG9zaXRpb247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2Nyb2xsIHN0cmF0ZWd5IHdoZW4gdGhlIGRpYWxvZyBpcyBvcGVuXHJcbiAgICAgKiBMZWFybiBtb3JlIHRoaXMgZnJvbSBodHRwczovL21hdGVyaWFsLmFuZ3VsYXIuaW8vY2RrL292ZXJsYXkvb3ZlcnZpZXcjc2Nyb2xsLXN0cmF0ZWdpZXNcclxuICAgICAqICovXHJcbiAgICBwdWJsaWMgc2Nyb2xsU3RyYXRlZ3k/OiBTY3JvbGxTdHJhdGVneSA9IG5ldyBOb29wU2Nyb2xsU3RyYXRlZ3koKTtcclxuXHJcblxyXG4gICAgcHVibGljIHZpZXdDb250YWluZXJSZWY/OiBWaWV3Q29udGFpbmVyUmVmO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBgb3dsLWRpYWxvZy0ke3VuaXF1ZUlkKyt9YDtcclxuICAgIH1cclxufVxyXG4iXX0=