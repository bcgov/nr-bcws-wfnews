{"version":3,"file":"moment-date-time-adapter.class.d.ts","sources":["moment-date-time-adapter.class.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * moment-date-time-adapter.class\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\nimport { Moment } from 'moment';\r\nimport { DateTimeAdapter } from '../date-time-adapter.class';\r\n/** Configurable options for {@see MomentDateAdapter}. */\r\nexport interface OwlMomentDateTimeAdapterOptions {\r\n    /**\r\n     * Turns the use of utc dates on or off.\r\n     * Changing this will change how the DateTimePicker output value.\r\n     * {@default false}\r\n     */\r\n    useUtc: boolean;\r\n}\r\n/** InjectionToken for moment date adapter to configure options. */\r\nexport declare const OWL_MOMENT_DATE_TIME_ADAPTER_OPTIONS: InjectionToken<OwlMomentDateTimeAdapterOptions>;\r\n/** @docs-private */\r\nexport declare function OWL_MOMENT_DATE_TIME_ADAPTER_OPTIONS_FACTORY(): OwlMomentDateTimeAdapterOptions;\r\nexport declare class MomentDateTimeAdapter extends DateTimeAdapter<Moment> {\r\n    private owlDateTimeLocale;\r\n    private options?;\r\n    private _localeData;\r\n    constructor(owlDateTimeLocale: string, options?: OwlMomentDateTimeAdapterOptions);\r\n    setLocale(locale: string): void;\r\n    getYear(date: Moment): number;\r\n    getMonth(date: Moment): number;\r\n    getDay(date: Moment): number;\r\n    getDate(date: Moment): number;\r\n    getHours(date: Moment): number;\r\n    getMinutes(date: Moment): number;\r\n    getSeconds(date: Moment): number;\r\n    getTime(date: Moment): number;\r\n    getNumDaysInMonth(date: Moment): number;\r\n    differenceInCalendarDays(dateLeft: Moment, dateRight: Moment): number;\r\n    getYearName(date: Moment): string;\r\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\r\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\r\n    getDateNames(): string[];\r\n    toIso8601(date: Moment): string;\r\n    isEqual(dateLeft: Moment, dateRight: Moment): boolean;\r\n    isSameDay(dateLeft: Moment, dateRight: Moment): boolean;\r\n    isValid(date: Moment): boolean;\r\n    invalid(): Moment;\r\n    isDateInstance(obj: any): boolean;\r\n    addCalendarYears(date: Moment, amount: number): Moment;\r\n    addCalendarMonths(date: Moment, amount: number): Moment;\r\n    addCalendarDays(date: Moment, amount: number): Moment;\r\n    setHours(date: Moment, amount: number): Moment;\r\n    setMinutes(date: Moment, amount: number): Moment;\r\n    setSeconds(date: Moment, amount: number): Moment;\r\n    createDate(year: number, month: number, date: number): Moment;\r\n    clone(date: Moment): Moment;\r\n    now(): Moment;\r\n    format(date: Moment, displayFormat: any): string;\r\n    parse(value: any, parseFormat: any): Moment | null;\r\n    /**\r\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n     * string into null. Returns an invalid date for all other values.\r\n     */\r\n    deserialize(value: any): Moment | null;\r\n    /** Creates a Moment instance while respecting the current UTC settings. */\r\n    private createMoment;\r\n}\r\n"]}