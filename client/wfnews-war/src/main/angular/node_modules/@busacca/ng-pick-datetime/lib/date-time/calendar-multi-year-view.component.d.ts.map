{"version":3,"file":"calendar-multi-year-view.component.d.ts","sources":["calendar-multi-year-view.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * calendar-multi-year-view.component\r\n */\r\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';\r\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\r\nimport { CalendarCell, OwlCalendarBodyComponent } from './calendar-body.component';\r\nimport { SelectMode } from './date-time.class';\r\nimport { OwlDateTimeIntl } from './date-time-picker-intl.service';\r\nexport declare const YEARS_PER_ROW = 3;\r\nexport declare const YEAR_ROWS = 7;\r\nexport declare class OwlMultiYearViewComponent<T> implements OnInit, AfterContentInit {\r\n    private cdRef;\r\n    private pickerIntl;\r\n    private dateTimeAdapter;\r\n    /**\r\n     * The select mode of the picker;\r\n     * */\r\n    private _selectMode;\r\n    get selectMode(): SelectMode;\r\n    set selectMode(val: SelectMode);\r\n    /** The currently selected date. */\r\n    private _selected;\r\n    get selected(): T | null;\r\n    set selected(value: T | null);\r\n    private _selecteds;\r\n    get selecteds(): T[];\r\n    set selecteds(values: T[]);\r\n    private _pickerMoment;\r\n    get pickerMoment(): T;\r\n    set pickerMoment(value: T);\r\n    /**\r\n     * A function used to filter which dates are selectable\r\n     * */\r\n    private _dateFilter;\r\n    get dateFilter(): (date: T) => boolean;\r\n    set dateFilter(filter: (date: T) => boolean);\r\n    /** The minimum selectable date. */\r\n    private _minDate;\r\n    get minDate(): T | null;\r\n    set minDate(value: T | null);\r\n    /** The maximum selectable date. */\r\n    private _maxDate;\r\n    get maxDate(): T | null;\r\n    set maxDate(value: T | null);\r\n    private _todayYear;\r\n    get todayYear(): number;\r\n    private _years;\r\n    get years(): CalendarCell[][];\r\n    private _selectedYears;\r\n    get selectedYears(): number[];\r\n    private initiated;\r\n    get isInSingleMode(): boolean;\r\n    get isInRangeMode(): boolean;\r\n    get activeCell(): number;\r\n    get tableHeader(): string;\r\n    get prevButtonLabel(): string;\r\n    get nextButtonLabel(): string;\r\n    /**\r\n     * Callback to invoke when a new month is selected\r\n     * */\r\n    readonly change: EventEmitter<T>;\r\n    /**\r\n     * Emits the selected year. This doesn't imply a change on the selected date\r\n     * */\r\n    readonly yearSelected: EventEmitter<T>;\r\n    /** Emits when any date is activated. */\r\n    readonly pickerMomentChange: EventEmitter<T>;\r\n    /** Emits when use keyboard enter to select a calendar cell */\r\n    readonly keyboardEnter: EventEmitter<any>;\r\n    /** The body of calendar table */\r\n    calendarBodyElm: OwlCalendarBodyComponent;\r\n    get owlDTCalendarView(): boolean;\r\n    get owlDTCalendarMultiYearView(): boolean;\r\n    constructor(cdRef: ChangeDetectorRef, pickerIntl: OwlDateTimeIntl, dateTimeAdapter: DateTimeAdapter<T>);\r\n    ngOnInit(): void;\r\n    ngAfterContentInit(): void;\r\n    /**\r\n     * Handle a calendarCell selected\r\n     * @param {CalendarCell} cell\r\n     * @return {void}\r\n     * */\r\n    selectCalendarCell(cell: CalendarCell): void;\r\n    private selectYear;\r\n    /**\r\n     * Generate the previous year list\r\n     * */\r\n    prevYearList(event: any): void;\r\n    /**\r\n     * Generate the next year list\r\n     * */\r\n    nextYearList(event: any): void;\r\n    generateYearList(): void;\r\n    /** Whether the previous period button is enabled. */\r\n    previousEnabled(): boolean;\r\n    /** Whether the next period button is enabled. */\r\n    nextEnabled(): boolean;\r\n    handleCalendarKeydown(event: KeyboardEvent): void;\r\n    /**\r\n     * Creates an CalendarCell for the given year.\r\n     * @param {number} year\r\n     * @return {CalendarCell}\r\n     * */\r\n    private createYearCell;\r\n    private setSelectedYears;\r\n    /** Whether the given year is enabled. */\r\n    private isYearEnabled;\r\n    private isSameYearList;\r\n    /**\r\n     * Get a valid date object\r\n     * @param {any} obj -- The object to check.\r\n     * @return {Date | null} -- The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private getValidDate;\r\n    private focusActiveCell;\r\n}\r\n"]}