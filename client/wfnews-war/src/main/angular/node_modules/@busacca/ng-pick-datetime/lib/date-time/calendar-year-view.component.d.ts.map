{"version":3,"file":"calendar-year-view.component.d.ts","sources":["calendar-year-view.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * calendar-year-view.component\r\n */\r\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\r\nimport { CalendarCell, OwlCalendarBodyComponent } from './calendar-body.component';\r\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\r\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\r\nimport { SelectMode } from './date-time.class';\r\nexport declare class OwlYearViewComponent<T> implements OnInit, AfterContentInit, OnDestroy {\r\n    private cdRef;\r\n    private dateTimeAdapter;\r\n    private dateTimeFormats;\r\n    /**\r\n     * The select mode of the picker;\r\n     * */\r\n    private _selectMode;\r\n    get selectMode(): SelectMode;\r\n    set selectMode(val: SelectMode);\r\n    /** The currently selected date. */\r\n    private _selected;\r\n    get selected(): T | null;\r\n    set selected(value: T | null);\r\n    private _selecteds;\r\n    get selecteds(): T[];\r\n    set selecteds(values: T[]);\r\n    private _pickerMoment;\r\n    get pickerMoment(): T;\r\n    set pickerMoment(value: T);\r\n    /**\r\n     * A function used to filter which dates are selectable\r\n     * */\r\n    private _dateFilter;\r\n    get dateFilter(): (date: T) => boolean;\r\n    set dateFilter(filter: (date: T) => boolean);\r\n    /** The minimum selectable date. */\r\n    private _minDate;\r\n    get minDate(): T | null;\r\n    set minDate(value: T | null);\r\n    /** The maximum selectable date. */\r\n    private _maxDate;\r\n    get maxDate(): T | null;\r\n    set maxDate(value: T | null);\r\n    private readonly monthNames;\r\n    private _months;\r\n    get months(): CalendarCell[][];\r\n    get activeCell(): number;\r\n    get isInSingleMode(): boolean;\r\n    get isInRangeMode(): boolean;\r\n    private localeSub;\r\n    private initiated;\r\n    todayMonth: number | null;\r\n    /**\r\n     * An array to hold all selectedDates' month value\r\n     * the value is the month number in current year\r\n     * */\r\n    selectedMonths: number[];\r\n    /**\r\n     * Callback to invoke when a new month is selected\r\n     * */\r\n    readonly change: EventEmitter<T>;\r\n    /**\r\n     * Emits the selected year. This doesn't imply a change on the selected date\r\n     * */\r\n    readonly monthSelected: EventEmitter<T>;\r\n    /** Emits when any date is activated. */\r\n    readonly pickerMomentChange: EventEmitter<T>;\r\n    /** Emits when use keyboard enter to select a calendar cell */\r\n    readonly keyboardEnter: EventEmitter<any>;\r\n    /** The body of calendar table */\r\n    calendarBodyElm: OwlCalendarBodyComponent;\r\n    get owlDTCalendarView(): boolean;\r\n    constructor(cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\r\n    ngOnInit(): void;\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Handle a calendarCell selected\r\n     * @param {CalendarCell} cell\r\n     * @return {void}\r\n     * */\r\n    selectCalendarCell(cell: CalendarCell): void;\r\n    /**\r\n     * Handle a new month selected\r\n     * @param {number} month -- a new month's numeric value\r\n     * @return {void}\r\n     * */\r\n    private selectMonth;\r\n    /**\r\n     * Handle keydown event on calendar body\r\n     * @param {KeyboardEvent} event\r\n     * @return {void}\r\n     * */\r\n    handleCalendarKeydown(event: KeyboardEvent): void;\r\n    /**\r\n     * Generate the calendar month list\r\n     * */\r\n    private generateMonthList;\r\n    /**\r\n     * Creates an CalendarCell for the given month.\r\n     * @param {number} month\r\n     * @return {CalendarCell}\r\n     * */\r\n    private createMonthCell;\r\n    /**\r\n     * Check if the given month is enable\r\n     * @param {number} month -- the month's numeric value\r\n     * @return {boolean}\r\n     * */\r\n    private isMonthEnabled;\r\n    /**\r\n     * Gets the month in this year that the given Date falls on.\r\n     * Returns null if the given Date is in another year.\r\n     * @param {Date | null} date\r\n     * @return {number | null}\r\n     */\r\n    private getMonthInCurrentYear;\r\n    /**\r\n     * Set the selectedMonths value\r\n     * In single mode, it has only one value which represent the month the selected date in\r\n     * In range mode, it would has two values, one for the month the fromValue in and the other for the month the toValue in\r\n     * */\r\n    private setSelectedMonths;\r\n    /**\r\n     * Check the given dates are in the same year\r\n     * @param {Date} dateLeft\r\n     * @param {Date} dateRight\r\n     * @return {boolean}\r\n     * */\r\n    private hasSameYear;\r\n    /**\r\n     * Get a valid date object\r\n     * @param {any} obj -- The object to check.\r\n     * @return {Date | null} -- The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private getValidDate;\r\n    private focusActiveCell;\r\n}\r\n"]}