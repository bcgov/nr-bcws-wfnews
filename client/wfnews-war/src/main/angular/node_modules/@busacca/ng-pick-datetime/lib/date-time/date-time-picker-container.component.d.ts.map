{"version":3,"file":"date-time-picker-container.component.d.ts","sources":["date-time-picker-container.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * date-time-picker-container.component\r\n */\r\nimport { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, OnInit } from '@angular/core';\r\nimport { AnimationEvent } from '@angular/animations';\r\nimport { OwlDateTimeIntl } from './date-time-picker-intl.service';\r\nimport { OwlCalendarComponent } from './calendar.component';\r\nimport { OwlTimerComponent } from './timer.component';\r\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\r\nimport { OwlDateTime, PickerType } from './date-time.class';\r\nimport { Observable } from 'rxjs';\r\nexport declare class OwlDateTimeContainerComponent<T> implements OnInit, AfterContentInit, AfterViewInit {\r\n    private cdRef;\r\n    private elmRef;\r\n    private pickerIntl;\r\n    private dateTimeAdapter;\r\n    calendar: OwlCalendarComponent<T>;\r\n    timer: OwlTimerComponent<T>;\r\n    picker: OwlDateTime<T>;\r\n    activeSelectedIndex: number;\r\n    /**\r\n     * Stream emits when try to hide picker\r\n     * */\r\n    private hidePicker$;\r\n    get hidePickerStream(): Observable<any>;\r\n    /**\r\n     * Stream emits when try to confirm the selected value\r\n     * */\r\n    private confirmSelected$;\r\n    get confirmSelectedStream(): Observable<any>;\r\n    private pickerOpened$;\r\n    get pickerOpenedStream(): Observable<any>;\r\n    /**\r\n     * The current picker moment. This determines which time period is shown and which date is\r\n     * highlighted when using keyboard navigation.\r\n     */\r\n    private _clamPickerMoment;\r\n    get pickerMoment(): T;\r\n    set pickerMoment(value: T);\r\n    get pickerType(): PickerType;\r\n    get cancelLabel(): string;\r\n    get setLabel(): string;\r\n    /**\r\n     * The range 'from' label\r\n     * */\r\n    get fromLabel(): string;\r\n    /**\r\n     * The range 'to' label\r\n     * */\r\n    get toLabel(): string;\r\n    /**\r\n     * The range 'from' formatted value\r\n     * */\r\n    get fromFormattedValue(): string;\r\n    /**\r\n     * The range 'to' formatted value\r\n     * */\r\n    get toFormattedValue(): string;\r\n    /**\r\n     * Cases in which the control buttons show in the picker\r\n     * 1) picker mode is 'dialog'\r\n     * 2) picker type is NOT 'calendar' and the picker mode is NOT 'inline'\r\n     * */\r\n    get showControlButtons(): boolean;\r\n    get containerElm(): HTMLElement;\r\n    get owlDTContainerClass(): boolean;\r\n    get owlDTPopupContainerClass(): boolean;\r\n    get owlDTDialogContainerClass(): boolean;\r\n    get owlDTInlineContainerClass(): boolean;\r\n    get owlDTContainerDisabledClass(): boolean;\r\n    get owlDTContainerId(): string;\r\n    get owlDTContainerAnimation(): any;\r\n    constructor(cdRef: ChangeDetectorRef, elmRef: ElementRef, pickerIntl: OwlDateTimeIntl, dateTimeAdapter: DateTimeAdapter<T>);\r\n    ngOnInit(): void;\r\n    ngAfterContentInit(): void;\r\n    ngAfterViewInit(): void;\r\n    handleContainerAnimationDone(event: AnimationEvent): void;\r\n    dateSelected(date: T): void;\r\n    timeSelected(time: T): void;\r\n    /**\r\n     * Handle click on cancel button\r\n     * @param {any} event\r\n     * @return {void}\r\n     * */\r\n    onCancelClicked(event: any): void;\r\n    /**\r\n     * Handle click on set button\r\n     * @param {any} event\r\n     * @return {void}\r\n     * */\r\n    onSetClicked(event: any): void;\r\n    /**\r\n     * Handle click on inform radio group\r\n     * @param {any} event\r\n     * @param {number} index -- the radio's index number\r\n     * */\r\n    handleClickOnInfoGroup(event: any, index: number): void;\r\n    /**\r\n     * Handle click on inform radio group\r\n     * @param {any} event\r\n     * @param {any} next -- the radio's sibling\r\n     * @param {number} index -- the radio's index number\r\n     * */\r\n    handleKeydownOnInfoGroup(event: any, next: any, index: number): void;\r\n    /**\r\n     * Set the value of activeSelectedIndex\r\n     * @param {number} index\r\n     * */\r\n    private setActiveSelectedIndex;\r\n    private initPicker;\r\n    /**\r\n     * Select calendar date in single mode,\r\n     * it returns null when date is not selected.\r\n     * @param {Date} date\r\n     * @return {Date | null}\r\n     * */\r\n    private dateSelectedInSingleMode;\r\n    /**\r\n     * Select dates in range Mode\r\n     * @param {Date} date\r\n     * @return {Date[] | null}\r\n     * */\r\n    private dateSelectedInRangeMode;\r\n    /**\r\n     * Update the given calendar date's time and check if it is valid\r\n     * Because the calendar date has 00:00:00 as default time, if the picker type is 'both',\r\n     * we need to update the given calendar date's time before selecting it.\r\n     * if it is valid, return the updated dateTime\r\n     * if it is not valid, return null\r\n     * @param {Date} date\r\n     * @return {Date}\r\n     * */\r\n    private updateAndCheckCalendarDate;\r\n    /**\r\n     * Focus to the picker\r\n     * */\r\n    private focusPicker;\r\n}\r\n"]}