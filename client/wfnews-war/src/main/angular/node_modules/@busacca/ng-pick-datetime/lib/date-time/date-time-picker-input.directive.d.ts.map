{"version":3,"file":"date-time-picker-input.directive.d.ts","sources":["date-time-picker-input.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * date-time-picker-input.directive\r\n */\r\nimport { AfterContentInit, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\r\nimport { OwlDateTimeComponent } from './date-time-picker.component';\r\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\r\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\r\nimport { SelectMode } from './date-time.class';\r\nexport declare const OWL_DATETIME_VALUE_ACCESSOR: any;\r\nexport declare const OWL_DATETIME_VALIDATORS: any;\r\nexport declare class OwlDateTimeInputDirective<T> implements OnInit, AfterContentInit, OnDestroy, ControlValueAccessor, Validator {\r\n    private elmRef;\r\n    private renderer;\r\n    private dateTimeAdapter;\r\n    private dateTimeFormats;\r\n    /**\r\n     * The date time picker that this input is associated with.\r\n     * */\r\n    set owlDateTime(value: OwlDateTimeComponent<T>);\r\n    /**\r\n     * A function to filter date time\r\n     * @default {null}\r\n     * @type {Function}\r\n     * */\r\n    set owlDateTimeFilter(filter: (date: T | null) => boolean);\r\n    private _dateTimeFilter;\r\n    get dateTimeFilter(): (date: T) => boolean;\r\n    /** Whether the date time picker's input is disabled. */\r\n    private _disabled;\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    /** The minimum valid date. */\r\n    private _min;\r\n    get min(): T | null;\r\n    set min(value: T | null);\r\n    /** The maximum valid date. */\r\n    private _max;\r\n    get max(): T | null;\r\n    set max(value: T | null);\r\n    /**\r\n     * The picker's select mode\r\n     * @default {'single'}\r\n     * @type {'single' | 'range'}\r\n     * */\r\n    private _selectMode;\r\n    get selectMode(): SelectMode;\r\n    set selectMode(mode: SelectMode);\r\n    /**\r\n     * The character to separate the 'from' and 'to' in input value\r\n     * @default {'~'}\r\n     * @type {string}\r\n     * */\r\n    rangeSeparator: string;\r\n    private _value;\r\n    get value(): T | null;\r\n    set value(value: T | null);\r\n    private _values;\r\n    get values(): T[];\r\n    set values(values: T[]);\r\n    /**\r\n     * Callback to invoke when `change` event is fired on this `<input>`\r\n     * */\r\n    dateTimeChange: EventEmitter<any>;\r\n    /**\r\n     * Callback to invoke when an `input` event is fired on this `<input>`.\r\n     * */\r\n    dateTimeInput: EventEmitter<any>;\r\n    get elementRef(): ElementRef;\r\n    get isInSingleMode(): boolean;\r\n    get isInRangeMode(): boolean;\r\n    /** The date-time-picker that this input is associated with. */\r\n    dtPicker: OwlDateTimeComponent<T>;\r\n    private dtPickerSub;\r\n    private localeSub;\r\n    private lastValueValid;\r\n    private onModelChange;\r\n    private onModelTouched;\r\n    private validatorOnChange;\r\n    /** The form control validator for whether the input parses. */\r\n    private parseValidator;\r\n    /** The form control validator for the min date. */\r\n    private minValidator;\r\n    /** The form control validator for the max date. */\r\n    private maxValidator;\r\n    /** The form control validator for the date filter. */\r\n    private filterValidator;\r\n    /**\r\n     * The form control validator for the range.\r\n     * Check whether the 'before' value is before the 'to' value\r\n     * */\r\n    private rangeValidator;\r\n    /** The combined form control validator for this input. */\r\n    private validator;\r\n    /** Emits when the value changes (either due to user input or programmatic change). */\r\n    valueChange: EventEmitter<T | T[]>;\r\n    /** Emits when the disabled state has changed */\r\n    disabledChange: EventEmitter<boolean>;\r\n    get owlDateTimeInputAriaHaspopup(): boolean;\r\n    get owlDateTimeInputAriaOwns(): string;\r\n    get minIso8601(): string;\r\n    get maxIso8601(): string;\r\n    get owlDateTimeInputDisabled(): boolean;\r\n    constructor(elmRef: ElementRef, renderer: Renderer2, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\r\n    ngOnInit(): void;\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    validate(c: AbstractControl): {\r\n        [key: string]: any;\r\n    };\r\n    registerOnValidatorChange(fn: () => void): void;\r\n    /**\r\n     * Open the picker when user hold alt + DOWN_ARROW\r\n     * */\r\n    handleKeydownOnHost(event: KeyboardEvent): void;\r\n    handleBlurOnHost(event: Event): void;\r\n    handleInputOnHost(event: any): void;\r\n    handleChangeOnHost(event: any): void;\r\n    /**\r\n     * Set the native input property 'value'\r\n     * @return {void}\r\n     * */\r\n    formatNativeInputValue(): void;\r\n    /**\r\n     * Register the relationship between this input and its picker component\r\n     * @param {OwlDateTimeComponent} picker -- associated picker component to this input\r\n     * @return {void}\r\n     * */\r\n    private registerDateTimePicker;\r\n    /**\r\n     * Convert a given obj to a valid date object\r\n     *\r\n     * @param {any} obj The object to check.\r\n     * @return {T | null} The given object if it is both a date instance and valid, otherwise null.\r\n     * */\r\n    private getValidDate;\r\n    /**\r\n     * Convert a time string to a date-time string\r\n     * When pickerType is 'timer', the value in the picker's input is a time string.\r\n     * The dateTimeAdapter parse fn could not parse a time string to a Date Object.\r\n     * Therefore we need this fn to convert a time string to a date-time string.\r\n     * @param {string} timeString\r\n     * @param {T} dateTime\r\n     * @return {string}\r\n     * */\r\n    private convertTimeStringToDateTimeString;\r\n    /**\r\n     * Handle input change in single mode\r\n     * @param {string} inputValue\r\n     * @return {void}\r\n     * */\r\n    private changeInputInSingleMode;\r\n    /**\r\n     * Handle input change in rangeFrom or rangeTo mode\r\n     * @param {string} inputValue\r\n     * @return {void}\r\n     * */\r\n    private changeInputInRangeFromToMode;\r\n    /**\r\n     * Handle input change in range mode\r\n     * @param {string} inputValue\r\n     * @return {void}\r\n     * */\r\n    private changeInputInRangeMode;\r\n    /**\r\n     * Check if the two value is the same\r\n     * @return {boolean}\r\n     * */\r\n    private isSameValue;\r\n}\r\n"]}