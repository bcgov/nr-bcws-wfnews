{"version":3,"file":"date-time-picker.component.d.ts","sources":["date-time-picker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * date-time-picker.component\r\n */\r\nimport { ChangeDetectorRef, EventEmitter, InjectionToken, NgZone, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { BlockScrollStrategy, Overlay, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { OwlDateTimeInputDirective } from './date-time-picker-input.directive';\r\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\r\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\r\nimport { OwlDateTime, PickerMode, PickerType, SelectMode } from './date-time.class';\r\nimport { OwlDialogService } from '../dialog/dialog.service';\r\nexport declare type DefaultScrollStrategyType = () => ScrollStrategy;\r\n/** Injection token that determines the scroll handling while the dtPicker is open. */\r\nexport declare const OWL_DTPICKER_SCROLL_STRATEGY: InjectionToken<DefaultScrollStrategyType>;\r\n/** @docs-private */\r\nexport declare function OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => BlockScrollStrategy;\r\n/** @docs-private */\r\nexport declare const OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER: {\r\n    provide: InjectionToken<DefaultScrollStrategyType>;\r\n    deps: (typeof Overlay)[];\r\n    useFactory: typeof OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY;\r\n};\r\n/** @dynamic */\r\nexport declare class OwlDateTimeComponent<T> extends OwlDateTime<T> implements OnInit, OnDestroy {\r\n    private overlay;\r\n    private viewContainerRef;\r\n    private dialogService;\r\n    private ngZone;\r\n    protected changeDetector: ChangeDetectorRef;\r\n    protected dateTimeAdapter: DateTimeAdapter<T>;\r\n    private defaultScrollStrategy;\r\n    protected dateTimeFormats: OwlDateTimeFormats;\r\n    private document;\r\n    /** Custom class for the picker backdrop. */\r\n    backdropClass: string | string[];\r\n    /** Custom class for the picker overlay pane. */\r\n    panelClass: string | string[];\r\n    /** The date to open the calendar to initially. */\r\n    private _startAt;\r\n    get startAt(): T | null;\r\n    set startAt(date: T | null);\r\n    /**\r\n     * Set the type of the dateTime picker\r\n     *      'both' -- show both calendar and timer\r\n     *      'calendar' -- show only calendar\r\n     *      'timer' -- show only timer\r\n     * @default 'both'\r\n     * @type {'both' | 'calendar' | 'timer'}\r\n     * */\r\n    private _pickerType;\r\n    get pickerType(): PickerType;\r\n    set pickerType(val: PickerType);\r\n    /**\r\n     * Whether the picker open as a dialog\r\n     * @default {false}\r\n     * @type {boolean}\r\n     * */\r\n    _pickerMode: PickerMode;\r\n    get pickerMode(): PickerMode;\r\n    set pickerMode(mode: PickerMode);\r\n    /** Whether the date time picker should be disabled. */\r\n    private _disabled;\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    /** Whether the calendar is open. */\r\n    private _opened;\r\n    get opened(): boolean;\r\n    set opened(val: boolean);\r\n    /**\r\n     * The scroll strategy when the picker is open\r\n     * Learn more this from https://material.angular.io/cdk/overlay/overview#scroll-strategies\r\n     * */\r\n    scrollStrategy: ScrollStrategy;\r\n    /**\r\n     * Callback when the picker is closed\r\n     * */\r\n    afterPickerClosed: EventEmitter<any>;\r\n    /**\r\n     * Callback when the picker is open\r\n     * */\r\n    afterPickerOpen: EventEmitter<any>;\r\n    /**\r\n     * Emits selected year in multi-year view\r\n     * This doesn't imply a change on the selected date.\r\n     * */\r\n    yearSelected: EventEmitter<T>;\r\n    /**\r\n     * Emits selected month in year view\r\n     * This doesn't imply a change on the selected date.\r\n     * */\r\n    monthSelected: EventEmitter<T>;\r\n    /**\r\n     * Emit when the selected value has been confirmed\r\n     * */\r\n    confirmSelectedChange: EventEmitter<T | T[]>;\r\n    /**\r\n     * Emits when the date time picker is disabled.\r\n     * */\r\n    disabledChange: EventEmitter<boolean>;\r\n    private pickerContainerPortal;\r\n    private pickerContainer;\r\n    private popupRef;\r\n    private dialogRef;\r\n    private dtInputSub;\r\n    private hidePickerStreamSub;\r\n    private confirmSelectedStreamSub;\r\n    private pickerOpenedStreamSub;\r\n    /** The element that was focused before the date time picker was opened. */\r\n    private focusedElementBeforeOpen;\r\n    private _dtInput;\r\n    get dtInput(): OwlDateTimeInputDirective<T>;\r\n    private _selected;\r\n    get selected(): T | null;\r\n    set selected(value: T | null);\r\n    private _selecteds;\r\n    get selecteds(): T[];\r\n    set selecteds(values: T[]);\r\n    /** The minimum selectable date. */\r\n    get minDateTime(): T | null;\r\n    /** The maximum selectable date. */\r\n    get maxDateTime(): T | null;\r\n    get dateTimeFilter(): (date: T | null) => boolean;\r\n    get selectMode(): SelectMode;\r\n    get isInSingleMode(): boolean;\r\n    get isInRangeMode(): boolean;\r\n    constructor(overlay: Overlay, viewContainerRef: ViewContainerRef, dialogService: OwlDialogService, ngZone: NgZone, changeDetector: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, defaultScrollStrategy: DefaultScrollStrategyType, dateTimeFormats: OwlDateTimeFormats, document: any);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    registerInput(input: OwlDateTimeInputDirective<T>): void;\r\n    open(): void;\r\n    /**\r\n     * Selects the given date\r\n     * @param date -- a date to be selected\r\n     * @return {void}\r\n     * */\r\n    select(date: T[] | T): void;\r\n    /**\r\n     * Emits the selected year in multi-year view\r\n     * */\r\n    selectYear(normalizedYear: T): void;\r\n    /**\r\n     * Emits selected month in year view\r\n     * */\r\n    selectMonth(normalizedMonth: T): void;\r\n    /**\r\n     * Hide the picker\r\n     * @return {void}\r\n     * */\r\n    close(): void;\r\n    /**\r\n     * Confirm the selected value\r\n     * @param {any} event\r\n     * @return {void}\r\n     * */\r\n    confirmSelect(event?: any): void;\r\n    /**\r\n     * Open the picker as a dialog\r\n     * @return {void}\r\n     * */\r\n    private openAsDialog;\r\n    /**\r\n     * Open the picker as popup\r\n     * @return {void}\r\n     * */\r\n    private openAsPopup;\r\n    private createPopup;\r\n    /**\r\n     * Create the popup PositionStrategy.\r\n     * */\r\n    private createPopupPositionStrategy;\r\n}\r\n"]}