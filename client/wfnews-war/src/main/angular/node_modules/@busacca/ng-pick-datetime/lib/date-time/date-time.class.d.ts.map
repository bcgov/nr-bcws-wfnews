{"version":3,"file":"date-time.class.d.ts","sources":["date-time.class.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * date-time.class\r\n */\r\nimport { EventEmitter } from '@angular/core';\r\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\r\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\r\nexport declare type PickerType = 'both' | 'calendar' | 'timer';\r\nexport declare type PickerMode = 'popup' | 'dialog' | 'inline';\r\nexport declare type SelectMode = 'single' | 'range' | 'rangeFrom' | 'rangeTo';\r\nexport declare abstract class OwlDateTime<T> {\r\n    protected dateTimeAdapter: DateTimeAdapter<T>;\r\n    protected dateTimeFormats: OwlDateTimeFormats;\r\n    /**\r\n     * Whether to show the second's timer\r\n     * @default false\r\n     * @type {Boolean}\r\n     * */\r\n    private _showSecondsTimer;\r\n    get showSecondsTimer(): boolean;\r\n    set showSecondsTimer(val: boolean);\r\n    /**\r\n     * Whether the timer is in hour12 format\r\n     * @default false\r\n     * @type {boolean}\r\n     * */\r\n    private _hour12Timer;\r\n    get hour12Timer(): boolean;\r\n    set hour12Timer(val: boolean);\r\n    /**\r\n     * The view that the calendar should start in.\r\n     * @default {'month'}\r\n     * @type {'month' | 'year' | 'multi-years'}\r\n     * */\r\n    startView: 'month' | 'year' | 'multi-years';\r\n    /**\r\n     * Hours to change per step\r\n     * @default {1}\r\n     * @type {number}\r\n     * */\r\n    private _stepHour;\r\n    get stepHour(): number;\r\n    set stepHour(val: number);\r\n    /**\r\n     * Minutes to change per step\r\n     * @default {1}\r\n     * @type {number}\r\n     * */\r\n    private _stepMinute;\r\n    get stepMinute(): number;\r\n    set stepMinute(val: number);\r\n    /**\r\n     * Seconds to change per step\r\n     * @default {1}\r\n     * @type {number}\r\n     * */\r\n    private _stepSecond;\r\n    get stepSecond(): number;\r\n    set stepSecond(val: number);\r\n    /**\r\n     * Set the first day of week\r\n     * @default {0} -- 0: Sunday ~ 6: Saturday\r\n     * @type {number}\r\n     * */\r\n    private _firstDayOfWeek;\r\n    get firstDayOfWeek(): number;\r\n    set firstDayOfWeek(value: number);\r\n    /**\r\n     * Whether to hide dates in other months at the start or end of the current month.\r\n     * @default {false}\r\n     * @type {boolean}\r\n     * */\r\n    private _hideOtherMonths;\r\n    get hideOtherMonths(): boolean;\r\n    set hideOtherMonths(val: boolean);\r\n    private _id;\r\n    get id(): string;\r\n    abstract get selected(): T | null;\r\n    abstract get selecteds(): T[] | null;\r\n    abstract get dateTimeFilter(): (date: T | null) => boolean;\r\n    abstract get maxDateTime(): T | null;\r\n    abstract get minDateTime(): T | null;\r\n    abstract get selectMode(): SelectMode;\r\n    abstract get startAt(): T | null;\r\n    abstract get opened(): boolean;\r\n    abstract get pickerMode(): PickerMode;\r\n    abstract get pickerType(): PickerType;\r\n    abstract get isInSingleMode(): boolean;\r\n    abstract get isInRangeMode(): boolean;\r\n    abstract select(date: T | T[]): void;\r\n    abstract yearSelected: EventEmitter<T>;\r\n    abstract monthSelected: EventEmitter<T>;\r\n    abstract selectYear(normalizedYear: T): void;\r\n    abstract selectMonth(normalizedMonth: T): void;\r\n    get formatString(): string;\r\n    /**\r\n     * Date Time Checker to check if the give dateTime is selectable\r\n     * @type {Function}\r\n     * */\r\n    dateTimeChecker: (dateTime: T) => boolean;\r\n    get disabled(): boolean;\r\n    constructor(dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\r\n    /**\r\n     * @param obj The object to check.\r\n     * @returns The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    protected getValidDate(obj: any): T | null;\r\n}\r\n"]}