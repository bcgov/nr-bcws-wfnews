{"version":3,"file":"timer.component.d.ts","sources":["timer.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * timer.component\r\n */\r\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnInit } from '@angular/core';\r\nimport { OwlDateTimeIntl } from './date-time-picker-intl.service';\r\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\r\nexport declare class OwlTimerComponent<T> implements OnInit {\r\n    private ngZone;\r\n    private elmRef;\r\n    private pickerIntl;\r\n    private cdRef;\r\n    private dateTimeAdapter;\r\n    /** The current picker moment */\r\n    private _pickerMoment;\r\n    get pickerMoment(): T;\r\n    set pickerMoment(value: T);\r\n    /** The minimum selectable date time. */\r\n    private _minDateTime;\r\n    get minDateTime(): T | null;\r\n    set minDateTime(value: T | null);\r\n    /** The maximum selectable date time. */\r\n    private _maxDateTime;\r\n    get maxDateTime(): T | null;\r\n    set maxDateTime(value: T | null);\r\n    private isPM;\r\n    /**\r\n     * Whether to show the second's timer\r\n     * @default false\r\n     * @type {Boolean}\r\n     * */\r\n    showSecondsTimer: boolean;\r\n    /**\r\n     * Whether the timer is in hour12 format\r\n     * @default false\r\n     * @type {boolean}\r\n     * */\r\n    hour12Timer: boolean;\r\n    /**\r\n     * Hours to change per step\r\n     * @default {1}\r\n     * @type {number}\r\n     * */\r\n    stepHour: number;\r\n    /**\r\n     * Minutes to change per step\r\n     * @default {1}\r\n     * @type {number}\r\n     * */\r\n    stepMinute: number;\r\n    /**\r\n     * Seconds to change per step\r\n     * @default {1}\r\n     * @type {number}\r\n     * */\r\n    stepSecond: number;\r\n    get hourValue(): number;\r\n    /**\r\n     * The value would be displayed in hourBox.\r\n     * We need this because the value displayed in hourBox it not\r\n     * the same as the hourValue when the timer is in hour12Timer mode.\r\n     * */\r\n    get hourBoxValue(): number;\r\n    get minuteValue(): number;\r\n    get secondValue(): number;\r\n    get upHourButtonLabel(): string;\r\n    get downHourButtonLabel(): string;\r\n    get upMinuteButtonLabel(): string;\r\n    get downMinuteButtonLabel(): string;\r\n    get upSecondButtonLabel(): string;\r\n    get downSecondButtonLabel(): string;\r\n    get hour12ButtonLabel(): string;\r\n    selectedChange: EventEmitter<T>;\r\n    get owlDTTimerClass(): boolean;\r\n    get owlDTTimeTabIndex(): number;\r\n    constructor(ngZone: NgZone, elmRef: ElementRef, pickerIntl: OwlDateTimeIntl, cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>);\r\n    ngOnInit(): void;\r\n    /**\r\n     * Focus to the host element\r\n     * */\r\n    focus(): void;\r\n    /**\r\n     * Set the hour value via typing into timer box input\r\n     * We need this to handle the hour value when the timer is in hour12 mode\r\n     * */\r\n    setHourValueViaInput(hours: number): void;\r\n    setHourValue(hours: number): void;\r\n    setMinuteValue(minutes: number): void;\r\n    setSecondValue(seconds: number): void;\r\n    setMeridiem(event: any): void;\r\n    /**\r\n     * Check if the up hour button is enabled\r\n     * @return {boolean}\r\n     * */\r\n    upHourEnabled(): boolean;\r\n    /**\r\n     * Check if the down hour button is enabled\r\n     * @return {boolean}\r\n     * */\r\n    downHourEnabled(): boolean;\r\n    /**\r\n     * Check if the up minute button is enabled\r\n     * @return {boolean}\r\n     * */\r\n    upMinuteEnabled(): boolean;\r\n    /**\r\n     * Check if the down minute button is enabled\r\n     * @return {boolean}\r\n     * */\r\n    downMinuteEnabled(): boolean;\r\n    /**\r\n     * Check if the up second button is enabled\r\n     * @return {boolean}\r\n     * */\r\n    upSecondEnabled(): boolean;\r\n    /**\r\n     * Check if the down second button is enabled\r\n     * @return {boolean}\r\n     * */\r\n    downSecondEnabled(): boolean;\r\n    /**\r\n     * PickerMoment's hour value +/- certain amount and compare it to the give date\r\n     * @param {number} amount\r\n     * @param {Date} comparedDate\r\n     * @return {number}\r\n     * 1 is after the comparedDate\r\n     * -1 is before the comparedDate\r\n     * 0 is equal the comparedDate\r\n     * */\r\n    private compareHours;\r\n    /**\r\n     * PickerMoment's minute value +/- certain amount and compare it to the give date\r\n     * @param {number} amount\r\n     * @param {Date} comparedDate\r\n     * @return {number}\r\n     * 1 is after the comparedDate\r\n     * -1 is before the comparedDate\r\n     * 0 is equal the comparedDate\r\n     * */\r\n    private compareMinutes;\r\n    /**\r\n     * PickerMoment's second value +/- certain amount and compare it to the give date\r\n     * @param {number} amount\r\n     * @param {Date} comparedDate\r\n     * @return {number}\r\n     * 1 is after the comparedDate\r\n     * -1 is before the comparedDate\r\n     * 0 is equal the comparedDate\r\n     * */\r\n    private compareSeconds;\r\n    /**\r\n     * Get a valid date object\r\n     * @param {any} obj -- The object to check.\r\n     * @return {Date | null} -- The given object if it is both a date instance and valid, otherwise null.\r\n     */\r\n    private getValidDate;\r\n}\r\n"]}