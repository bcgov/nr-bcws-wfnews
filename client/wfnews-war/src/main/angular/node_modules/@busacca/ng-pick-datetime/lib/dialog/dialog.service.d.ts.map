{"version":3,"file":"dialog.service.d.ts","sources":["dialog.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * dialog.service\r\n */\r\nimport { InjectionToken, Injector, TemplateRef } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { OwlDialogConfig } from './dialog-config.class';\r\nimport { OwlDialogRef } from './dialog-ref.class';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Overlay, OverlayContainer, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { ComponentType } from '@angular/cdk/portal';\r\nexport declare const OWL_DIALOG_DATA: InjectionToken<any>;\r\nexport declare type DialogScrollStrategyType = () => ScrollStrategy;\r\n/**\r\n * Injection token that determines the scroll handling while the dialog is open.\r\n * */\r\nexport declare const OWL_DIALOG_SCROLL_STRATEGY: InjectionToken<DialogScrollStrategyType>;\r\nexport declare function OWL_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): DialogScrollStrategyType;\r\n/** @docs-private */\r\nexport declare const OWL_DIALOG_SCROLL_STRATEGY_PROVIDER: {\r\n    provide: InjectionToken<DialogScrollStrategyType>;\r\n    deps: (typeof Overlay)[];\r\n    useFactory: typeof OWL_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;\r\n};\r\n/** I\r\n * njection token that can be used to specify default dialog options.\r\n * */\r\nexport declare const OWL_DIALOG_DEFAULT_OPTIONS: InjectionToken<OwlDialogConfig>;\r\n/** @dynamic */\r\nexport declare class OwlDialogService {\r\n    private overlay;\r\n    private injector;\r\n    private location;\r\n    private scrollStrategy;\r\n    private defaultOptions;\r\n    private parentDialog;\r\n    private overlayContainer;\r\n    private ariaHiddenElements;\r\n    private _openDialogsAtThisLevel;\r\n    private _afterOpenAtThisLevel;\r\n    private _afterAllClosedAtThisLevel;\r\n    /** Keeps track of the currently-open dialogs. */\r\n    get openDialogs(): OwlDialogRef<any>[];\r\n    /** Stream that emits when a dialog has been opened. */\r\n    get afterOpen(): Subject<OwlDialogRef<any>>;\r\n    get _afterAllClosed(): any;\r\n    /**\r\n     * Stream that emits when all open dialog have finished closing.\r\n     * Will emit on subscribe if there are no open dialogs to begin with.\r\n     */\r\n    afterAllClosed: Observable<any>;\r\n    constructor(overlay: Overlay, injector: Injector, location: Location, scrollStrategy: DialogScrollStrategyType, defaultOptions: OwlDialogConfig, parentDialog: OwlDialogService, overlayContainer: OverlayContainer);\r\n    open<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: OwlDialogConfig): OwlDialogRef<any>;\r\n    /**\r\n     * Closes all of the currently-open dialogs.\r\n     */\r\n    closeAll(): void;\r\n    /**\r\n     * Finds an open dialog by its id.\r\n     * @param id ID to use when looking up the dialog.\r\n     */\r\n    getDialogById(id: string): OwlDialogRef<any> | undefined;\r\n    private attachDialogContent;\r\n    private createInjector;\r\n    private createOverlay;\r\n    private attachDialogContainer;\r\n    private getOverlayConfig;\r\n    private removeOpenDialog;\r\n    /**\r\n     * Hides all of the content that isn't an overlay from assistive technology.\r\n     */\r\n    private hideNonDialogContentFromAssistiveTechnology;\r\n}\r\n"]}