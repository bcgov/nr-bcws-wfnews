{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface MotionPlugin {\n  /**\n   * Add a listener for accelerometer data\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'accel',\n    listenerFunc: AccelListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Add a listener for device orientation change (compass heading, etc.)\n   *\n   * @since 1.0.0\n   */\n  addListener(\n    eventName: 'orientation',\n    listenerFunc: OrientationListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Remove all the listeners that are attached to this plugin.\n   *\n   * @since 1.0.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\nexport type AccelListener = (event: AccelListenerEvent) => void;\nexport type OrientationListener = (event: OrientationListenerEvent) => void;\nexport type OrientationListenerEvent = RotationRate;\n\nexport interface RotationRate {\n  /**\n   * The amount of rotation around the Z axis, in degrees per second.\n   *\n   * @since 1.0.0\n   */\n  alpha: number;\n\n  /**\n   * The amount of rotation around the X axis, in degrees per second.\n   *\n   * @since 1.0.0\n   */\n  beta: number;\n\n  /**\n   * The amount of rotation around the Y axis, in degrees per second.\n   *\n   * @since 1.0.0\n   */\n  gamma: number;\n}\n\nexport interface Acceleration {\n  /**\n   * The amount of acceleration along the X axis.\n   *\n   * @since 1.0.0\n   */\n  x: number;\n\n  /**\n   * The amount of acceleration along the Y axis.\n   *\n   * @since 1.0.0\n   */\n  y: number;\n\n  /**\n   * The amount of acceleration along the Z axis.\n   *\n   * @since 1.0.0\n   */\n  z: number;\n}\n\nexport interface AccelListenerEvent {\n  /**\n   * An object giving the acceleration of the device on the three axis X, Y and Z. Acceleration is expressed in m/s\n   *\n   * @since 1.0.0\n   */\n  acceleration: Acceleration;\n\n  /**\n   * An object giving the acceleration of the device on the three axis X, Y and Z with the effect of gravity. Acceleration is expressed in m/s\n   *\n   * @since 1.0.0\n   */\n  accelerationIncludingGravity: Acceleration;\n\n  /**\n   * An object giving the rate of change of the device's orientation on the three orientation axis alpha, beta and gamma. Rotation rate is expressed in degrees per seconds.\n   *\n   * @since 1.0.0\n   */\n  rotationRate: RotationRate;\n\n  /**\n   * A number representing the interval of time, in milliseconds, at which data is obtained from the device.\n   *\n   * @since 1.0.0\n   */\n  interval: number;\n}\n\n/**\n * @deprecated Use `AccelListener`.\n * @since 1.0.0\n */\nexport type MotionWatchAccelCallback = AccelListener;\n\n/**\n * @deprecated Use `AccelListenerEvent`.\n * @since 1.0.0\n */\nexport type MotionEventResult = AccelListenerEvent;\n\n/**\n * @deprecated Use `OrientationListener`.\n * @since 1.0.0\n */\nexport type MotionWatchOrientationCallback = OrientationListener;\n\n/**\n * @deprecated Use `OrientationListenerEvent`.\n * @since 1.0.0\n */\nexport type MotionOrientationEventResult = OrientationListenerEvent;\n"]}