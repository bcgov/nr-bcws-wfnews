/**
 * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */
const ɵ0 = (val, index) => ('0' + (index).toString(16)).slice(-2);
// A copy of @ckeditor/ckeditor5-utils/src/uid.js
// A hash table of hex numbers to avoid using toString() in uid() which is costly.
// [ '00', '01', '02', ..., 'fe', 'ff' ]
const HEX_NUMBERS = new Array(256).fill(0)
    .map(ɵ0);
/**
 * Returns a unique id. The id starts with an "e" character and a randomly generated string of
 * 32 alphanumeric characters.
 *
 * **Note**: The characters the unique id is built from correspond to the hex number notation
 * (from "0" to "9", from "a" to "f"). In other words, each id corresponds to an "e" followed
 * by 16 8-bit numbers next to each other.
 *
 * @returns An unique id string.
 */
export default function uid() {
    // Let's create some positive random 32bit integers first.
    //
    // 1. Math.random() is a float between 0 and 1.
    // 2. 0x100000000 is 2^32 = 4294967296.
    // 3. >>> 0 enforces integer (in JS all numbers are floating point).
    //
    // For instance:
    //		Math.random() * 0x100000000 = 3366450031.853859
    // but
    //		Math.random() * 0x100000000 >>> 0 = 3366450031.
    const r1 = Math.random() * 0x100000000 >>> 0;
    const r2 = Math.random() * 0x100000000 >>> 0;
    const r3 = Math.random() * 0x100000000 >>> 0;
    const r4 = Math.random() * 0x100000000 >>> 0;
    // Make sure that id does not start with number.
    return 'e' +
        HEX_NUMBERS[r1 >> 0 & 0xFF] +
        HEX_NUMBERS[r1 >> 8 & 0xFF] +
        HEX_NUMBERS[r1 >> 16 & 0xFF] +
        HEX_NUMBERS[r1 >> 24 & 0xFF] +
        HEX_NUMBERS[r2 >> 0 & 0xFF] +
        HEX_NUMBERS[r2 >> 8 & 0xFF] +
        HEX_NUMBERS[r2 >> 16 & 0xFF] +
        HEX_NUMBERS[r2 >> 24 & 0xFF] +
        HEX_NUMBERS[r3 >> 0 & 0xFF] +
        HEX_NUMBERS[r3 >> 8 & 0xFF] +
        HEX_NUMBERS[r3 >> 16 & 0xFF] +
        HEX_NUMBERS[r3 >> 24 & 0xFF] +
        HEX_NUMBERS[r4 >> 0 & 0xFF] +
        HEX_NUMBERS[r4 >> 8 & 0xFF] +
        HEX_NUMBERS[r4 >> 16 & 0xFF] +
        HEX_NUMBERS[r4 >> 24 & 0xFF];
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NrZWRpdG9yL3VpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7V0FPSSxDQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUUsR0FBRyxHQUFHLENBQUUsS0FBSyxDQUFFLENBQUMsUUFBUSxDQUFFLEVBQUUsQ0FBRSxDQUFFLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxDQUFFO0FBTHZFLGlEQUFpRDtBQUVqRCxrRkFBa0Y7QUFDbEYsd0NBQXdDO0FBQ3hDLE1BQU0sV0FBVyxHQUFHLElBQUksS0FBSyxDQUFFLEdBQUcsQ0FBRSxDQUFDLElBQUksQ0FBRSxDQUFDLENBQUU7S0FDNUMsR0FBRyxJQUFvRSxDQUFDO0FBRTFFOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sQ0FBQyxPQUFPLFVBQVUsR0FBRztJQUMxQiwwREFBMEQ7SUFDMUQsRUFBRTtJQUNGLCtDQUErQztJQUMvQyx1Q0FBdUM7SUFDdkMsb0VBQW9FO0lBQ3BFLEVBQUU7SUFDRixnQkFBZ0I7SUFDaEIsbURBQW1EO0lBQ25ELE1BQU07SUFDTixtREFBbUQ7SUFDbkQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUM7SUFFN0MsZ0RBQWdEO0lBQ2hELE9BQU8sR0FBRztRQUNULFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRSxDQUFDO0FBQ2pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwMy0yMDIyLCBDS1NvdXJjZSBIb2xkaW5nIHNwLiB6IG8uby4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kLlxuICovXG5cbi8vIEEgY29weSBvZiBAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy91aWQuanNcblxuLy8gQSBoYXNoIHRhYmxlIG9mIGhleCBudW1iZXJzIHRvIGF2b2lkIHVzaW5nIHRvU3RyaW5nKCkgaW4gdWlkKCkgd2hpY2ggaXMgY29zdGx5LlxuLy8gWyAnMDAnLCAnMDEnLCAnMDInLCAuLi4sICdmZScsICdmZicgXVxuY29uc3QgSEVYX05VTUJFUlMgPSBuZXcgQXJyYXkoIDI1NiApLmZpbGwoIDAgKVxuXHQubWFwKCAoIHZhbCwgaW5kZXggKSA9PiAoICcwJyArICggaW5kZXggKS50b1N0cmluZyggMTYgKSApLnNsaWNlKCAtMiApICk7XG5cbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBpZC4gVGhlIGlkIHN0YXJ0cyB3aXRoIGFuIFwiZVwiIGNoYXJhY3RlciBhbmQgYSByYW5kb21seSBnZW5lcmF0ZWQgc3RyaW5nIG9mXG4gKiAzMiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy5cbiAqXG4gKiAqKk5vdGUqKjogVGhlIGNoYXJhY3RlcnMgdGhlIHVuaXF1ZSBpZCBpcyBidWlsdCBmcm9tIGNvcnJlc3BvbmQgdG8gdGhlIGhleCBudW1iZXIgbm90YXRpb25cbiAqIChmcm9tIFwiMFwiIHRvIFwiOVwiLCBmcm9tIFwiYVwiIHRvIFwiZlwiKS4gSW4gb3RoZXIgd29yZHMsIGVhY2ggaWQgY29ycmVzcG9uZHMgdG8gYW4gXCJlXCIgZm9sbG93ZWRcbiAqIGJ5IDE2IDgtYml0IG51bWJlcnMgbmV4dCB0byBlYWNoIG90aGVyLlxuICpcbiAqIEByZXR1cm5zIEFuIHVuaXF1ZSBpZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVpZCgpOiBzdHJpbmcge1xuXHQvLyBMZXQncyBjcmVhdGUgc29tZSBwb3NpdGl2ZSByYW5kb20gMzJiaXQgaW50ZWdlcnMgZmlyc3QuXG5cdC8vXG5cdC8vIDEuIE1hdGgucmFuZG9tKCkgaXMgYSBmbG9hdCBiZXR3ZWVuIDAgYW5kIDEuXG5cdC8vIDIuIDB4MTAwMDAwMDAwIGlzIDJeMzIgPSA0Mjk0OTY3Mjk2LlxuXHQvLyAzLiA+Pj4gMCBlbmZvcmNlcyBpbnRlZ2VyIChpbiBKUyBhbGwgbnVtYmVycyBhcmUgZmxvYXRpbmcgcG9pbnQpLlxuXHQvL1xuXHQvLyBGb3IgaW5zdGFuY2U6XG5cdC8vXHRcdE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA9IDMzNjY0NTAwMzEuODUzODU5XG5cdC8vIGJ1dFxuXHQvL1x0XHRNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDAgPSAzMzY2NDUwMDMxLlxuXHRjb25zdCByMSA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcblx0Y29uc3QgcjIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XG5cdGNvbnN0IHIzID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwID4+PiAwO1xuXHRjb25zdCByNCA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBpZCBkb2VzIG5vdCBzdGFydCB3aXRoIG51bWJlci5cblx0cmV0dXJuICdlJyArXG5cdFx0SEVYX05VTUJFUlNbIHIxID4+IDAgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMSA+PiA4ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjEgPj4gMTYgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMSA+PiAyNCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHIyID4+IDAgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMiA+PiA4ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjIgPj4gMTYgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMiA+PiAyNCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHIzID4+IDAgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMyA+PiA4ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjMgPj4gMTYgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMyA+PiAyNCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHI0ID4+IDAgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByNCA+PiA4ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjQgPj4gMTYgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByNCA+PiAyNCAmIDB4RkYgXTtcbn1cbiJdfQ==