{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/router-store/migrations/14_0_0/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport { Rule, chain, Tree } from '@angular-devkit/schematics';\nimport {\n  visitTSSourceFiles,\n  commitChanges,\n  createReplaceChange,\n  ReplaceChange,\n} from '../../schematics-core';\n\nconst renames = {\n  DefaultRouterStateSerializer: 'FullRouterStateSerializer',\n};\n\nfunction renameSerializers() {\n  return (tree: Tree) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const routerStoreImports = sourceFile.statements\n        .filter(ts.isImportDeclaration)\n        .filter(({ moduleSpecifier }) =>\n          moduleSpecifier.getText(sourceFile).includes('@ngrx/router-store')\n        );\n\n      if (routerStoreImports.length === 0) {\n        return;\n      }\n\n      const changes = [\n        ...findSerializerImportDeclarations(sourceFile, routerStoreImports),\n        ...findSerializerReplacements(sourceFile),\n      ];\n\n      commitChanges(tree, sourceFile.fileName, changes);\n    });\n  };\n}\n\nfunction findSerializerImportDeclarations(\n  sourceFile: ts.SourceFile,\n  imports: ts.ImportDeclaration[]\n) {\n  const changes = imports\n    .map((p) => (p?.importClause?.namedBindings as ts.NamedImports)?.elements)\n    .reduce(\n      (imports, curr) => imports.concat(curr ?? []),\n      [] as ts.ImportSpecifier[]\n    )\n    .map((specifier) => {\n      if (!ts.isImportSpecifier(specifier)) {\n        return { hit: false };\n      }\n\n      const serializerImports = Object.keys(renames);\n      if (serializerImports.includes(specifier.name.text)) {\n        return { hit: true, specifier, text: specifier.name.text };\n      }\n\n      // if import is renamed\n      if (\n        specifier.propertyName &&\n        serializerImports.includes(specifier.propertyName.text)\n      ) {\n        return { hit: true, specifier, text: specifier.propertyName.text };\n      }\n\n      return { hit: false };\n    })\n    .filter(({ hit }) => hit)\n    .map(({ specifier, text }) =>\n      !!specifier && !!text\n        ? createReplaceChange(\n            sourceFile,\n            specifier,\n            text,\n            (renames as any)[text]\n          )\n        : undefined\n    )\n    .filter((change) => !!change) as Array<ReplaceChange>;\n\n  return changes;\n}\n\nfunction findSerializerReplacements(sourceFile: ts.SourceFile) {\n  const renameKeys = Object.keys(renames);\n  const changes: ReplaceChange[] = [];\n  ts.forEachChild(sourceFile, (node) => find(node, changes));\n  return changes;\n\n  function find(node: ts.Node, changes: ReplaceChange[]) {\n    let change = undefined;\n\n    if (\n      ts.isPropertyAssignment(node) &&\n      renameKeys.includes(node.initializer.getText(sourceFile))\n    ) {\n      change = {\n        node: node.initializer,\n        text: node.initializer.getText(sourceFile),\n      };\n    }\n\n    if (\n      ts.isPropertyAccessExpression(node) &&\n      renameKeys.includes(node.expression.getText(sourceFile))\n    ) {\n      change = {\n        node: node.expression,\n        text: node.expression.getText(sourceFile),\n      };\n    }\n\n    if (\n      ts.isVariableDeclaration(node) &&\n      node.type &&\n      renameKeys.includes(node.type.getText(sourceFile))\n    ) {\n      change = {\n        node: node.type,\n        text: node.type.getText(sourceFile),\n      };\n    }\n\n    if (change) {\n      changes.push(\n        createReplaceChange(\n          sourceFile,\n          change.node,\n          change.text,\n          (renames as any)[change.text]\n        )\n      );\n    }\n\n    ts.forEachChild(node, (childNode) => find(childNode, changes));\n  }\n}\n\nexport default function (): Rule {\n  return chain([renameSerializers()]);\n}\n"]}