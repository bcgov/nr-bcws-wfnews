{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/router-store/migrations/15_2_0/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport { Rule, chain, Tree } from '@angular-devkit/schematics';\nimport {\n  visitTSSourceFiles,\n  commitChanges,\n  createReplaceChange,\n  ReplaceChange,\n} from '../../schematics-core';\n\nconst renames: { [key: string]: string } = {\n  getSelectors: 'getRouterSelectors',\n};\n\nfunction renameSelector() {\n  return (tree: Tree) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const routerStoreImports = sourceFile.statements\n        .filter((p): p is ts.ImportDeclaration => ts.isImportDeclaration(p))\n        .filter(({ moduleSpecifier }) =>\n          moduleSpecifier.getText(sourceFile).includes('@ngrx/router-store')\n        );\n      const changes: ReplaceChange[] = [\n        ...replaceNamedImports(routerStoreImports, sourceFile),\n        ...replaceNamespaceImports(routerStoreImports, sourceFile),\n      ];\n\n      if (changes.length) {\n        commitChanges(tree, sourceFile.fileName, changes);\n      }\n    });\n  };\n}\n\nfunction replaceNamedImports(\n  routerStoreImports: ts.ImportDeclaration[],\n  sourceFile: ts.SourceFile\n): ReplaceChange[] {\n  const changes: ReplaceChange[] = [];\n\n  const namedImports = routerStoreImports\n    .flatMap((p) =>\n      !!p.importClause && ts.isImportClause(p.importClause)\n        ? p.importClause.namedBindings\n        : []\n    )\n    .flatMap((p) => (!!p && ts.isNamedImports(p) ? p.elements : []));\n\n  for (const namedImport of namedImports) {\n    tryToAddReplacement(namedImport.name, sourceFile, changes);\n  }\n  return changes;\n}\n\nfunction replaceNamespaceImports(\n  routerStoreImports: ts.ImportDeclaration[],\n  sourceFile: ts.SourceFile\n): ReplaceChange[] {\n  const changes: ReplaceChange[] = [];\n\n  const namespaceImports = routerStoreImports\n    .map((p) =>\n      !!p.importClause &&\n      ts.isImportClause(p.importClause) &&\n      !!p.importClause.namedBindings &&\n      ts.isNamespaceImport(p.importClause.namedBindings)\n        ? p.importClause.namedBindings.name.getText(sourceFile)\n        : null\n    )\n    .filter((p): p is string => !!p);\n\n  if (namespaceImports.length === 0) {\n    return changes;\n  }\n\n  for (const statement of sourceFile.statements) {\n    statement.forEachChild((child) => {\n      if (ts.isVariableDeclarationList(child)) {\n        const [declaration] = child.declarations;\n        if (\n          ts.isVariableDeclaration(declaration) &&\n          declaration.initializer &&\n          ts.isCallExpression(declaration.initializer) &&\n          declaration.initializer.expression &&\n          ts.isPropertyAccessExpression(declaration.initializer.expression) &&\n          ts.isIdentifier(declaration.initializer.expression.expression) &&\n          ts.isIdentifier(declaration.initializer.expression.name)\n        ) {\n          if (\n            namespaceImports.includes(\n              declaration.initializer.expression.expression.getText(sourceFile)\n            )\n          ) {\n            tryToAddReplacement(\n              declaration.initializer.expression.name,\n              sourceFile,\n              changes\n            );\n          }\n        }\n      }\n    });\n  }\n\n  return changes;\n}\n\nfunction tryToAddReplacement(\n  oldName: ts.Identifier,\n  sourceFile: ts.SourceFile,\n  changes: ReplaceChange[]\n) {\n  const oldNameText = oldName.getText(sourceFile);\n  const newName = renames[oldNameText];\n  if (newName) {\n    const change = createReplaceChange(\n      sourceFile,\n      oldName,\n      oldNameText,\n      newName\n    );\n    changes.push(change);\n  }\n}\n\nexport default function (): Rule {\n  return chain([renameSelector()]);\n}\n"]}