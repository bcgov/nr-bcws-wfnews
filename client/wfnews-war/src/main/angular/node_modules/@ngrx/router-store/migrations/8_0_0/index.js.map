{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/router-store/migrations/8_0_0/index.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AACjC,yDAA+D;AAC/D,yDAK+B;AAE/B,SAAS,uBAAuB;IAC9B,OAAO,UAAC,IAAU;QAChB,IAAA,oCAAkB,EAAC,IAAI,EAAE,UAAC,UAAU;YAClC,IAAM,OAAO,GAAoB,EAAE,CAAC;YACpC,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,aAAa,CAAC,IAAI;gBACrD,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;oBACzB,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;oBACrC,OAAO;iBACR;gBAED,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,WAAW,CAAC,IAAI;oBAC7C,IACE,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC;wBAC7B,EAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC;wBAC7C,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;wBAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,EAC5B;wBACA,IAAI,CAAC,WAAW,CAAC,QAAQ;6BACtB,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC;6BACvB,MAAM,CACL,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,IAAI,KAAK,6BAA6B,EAA9C,CAA8C,CAC5D;6BACA,OAAO,CAAC,UAAC,OAAO;4BACf,OAAO,CAAC,IAAI,CACV,IAAA,qCAAmB,EACjB,UAAU,EACV,OAAO,EACP,6BAA6B,EAC7B,uCAAuC,CACxC,CACF,CAAC;wBACJ,CAAC,CAAC,CAAC;qBACN;oBAED,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;gBACrC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,+BAAa,EAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAED;IACE,OAAO,IAAA,kBAAK,EAAC,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;AAC5C,CAAC;AAFD,+BAEC","sourcesContent":["import * as ts from 'typescript';\nimport { Rule, chain, Tree } from '@angular-devkit/schematics';\nimport {\n  ReplaceChange,\n  createReplaceChange,\n  visitTSSourceFiles,\n  commitChanges,\n} from '../../schematics-core';\n\nfunction updateRouterStoreImport(): Rule {\n  return (tree: Tree) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const changes: ReplaceChange[] = [];\n      ts.forEachChild(sourceFile, function findDecorator(node) {\n        if (!ts.isDecorator(node)) {\n          ts.forEachChild(node, findDecorator);\n          return;\n        }\n\n        ts.forEachChild(node, function findImports(node) {\n          if (\n            ts.isPropertyAssignment(node) &&\n            ts.isArrayLiteralExpression(node.initializer) &&\n            ts.isIdentifier(node.name) &&\n            node.name.text === 'imports'\n          ) {\n            node.initializer.elements\n              .filter(ts.isIdentifier)\n              .filter(\n                (element) => element.text === 'StoreRouterConnectingModule'\n              )\n              .forEach((element) => {\n                changes.push(\n                  createReplaceChange(\n                    sourceFile,\n                    element,\n                    'StoreRouterConnectingModule',\n                    'StoreRouterConnectingModule.forRoot()'\n                  )\n                );\n              });\n          }\n\n          ts.forEachChild(node, findImports);\n        });\n      });\n\n      commitChanges(tree, sourceFile.fileName, changes);\n    });\n  };\n}\n\nexport default function (): Rule {\n  return chain([updateRouterStoreImport()]);\n}\n"]}