{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/router-store/migrations/9_0_0/index.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AACjC,yDAKoC;AACpC,yDAQ+B;AAE/B,SAAS,oBAAoB;IAC3B,IAAM,mBAAmB,GAAG,0CAA0C,CAAC;IACvE,OAAO,UAAC,IAAU,EAAE,GAAqB;QACvC,IAAA,oCAAkB,EAAC,IAAI,EAAE,UAAC,UAAU;YAClC,IAAM,OAAO,GAAa,EAAE,CAAC;YAE7B,IAAA,sCAAoB,EAAC,UAAU,EAAE,UAAC,WAAW,EAAE,YAAY;gBACzD,YAAY;qBACT,MAAM,CACL,UAAC,OAAO;oBACN,OAAA,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC;wBAC5B,EAAE,CAAC,0BAA0B,CAAC,OAAO,CAAC,UAAU,CAAC;wBACjD,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC;wBAC9C,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI;4BAChC,6BAA6B;gBAJ/B,CAI+B,CAClC;qBACA,OAAO,CAAC,UAAC,OAAO;oBACf,IAAM,cAAc,GAAG,OAA4B,CAAC;oBACpD,IAAM,YAAY,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAEjD,0DAA0D;oBAC1D,IAAI,YAAY,KAAK,SAAS,EAAE;wBAC9B,OAAO,CAAC,IAAI,CACV,IAAI,8BAAY,CACd,UAAU,CAAC,QAAQ,EACnB,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,EAC3B,YAAK,mBAAmB,OAAI,CAC7B,CACF,CAAC;qBACH;yBAAM,IAAI,EAAE,CAAC,yBAAyB,CAAC,YAAY,CAAC,EAAE;wBACrD,wEAAwE;wBACxE,IAAM,aAAa,GAAG,IAAA,kCAAgB,EACpC,YAAY,EACZ,YAAY,CACb,CAAC;wBACF,IAAM,cAAc,GAAG,IAAA,kCAAgB,EACrC,YAAY,EACZ,aAAa,CACd,CAAC;wBAEF,IAAI,aAAa,IAAI,cAAc,EAAE;4BACnC,OAAO;yBACR;wBAED,OAAO,CAAC,IAAI,CACV,IAAI,8BAAY,CACd,UAAU,CAAC,QAAQ,EACnB,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC,EAC3B,WAAI,mBAAmB,MAAG,CAC3B,CACF,CAAC;qBACH;gBACH,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,IAAI,OAAO,CAAC,MAAM,EAAE;gBAClB,OAAO,CAAC,IAAI,CACV,IAAA,8BAAY,EACV,UAAU,EACV,UAAU,CAAC,QAAQ,EACnB,8BAA8B,EAC9B,oBAAoB,CACrB,CACF,CAAC;aACH;YAED,IAAA,+BAAa,EAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAElD,IAAI,OAAO,CAAC,MAAM,EAAE;gBAClB,GAAG,CAAC,MAAM,CAAC,IAAI,CACb,uKAAuK,CACxK,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAED;IACE,OAAO,IAAA,kBAAK,EAAC,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;AACzC,CAAC;AAFD,+BAEC","sourcesContent":["import * as ts from 'typescript';\nimport {\n  Rule,\n  chain,\n  Tree,\n  SchematicContext,\n} from '@angular-devkit/schematics';\nimport {\n  visitTSSourceFiles,\n  commitChanges,\n  InsertChange,\n  visitNgModuleImports,\n  insertImport,\n  Change,\n  containsProperty,\n} from '../../schematics-core';\n\nfunction addDefaultSerializer(): Rule {\n  const SERIALIZER_PROPERTY = 'serializer: DefaultRouterStateSerializer';\n  return (tree: Tree, ctx: SchematicContext) => {\n    visitTSSourceFiles(tree, (sourceFile) => {\n      const changes: Change[] = [];\n\n      visitNgModuleImports(sourceFile, (importsNode, elementsNode) => {\n        elementsNode\n          .filter(\n            (element) =>\n              ts.isCallExpression(element) &&\n              ts.isPropertyAccessExpression(element.expression) &&\n              ts.isIdentifier(element.expression.expression) &&\n              element.expression.expression.text ===\n                'StoreRouterConnectingModule'\n          )\n          .forEach((element) => {\n            const callExpression = element as ts.CallExpression;\n            const callArgument = callExpression.arguments[0];\n\n            // StoreRouterConnectingModule.forRoot() without arguments\n            if (callArgument === undefined) {\n              changes.push(\n                new InsertChange(\n                  sourceFile.fileName,\n                  callExpression.getEnd() - 1,\n                  `{ ${SERIALIZER_PROPERTY} }`\n                )\n              );\n            } else if (ts.isObjectLiteralExpression(callArgument)) {\n              // StoreRouterConnectingModule.forRoot({ key: 'router' }) with arguments\n              const serializerSet = containsProperty(\n                callArgument,\n                'serializer'\n              );\n              const routerStateSet = containsProperty(\n                callArgument,\n                'routerState'\n              );\n\n              if (serializerSet || routerStateSet) {\n                return;\n              }\n\n              changes.push(\n                new InsertChange(\n                  sourceFile.fileName,\n                  callArgument.getStart() + 1,\n                  ` ${SERIALIZER_PROPERTY},`\n                )\n              );\n            }\n          });\n      });\n\n      if (changes.length) {\n        changes.push(\n          insertImport(\n            sourceFile,\n            sourceFile.fileName,\n            'DefaultRouterStateSerializer',\n            '@ngrx/router-store'\n          )\n        );\n      }\n\n      commitChanges(tree, sourceFile.fileName, changes);\n\n      if (changes.length) {\n        ctx.logger.info(\n          `[@ngrx/router-store] Updated StoreRouterConnectingModule's configuration, see the migration guide (https://ngrx.io/guide/migration/v9#ngrxrouter-store) for more info`\n        );\n      }\n    });\n  };\n}\n\nexport default function (): Rule {\n  return chain([addDefaultSerializer()]);\n}\n"]}