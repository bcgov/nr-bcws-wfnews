import { EventEmitter, OnChanges, ElementRef, SimpleChanges, AfterViewInit } from '@angular/core';
import { Orientation } from '../types/orientation.enum';
import { TextAnchor } from '../types/text-anchor.enum';
import * as i0 from "@angular/core";
export declare class XAxisTicksComponent implements OnChanges, AfterViewInit {
    private platformId;
    scale: any;
    orient: Orientation;
    tickArguments: number[];
    tickValues: string[] | number[];
    tickStroke: string;
    trimTicks: boolean;
    maxTickLength: number;
    tickFormatting: any;
    showGridLines: boolean;
    gridLineHeight: number;
    width: number;
    rotateTicks: boolean;
    dimensionsChanged: EventEmitter<any>;
    verticalSpacing: number;
    rotateLabels: boolean;
    innerTickSize: number;
    outerTickSize: number;
    tickPadding: number;
    textAnchor: TextAnchor;
    maxTicksLength: number;
    maxAllowedLength: number;
    adjustedScale: any;
    textTransform: string;
    ticks: any[];
    tickFormat: (o: any) => any;
    height: number;
    approxHeight: number;
    ticksElement: ElementRef;
    constructor(platformId: any);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    updateDims(): void;
    update(): void;
    getRotationAngle(ticks: any[]): number;
    getTicks(): any[];
    getMaxTicks(tickWidth: number): number;
    tickTransform(tick: number): string;
    gridLineTransform(): string;
    tickTrim(label: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<XAxisTicksComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<XAxisTicksComponent, "g[ngx-charts-x-axis-ticks]", never, { "scale": "scale"; "orient": "orient"; "tickArguments": "tickArguments"; "tickValues": "tickValues"; "tickStroke": "tickStroke"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "tickFormatting": "tickFormatting"; "showGridLines": "showGridLines"; "gridLineHeight": "gridLineHeight"; "width": "width"; "rotateTicks": "rotateTicks"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
}
