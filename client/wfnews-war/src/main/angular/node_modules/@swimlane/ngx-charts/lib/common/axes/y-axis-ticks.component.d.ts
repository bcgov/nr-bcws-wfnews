import { OnChanges, ElementRef, EventEmitter, AfterViewInit, SimpleChanges } from '@angular/core';
import { Orientation } from '../types/orientation.enum';
import { TextAnchor } from '../types/text-anchor.enum';
import * as i0 from "@angular/core";
export declare class YAxisTicksComponent implements OnChanges, AfterViewInit {
    private platformId;
    scale: any;
    orient: Orientation;
    tickArguments: number[];
    tickValues: string[] | number[];
    tickStroke: string;
    trimTicks: boolean;
    maxTickLength: number;
    tickFormatting: any;
    showGridLines: boolean;
    gridLineWidth: number;
    height: number;
    referenceLines: any;
    showRefLabels: boolean;
    showRefLines: boolean;
    dimensionsChanged: EventEmitter<any>;
    innerTickSize: number;
    tickPadding: number;
    tickSpacing: number;
    verticalSpacing: number;
    textAnchor: TextAnchor;
    dy: string;
    x1: number;
    x2: number;
    y1: number;
    y2: number;
    adjustedScale: any;
    transform: (o: any) => string;
    tickFormat: (o: any) => string;
    ticks: any[];
    width: number;
    outerTickSize: number;
    rotateLabels: boolean;
    refMax: number;
    refMin: number;
    referenceLineLength: number;
    referenceAreaPath: string;
    readonly Orientation: typeof Orientation;
    ticksElement: ElementRef;
    constructor(platformId: any);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    updateDims(): void;
    update(): void;
    setReferencelines(): void;
    getTicks(): any[];
    getMaxTicks(tickHeight: number): number;
    tickTransform(tick: number): string;
    gridLineTransform(): string;
    tickTrim(label: string): string;
    getApproximateAxisWidth(): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<YAxisTicksComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<YAxisTicksComponent, "g[ngx-charts-y-axis-ticks]", never, { "scale": "scale"; "orient": "orient"; "tickArguments": "tickArguments"; "tickValues": "tickValues"; "tickStroke": "tickStroke"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "tickFormatting": "tickFormatting"; "showGridLines": "showGridLines"; "gridLineWidth": "gridLineWidth"; "height": "height"; "referenceLines": "referenceLines"; "showRefLabels": "showRefLabels"; "showRefLines": "showRefLines"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
}
