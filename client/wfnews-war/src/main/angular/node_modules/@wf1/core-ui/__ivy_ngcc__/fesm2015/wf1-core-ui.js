import { ɵɵdefineInjectable, Injectable, ɵɵinject, INJECTOR, Injector, Component, Input, EventEmitter, Output, Directive, ElementRef, HostListener, Inject, ViewChild, ContentChild, ChangeDetectorRef, APP_INITIALIZER, NgModule } from '@angular/core';
import { HttpClient, HttpBackend, HttpHeaders, HttpHandler, HttpClientModule } from '@angular/common/http';
import { AsyncSubject, Subject, of } from 'rxjs';
import { OAuthService, OAuthModule } from 'angular-oauth2-oidc';
import * as momentInstance from 'moment';
import { catchError, distinctUntilChanged } from 'rxjs/operators';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { Location, DatePipe, CommonModule } from '@angular/common';
import { FormBuilder, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconRegistry, MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatTabsModule } from '@angular/material/tabs';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatTreeNestedDataSource, MatTreeModule } from '@angular/material/tree';
import { DomSanitizer, BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { OWL_DATE_TIME_FORMATS, OwlDateTimeModule, OwlMomentDateTimeModule } from '@busacca/ng-pick-datetime';
import { ApiModule } from '@wf1/orgunit-rest-api';
import { MomentModule } from 'ngx-moment';
import { NavigationEnd, Router } from '@angular/router';
import { maskInput } from 'vanilla-text-mask';
import { select, Store, createSelector } from '@ngrx/store';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { UUID } from 'angular2-uuid';
import { NestedTreeControl } from '@angular/cdk/tree';
import { SelectionModel } from '@angular/cdk/collections';
import { MatDividerModule } from '@angular/material/divider';
import { __rest } from 'tslib';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/toolbar';
import * as ɵngcc4 from '@angular/material/icon';
import * as ɵngcc5 from '@angular/platform-browser';
import * as ɵngcc6 from '@angular/material/button';
import * as ɵngcc7 from '@angular/material/menu';
import * as ɵngcc8 from '@angular/material/tooltip';
import * as ɵngcc9 from '@angular/router';
import * as ɵngcc10 from '@busacca/ng-pick-datetime';
import * as ɵngcc11 from '@angular/forms';
import * as ɵngcc12 from '@angular/material/input';
import * as ɵngcc13 from '@ngrx/store';
import * as ɵngcc14 from '@angular/material/list';
import * as ɵngcc15 from 'ngx-moment';
import * as ɵngcc16 from '@angular/material/form-field';
import * as ɵngcc17 from '@angular/material/checkbox';
import * as ɵngcc18 from '@angular/material/radio';
import * as ɵngcc19 from '@angular/material/tabs';
import * as ɵngcc20 from '@angular/material/button-toggle';
import * as ɵngcc21 from '@angular/material/expansion';
import * as ɵngcc22 from '@angular/material/sidenav';
import * as ɵngcc23 from '@angular/material/progress-spinner';
import * as ɵngcc24 from '@angular/material/card';
import * as ɵngcc25 from '@angular/material/tree';
import * as ɵngcc26 from 'angular-oauth2-oidc';

function ApplicationHeaderComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div")(1, "p", 8);
    ɵngcc0.ɵɵtext(2, "SYSTEM: ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "p", 9);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate4(" ", ctx_r0.acronym, " ", ctx_r0.appVersion, "", ctx_r0.buildNumber, " ", ctx_r0.environment, " ");
} }
function ApplicationHeaderComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div")(1, "p", 8);
    ɵngcc0.ɵɵtext(2, "USER: ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "p", 9);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.userName, " ");
} }
function ApplicationIconComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "mat-icon", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.getHaloIconClasses())("svgIcon", ctx_r0.getHaloType());
} }
function ApplicationIconComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8)(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "block");
    ɵngcc0.ɵɵelementEnd()();
} }
function ApplicationIconComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9)(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "panorama_fish_eye");
    ɵngcc0.ɵɵelementEnd()();
} }
function ApplicationToolbarComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵelement(1, "wf1-application-icon", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "button", 4);
    ɵngcc0.ɵɵelement(3, "wf1-application-icon", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("hasHalo", true);
} }
function ApplicationToolbarComponent_ng_container_3_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div");
} }
function ApplicationToolbarComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-menu", null, 7);
    ɵngcc0.ɵɵtemplate(3, ApplicationToolbarComponent_ng_container_3_div_3_Template, 1, 0, "div", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 8)(5, "mat-icon");
    ɵngcc0.ɵɵtext(6, "menu");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r4 = ɵngcc0.ɵɵreference(2);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.menuTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r4);
} }
function ApplicationToolbarComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div");
} }
function BasicSidebarPanelComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7)(1, "button", 8);
    ɵngcc0.ɵɵlistener("click", function BasicSidebarPanelComponent_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r2.titleBackClicked()); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "arrow_back");
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx_r0.TOOLTIP_DELAY);
} }
function BasicSidebarPanelComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5)(1, "button", 9);
    ɵngcc0.ɵɵlistener("click", function BasicSidebarPanelComponent_div_5_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r4.titleLinkClicked()); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.getTitleIconClasses());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltip", ctx_r1.linkTitle)("matTooltipShowDelay", ctx_r1.TOOLTIP_DELAY);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.linkIcon);
} }
const _c0 = ["*"];
function FilterSidebarPanelComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10)(1, "button", 11);
    ɵngcc0.ɵɵlistener("click", function FilterSidebarPanelComponent_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r3.titleBackClicked()); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "arrow_back");
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx_r0.TOOLTIP_DELAY);
} }
function FilterSidebarPanelComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 8)(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function FilterSidebarPanelComponent_div_5_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r5.titleLinkClicked()); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.getTitleIconClasses());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltip", ctx_r1.linkTitle)("matTooltipShowDelay", ctx_r1.TOOLTIP_DELAY);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.linkIcon);
} }
function FilterSidebarPanelComponent_wf1_sort_modal_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "wf1-sort-modal", 13);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("options", ctx_r2.sortOptions)("defaultSort", ctx_r2.defaultSort)("componentId", ctx_r2.componentId);
} }
function FullWidthContainerComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p");
    ɵngcc0.ɵɵtext(1, " Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur consectetur debitis, delectus deleniti dolore earum explicabo facere facilis, fugiat itaque numquam provident quam quo quos sint veritatis vero voluptas voluptate? ");
    ɵngcc0.ɵɵelementEnd();
} }
function FullWidthContainerComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5)(1, "h1");
    ɵngcc0.ɵɵtext(2, "Initializing Application");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "wf1-spinner");
    ɵngcc0.ɵɵelementStart(4, "h3");
    ɵngcc0.ɵɵtext(5, "Please wait while the application initializes.");
    ɵngcc0.ɵɵelementEnd()();
} }
function FullWidthContainerComponent_div_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function FullWidthContainerComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtemplate(1, FullWidthContainerComponent_div_5_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r3.mainContentTemplate ? ctx_r3.mainContentTemplate : _r0);
} }
function FullWidthPanelComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 8)(1, "button", 9);
    ɵngcc0.ɵɵlistener("click", function FullWidthPanelComponent_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1.titleLinkClicked()); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.linkIcon);
} }
function ListItemComponent_mat_list_item_0_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "amDateFormat");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r1.internalConfig.time, "YYYY-MM-DD"));
} }
function ListItemComponent_mat_list_item_0_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "amDateFormat");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r2.internalConfig.time, "HH:mm:ss"));
} }
function ListItemComponent_mat_list_item_0_button_18_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 17);
    ɵngcc0.ɵɵlistener("click", function ListItemComponent_mat_list_item_0_button_18_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r5.zoomToPlace(ctx_r5.internalConfig.location)); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "place");
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx_r3.TOOLTIP_DELAY);
} }
function ListItemComponent_mat_list_item_0_ng_container_19_ng_container_2_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span")(1, "span", 11);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span")(4, "strong");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const column_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵclassMapInterpolate1("list-item-info ", column_r9.fullWidth ? "list-item-info-full-width" : "", "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", column_r9.label, ":");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("list-item-info-value ", column_r9.emphasis ? "list-item-info-value-emphasis" : "", "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(column_r9.value);
} }
function ListItemComponent_mat_list_item_0_ng_container_19_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ListItemComponent_mat_list_item_0_ng_container_19_ng_container_2_span_1_Template, 6, 8, "span", 19);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r9 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", column_r9);
} }
function ListItemComponent_mat_list_item_0_ng_container_19_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 18);
    ɵngcc0.ɵɵlistener("mouseover", function ListItemComponent_mat_list_item_0_ng_container_19_Template_div_mouseover_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r12.handleMouseEvent(ctx_r12.internalConfig.location)); })("mouseout", function ListItemComponent_mat_list_item_0_ng_container_19_Template_div_mouseout_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r14.handleMouseEvent()); })("focus", function ListItemComponent_mat_list_item_0_ng_container_19_Template_div_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r15.handleMouseEvent(ctx_r15.internalConfig.location)); })("blur", function ListItemComponent_mat_list_item_0_ng_container_19_Template_div_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r16.handleMouseEvent()); })("click", function ListItemComponent_mat_list_item_0_ng_container_19_Template_div_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r17.handleClick()); })("keydown", function ListItemComponent_mat_list_item_0_ng_container_19_Template_div_keydown_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r18.handleClick()); });
    ɵngcc0.ɵɵtemplate(2, ListItemComponent_mat_list_item_0_ng_container_19_ng_container_2_Template, 2, 1, "ng-container", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const row_r7 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", row_r7);
} }
function ListItemComponent_mat_list_item_0_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 1)(1, "div", 2);
    ɵngcc0.ɵɵlistener("mouseover", function ListItemComponent_mat_list_item_0_Template_div_mouseover_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r19.handleMouseEvent(ctx_r19.internalConfig.location)); })("mouseout", function ListItemComponent_mat_list_item_0_Template_div_mouseout_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r21.handleMouseEvent()); })("focus", function ListItemComponent_mat_list_item_0_Template_div_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r22.handleMouseEvent(ctx_r22.internalConfig.location)); })("blur", function ListItemComponent_mat_list_item_0_Template_div_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r23.handleMouseEvent()); })("click", function ListItemComponent_mat_list_item_0_Template_div_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r24.handleClick()); })("keydown", function ListItemComponent_mat_list_item_0_Template_div_keydown_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r25.handleClick()); });
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵelement(3, "wf1-application-icon", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, ListItemComponent_mat_list_item_0_div_4_Template, 3, 4, "div", 5);
    ɵngcc0.ɵɵtemplate(5, ListItemComponent_mat_list_item_0_div_5_Template, 3, 4, "div", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 7)(7, "div", 8)(8, "span", 9);
    ɵngcc0.ɵɵlistener("mouseover", function ListItemComponent_mat_list_item_0_Template_span_mouseover_8_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r26.handleMouseEvent(ctx_r26.internalConfig.location)); })("mouseout", function ListItemComponent_mat_list_item_0_Template_span_mouseout_8_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r27.handleMouseEvent()); })("click", function ListItemComponent_mat_list_item_0_Template_span_click_8_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r28.handleClick()); });
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "span", 10);
    ɵngcc0.ɵɵlistener("mouseover", function ListItemComponent_mat_list_item_0_Template_span_mouseover_10_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r29.handleMouseEvent(ctx_r29.internalConfig.location)); })("mouseout", function ListItemComponent_mat_list_item_0_Template_span_mouseout_10_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r30.handleMouseEvent()); })("click", function ListItemComponent_mat_list_item_0_Template_span_click_10_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r31 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r31.handleClick()); });
    ɵngcc0.ɵɵelementStart(11, "span")(12, "span", 11);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "span")(15, "strong");
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵelementEnd()()()();
    ɵngcc0.ɵɵelementStart(17, "span", 12);
    ɵngcc0.ɵɵtemplate(18, ListItemComponent_mat_list_item_0_button_18_Template, 3, 1, "button", 13);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵtemplate(19, ListItemComponent_mat_list_item_0_ng_container_19_Template, 3, 1, "ng-container", 14);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("iconType", ctx_r0.internalConfig.icon.type)("iconSize", ctx_r0.internalConfig.icon.size)("colourCode", ctx_r0.internalConfig.icon.colourCode)("isBlinking", ctx_r0.internalConfig.icon.isBlinking)("isCancelled", ctx_r0.internalConfig.icon.isCancelled)("isAssignedToIncident", ctx_r0.internalConfig.icon.isAssignedToIncident);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.internalConfig.time);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.internalConfig.time);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.internalConfig.title);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassMapInterpolate1("list-item-info ", ctx_r0.internalConfig.titleLevelInfo.fullWidth ? "list-item-info-full-width" : "", "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r0.internalConfig.titleLevelInfo.label, ":");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("list-item-info-value ", ctx_r0.internalConfig.titleLevelInfo.emphasis ? "list-item-info-value-emphasis" : "", "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.internalConfig.titleLevelInfo.value);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.internalConfig.location);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.internalConfig.infoRows);
} }
function ListContainerComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "wf1-spinner");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function ListContainerComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementContainerEnd();
} }
function LocationSidebarPanelComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 7)(1, "button", 8);
    ɵngcc0.ɵɵlistener("click", function LocationSidebarPanelComponent_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1.titleLinkClicked()); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.getTitleIconClasses());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltip", ctx_r0.linkTitle)("matTooltipShowDelay", ctx_r0.TOOLTIP_DELAY);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.linkIcon);
} }
const _c1 = ["filtertabbody"];
function FiltersComponent_mat_tab_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵlistener("click", function FiltersComponent_mat_tab_2_ng_template_2_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); ɵngcc0.ɵɵnextContext(); const _r3 = ɵngcc0.ɵɵreference(1); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r6.selectTab(_r3)); })("keydown", function FiltersComponent_mat_tab_2_ng_template_2_Template_div_keydown_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); ɵngcc0.ɵɵnextContext(); const _r3 = ɵngcc0.ɵɵreference(1); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r8.selectTab(_r3)); });
    ɵngcc0.ɵɵelementStart(1, "span", 7);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 8);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    const i_r2 = ctx_r9.index;
    const param_r1 = ctx_r9.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.filters[i_r2].label);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.getSelectedFilterValues(param_r1), " ");
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_mat_error_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r2 = ɵngcc0.ɵɵnextContext(3).index;
    const ctx_r15 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("Format must be ", ctx_r15.filters[i_r2].type == "dateRange" ? ctx_r15.DATE_FORMATS.datePickerInput : ctx_r15.DATE_FORMATS.fullPickerInput, "");
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_mat_error_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1, "\"From\" date cannot be after \"To\" date.");
    ɵngcc0.ɵɵelementEnd();
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_mat_error_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r2 = ɵngcc0.ɵɵnextContext(3).index;
    const ctx_r18 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("Format must be ", ctx_r18.filters[i_r2].type == "dateRange" ? ctx_r18.DATE_FORMATS.datePickerInput : ctx_r18.DATE_FORMATS.fullPickerInput, "");
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_mat_error_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1, "\"To\" date cannot be before \"From\" date.");
    ɵngcc0.ɵɵelementEnd();
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-form-field", 15)(2, "input", 16);
    ɵngcc0.ɵɵlistener("dateTimeChange", function FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_Template_input_dateTimeChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const param_r1 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r22.dateUpdated($event, param_r1, "from")); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 17)(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "event");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelement(6, "owl-date-time", 18, 19);
    ɵngcc0.ɵɵtemplate(8, FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_mat_error_8_Template, 2, 1, "mat-error", 14);
    ɵngcc0.ɵɵtemplate(9, FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_mat_error_9_Template, 2, 0, "mat-error", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "mat-form-field", 15)(11, "input", 20);
    ɵngcc0.ɵɵlistener("dateTimeChange", function FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_Template_input_dateTimeChange_11_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const param_r1 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r25.dateUpdated($event, param_r1, "to")); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "button", 17)(13, "mat-icon");
    ɵngcc0.ɵɵtext(14, "event");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelement(15, "owl-date-time", 18, 21);
    ɵngcc0.ɵɵtemplate(17, FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_mat_error_17_Template, 2, 1, "mat-error", 14);
    ɵngcc0.ɵɵtemplate(18, FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_mat_error_18_Template, 2, 0, "mat-error", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r14 = ɵngcc0.ɵɵreference(7);
    const _r17 = ɵngcc0.ɵɵreference(16);
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    const param_r1 = ctx_r27.$implicit;
    const i_r2 = ctx_r27.index;
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("owlDateTime", _r14)("formControl", ctx_r11.getFormControlsFromArray(ctx_r11.filterForm, param_r1)[0]);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("owlDateTimeTrigger", _r14);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("pickerType", ctx_r11.filters[i_r2].type == "dateRange" ? "calendar" : "both");
    ɵngcc0.ɵɵproperty("showSecondsTimer", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.getFormControlsFromArray(ctx_r11.filterForm, param_r1)[0].hasError("incorrectFormat") || ctx_r11.getFormControlsFromArray(ctx_r11.filterForm, param_r1)[0].hasError("owlDateTimeParse"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.getFormControlsFromArray(ctx_r11.filterForm, param_r1)[0].hasError("fromAfterTo"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("owlDateTime", _r17)("formControl", ctx_r11.getFormControlsFromArray(ctx_r11.filterForm, param_r1)[1]);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("owlDateTimeTrigger", _r17);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("pickerType", ctx_r11.filters[i_r2].type == "dateRange" ? "calendar" : "both");
    ɵngcc0.ɵɵproperty("showSecondsTimer", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.getFormControlsFromArray(ctx_r11.filterForm, param_r1)[1].hasError("incorrectFormat") || ctx_r11.getFormControlsFromArray(ctx_r11.filterForm, param_r1)[1].hasError("owlDateTimeParse"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.getFormControlsFromArray(ctx_r11.filterForm, param_r1)[1].hasError("toBeforeFrom"));
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_6_mat_radio_button_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-radio-button", 24)(1, "span", 25);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const j_r30 = ctx.index;
    const i_r2 = ɵngcc0.ɵɵnextContext(3).index;
    const ctx_r28 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r28.filters[i_r2].options[j_r30].value);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r28.filters[i_r2].options[j_r30].label, " ");
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-radio-group", 22);
    ɵngcc0.ɵɵlistener("change", function FiltersComponent_mat_tab_2_ng_template_3_ng_container_6_Template_mat_radio_group_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r32 = ɵngcc0.ɵɵnextContext(3); return ɵngcc0.ɵɵresetView(ctx_r32.checkboxUpdated($event)); });
    ɵngcc0.ɵɵtemplate(2, FiltersComponent_mat_tab_2_ng_template_3_ng_container_6_mat_radio_button_2_Template, 3, 2, "mat-radio-button", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r34 = ɵngcc0.ɵɵnextContext(2);
    const param_r1 = ctx_r34.$implicit;
    const i_r2 = ctx_r34.index;
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formControl", ctx_r12.filterForm.get(param_r1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r12.filters[i_r2].options);
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_7_ng_container_1_mat_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r40 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 28);
    ɵngcc0.ɵɵlistener("change", function FiltersComponent_mat_tab_2_ng_template_3_ng_container_7_ng_container_1_mat_checkbox_1_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r40); const ctx_r39 = ɵngcc0.ɵɵnextContext(5); return ɵngcc0.ɵɵresetView(ctx_r39.checkboxUpdated($event)); });
    ɵngcc0.ɵɵelementStart(1, "span", 29);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r41 = ɵngcc0.ɵɵnextContext();
    const filterControl_r36 = ctx_r41.$implicit;
    const j_r37 = ctx_r41.index;
    const i_r2 = ɵngcc0.ɵɵnextContext(3).index;
    const ctx_r38 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("formControl", filterControl_r36);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r38.filters[i_r2].options[j_r37].label, " ");
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FiltersComponent_mat_tab_2_ng_template_3_ng_container_7_ng_container_1_mat_checkbox_1_Template, 3, 2, "mat-checkbox", 27);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const j_r37 = ctx.index;
    const i_r2 = ɵngcc0.ɵɵnextContext(3).index;
    const ctx_r35 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r35.filters[i_r2].options[j_r37]);
} }
function FiltersComponent_mat_tab_2_ng_template_3_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FiltersComponent_mat_tab_2_ng_template_3_ng_container_7_ng_container_1_Template, 2, 1, "ng-container", 26);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const param_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r13 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.getFormControlsFromArray(ctx_r13.filterForm, param_r1));
} }
function FiltersComponent_mat_tab_2_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r47 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9, 10)(2, "div", 11)(3, "wf1-application-icon", 12);
    ɵngcc0.ɵɵlistener("click", function FiltersComponent_mat_tab_2_ng_template_3_Template_wf1_application_icon_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r47); const param_r1 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r45 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r45.clearFilter(param_r1)); });
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(4, "div", 13);
    ɵngcc0.ɵɵtemplate(5, FiltersComponent_mat_tab_2_ng_template_3_ng_container_5_Template, 19, 14, "ng-container", 14);
    ɵngcc0.ɵɵtemplate(6, FiltersComponent_mat_tab_2_ng_template_3_ng_container_6_Template, 3, 2, "ng-container", 14);
    ɵngcc0.ɵɵtemplate(7, FiltersComponent_mat_tab_2_ng_template_3_ng_container_7_Template, 2, 1, "ng-container", 14);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const i_r2 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("colourCode", ctx_r5.clearFilterIconType)("matTooltipShowDelay", ctx_r5.TOOLTIP_DELAY);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.filters[i_r2].type == "dateRange" || ctx_r5.filters[i_r2].type == "dateTimeRange");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.filters[i_r2].type == "single");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.filters[i_r2].type == "multi" || !ctx_r5.filters[i_r2].type);
} }
function FiltersComponent_mat_tab_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-tab", 2, 3);
    ɵngcc0.ɵɵtemplate(2, FiltersComponent_mat_tab_2_ng_template_2_Template, 5, 2, "ng-template", 4);
    ɵngcc0.ɵɵtemplate(3, FiltersComponent_mat_tab_2_ng_template_3_Template, 8, 5, "ng-template", 5);
    ɵngcc0.ɵɵelementEnd();
} }
function SortComponent_ng_container_6_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 8);
    ɵngcc0.ɵɵtext(1, " arrow_drop_down ");
    ɵngcc0.ɵɵelementEnd();
} }
function SortComponent_ng_container_6_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 8);
    ɵngcc0.ɵɵtext(1, " arrow_drop_up ");
    ɵngcc0.ɵɵelementEnd();
} }
const _c2 = function (a0) { return { "sort-popup__item--active": a0 }; };
function SortComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵlistener("click", function SortComponent_ng_container_6_Template_div_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const option_r1 = restoredCtx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r4.updateSort(option_r1)); })("keydown", function SortComponent_ng_container_6_Template_div_keydown_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const option_r1 = restoredCtx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r6.updateSort(option_r1)); });
    ɵngcc0.ɵɵelementStart(2, "span", 6);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, SortComponent_ng_container_6_mat_icon_4_Template, 2, 0, "mat-icon", 7);
    ɵngcc0.ɵɵtemplate(5, SortComponent_ng_container_6_mat_icon_5_Template, 2, 0, "mat-icon", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c2, ctx_r0.isActiveParam(option_r1.param)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(option_r1.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isActiveParam(option_r1.param) || ctx_r0.showArrow(option_r1.param, "DESC"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showArrow(option_r1.param, "ASC"));
} }
function SearchBarComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵlistener("click", function SearchBarComponent_div_1_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1.toggleSortModal()); })("keydown", function SearchBarComponent_div_1_Template_div_keydown_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r3.toggleSortModal()); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 14);
    ɵngcc0.ɵɵtext(2, "sort");
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx_r0.TOOLTIP_DELAY);
} }
const _c3 = [[["wf1-sort-modal"]]];
const _c4 = ["wf1-sort-modal"];
function SidebarComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h4");
    ɵngcc0.ɵɵtext(1, "WILDFIRE INCIDENT MANAGEMENT");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "mat-accordion")(3, "mat-expansion-panel")(4, "mat-expansion-panel-header")(5, "mat-panel-title")(6, "i", 6);
    ɵngcc0.ɵɵtext(7, "layers");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(8, "mat-panel-description");
    ɵngcc0.ɵɵtext(9, " Layers ");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵtext(10, " Content here ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "mat-expansion-panel")(12, "mat-expansion-panel-header")(13, "mat-panel-title")(14, "i", 6);
    ɵngcc0.ɵɵtext(15, "apps");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(16, "mat-panel-description");
    ɵngcc0.ɵɵtext(17, " Basemaps ");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(18, "mat-button-toggle-group", 7)(19, "mat-button-toggle", 8);
    ɵngcc0.ɵɵtext(20, "Imagery");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "mat-button-toggle", 9);
    ɵngcc0.ɵɵtext(22, "Street");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(23, "mat-button-toggle", 10);
    ɵngcc0.ɵɵtext(24, "Topographic");
    ɵngcc0.ɵɵelementEnd()()()();
} }
function SidebarComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p");
    ɵngcc0.ɵɵtext(1, " Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur consectetur debitis, delectus deleniti dolore earum explicabo facere facilis, fugiat itaque numquam provident quam quo quos sint veritatis vero voluptas voluptate? ");
    ɵngcc0.ɵɵelementEnd();
} }
function SidebarComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11)(1, "h1");
    ɵngcc0.ɵɵtext(2, "Initializing Application");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "wf1-spinner");
    ɵngcc0.ɵɵelementStart(4, "h3");
    ɵngcc0.ɵɵtext(5, "Please wait while the application initializes.");
    ɵngcc0.ɵɵelementEnd()();
} }
function SidebarComponent_ng_container_7_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function SidebarComponent_ng_container_7_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function SidebarComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "wf1-application-toolbar", 12);
    ɵngcc0.ɵɵelementStart(2, "mat-sidenav-container", 13)(3, "mat-sidenav", 14, 15);
    ɵngcc0.ɵɵlistener("openedChange", function SidebarComponent_ng_container_7_Template_mat_sidenav_openedChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r9.opened = $event); });
    ɵngcc0.ɵɵtemplate(5, SidebarComponent_ng_container_7_ng_container_5_Template, 1, 0, "ng-container", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "mat-sidenav-content")(7, "div", 17);
    ɵngcc0.ɵɵlistener("click", function SidebarComponent_ng_container_7_Template_div_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r10); const _r6 = ɵngcc0.ɵɵreference(4); return ɵngcc0.ɵɵresetView(_r6.toggle()); })("keydown", function SidebarComponent_ng_container_7_Template_div_keydown_7_listener() { ɵngcc0.ɵɵrestoreView(_r10); const _r6 = ɵngcc0.ɵɵreference(4); return ɵngcc0.ɵɵresetView(_r6.toggle()); });
    ɵngcc0.ɵɵelementStart(8, "mat-icon");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵtemplate(10, SidebarComponent_ng_container_7_ng_container_10_Template, 1, 0, "ng-container", 16);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    const _r0 = ɵngcc0.ɵɵreference(1);
    const _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("opened", ctx_r5.opened);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.sidebarTemplate ? ctx_r5.sidebarTemplate : _r0);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.opened ? "arrow_left" : "arrow_right");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.mainContentTemplate ? ctx_r5.mainContentTemplate : _r2);
} }
function UnauthorizedPageComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2)(1, "div")(2, "h1");
    ɵngcc0.ɵɵtext(3, "WFIM Unauthorized Page");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p");
    ɵngcc0.ɵɵtext(5, "An authorization error has occurred");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "h2");
    ɵngcc0.ɵɵtext(7, "Required WebADE role does not exist, is expired, or is not active.");
    ɵngcc0.ɵɵelementEnd()()();
} }
function WFMLBasemapSelectorComponent_mat_card_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-card", 2);
    ɵngcc0.ɵɵlistener("click", function WFMLBasemapSelectorComponent_mat_card_1_Template_mat_card_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const i_r2 = restoredCtx.index; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r3.displayBasemap(i_r2)); });
    ɵngcc0.ɵɵelement(1, "img", 3);
    ɵngcc0.ɵɵelementStart(2, "mat-card-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const basemap_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("alt", basemap_r1.title);
    ɵngcc0.ɵɵpropertyInterpolate1("src", "assets/images/map-thumbnails/", basemap_r1.key, ".jpg", ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(basemap_r1.title);
} }
function WFMLLayerTreeComponent_mat_nested_tree_node_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-nested-tree-node")(1, "li")(2, "div", 3)(3, "mat-checkbox", 4);
    ɵngcc0.ɵɵlistener("change", function WFMLLayerTreeComponent_mat_nested_tree_node_1_Template_mat_checkbox_change_3_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4); const node_r2 = restoredCtx.$implicit; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r3.nodeSelectionToggle(node_r2)); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd()()()();
} if (rf & 2) {
    const node_r2 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("checked", ctx_r0.descendantsAllSelected(node_r2))("indeterminate", ctx_r0.descendantsPartiallySelected(node_r2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r2.title, " ");
} }
function WFMLLayerTreeComponent_mat_nested_tree_node_2_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementContainer(1, 7);
    ɵngcc0.ɵɵelementEnd();
} }
function WFMLLayerTreeComponent_mat_nested_tree_node_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-nested-tree-node")(1, "li")(2, "div", 3)(3, "button", 5)(4, "mat-icon");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(6, "mat-checkbox", 4);
    ɵngcc0.ɵɵlistener("change", function WFMLLayerTreeComponent_mat_nested_tree_node_2_Template_mat_checkbox_change_6_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r8); const node_r5 = restoredCtx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r7.nodeSelectionToggle(node_r5)); });
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(8, "ul");
    ɵngcc0.ɵɵtemplate(9, WFMLLayerTreeComponent_mat_nested_tree_node_2_div_9_Template, 2, 0, "div", 6);
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    const node_r5 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵattribute("aria-label", "toggle " + node_r5.title);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.treeControl.isExpanded(node_r5) ? "expand_more" : "chevron_right", " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("checked", ctx_r1.descendantsAllSelected(node_r5))("indeterminate", ctx_r1.descendantsPartiallySelected(node_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", node_r5.title, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.treeControl.isExpanded(node_r5));
} }
function WFMLMappingContainerComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 6);
} }
function WFMLMappingContainerComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "header")(1, "h4");
    ɵngcc0.ɵɵtext(2, "WILDFIRE INCIDENT MANAGEMENT");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(3, "mat-accordion")(4, "mat-expansion-panel")(5, "mat-expansion-panel-header")(6, "mat-panel-title")(7, "i", 7);
    ɵngcc0.ɵɵtext(8, "layers");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(9, "mat-panel-description");
    ɵngcc0.ɵɵtext(10, " Layers ");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelement(11, "wf1-wfml-layer-tree");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "mat-expansion-panel")(13, "mat-expansion-panel-header")(14, "mat-panel-title")(15, "i", 7);
    ɵngcc0.ɵɵtext(16, "apps");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(17, "mat-panel-description");
    ɵngcc0.ɵɵtext(18, " Basemaps ");
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(19, "mat-button-toggle-group", 8)(20, "mat-button-toggle", 9);
    ɵngcc0.ɵɵtext(21, "Imagery");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(22, "mat-button-toggle", 10);
    ɵngcc0.ɵɵtext(23, "Street");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(24, "mat-button-toggle", 11);
    ɵngcc0.ɵɵtext(25, "Topographic");
    ɵngcc0.ɵɵelementEnd()()()();
} }
function WFMLMappingContainerComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12)(1, "h1");
    ɵngcc0.ɵɵtext(2, "Initializing Application");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "wf1-spinner");
    ɵngcc0.ɵɵelementStart(4, "h3");
    ɵngcc0.ɵɵtext(5, "Please wait while the application initializes.");
    ɵngcc0.ɵɵelementEnd()();
} }
function WFMLMappingContainerComponent_ng_container_7_wf1_application_toolbar_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "wf1-application-toolbar", 19);
    ɵngcc0.ɵɵlistener("selectedMapControl", function WFMLMappingContainerComponent_ng_container_7_wf1_application_toolbar_1_Template_wf1_application_toolbar_selectedMapControl_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r10.onMapControlToggled($event)); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("menuTemplate", ctx_r6.menuTemplate)("toolbarTemplate", ctx_r6.toolbarTemplate);
} }
function WFMLMappingContainerComponent_ng_container_7_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function WFMLMappingContainerComponent_ng_container_7_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function WFMLMappingContainerComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, WFMLMappingContainerComponent_ng_container_7_wf1_application_toolbar_1_Template, 1, 2, "wf1-application-toolbar", 13);
    ɵngcc0.ɵɵelementStart(2, "mat-sidenav-container", 14)(3, "mat-sidenav", 15, 16);
    ɵngcc0.ɵɵlistener("openedChange", function WFMLMappingContainerComponent_ng_container_7_Template_mat_sidenav_openedChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r12.opened = $event); });
    ɵngcc0.ɵɵtemplate(5, WFMLMappingContainerComponent_ng_container_7_ng_container_5_Template, 1, 0, "ng-container", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "mat-sidenav-content")(7, "div", 18);
    ɵngcc0.ɵɵlistener("click", function WFMLMappingContainerComponent_ng_container_7_Template_div_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r13); const _r7 = ɵngcc0.ɵɵreference(4); const ctx_r14 = ɵngcc0.ɵɵnextContext(); _r7.toggle(); return ɵngcc0.ɵɵresetView(ctx_r14.toggleSideNav()); })("keydown", function WFMLMappingContainerComponent_ng_container_7_Template_div_keydown_7_listener() { ɵngcc0.ɵɵrestoreView(_r13); const _r7 = ɵngcc0.ɵɵreference(4); const ctx_r15 = ɵngcc0.ɵɵnextContext(); _r7.toggle(); return ɵngcc0.ɵɵresetView(ctx_r15.toggleSideNav()); });
    ɵngcc0.ɵɵelementStart(8, "mat-icon");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵtemplate(10, WFMLMappingContainerComponent_ng_container_7_ng_container_10_Template, 1, 0, "ng-container", 17);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(3);
    const _r0 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.showToolbar);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("opened", ctx_r5.opened);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.sidebarTemplate ? ctx_r5.sidebarTemplate : _r2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.opened ? "arrow_left" : "arrow_right");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r5.mainContentTemplate ? ctx_r5.mainContentTemplate : _r0);
} }
function PublicApplicationHeaderComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelement(1, "img", 6);
    ɵngcc0.ɵɵelementStart(2, "span", 7);
    ɵngcc0.ɵɵtext(3, " - ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span", 8);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.titleText);
} }
function PublicApplicationHeaderComponent_div_4_ng_container_1_div_1_button_6_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-icon", 18);
} if (rf & 2) {
    const headerMenuItem_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("svgIcon", headerMenuItem_r8.svgIcon);
} }
function PublicApplicationHeaderComponent_div_4_ng_container_1_div_1_button_6_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const headerMenuItem_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(headerMenuItem_r8.icon);
} }
function PublicApplicationHeaderComponent_div_4_ng_container_1_div_1_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 16);
    ɵngcc0.ɵɵlistener("click", function PublicApplicationHeaderComponent_div_4_ng_container_1_div_1_button_6_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14); const headerMenuItem_r8 = restoredCtx.$implicit; return ɵngcc0.ɵɵresetView(headerMenuItem_r8.callBackFunction()); });
    ɵngcc0.ɵɵtemplate(1, PublicApplicationHeaderComponent_div_4_ng_container_1_div_1_button_6_mat_icon_1_Template, 1, 1, "mat-icon", 17);
    ɵngcc0.ɵɵtemplate(2, PublicApplicationHeaderComponent_div_4_ng_container_1_div_1_button_6_mat_icon_2_Template, 2, 1, "mat-icon", 11);
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const headerMenuItem_r8 = ctx.$implicit;
    ɵngcc0.ɵɵattribute("aria-label", headerMenuItem_r8.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", headerMenuItem_r8.svgIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", headerMenuItem_r8.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(headerMenuItem_r8.label);
} }
function PublicApplicationHeaderComponent_div_4_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div")(1, "button", 12)(2, "mat-icon");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(4, "mat-menu", 13, 14);
    ɵngcc0.ɵɵtemplate(6, PublicApplicationHeaderComponent_div_4_ng_container_1_div_1_button_6_Template, 5, 4, "button", 15);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const _r6 = ɵngcc0.ɵɵreference(5);
    const headerItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("mat-menu-trigger-for", _r6);
    ɵngcc0.ɵɵattribute("aria-label", headerItem_r3.label);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(headerItem_r3.icon);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", headerItem_r3.menuItems);
} }
function PublicApplicationHeaderComponent_div_4_ng_container_1_div_2_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-icon", 18);
} if (rf & 2) {
    const headerItem_r3 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("svgIcon", headerItem_r3.svgIcon);
} }
function PublicApplicationHeaderComponent_div_4_ng_container_1_div_2_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const headerItem_r3 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(headerItem_r3.icon);
} }
function PublicApplicationHeaderComponent_div_4_ng_container_1_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div")(1, "button", 19);
    ɵngcc0.ɵɵlistener("click", function PublicApplicationHeaderComponent_div_4_ng_container_1_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r22); const headerItem_r3 = ɵngcc0.ɵɵnextContext().$implicit; return ɵngcc0.ɵɵresetView(headerItem_r3.callBackFunction()); });
    ɵngcc0.ɵɵtemplate(2, PublicApplicationHeaderComponent_div_4_ng_container_1_div_2_mat_icon_2_Template, 1, 1, "mat-icon", 17);
    ɵngcc0.ɵɵtemplate(3, PublicApplicationHeaderComponent_div_4_ng_container_1_div_2_mat_icon_3_Template, 2, 1, "mat-icon", 11);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const headerItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("aria-label", headerItem_r3.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", headerItem_r3.svgIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", headerItem_r3.icon);
} }
function PublicApplicationHeaderComponent_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, PublicApplicationHeaderComponent_div_4_ng_container_1_div_1_Template, 7, 4, "div", 11);
    ɵngcc0.ɵɵtemplate(2, PublicApplicationHeaderComponent_div_4_ng_container_1_div_2_Template, 4, 3, "div", 11);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const headerItem_r3 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", headerItem_r3.menuItems && headerItem_r3.menuItems.length > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !headerItem_r3.menuItems || headerItem_r3.menuItems.length == 0);
} }
function PublicApplicationHeaderComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtemplate(1, PublicApplicationHeaderComponent_div_4_ng_container_1_Template, 3, 2, "ng-container", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.headerItems);
} }
class LibraryConfig {
}
LibraryConfig.ɵfac = function LibraryConfig_Factory(t) { return new (t || LibraryConfig)(); };
LibraryConfig.ɵprov = ɵɵdefineInjectable({ factory: function LibraryConfig_Factory() { return new LibraryConfig(); }, token: LibraryConfig, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LibraryConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

class AppConfigService {
    constructor(httpHandler, libConfig) {
        this.httpHandler = httpHandler;
        this.libConfig = libConfig;
        this.config = new AsyncSubject();
        this.configEmitter = this.config.asObservable();
        // console.log("initing app config service");
    }
    loadAppConfig() {
        // console.log("loading app config");
        let http = new HttpClient(this.httpHandler);
        return http.get(this.libConfig.configurationPath).toPromise().then((data) => {
            this.appConfig = data;
            this.config.next(this.appConfig);
            this.config.complete();
        });
    }
    getConfig() {
        return this.appConfig;
    }
}
AppConfigService.ɵfac = function AppConfigService_Factory(t) { return new (t || AppConfigService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpBackend), ɵngcc0.ɵɵinject(LibraryConfig)); };
AppConfigService.ɵprov = ɵɵdefineInjectable({ factory: function AppConfigService_Factory() { return new AppConfigService(ɵɵinject(HttpBackend), ɵɵinject(LibraryConfig)); }, token: AppConfigService, providedIn: "root" });
AppConfigService.ctorParameters = () => [
    { type: HttpBackend },
    { type: LibraryConfig }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppConfigService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpBackend }, { type: LibraryConfig }]; }, null); })();

const PRECISION_SECONDS = 3;
const PRECISION_DECIMAL_DEGREES_FRACTION = 8;
const RE_ATOM = {
    start: '^\\s*',
    separator: '[ \\t,\\|]+',
    zone: '([zZ]([oO][nN][eE])?[ ])?',
    end: '\\s*$',
    numDec: '(\\d+(?:\\.\\d+)?)',
    numUTM: '(\\d+)'
};
const REGEXP_UTM = new RegExp(RE_ATOM.start +
    RE_ATOM.numDec +
    RE_ATOM.separator +
    RE_ATOM.numDec +
    RE_ATOM.separator + RE_ATOM.zone +
    RE_ATOM.numUTM +
    RE_ATOM.end);
const EPSG_GEOGRAPHIC = "EPSG:4326";
const SCALE = {
    '°': 'deg',
    '\'': 'min',
    '"': 'sec',
    '’': 'min',
    '”': 'sec',
};
const SCALE_FACTOR = {
    deg: 1, min: 60, sec: 3600
};
const LONG_MIN = -200;
const LONG_MAX = -100;
const LAT_MIN = 0;
const LAT_MAX = 90;
class SpatialUtilsService {
    constructor() {
    }
    convertPointCoordinatesToGeoJSON(coordinates) {
        return coordinates ? {
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates
            }
        } : undefined;
    }
    formatCoordinates(coordinates) {
        return this.formatDM(coordinates);
    }
    parseCoordinates(coordinatesText) {
        let longLat = this.parseLocation(coordinatesText);
        if (!longLat)
            return;
        let long = parseFloat(longLat[0].toFixed(PRECISION_DECIMAL_DEGREES_FRACTION));
        let lat = parseFloat(longLat[1].toFixed(PRECISION_DECIMAL_DEGREES_FRACTION));
        return [long, lat];
    }
    formatDM(lonlat) {
        if (!lonlat)
            return "";
        return toDM(lonlat[1]) + ', ' + toDM(lonlat[0]);
        function int(value) {
            if (value < 0) {
                return Math.ceil(value);
            }
            else {
                return Math.floor(value);
            }
        }
        function fraction(value) {
            var absValue = Math.abs(value);
            return absValue - Math.floor(absValue);
        }
        function toDM(value) {
            var degrees = int(value), minutes = fraction(value) * 60;
            return `${degrees} ${minutes.toFixed(PRECISION_SECONDS)}'`;
            0;
        }
    }
    // will be needed once more coordinate systems are handled - e.g. UTM
    parseLocation(s) {
        var lonlat = this.parseGeo(s);
        if (lonlat)
            return lonlat;
        return this.parseUTM(s);
    }
    getUTMCoordinate(s) {
        var match = REGEXP_UTM.exec(s);
        if (match) {
            var num = [
                parseInt(match[1]),
                parseInt(match[2]),
                parseInt(match[5])
            ];
            return num;
        }
        return null;
    }
    parseUTM(s) {
        var utm = this.getUTMCoordinate(s);
        if (!utm)
            return null;
        return this.convertUTM(utm);
    }
    convertUTM(num) {
        var easting = num[0];
        var northing = num[1];
        var zone = num[2];
        return this.transformUTMtoGeo([easting, northing, zone]);
    }
    transformUTMtoGeo(pt) {
        var utmZone = pt[2];
        Proj4js.defs['UTM'] = '+proj=utm +zone=' + utmZone;
        var source = new Proj4js.Proj('UTM');
        var dest = new Proj4js.Proj(EPSG_GEOGRAPHIC);
        var p = new Proj4js.Point(pt[0], pt[1]);
        Proj4js.transform(source, dest, p);
        return [p.x, p.y];
    }
    parseGeo(s) {
        // associate comma with following component, so it can be used to indicate deg
        var normalizedComma = (new String(s)).replace(/\s*,\s*/g, ' ,');
        // remove hemisphere indicators
        // TODO: use this information
        var noHemisphere = normalizedComma.replace(/[news]/ig, '').trim();
        try {
            var split = noHemisphere.split(/\s+/);
            var comps = split.map(function (c, i) {
                var m = c.match(/^([,]?)([-]?\d+[.]?\d*)([Â°'"â€™â€]?)$/);
                if (!m)
                    throw new Error('component not valid: ' + c);
                // scale specifier, if any
                var scale = SCALE[m[3]];
                // the first component, or one after a comma is assumed to be deg
                if (i == 0 || m[1])
                    if (scale && scale != 'deg')
                        throw new Error('component scale should be degrees: ' + c);
                    else
                        scale = 'deg';
                // only deg scale is allowed to be negative
                var val = parseFloat(m[2]);
                if (scale && scale != 'deg' && val < 0)
                    throw new Error('component should not be negative: ' + c);
                return {
                    val: val,
                    scale: scale
                };
            });
        }
        catch (e) {
            return;
        }
        if (comps.length < 2 || comps.length > 6)
            return;
        // prefer a parse that splits the components evenly into 2 halves
        // failing that, use longest possible set of components for the first ordinate
        switch (comps.length) {
            case 2:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 1), comps.slice(1, 2))); // 1 2
            case 3:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 2), comps.slice(2, 3))) // 12 3
                    ||
                        this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 1), comps.slice(1, 3))); // 1 23
            case 4:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 2), comps.slice(2, 4))) // 12 34
                    ||
                        this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 3), comps.slice(3, 4))) // 123 4
                    ||
                        this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 1), comps.slice(1, 4))); // 1 234
            case 5:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 3), comps.slice(3, 5))) // 123 45
                    ||
                        this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 2), comps.slice(2, 5))); // 12 345
            case 6:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 3), comps.slice(3, 6))); // 123 456
        }
        return;
    }
    checkRangeFixOrderSign(p) {
        if (!p)
            return;
        var x = p[0], y = p[1];
        return this.checkRangeFixOrder(x, y) ||
            this.checkRangeFixOrder(-x, y) ||
            this.checkRangeFixOrder(x, -y) ||
            this.checkRangeFixOrder(-x, -y);
    }
    checkRangeFixOrder(x, y) {
        return this.checkRange(y, x) ||
            this.checkRange(x, y);
    }
    checkRange(long, lat) {
        if (lat > LAT_MAX || lat < LAT_MIN)
            return;
        if (long > LONG_MAX || long < LONG_MIN)
            return;
        return [long, lat];
    }
    resolveDMSpair(compsA, compsB) {
        var dmsA = this.resolveDMS.apply(this, compsA);
        if (dmsA === false)
            return false;
        var dmsB = this.resolveDMS.apply(this, compsB);
        if (dmsB === false)
            return false;
        return [dmsA, dmsB];
    }
    resolveDMS(deg, min, sec) {
        if (deg == null)
            return false;
        if (deg.scale && deg.scale != 'deg')
            return false;
        if (min != null && min.scale && min.scale == 'deg')
            return false;
        if (sec != null && sec.scale && (sec.scale == 'deg' || sec.scale == 'min' || min.scale == 'sec'))
            return false;
        var val = deg.val;
        if (min == null)
            return val;
        // minutes not allowed to be negative
        if (min.val < 0)
            return false;
        val += this.sameSign(min.val, deg.val) / SCALE_FACTOR[min.scale || 'min'];
        if (sec == null)
            return val;
        // seconds not allowed to be negative
        if (sec.val < 0)
            return false;
        val += this.sameSign(sec.val, deg.val) / SCALE_FACTOR['sec'];
        return val;
    }
    sameSign(val, proto) {
        if (proto >= 0)
            return Math.abs(val);
        return -Math.abs(val);
    }
}
SpatialUtilsService.ɵfac = function SpatialUtilsService_Factory(t) { return new (t || SpatialUtilsService)(); };
SpatialUtilsService.ɵprov = ɵɵdefineInjectable({ factory: function SpatialUtilsService_Factory() { return new SpatialUtilsService(); }, token: SpatialUtilsService, providedIn: "root" });
SpatialUtilsService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SpatialUtilsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

const moment = momentInstance;
const OAUTH_LOCAL_STORAGE_KEY = 'oauth';
class TokenService {
    constructor(injector, appConfigService) {
        //console.log("initing token service", appConfigService.getConfig());
        this.injector = injector;
        this.appConfigService = appConfigService;
        this.LOCAL_STORAGE_KEY = OAUTH_LOCAL_STORAGE_KEY;
        this.useLocalStore = false;
        this.credentials = new AsyncSubject();
        this.authToken = new AsyncSubject();
        this.credentialsEmitter = this.credentials.asObservable();
        this.authTokenEmitter = this.authToken.asObservable();
        const lazyAuthenticate = appConfigService.getConfig().application.lazyAuthenticate;
        const enableLocalStorageToken = appConfigService.getConfig().application.enableLocalStorageToken;
        const localStorageTokenKey = appConfigService.getConfig().application.localStorageTokenKey;
        const allowLocalExpiredToken = appConfigService.getConfig().application.allowLocalExpiredToken;
        if (localStorageTokenKey) {
            this.LOCAL_STORAGE_KEY = localStorageTokenKey;
        }
        if (enableLocalStorageToken) {
            this.useLocalStore = true;
        }
        this.checkForToken(undefined, lazyAuthenticate, allowLocalExpiredToken);
    }
    /*
     * Check window location hash fragment or local storage session for access token.
     * Parse and set the token if the access token is present,
     * otherwise initiate implicit flow.
     *
     * @param {string} redirectUri The redirect URI after login is complete
     * @param {boolean} lazyAuth When true, allows application to handle when to login ( by default: false which will require login as soon as the application initializes)
     * @param {boolean} allowLocalExpiredToken When true, expired tokens are not removed and does not invoke login (allows token to be used even when expired for offline mode and service workers).
     */
    checkForToken(redirectUri, lazyAuth, allowLocalExpiredToken) {
        // console.log('redirect uri', redirectUri);
        let hash = window.location.hash;
        // Check if URL has token (redirected back from oauth)
        if (hash && hash.indexOf('access_token') > -1) {
            // We have a token in the URL, parse it
            this.parseToken(hash);
        }
        else if (this.useLocalStore && !navigator.onLine) {
            // Only use local storage if application is offline
            // this is to refresh expired tokens before check token is enabled, when there is connectivity
            // Check if local storage has a token
            let tokenStore = localStorage.getItem(this.LOCAL_STORAGE_KEY);
            // Parse the token
            if (tokenStore) {
                try {
                    tokenStore = JSON.parse(tokenStore);
                    this.initAuthFromSession();
                }
                catch (err) {
                    // Failed to parse the token, remove the old token and get a new token by logging in again
                    console.log('Failed to read session token - reinitializing');
                    this.tokenDetails = undefined;
                    localStorage.removeItem(this.LOCAL_STORAGE_KEY);
                    this.initImplicitFlow(redirectUri);
                }
            }
            else {
                // no token was found initiate login
                this.initImplicitFlow(redirectUri);
            }
            // Check if token is expired if it is not allowed
            if (!allowLocalExpiredToken && this.isTokenExpired(this.tokenDetails)) {
                localStorage.removeItem(this.LOCAL_STORAGE_KEY);
                this.initImplicitFlow(redirectUri);
            }
        }
        else if (hash && hash.indexOf('error') > -1) {
            alert('Error occurred during authentication.');
            return;
        }
        else {
            // login if lazy auth not enabled as we need a token
            if (!lazyAuth) {
                this.initImplicitFlow(redirectUri);
            }
        }
    }
    isTokenExpired(token) {
        let expiryDate;
        let now = moment();
        if (token && token.exp) {
            expiryDate = moment.unix(token.exp);
            if (now.isBefore(expiryDate)) {
                return false;
            }
        }
        return true;
    }
    /*
     * Parse token from a hash fragment
     * Example:
     *    #access_token=ABC&token_type=bearer&state=&expires_in=43199&scope=WFIM.GET_WILDFIRE_INCIDENT%20WFORG.GET_ORG_UNITS%&jti=3a642b53-d90e-4ee3-a00c-5cd780155225
     */
    parseToken(hash) {
        if (hash.startsWith('#')) {
            hash = hash.substr(1);
        }
        let responseParameters = (hash).split("&");
        let parameterMap = [];
        for (let i = 0; i < responseParameters.length; i++) {
            parameterMap[responseParameters[i].split("=")[0]] = responseParameters[i].split("=")[1];
        }
        if (parameterMap['access_token'] !== undefined && parameterMap['access_token'] !== null) {
            location.hash = '';
            this.initAuth(parameterMap);
        }
    }
    /*
     * Set authentication configuration and initiate implicit flow
     */
    initImplicitFlow(redirectUri) {
        const configuration = this.appConfigService.getConfig();
        let authConfig = {
            oidc: false,
            issuer: configuration.application.baseUrl,
            loginUrl: configuration.webade.oauth2Url,
            redirectUri: redirectUri ? redirectUri : window.location.href,
            clientId: configuration.webade.clientId,
            scope: configuration.webade.authScopes
        };
        // console.log('authConfig', authConfig);
        const oauthService = this.injector.get(OAuthService);
        oauthService.configure(authConfig);
        oauthService.initImplicitFlow();
    }
    /*
     * Set authentication configuration and initiate refresh token implicit flow
     */
    initRefreshTokenImplicitFlow(authorizeURL, storageKey, errorCallback) {
        const options = 'resizable=yes,scrollbars=yes,statusbar=yes,status=yes';
        let refreshWindow = window.open(authorizeURL, null, options);
        let refreshAsync = new AsyncSubject();
        let refreshInterval = setInterval(() => {
            if (!refreshWindow) {
                errorCallback('Session Expired. Unable to open refresh window. Please allow pop-ups.');
                refreshWindow = window.open(authorizeURL, null, options);
            }
            if (refreshWindow && refreshWindow.closed) {
                clearInterval(refreshInterval);
                let newToken = window.localStorage.getItem(`${storageKey}`);
                newToken = JSON.parse(newToken);
                window.localStorage.removeItem(`${storageKey}`);
                this.updateToken(newToken);
                refreshAsync.next(newToken);
                refreshAsync.complete();
            }
        }, 500);
        return refreshAsync.asObservable();
    }
    /*
     * initialize authentication from session in application, emit to subscribers
     */
    initAuthFromSession() {
        try {
            let localOauth = localStorage.getItem(this.LOCAL_STORAGE_KEY);
            localOauth = JSON.parse(localOauth);
            this.oauth = localOauth;
            this.initAndEmit();
        }
        catch (err) {
            localStorage.removeItem(this.LOCAL_STORAGE_KEY);
            console.log('Failed to handle token payload', this.oauth);
            this.handleError(err, 'Failed to handle token');
        }
    }
    /*
     * initialize authentication response in application, emit to subscribers
     */
    initAuth(response) {
        if (response) {
            try {
                if (this.useLocalStore) {
                    let tokenStore = {
                        access_token: response.access_token,
                        expires_in: response.expires_in
                    };
                    localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(tokenStore));
                }
                this.oauth = response;
                this.initAndEmit();
            }
            catch (err) {
                if (this.useLocalStore) {
                    localStorage.removeItem(this.LOCAL_STORAGE_KEY);
                }
                console.log('Failed to handle token payload', this.oauth);
                this.handleError(err, 'Failed to handle token');
            }
        }
    }
    /*
     * Initialize all token service attributes and emit
     */
    initAndEmit() {
        // console.log('init and emit', this.appConfigService.getConfig());
        if (this.appConfigService.getConfig().webade.enableCheckToken) {
            let baseUrl = this.appConfigService.getConfig().application.baseUrl;
            if (!baseUrl.endsWith('/')) {
                baseUrl = baseUrl.concat('/');
            }
            let checkTokenUrl = `${baseUrl}${this.appConfigService.getConfig().webade.checkTokenUrl}`;
            const headers = new HttpHeaders({
                'Authorization': `Bearer ${this.oauth.access_token}`,
            });
            // console.log('checkTokenUrl', checkTokenUrl);
            setTimeout(() => {
                let http = new HttpClient(this.injector.get(HttpHandler));
                http.get(checkTokenUrl, { headers }).toPromise()
                    .then((response) => {
                    this.tokenDetails = response;
                    // console.log('access_token', this.oauth.access_token);
                    this.authToken.next(this.oauth.access_token);
                    this.authToken.complete();
                    // console.log('tokenDetails', this.tokenDetails);
                    this.credentials.next(this.tokenDetails);
                    this.credentials.complete();
                })
                    , catchError(error => {
                        console.log(error);
                        alert(`App initialization Failed ${error.status}. Status(Check token failed)`);
                        return error;
                    });
            });
        }
        else {
            //Split for JWT
            const oauthInfo = this.oauth.access_token.split('.');
            // console.log('oauthInfo', oauthInfo);
            if (oauthInfo.length > 1) {
                this.tokenDetails = JSON.parse(atob(oauthInfo[1]));
            }
            // console.log('access_token2', this.oauth.access_token);
            this.authToken.next(this.oauth.access_token);
            this.authToken.complete();
            // console.log('tokenDetails2', this.tokenDetails);
            this.credentials.next(this.tokenDetails);
            this.credentials.complete();
        }
    }
    updateToken(oauthToken) {
        this.oauth = oauthToken;
        this.initAndEmit();
    }
    getOauthToken() {
        return (this.oauth) ? this.oauth.access_token : null;
    }
    getTokenDetails() {
        return (this.tokenDetails) ? this.tokenDetails : null;
    }
    doesUserHaveApplicationPermissions(scopes) {
        if (this.tokenDetails && this.tokenDetails.scope && this.tokenDetails.scope.length > 0) {
            if (scopes) {
                for (let i = 0; i < scopes.length; i++) {
                    if (this.tokenDetails.scope.indexOf(scopes[i]) == -1) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    }
    clearLocalStorageToken() {
        localStorage.removeItem(this.LOCAL_STORAGE_KEY);
    }
    handleError(err, message) {
        console.error('Unexpected error', err);
        alert(message ? message + ' ' + err : '' + err);
        throw err;
    }
}
TokenService.ɵfac = function TokenService_Factory(t) { return new (t || TokenService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(AppConfigService)); };
TokenService.ɵprov = ɵɵdefineInjectable({ factory: function TokenService_Factory() { return new TokenService(ɵɵinject(INJECTOR), ɵɵinject(AppConfigService)); }, token: TokenService, providedIn: "root" });
TokenService.ctorParameters = () => [
    { type: Injector },
    { type: AppConfigService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TokenService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: AppConfigService }]; }, null); })();

class ApplicationHeaderComponent {
    constructor(appConfig, token) {
        this.appConfig = appConfig;
        this.token = token;
    }
    ngOnInit() {
        const config = this.appConfig.getConfig();
        this.appVersion = config.application.version;
        this.acronym = config.application.acronym;
        this.environment = config.application.environment;
        this.buildNumber = config.application.buildNumber ? `.${config.application.buildNumber}` : '';
        this.token.credentialsEmitter.subscribe((credentialDetails) => {
            if (credentialDetails.given_name && credentialDetails.family_name) {
                this.userName = `${credentialDetails.given_name} ${credentialDetails.family_name}`;
            }
            else if (credentialDetails.givenName && credentialDetails.familyName) {
                this.userName = `${credentialDetails.givenName} ${credentialDetails.familyName}`;
            }
        });
    }
}
ApplicationHeaderComponent.ɵfac = function ApplicationHeaderComponent_Factory(t) { return new (t || ApplicationHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(AppConfigService), ɵngcc0.ɵɵdirectiveInject(TokenService)); };
ApplicationHeaderComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ApplicationHeaderComponent, selectors: [["wf1-application-header"]], inputs: { titleText: "titleText" }, decls: 10, vars: 3, consts: [["color", "primary", 1, "mat-typography", "wf1-application-header"], [1, "bc-logo-div"], ["src", "assets/images/logo/bcgov-logo.png", "alt", "BC Gov", 1, "img-fluid", "center-block", "logo"], [1, "app-logo-and-title-div"], ["src", "assets/images/logo/wildfire-one-logo-text-horizontal-light.png", "alt", "Wildfire ONE", 1, "img-fluid", "center-block", "logo"], ["id", "header-title", 1, "mat-title"], [1, "system-and-user-info", "mat-caption"], [4, "ngIf"], [1, "header-caption-label"], [1, "header-caption-text"]], template: function ApplicationHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-toolbar", 0)(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "img", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelement(4, "img", 4);
        ɵngcc0.ɵɵelementStart(5, "span", 5);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(7, "div", 6);
        ɵngcc0.ɵɵtemplate(8, ApplicationHeaderComponent_div_8_Template, 5, 4, "div", 7);
        ɵngcc0.ɵɵtemplate(9, ApplicationHeaderComponent_div_9_Template, 5, 1, "div", 7);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1("- ", ctx.titleText, "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.appVersion);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.userName);
    } }, dependencies: [ɵngcc2.NgIf, ɵngcc3.MatToolbar], encapsulation: 2 });
ApplicationHeaderComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: TokenService }
];
ApplicationHeaderComponent.propDecorators = {
    titleText: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApplicationHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-application-header',
                template: "<mat-toolbar class=\"mat-typography wf1-application-header\" color=\"primary\">\n  <div class=\"bc-logo-div\">\n    <img src=\"assets/images/logo/bcgov-logo.png\" class=\"img-fluid center-block logo\" alt=\"BC Gov\">\n  </div>\n  <div class=\"app-logo-and-title-div\">\n    <img src=\"assets/images/logo/wildfire-one-logo-text-horizontal-light.png\" class=\"img-fluid center-block logo\" alt=\"Wildfire ONE\">\n    <span class=\"mat-title\" id=\"header-title\">- {{ titleText }}</span>\n  </div>\n  <div class=\"system-and-user-info mat-caption\">\n    <div *ngIf=\"appVersion\">\n      <p class=\"header-caption-label\">SYSTEM: </p>\n      <p class=\"header-caption-text\"> {{ acronym }} {{ appVersion }}{{ buildNumber }} {{ environment }} </p>\n    </div>\n    <div *ngIf=\"userName\">\n      <p class=\"header-caption-label\">USER: </p>\n      <p class=\"header-caption-text\"> {{ userName }} </p>\n    </div>\n  </div>\n</mat-toolbar>\n"
            }]
    }], function () { return [{ type: AppConfigService }, { type: TokenService }]; }, { titleText: [{
            type: Input
        }] }); })();

var IconType;
(function (IconType) {
    IconType["INCIDENT"] = "incident";
    IconType["INCIDENT_WITH_STATUS"] = "incident-with-status";
    IconType["INCIDENT_AGENCY_ASSIST"] = "incident-agency-assist";
    IconType["INCIDENT_FIELD_ACTIVITY"] = "incident-field-activity";
    IconType["REPORT_OF_FIRE"] = "report-of-fire";
    IconType["NO_MORE_REPORT_OF_FIRE"] = "no-more-report-of-fire";
    IconType["NO_MORE_REPORT_OF_FIRE_DARK"] = "no-more-report-of-fire-dark";
    IconType["NO_MORE_REPORT_OF_FIRE_LIGHT"] = "no-more-report-of-fire-light";
    IconType["PLACE_NAME_SEARCH"] = "place-name-search";
    IconType["POINT_ID"] = "point-id";
    IconType["FILTER_CANCEL"] = "filter-cancel";
})(IconType || (IconType = {}));
var IconSize;
(function (IconSize) {
    IconSize["DEFAULT"] = "toolbar";
    IconSize["TOOLBAR"] = "toolbar";
    IconSize["LIST_SMALL"] = "list-small";
    IconSize["LIST_LARGE"] = "list-large";
})(IconSize || (IconSize = {}));
var IncidentType;
(function (IncidentType) {
    IncidentType["DEFAULT"] = "wf1-incident-icon-default";
    IncidentType["OUT"] = "wf1-incident-icon-out";
    IncidentType["BEING_HELD"] = "wf1-incident-icon-being-held";
    IncidentType["NOT_SET"] = "wf1-incident-icon-not-set";
    IncidentType["OUT_OF_CONTROL"] = "wf1-incident-icon-out-of-control";
    IncidentType["UNDER_CONTROL"] = "wf1-incident-icon-under-control";
})(IncidentType || (IncidentType = {}));
var IncidentTypeWithStatus;
(function (IncidentTypeWithStatus) {
    IncidentTypeWithStatus["ACTIVE"] = "wf1-incident-with-status-icon-active";
    IncidentTypeWithStatus["COMPLETED"] = "wf1-incident-with-status-icon-completed";
})(IncidentTypeWithStatus || (IncidentTypeWithStatus = {}));
var IncidentTypeAgencyAssist;
(function (IncidentTypeAgencyAssist) {
    IncidentTypeAgencyAssist["ACTIVE"] = "wf1-incident-agency-assist-icon-active";
    IncidentTypeAgencyAssist["COMPLETED"] = "wf1-incident-agency-assist-icon-completed";
})(IncidentTypeAgencyAssist || (IncidentTypeAgencyAssist = {}));
var IncidentTypeFieldActivity;
(function (IncidentTypeFieldActivity) {
    IncidentTypeFieldActivity["ACTIVE"] = "wf1-incident-field-activity-icon-active";
    IncidentTypeFieldActivity["COMPLETED"] = "wf1-incident-field-activity-icon-completed";
})(IncidentTypeFieldActivity || (IncidentTypeFieldActivity = {}));
var ReportOfFireType;
(function (ReportOfFireType) {
    ReportOfFireType["DEFAULT"] = "wf1-rof-icon-default";
    ReportOfFireType["GENERAL"] = "wf1-rof-icon-general";
    ReportOfFireType["INTERFACE"] = "wf1-rof-icon-interface";
    ReportOfFireType["CAMPFIRE"] = "wf1-rof-icon-campfire";
    ReportOfFireType["CIGARETTE"] = "wf1-rof-icon-cigarette";
})(ReportOfFireType || (ReportOfFireType = {}));
const Icons = {
    incident: {
        icon: `
      <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="189.000000pt" height="191.000000pt"
           viewBox="0 0 189.000000 191.000000" preserveAspectRatio="xMidYMid meet">
        <g transform="translate(0.000000,191.000000) scale(0.100000,-0.100000)" stroke="none">
          <path d="M493 1407 c-366 -365 -423 -426 -423 -452 0 -25 38 -67 262 -292
          l262 -263 103 0 c57 0 103 4 103 9 0 4 -30 26 -66 47 -122 71 -191 172 -201
          293 -8 95 14 161 90 271 84 123 117 187 117 229 0 47 12 67 28 48 22 -26 40
          -82 47 -147 l8 -65 27 34 c78 93 58 271 -47 409 -18 23 -33 45 -33 48 0 12 76
          -8 130 -34 67 -33 191 -154 239 -235 79 -133 109 -267 91 -399 -6 -39 -13 -74
          -16 -79 -14 -23 17 -5 44 25 33 38 51 84 62 160 l7 51 28 -59 c90 -190 -11
          -466 -203 -555 -80 -37 -69 -51 41 -51 l92 0 262 262 c143 145 264 274 268
          287 6 21 -40 70 -421 452 -337 337 -434 429 -454 429 -19 0 -116 -91 -447
          -423z"/>
          <path d="M878 985 c-48 -80 -53 -95 -37 -95 10 0 19 -2 19 -4 0 -2 -16 -32
            -34 -65 -25 -44 -31 -61 -20 -61 19 0 19 -2 -18 -73 -18 -34 -34 -65 -36 -69
          -2 -5 6 -8 17 -8 12 0 21 -2 21 -3 0 -2 -13 -28 -30 -58 -16 -30 -30 -57 -30
          -61 0 -4 33 -8 73 -10 l72 -3 3 -59 3 -59 -120 6 c-67 3 -121 2 -121 -2 0 -4
          62 -69 138 -144 99 -98 145 -137 162 -137 17 0 63 39 162 137 76 75 138 141
          138 146 0 5 -49 8 -112 6 l-113 -4 -3 52 c-3 60 -2 61 100 65 l56 3 -34 58
          c-19 32 -34 60 -34 62 0 3 9 5 20 5 26 0 26 3 -15 77 -29 52 -32 65 -20 69 13
          5 10 16 -16 62 -28 48 -30 56 -17 66 14 10 8 24 -39 104 -31 50 -61 92 -67 92
          -6 -1 -36 -43 -68 -95z"/>
        </g>
      </svg>
    `,
        halo: `
      <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="189.000000pt" height="191.000000pt"
           viewBox="0 0 189.000000 191.000000" preserveAspectRatio="xMidYMid meet">
        <g transform="translate(0.000000,191.000000) scale(0.100000,-0.100000)" stroke="none">
          <path d="M910 1870 c-39 -24 -882 -878 -887 -898 -3 -13 -2 -32 3 -43 10 -22
          860 -875 887 -891 11 -5 29 -7 40 -4 29 7 903 884 912 914 6 21 -44 75 -447
          478 -297 298 -460 454 -473 454 -11 0 -27 -4 -35 -10z"/>
        </g>
      </svg>
    `
    },
    incidentAgencyAssist: {
        icon: `
        <svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" 
        xmlns="http://www.w3.org/2000/svg">
            <g>
                <path d="m483.577 335.232c-4.061-5.345-9.542-9.517-15.783-11.989-10.92-4.325-22.773-3.425-32.737 
                  2.328l-65.792 37.985c-.373 5.55-1.426 11.155-3.267 16.71-11.309 34.118-47.824 53.021-82.542 
                  43.718l-65.035-17.426c-8.002-2.144-12.751-10.369-10.607-18.371 2.144-8.002 10.369-12.751 
                  18.371-10.607l66.028 17.692c20.005 5.36 40.568-6.511 45.928-26.516 
                  5.36-20.005-6.512-40.568-26.516-45.928l-100.807-27.011c-19.351-5.185-39.562-2.525-56.911 
                  7.492l-125.702 72.575c-7.174 4.142-9.633 13.316-5.49 20.49l62.426 108.126c1.989 3.446 5.265 5.959 
                  9.108 6.989s7.937.491 11.382-1.499l56.689-32.729 121.262 7.822c14.825.955 29.461-2.466 
                  42.327-9.894l146.648-84.666c19.295-11.142 24.947-36.96 11.02-55.291z"/>
                <path d="m156 240h200c8.284 0 15-6.716 15-15 0-39.813-20.34-74.962-51.171-95.612-16.612 15.86-39.103 
                    25.612-63.829 25.612s-47.217-9.752-63.829-25.612c-30.831 20.65-51.171 55.799-51.171 95.612 0 8.284 
                    6.716 15 15 15z"/><circle cx="256" cy="62.5" r="62.5"/>
            </g>
        </svg>
    `,
        halo: `
      <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="189.000000pt" height="191.000000pt"
           viewBox="0 0 189.000000 191.000000" preserveAspectRatio="xMidYMid meet">
        <g transform="translate(0.000000,191.000000) scale(0.100000,-0.100000)" stroke="none">
          <path d="M910 1870 c-39 -24 -882 -878 -887 -898 -3 -13 -2 -32 3 -43 10 -22
          860 -875 887 -891 11 -5 29 -7 40 -4 29 7 903 884 912 914 6 21 -44 75 -447
          478 -297 298 -460 454 -473 454 -11 0 -27 -4 -35 -10z"/>
        </g>
      </svg>
    `
    },
    incidentFieldActivity: {
        icon: `

      <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
        x="0px" y="0px" viewBox="0 0 511.999 511.999" style="enable-background:new 0 0 511.999 511.999;" 
        xml:space="preserve">
        <g>
            <g>
              <path d="M507.408,145.509l-73.855-17.919l-16.404-11.476l8.541-12.21c4.603-6.58,
                3-15.647-3.58-20.25l-27.314-19.108c-6.58-4.603-15.647-3-20.25,3.58l-8.541,
                12.21l-7.72-5.4c-6.928-4.847-16.473-3.159-21.32,3.769l-45.227,64.653c-4.847,6.928-3.159,16.474,3.769,
                21.32l7.72,5.4l-26.752,38.243l38.085,54.444l39.81-56.91l16.404,11.476l42.155,63.234c1.614,2.422,4.736,
                3.341,7.402,2.173c11.908-5.219,43.951-21.367,65.302-51.889c21.351-30.522,25.533-66.16,26.353-79.135
                C512.171,148.805,510.242,146.196,507.408,145.509z"/>
            </g>
        </g>
        <g>
            <g>
              <path d="M197.44,321.307l-60.711,86.788c-4.603,6.58-3,15.647,3.58,20.25l27.314,19.107c6.58,4.603,15.647,3,20.25-3.58
              l47.652-68.12L197.44,321.307z"/>
            </g>
        </g>
        <g>
            <g>
              <path d="M375.27,408.096L208.773,170.082l7.72-5.4c6.928-4.847,8.616-14.392,3.769-21.32l-45.227-64.654
              c-4.847-6.928-14.392-8.616-21.32-3.769l-7.72,5.4l-8.541-12.21c-4.603-6.579-13.668-8.184-20.25-3.58L89.89,83.655
              c-6.58,4.603-8.183,13.669-3.58,20.25l8.541,12.21L78.447,127.59l-14.122,3.426L4.591,145.509
              c-2.829,0.687-4.763,3.303-4.579,6.208c0.819,12.976,5.002,48.613,26.353,79.135c21.351,30.522,53.394,46.67,65.302,51.889
              c2.671,1.171,5.784,0.254,7.402-2.173l34.095-51.144l8.06-12.091l16.404-11.476l166.498,238.015
              c4.603,6.58,13.668,8.183,20.25,3.58l27.314-19.106C378.27,423.743,379.873,414.676,375.27,408.096z"/>
            </g>
        </g>      
        <g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>
      </svg>
    `,
        halo: `
      <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="189.000000pt" height="191.000000pt"
           viewBox="0 0 189.000000 191.000000" preserveAspectRatio="xMidYMid meet">
        <g transform="translate(0.000000,191.000000) scale(0.100000,-0.100000)" stroke="none">
          <path d="M910 1870 c-39 -24 -882 -878 -887 -898 -3 -13 -2 -32 3 -43 10 -22
          860 -875 887 -891 11 -5 29 -7 40 -4 29 7 903 884 912 914 6 21 -44 75 -447
          478 -297 298 -460 454 -473 454 -11 0 -27 -4 -35 -10z"/>
        </g>
      </svg>
    `
    },
    rof: {
        icon: `
      <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="245.000000pt" height="245.000000pt"
           viewBox="0 0 245.000000 245.000000" preserveAspectRatio="xMidYMid meet">
        <g transform="translate(0.000000,245.000000) scale(0.100000,-0.100000)" stroke="none">
          <path d="M1631 2331 c-14 -14 -21 -34 -21 -59 0 -104 -52 -218 -162 -357 -107
            -135 -123 -176 -123 -310 0 -96 3 -116 24 -155 47 -91 122 -146 229 -169 80
          -17 79 -17 87 46 4 32 16 87 27 123 22 70 91 214 108 225 14 9 104 -183 124
          -266 9 -36 16 -82 16 -103 l0 -38 48 6 c107 15 152 35 208 90 44 45 56 65 75
          126 18 61 21 87 16 164 -10 156 -60 276 -117 276 -12 0 -54 -32 -100 -75 -122
          -114 -119 -114 -113 8 10 192 -58 350 -189 440 -70 48 -109 56 -137 28z"/>
          <path d="M525 2190 c-36 -15 -353 -343 -360 -373 -11 -41 1 -95 41 -190 219
            -525 1022 -1308 1541 -1503 53 -20 77 -24 113 -19 42 6 56 18 216 178 183 183
          196 204 175 270 -8 23 -84 105 -239 259 -288 285 -280 283 -430 135 l-82 -82
          -287 287 -287 287 87 90 c87 90 87 90 87 143 l0 52 -222 224 c-123 123 -235
          230 -250 238 -30 15 -72 17 -103 4z"/>
        </g>
      </svg>
    `,
        halo: `
      <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="245.000000pt" height="245.000000pt"
      viewBox="0 0 245.000000 245.000000" preserveAspectRatio="xMidYMid meet">
        <g transform="translate(0.000000,245.000000) scale(0.100000,-0.100000)" stroke="none">
        <path d="M1600 2428 c-60 -30 -90 -77 -90 -139 0 -100 -37 -179 -150 -319 -29
          -36 -71 -103 -94 -150 l-41 -85 0 -130 c0 -125 1 -132 32 -197 62 -132 175
        -209 335 -229 133 -17 154 0 177 147 6 39 16 84 22 100 l12 29 18 -55 c10 -30
        18 -72 18 -93 2 -95 54 -131 176 -125 145 8 255 75 318 196 66 124 74 305 23
        468 -34 105 -58 141 -109 164 -54 25 -98 25 -148 0 -44 -23 -40 -26 -59 55
        -34 149 -146 295 -272 355 -75 36 -109 37 -168 8z"/>
        <path d="M480 2279 c-63 -28 -362 -326 -395 -393 -48 -96 -30 -189 75 -396
        145 -283 403 -604 717 -893 259 -237 470 -390 693 -502 201 -101 284 -115 379
        -65 46 24 363 343 387 390 26 50 24 143 -3 195 -26 48 -465 486 -510 509 -43
        21 -154 21 -195 0 -18 -9 -55 -38 -83 -65 l-51 -48 -214 214 -215 215 52 52
        c28 29 58 67 67 85 23 45 21 144 -3 191 -29 54 -477 498 -523 517 -51 21 -124
        19 -178 -6z"/>
        </g>
      </svg>
    `
    },
    nrof: {
        icon: `
      <svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" 
      viewBox="0 0 322.723 322.723" height="430.297" width="430.297"><defs><symbol >
      <g stroke="none"><path d="M1600 2428c-60-30-90-77-90-139 0-100-37-179-150-319-29-36-71-103-94-150l-41-85v-130c0-125 
      1-132 32-197 62-132 175-209 335-229 133-17 154 0 177 147 6 39 16 84 22 100l12 29 18-55c10-30 18-72 18-93 2-95 54-131 
      176-125 145 8 255 75 318 196 66 124 74 305 23 468-34 105-58 141-109 164-54 25-98 25-148 0-44-23-40-26-59 55-34 149-146 
      295-272 355-75 36-109 37-168 8zM480 2279c-63-28-362-326-395-393-48-96-30-189 75-396 145-283 403-604 717-893 259-237 
      470-390 693-502 201-101 284-115 379-65 46 24 363 343 387 390 26 50 24 143-3 195-26 48-465 486-510 509-43 21-154 21-195 
      0-18-9-55-38-83-65l-51-48-429 429 52 52c28 29 58 67 67 85 23 45 21 144-3 191-29 54-477 498-523 517-51 21-124 19-178-6z" 
      fill="#fff" transform="matrix(.1 0 0 -.1 35.477344 281.60534)"/><path d="M1631 2331c-14-14-21-34-21-59 0-104-52-218-162-357-107-135-123-176-123-310
       0-96 3-116 24-155 47-91 122-146 229-169 80-17 79-17 87 46 4 32 16 87 27 123 22 70 91 214 108 225 14 9 104-183 124-266 9-36 16-82 16-103v-38l48 
       6c107 15 152 35 208 90 44 45 56 65 75 126 18 61 21 87 16 164-10 156-60 276-117 276-12 0-54-32-100-75-122-114-119-114-113 8 10 192-58 350-189 440-70 
       48-109 56-137 28zM525 2190c-36-15-353-343-360-373-11-41 1-95 41-190C425 1102 1228 319 1747 124c53-20 77-24 113-19 42 6 56 18 216 178 183 183 196 204 
       175 270-8 23-84 105-239 259-288 285-280 283-430 135l-82-82-574 574 87 90c87 90 87 90 87 143v52l-222 224c-123 123-235 230-250 238-30 15-72 17-103 4z" 
       transform="matrix(.1 0 0 -.1 35.510667 281.87686)"/></g></symbol></defs><path d="M103.432 95.678c-2.533 1.056-24.84 24.137-25.334 26.25-.774 2.885.07
        6.685 2.885 13.37 15.41 36.945 71.92 92.046 108.442 105.768 3.73 1.407 5.42 1.69 7.952 1.337 2.956-.422 3.94-1.267 15.2-12.526 12.878-12.878 
        13.793-14.356 12.315-19-.563-1.62-5.91-7.39-16.82-18.226-20.267-20.056-19.704-19.915-30.26-9.5l-5.77 5.77-40.393-40.393 6.122-6.333c6.122-6.333 
        6.122-6.333 6.122-10.063v-3.66l-15.622-15.763c-8.656-8.656-16.537-16.185-17.593-16.748-2.11-1.056-5.067-1.196-7.248-.28zm77.83-9.922c-.985.985-1.478 
        2.393-1.478 4.152 0 7.32-3.66 15.34-11.4 25.123-7.53 9.5-8.656 12.385-8.656 21.815 0 6.756.21 8.163 1.69 10.908 3.307 6.404 8.585 10.274 16.115 
        11.893 5.63 1.196 5.56 1.196 6.122-3.237.28-2.252 1.126-6.122 1.9-8.656 1.548-4.926 6.404-15.06 7.6-15.834.985-.633 7.32 12.878 8.726 18.72.633 
        2.533 1.126 5.77 1.126 7.248v2.674l3.378-.422c7.53-1.056 10.696-2.463 14.637-6.333 3.096-3.167 3.94-4.574 5.278-8.867 1.267-4.293 1.478-6.122 
        1.126-11.54-.704-10.978-4.222-19.422-8.233-19.422-.844 0-3.8 2.252-7.037 5.278-8.585 8.022-8.374 8.022-7.952-.563.704-13.51-4.082-24.63-13.3-30.963-4.926-3.378-7.67-3.94-9.64-1.97zM228.2-.001L94.524.001 
        0 94.523.001 228.2l94.523 94.524 133.677.001 94.523-94.525-.001-133.676-9.344-9.344zM107.74 31.906h107.246l75.834 75.834v107.246l-75.834 75.833H107.74l-75.834-75.833V107.74z" 
        fill="#263238" paint-order="markers stroke fill"/></svg>
    `,
        dark: `<svg xmlns="http://www.w3.org/2000/svg" width="430.667" height="430.667" viewBox="0 0 323 323" xmlns:v="https://vecta.io/nano"><style><![CDATA[.B{dominant-baseline:auto}]]></style><path d="M103 19.7l-83 83v117l83 83h117l83-83v-117l-83-83z" fill="#fff" stroke="#fff" stroke-linejoin="round" stroke-width="39.5" paint-order="markers stroke fill" class="B"/><g transform="matrix(.878 0 0 .878 19.7 19.7)"><path d="M94.5 0L0 94.5l.001 134L94.5 323h134l94.5-94.5v-134L228.5.001z" fill="maroon" paint-order="markers stroke fill" class="B"/><path d="M225 8.45L98 8.452l-89.6 89.6.002 127 89.6 89.6h127l89.6-89.6-.002-127-6.87-6.87z" fill="#d40000" paint-order="markers stroke fill" class="B"/><path d="M107 87.3c-2.26-.094-4.56.335-6.9 1.32-3.044 1.272-2.834 1.732-3.854 2.612l-3.45 3.17c-2.57 2.45-5.66 5.56-8.7 8.7s-6 6.3-8.3 8.9c-1.16 1.3-2.14 2.45-2.96 3.48a24.79 24.79 0 0 0-1.15 1.55c-.367.548-.83.73-1.4 3.02-1.52 5.8.25 11.1 3.23 18.2.006.013.007.018.01.024 8.47 20.3 26.9 43.5 48 64.1s44.6 38.3 64.8 45.9c4.132 1.56 8.162 2.25 11.702 1.76l.014-.002.016-.002c2.07-.295 5.68-1.73 8.28-3.88s5.6-5.18 11.3-10.8c6.48-6.48 10-9.95 12.6-13.8 2.52-3.9 2.6-9.9 1.64-12.9l-.03-.098-.033-.096c-.913-2.62-1.64-3.1-2.6-4.28-.942-1.18-2.1-2.48-3.55-4.06-2.9-3.15-7.02-7.35-12.5-12.8l-.006-.006-.006-.004c-10.1-10-14.1-15.6-21.9-18-3.9-1.23-8.83-.037-11.7 1.88-2.87 1.9-4.86 4.08-7.46 6.65l-.018.02-.373.373-29.7-29.7.89-.922c3.06-3.17 4.76-4.66 6.4-7.35 1.64-2.7 1.88-6.17 1.88-8.04v-6.8l-17.912-18.012-11.8-11.5-4.13-3.85c-.558-.502-1.04-.927-1.5-1.3-.464-.385-.477-.584-2-1.4l-.1-.047-.1-.045c-2.2-1.1-4.44-1.72-6.7-1.82zm76.4-10.2c-2.9.19-6.04 1.4-7.92 3.27-2.66 2.66-3.72 6.38-3.72 9.57 0 4.77-2.54 11.3-9.75 20.4-7.77 9.8-10.3 16.5-10.3 26.6 0 3.46.012 5.75.38 8.12.362 2.35 1.28 4.63 2.2 6.34 4.26 8.2 12 13.8 21.3 15.8l.008.002.01.002c1.4.298 2.52.558 3.9.73s3.48.516 6.27-.977 4.14-4.46 4.55-5.97c.402-1.52.46-2.46.6-3.54v-.014c.18-1.45 1.03-5.4 1.62-7.34.05-.16.26-.59.326-.783.358 1 1.1 2.67 1.24 3.2l.016.062c.488 1.95.896 5.6.896 5.4v11.3l12.057-1.508c8.16-1.14 14.2-3.8 18.9-8.45l.057-.055.055-.057c3.4-3.48 5.65-7.23 7.1-11.9l.016-.057.018-.055c1.37-4.64 1.8-8.48 1.42-14.2l.002.006c-.396-6.18-1.5-11.7-3.46-16.3-.974-2.3-2.13-4.43-3.95-6.37s-4.77-3.9-8.46-3.9c-3.6 0-3.96.923-4.84 1.43s-1.6 1.02-2.4 1.62c-.157.12-.346.308-.506.432-1.48-11.7-6.96-22-16.2-28.4l-.004-.004c-2.85-1.95-5.34-3.48-8.72-4.18-.847-.173-1.78-.222-2.74-.158z" fill="maroon" paint-order="markers stroke fill" class="B"/><path d="M103 95.7c-2.53 1.06-24.8 24.1-25.3 26.2-.774 2.9.07 6.7 2.9 13.4 15.4 36.9 71.9 92 108 106 3.73 1.4 5.42 1.7 7.95 1.34 2.96-.422 3.94-1.27 15.2-12.5 12.9-12.9 13.8-14.4 12.3-19-.563-1.62-5.9-7.4-16.8-18.2-20.3-20.1-19.7-19.9-30.3-9.5l-5.77 5.77-40.4-40.4 6.12-6.33c6.12-6.33 6.12-6.33 6.12-10.1v-3.66l-15.6-15.8c-8.66-8.66-16.5-16.2-17.6-16.7-2.1-1.06-5.07-1.2-7.25-.28zm77.8-9.92c-.985.985-1.48 2.4-1.48 4.15 0 7.32-3.66 15.3-11.4 25.1-7.53 9.5-8.66 12.4-8.66 21.8 0 6.76.21 8.16 1.7 10.9 3.3 6.4 8.6 10.3 16.1 11.9 5.63 1.2 5.56 1.2 6.12-3.24.282-2.25 1.13-6.12 1.9-8.66 1.55-4.93 6.4-15.1 7.6-15.8.985-.633 7.32 12.9 8.73 18.7.633 2.53 1.13 5.77 1.13 7.25v2.67l3.38-.422c7.53-1.06 10.7-2.46 14.6-6.33 3.1-3.17 3.94-4.57 5.28-8.87 1.27-4.3 1.48-6.12 1.13-11.5-.704-11-4.22-19.4-8.23-19.4-.844 0-3.8 2.25-7.04 5.28-8.6 8.02-8.37 8.02-7.95-.563.704-13.5-4.08-24.6-13.3-31-4.93-3.38-7.67-3.94-9.64-1.97z" fill="#fff" paint-order="markers stroke fill"/><path d="M222 121c.01-.006-.046.17-.492.344L222 121zm-136.9 4c-.16.3-.26.343-.258.34l.258-.34zM199 137c.024-.035.042.067-.207.34L199 137zm19 76c.005.016.01.005.014.02z" paint-order="markers stroke fill" fill="maroon" class="B"/></g></svg>`,
        light: `<svg xmlns="http://www.w3.org/2000/svg" width="430.667" height="430.667" viewBox="0 0 323 323" xmlns:v="https://vecta.io/nano"><g transform="matrix(.878 0 0 .878 19.7 19.7)"><path d="M94.5 0L0 94.5l.001 134L94.5 323h134l94.5-94.5v-134L228.5.001z" dominant-baseline="auto" fill="#fff" stroke="#fff" stroke-linejoin="round" stroke-width="45" paint-order="markers stroke fill"/><path d="M94.5 0L0 94.5l.001 134L94.5 323h134l94.5-94.5v-134L228.5.001z" dominant-baseline="auto" fill="maroon" paint-order="markers stroke fill"/><path d="M101 16l-85.2 85.2v120l85.2 85.2h120l85.2-85.2v-120L221 16z" dominant-baseline="auto" fill="none" stroke="#d40000" stroke-width="15" paint-order="markers stroke fill"/><path d="M290.78 107.676l-.055 107.28-75.845 75.87-107.28-.055-75.87-75.845.055-107.28 75.845-75.87 107.28.055z" fill="#fff" paint-order="markers stroke fill"/><path d="M103 95.7c-2.53 1.06-24.8 24.1-25.3 26.2-.774 2.9.07 6.7 2.9 13.4 15.4 36.9 71.9 92 108 106 3.73 1.4 5.42 1.7 7.95 1.34 2.96-.422 3.94-1.27 15.2-12.5 12.9-12.9 13.8-14.4 12.3-19-.563-1.62-5.9-7.4-16.8-18.2-20.3-20.1-19.7-19.9-30.3-9.5l-5.77 5.77-40.4-40.4 6.12-6.33c6.12-6.33 6.12-6.33 6.12-10.1v-3.66l-15.6-15.8c-8.66-8.66-16.5-16.2-17.6-16.7-2.1-1.06-5.07-1.2-7.25-.28zm77.8-9.92c-.985.985-1.48 2.4-1.48 4.15 0 7.32-3.66 15.3-11.4 25.1-7.53 9.5-8.66 12.4-8.66 21.8 0 6.76.21 8.16 1.7 10.9 3.3 6.4 8.6 10.3 16.1 11.9 5.63 1.2 5.56 1.2 6.12-3.24.282-2.25 1.13-6.12 1.9-8.66 1.55-4.93 6.4-15.1 7.6-15.8.985-.633 7.32 12.9 8.73 18.7.633 2.53 1.13 5.77 1.13 7.25v2.67l3.38-.422c7.53-1.06 10.7-2.46 14.6-6.33 3.1-3.17 3.94-4.57 5.28-8.87 1.27-4.3 1.48-6.12 1.13-11.5-.704-11-4.22-19.4-8.23-19.4-.844 0-3.8 2.25-7.04 5.28-8.6 8.02-8.37 8.02-7.95-.563.704-13.5-4.08-24.6-13.3-31-4.93-3.38-7.67-3.94-9.64-1.97z" fill="maroon" paint-order="markers stroke fill"/><path d="M186 94c-1.4 13.4-12.2 22.7-18.3 33.9-4.02 8.6-1.9 21.5 8.27 24.5 2.28.517 1.4-4.28 2.53-5.88 2.34-7.63 5.43-16.1 12-20.9 2.37-1.16 5.88.477 7.1 1.42-2.42-5.68.83-11.8-1.18-17.7-1.3-6.42-4.54-13-10.4-16.3l-.08.847zm-80.1 8.37c-6.62 4.6-11 11.7-17.2 16.8-3.13 2.45-5.15 6.3-2.95 10.1 5.93 17.6 18.6 31.8 30.2 46.1 21.2 24.2 46 45.9 75.3 59.4 4.55 2.2 8.42-1.2 11-4.65 5.02-5.6 11.8-10.2 15.5-16.7-3.34-5.87-9.73-9.52-13.9-14.9-5.15-5.3-10.2-11.8-16.9-14.9-5.28 3.57-8.1 12.2-15.7 11.5-8.03-1-11.1-9.78-17-14.1l-31.8-31.9c3.05-7.2 12.2-10.2 14.1-17.7-3.88-5.65-9.98-9.32-14.3-14.7-5.13-4.86-9.98-11.7-16.3-14.4zm112 20.5c-4.26 4.18-9.8 11.4-16.6 8.2-1.6-1.05 1.26 2.53 1.3 3.54 2.74 5.9 5.34 12 6.46 18.4 9.67-2.46 13-13.5 11.1-22.3-.337-2.58-.807-5.98-2.22-7.8z" fill="#d40000" paint-order="markers stroke fill"/></g></svg>`
    },
    placeNameSearch: {
        icon: `
      <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="309.000000pt" height="308.000000pt"
           viewBox="0 0 309.000000 308.000000" preserveAspectRatio="xMidYMid meet">
        <g transform="translate(0.000000,308.000000) scale(0.100000,-0.100000)" stroke="none">
        <path d="M1086 3004 c-380 -69 -718 -321 -891 -664 -277 -550 -126 -1213 360
        -1578 87 -66 305 -175 405 -202 340 -94 697 -50 981 121 l83 50 321 -320 c176
        -175 336 -327 355 -337 47 -24 143 -24 190 0 83 43 133 118 133 201 1 102 -1
        105 -350 456 l-324 326 47 76 c211 352 228 821 43 1189 -89 177 -261 379 -406
        477 -146 98 -340 176 -507 206 -110 19 -332 18 -440 -1z m411 -459 c241 -56
        464 -248 558 -482 69 -171 73 -386 10 -565 -29 -83 -84 -183 -95 -171 -4 4
        -67 157 -139 339 -73 183 -140 339 -150 348 -14 13 -43 16 -161 16 -113 0
        -140 -3 -132 -12 5 -7 11 -53 13 -103 l4 -90 -90 0 -90 0 4 90 c2 50 8 96 13
        103 8 9 -19 12 -132 12 -118 0 -147 -3 -161 -16 -10 -9 -80 -171 -156 -361
        -155 -389 -136 -367 -203 -228 -57 116 -74 196 -74 345 0 219 64 381 213 542
        195 211 483 298 768 233z m-84 -842 c3 -5 10 -73 17 -152 9 -118 9 -146 -2
        -153 -15 -10 -223 -7 -233 4 -8 7 12 267 21 293 5 12 25 15 99 15 52 0 96 -3
        98 -7z m41 -490 c2 -10 8 -66 11 -124 l7 -106 -38 -6 c-51 -9 -203 -9 -244 -1
        l-32 7 7 106 c3 58 9 114 11 124 5 15 20 17 139 17 119 0 134 -2 139 -17z"/>
        </g>
      </svg>
    `
    },
    pointId: {
        icon: `
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 24 24" height="24" width="24">
        <path d="M 5,1 C 3.9,1 3.0097656,1.9 3.0097656,3 L 3,15.929688 c 0,0.69 0.3508594,1.300156 0.8808594,1.660156
        L 12,23 20.109375,17.589844 c 0.53,-0.36 0.880859,-0.970156 0.880859,-1.660156 L 21,3 C 21,1.9 20.1,1 19,1 Z m
        7.017578,1.765625 c 0.34378,0 0.638348,0.1141006 0.882813,0.34375 0.244465,0.2296493 0.367187,0.510388
        0.367187,0.84375 0,0.325954 -0.122722,0.6086457 -0.367187,0.8457031 -0.244465,0.2370574 -0.539033,0.3554688
        -0.882813,0.3554688 -0.320861,0 -0.603191,-0.1184114 -0.847656,-0.3554688 -0.244465,-0.2444655
        -0.365234,-0.5271572 -0.365234,-0.8457031 0,-0.3111379 0.120769,-0.5852082 0.365234,-0.8222656
        0.244465,-0.2444655 0.526795,-0.3652344 0.847656,-0.3652344 z m -1.03125,4.2988281 h 2.085938 L 13,16 h -2 z" />
      </svg>
    `
    },
    filterCancel: {
        icon: `
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 133.15887 117.29034" height="117.29034mm" width="133.15887mm">
        <g transform="translate(-34.473864,-66.676034)">
          <g>
            <g>
              <path d="M 94.473677,137.49393 34.473864,66.783005 34.564632,66.676034 H 154.38314 l 0.0907,0.106971 z" />
              <rect y="129.02737" x="88.416046" height="45.357258" width="12.115609" />
            </g>
            <rect width="29.482143" height="76.351196" x="79.73278" y="107.61517" />
          </g>
          <g transform="translate(500.06128,136.57473)">
            <rect width="14.363094" height="49.892857" x="-249.284" y="235.20406" transform="rotate(45)" />
            <rect width="14.363095" height="49.892857" x="-267.59927" y="-266.99539" transform="rotate(-45)" />
          </g>
        </g>
      </svg>
    `
    }
};

class ApplicationIconComponent {
    constructor(iconRegistry, sanitizer) {
        this.iconSize = IconSize.DEFAULT;
        this.hasHalo = false;
        this.colourCode = IncidentType.DEFAULT;
        this.isBlinking = false;
        this.isCancelled = false;
        this.isAssignedToIncident = false;
        this.HALO_SUFFIX = '-halo';
        const registerIcon = (iconName, icon) => {
            iconRegistry.addSvgIconLiteral(iconName, sanitizer.bypassSecurityTrustHtml(icon));
        };
        registerIcon(IconType.INCIDENT, Icons.incident.icon);
        registerIcon(IconType.INCIDENT_WITH_STATUS, Icons.incident.icon);
        registerIcon(IconType.INCIDENT_AGENCY_ASSIST, Icons.incidentAgencyAssist.icon);
        registerIcon(IconType.INCIDENT_FIELD_ACTIVITY, Icons.incidentFieldActivity.icon);
        registerIcon(IconType.REPORT_OF_FIRE, Icons.rof.icon);
        registerIcon(IconType.NO_MORE_REPORT_OF_FIRE, Icons.nrof.icon);
        registerIcon(IconType.NO_MORE_REPORT_OF_FIRE_DARK, Icons.nrof.dark);
        registerIcon(IconType.NO_MORE_REPORT_OF_FIRE_LIGHT, Icons.nrof.light);
        registerIcon(IconType.INCIDENT + this.HALO_SUFFIX, Icons.incident.halo);
        registerIcon(IconType.REPORT_OF_FIRE + this.HALO_SUFFIX, Icons.rof.halo);
        registerIcon(IconType.PLACE_NAME_SEARCH, Icons.placeNameSearch.icon);
        registerIcon(IconType.POINT_ID, Icons.pointId.icon);
        registerIcon(IconType.FILTER_CANCEL, Icons.filterCancel.icon);
    }
    ngOnInit() {
    }
    getHaloType() {
        return this.iconType + this.HALO_SUFFIX;
    }
    getRootIconClasses() {
        let iconSizeClass;
        if (this.iconSize === IconSize.TOOLBAR) {
            iconSizeClass = 'wf1-icon-size-toolbar';
        }
        else if (this.iconSize === IconSize.LIST_SMALL) {
            iconSizeClass = 'wf1-icon-size-list-small';
        }
        else if (this.iconSize === IconSize.LIST_LARGE) {
            iconSizeClass = 'wf1-icon-size-list-large';
        }
        else { //Default
            iconSizeClass = 'wf1-icon-size-toolbar';
        }
        return `wf1-application-icon ${iconSizeClass}`;
    }
    getMainIconClasses() {
        return `${this.colourCode} ${this.isBlinking ? 'wf1-icon-blink' : ''} ${this.isCancelled || this.isAssignedToIncident ? 'wf1-icon-contained' : ''}`;
    }
    getHaloIconClasses() {
        return `${this.isBlinking ? 'wf1-icon-blink' : ''} ${this.isCancelled || this.isAssignedToIncident ? 'wf1-icon-contained' : ''}`;
    }
}
ApplicationIconComponent.ɵfac = function ApplicationIconComponent_Factory(t) { return new (t || ApplicationIconComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MatIconRegistry), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.DomSanitizer)); };
ApplicationIconComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ApplicationIconComponent, selectors: [["wf1-application-icon"]], inputs: { iconSize: "iconSize", hasHalo: "hasHalo", colourCode: "colourCode", isBlinking: "isBlinking", isCancelled: "isCancelled", isAssignedToIncident: "isAssignedToIncident", iconType: "iconType" }, decls: 6, vars: 6, consts: [[3, "ngClass"], [1, "wf1-main-icon"], ["color", "primary", 3, "ngClass", "svgIcon"], ["class", "wf1-halo-icon", 4, "ngIf"], ["class", "wf1-cancelled-icon", 4, "ngIf"], ["class", "wf1-assigned-to-incident-icon", 4, "ngIf"], [1, "wf1-halo-icon"], [3, "ngClass", "svgIcon"], [1, "wf1-cancelled-icon"], [1, "wf1-assigned-to-incident-icon"]], template: function ApplicationIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "mat-icon", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ApplicationIconComponent_div_3_Template, 2, 2, "div", 3);
        ɵngcc0.ɵɵtemplate(4, ApplicationIconComponent_div_4_Template, 3, 0, "div", 4);
        ɵngcc0.ɵɵtemplate(5, ApplicationIconComponent_div_5_Template, 3, 0, "div", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.getRootIconClasses());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ctx.getMainIconClasses())("svgIcon", ctx.iconType);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasHalo);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isCancelled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isAssignedToIncident);
    } }, dependencies: [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc4.MatIcon] });
ApplicationIconComponent.ctorParameters = () => [
    { type: MatIconRegistry },
    { type: DomSanitizer }
];
ApplicationIconComponent.propDecorators = {
    iconType: [{ type: Input }],
    iconSize: [{ type: Input }],
    hasHalo: [{ type: Input }],
    colourCode: [{ type: Input }],
    isBlinking: [{ type: Input }],
    isCancelled: [{ type: Input }],
    isAssignedToIncident: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApplicationIconComponent, [{
        type: Component,
        args: [{ selector: 'wf1-application-icon', template: "<div [ngClass]=\"getRootIconClasses()\">\n  <div class=\"wf1-main-icon\">\n    <mat-icon [ngClass]=\"getMainIconClasses()\" [svgIcon]=\"iconType\" color=\"primary\"></mat-icon>\n  </div>\n  <div class=\"wf1-halo-icon\" *ngIf=\"hasHalo\">\n    <mat-icon [ngClass]=\"getHaloIconClasses()\" [svgIcon]=\"getHaloType()\"></mat-icon>\n  </div>\n  <div class=\"wf1-cancelled-icon\" *ngIf=\"isCancelled\">\n    <mat-icon>block</mat-icon>\n  </div>\n  <div class=\"wf1-assigned-to-incident-icon\" *ngIf=\"isAssignedToIncident\">\n    <mat-icon>panorama_fish_eye</mat-icon>\n  </div>\n</div>\n" }]
    }], function () { return [{ type: ɵngcc4.MatIconRegistry }, { type: ɵngcc5.DomSanitizer }]; }, { iconSize: [{
            type: Input
        }], hasHalo: [{
            type: Input
        }], colourCode: [{
            type: Input
        }], isBlinking: [{
            type: Input
        }], isCancelled: [{
            type: Input
        }], isAssignedToIncident: [{
            type: Input
        }], iconType: [{
            type: Input
        }] }); })();

var MapControl;
(function (MapControl) {
    MapControl["NONE"] = "none";
    MapControl["LAYER_TREE"] = "layer-tree";
    MapControl["BASEMAPS"] = "basemaps";
})(MapControl || (MapControl = {}));
class ApplicationToolbarComponent {
    constructor() {
        this.selectedMapControl = new EventEmitter();
        this.isLayersToggled = false;
        this.isBasemapsToggled = false;
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
    }
}
ApplicationToolbarComponent.ɵfac = function ApplicationToolbarComponent_Factory(t) { return new (t || ApplicationToolbarComponent)(); };
ApplicationToolbarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ApplicationToolbarComponent, selectors: [["wf1-application-toolbar"]], inputs: { menuTemplate: "menuTemplate", toolbarTemplate: "toolbarTemplate" }, outputs: { selectedMapControl: "selectedMapControl" }, decls: 5, vars: 2, consts: [["defaultToolbar", ""], ["color", "accent", 1, "mat-typography", "wf1-application-toolbar"], [4, "ngIf"], [4, "ngTemplateOutlet"], ["mat-button", "", "color", "primary", 1, "wf1-menu-button"], ["iconType", "incident", 3, "hasHalo"], ["iconType", "report-of-fire"], ["appMenu", "matMenu"], ["mat-button", "", "color", "primary", "matTooltip", "Menu", 1, "wf1-menu-button", 3, "matMenuTriggerFor"]], template: function ApplicationToolbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ApplicationToolbarComponent_ng_template_0_Template, 4, 1, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(2, "mat-toolbar", 1);
        ɵngcc0.ɵɵtemplate(3, ApplicationToolbarComponent_ng_container_3_Template, 7, 2, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(4, ApplicationToolbarComponent_div_4_Template, 1, 0, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.menuTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.toolbarTemplate ? ctx.toolbarTemplate : _r0);
    } }, dependencies: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc6.MatButton, ɵngcc4.MatIcon, ɵngcc7.MatMenu, ɵngcc7.MatMenuTrigger, ɵngcc3.MatToolbar, ɵngcc8.MatTooltip, ApplicationIconComponent], encapsulation: 2 });
ApplicationToolbarComponent.ctorParameters = () => [];
ApplicationToolbarComponent.propDecorators = {
    menuTemplate: [{ type: Input }],
    toolbarTemplate: [{ type: Input }],
    selectedMapControl: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApplicationToolbarComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-application-toolbar',
                template: "<ng-template #defaultToolbar>\n  <button class=\"wf1-menu-button\" mat-button color=\"primary\">\n    <wf1-application-icon iconType=\"incident\" [hasHalo]=\"true\"></wf1-application-icon>\n  </button>\n  <button class=\"wf1-menu-button\" mat-button color=\"primary\">\n    <wf1-application-icon iconType=\"report-of-fire\"></wf1-application-icon>\n  </button>\n</ng-template>\n\n<mat-toolbar class=\"mat-typography wf1-application-toolbar\" color=\"accent\">\n\n  <ng-container *ngIf=\"menuTemplate\">\n    <mat-menu #appMenu=\"matMenu\">\n      <div *ngTemplateOutlet=\"menuTemplate\"></div>\n    </mat-menu>\n\n    <button class=\"wf1-menu-button\" mat-button color=\"primary\" [matMenuTriggerFor]=\"appMenu\" matTooltip=\"Menu\">\n      <mat-icon>menu</mat-icon>\n    </button>\n  </ng-container>\n\n  <div *ngTemplateOutlet=\"toolbarTemplate ? toolbarTemplate: defaultToolbar\"></div>\n\n</mat-toolbar>\n"
            }]
    }], function () { return []; }, { selectedMapControl: [{
            type: Output
        }], menuTemplate: [{
            type: Input
        }], toolbarTemplate: [{
            type: Input
        }] }); })();

class NavigationService {
    constructor(router, location) {
        this.router = router;
        this.location = location;
        this.navigations = 0;
        this.router.events.subscribe((event) => {
            if (event instanceof NavigationEnd) {
                this.navigations += 1;
                // console.log( this.navigations, event.urlAfterRedirects )
            }
        });
    }
    back() {
        if (this.navigations > 1) {
            this.location.back();
        }
        else {
            this.router.navigateByUrl('/');
        }
    }
}
NavigationService.ɵfac = function NavigationService_Factory(t) { return new (t || NavigationService)(ɵngcc0.ɵɵinject(ɵngcc9.Router), ɵngcc0.ɵɵinject(ɵngcc2.Location)); };
NavigationService.ɵprov = ɵɵdefineInjectable({ factory: function NavigationService_Factory() { return new NavigationService(ɵɵinject(Router), ɵɵinject(Location)); }, token: NavigationService, providedIn: "root" });
NavigationService.ctorParameters = () => [
    { type: Router },
    { type: Location }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NavigationService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc9.Router }, { type: ɵngcc2.Location }]; }, null); })();

class BasicSidebarPanelComponent {
    constructor(token, navigationService) {
        this.token = token;
        this.navigationService = navigationService;
        this.TOOLTIP_DELAY = 500;
        this.showBackButton = false;
        this.linkClick = new EventEmitter();
        this.isInitializing = true;
        this.isInitializing = token.getOauthToken() === null;
    }
    ngOnInit() {
        this.token.authTokenEmitter.subscribe(() => {
            this.isInitializing = false;
        });
        if (!this.linkTitle) {
            if (this.linkIcon == "launch") {
                this.linkTitle = "Launch Dual Window";
            }
            else if (this.linkIcon == "arrow_back") {
                this.linkTitle = "Back";
            }
            else {
                this.linkTitle = null;
            }
        }
    }
    getTitleIconClasses() {
        return this.linkAlignLeft ? 'side-panel-link-button side-panel-link-button-left' : 'side-panel-link-button side-panel-link-button-right';
    }
    getMainContentClasses() {
        return 'side-panel-content';
    }
    titleLinkClicked() {
        this.linkClick.emit(this.titleText);
    }
    titleBackClicked() {
        this.navigationService.back();
    }
}
BasicSidebarPanelComponent.ɵfac = function BasicSidebarPanelComponent_Factory(t) { return new (t || BasicSidebarPanelComponent)(ɵngcc0.ɵɵdirectiveInject(TokenService), ɵngcc0.ɵɵdirectiveInject(NavigationService)); };
BasicSidebarPanelComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BasicSidebarPanelComponent, selectors: [["wf1-basic-sidebar-panel"]], inputs: { showBackButton: "showBackButton", linkTitle: "linkTitle", titleText: "titleText", linkIcon: "linkIcon", linkAlignLeft: "linkAlignLeft" }, outputs: { linkClick: "linkClick" }, ngContentSelectors: _c0, decls: 9, vars: 4, consts: [[1, "side-panel-container"], [1, "side-panel-title-section"], ["class", "side-panel-link-button side-panel-link-button-left", 4, "ngIf"], [1, "side-panel-title"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"], [1, "interior-panel"], [1, "side-panel-link-button", "side-panel-link-button-left"], ["mat-button", "", "matTooltip", "Go Back", 3, "matTooltipShowDelay", "click"], ["mat-button", "", 3, "matTooltip", "matTooltipShowDelay", "click"]], template: function BasicSidebarPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, BasicSidebarPanelComponent_div_2_Template, 4, 1, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h3", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, BasicSidebarPanelComponent_div_5_Template, 4, 4, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 5)(7, "div", 6);
        ɵngcc0.ɵɵprojection(8);
        ɵngcc0.ɵɵelementEnd()()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showBackButton);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.titleText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.linkIcon !== undefined);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.getMainContentClasses());
    } }, dependencies: [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc6.MatButton, ɵngcc4.MatIcon, ɵngcc8.MatTooltip], encapsulation: 2 });
BasicSidebarPanelComponent.ctorParameters = () => [
    { type: TokenService },
    { type: NavigationService }
];
BasicSidebarPanelComponent.propDecorators = {
    titleText: [{ type: Input }],
    linkIcon: [{ type: Input }],
    linkAlignLeft: [{ type: Input }],
    linkTitle: [{ type: Input }],
    showBackButton: [{ type: Input }],
    linkClick: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BasicSidebarPanelComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-basic-sidebar-panel',
                template: "<div class=\"side-panel-container\">\n    <div class=\"side-panel-title-section\">\n        <div class=\"side-panel-link-button side-panel-link-button-left\" *ngIf=\"showBackButton\">\n            <button mat-button (click)=\"titleBackClicked()\" matTooltip=\"Go Back\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>arrow_back</mat-icon></button>\n        </div>\n\n        <h3 class=\"side-panel-title\">{{titleText}}</h3>\n\n        <div [ngClass]=\"getTitleIconClasses()\" *ngIf=\"linkIcon !== undefined\">\n            <button mat-button (click)=\"titleLinkClicked()\" [matTooltip]=\"linkTitle\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>{{linkIcon}}</mat-icon></button>\n        </div>\n    </div>\n    <div [ngClass]=\"getMainContentClasses()\">\n        <div class=\"interior-panel\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n"
            }]
    }], function () { return [{ type: TokenService }, { type: NavigationService }]; }, { showBackButton: [{
            type: Input
        }], linkClick: [{
            type: Output
        }], linkTitle: [{
            type: Input
        }], titleText: [{
            type: Input
        }], linkIcon: [{
            type: Input
        }], linkAlignLeft: [{
            type: Input
        }] }); })();

class DateTimePickerComponent {
    constructor() { }
}
DateTimePickerComponent.ɵfac = function DateTimePickerComponent_Factory(t) { return new (t || DateTimePickerComponent)(); };
DateTimePickerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DateTimePickerComponent, selectors: [["wf1-date-time-picker"]], inputs: { controlName: "controlName", placeholderText: "placeholderText", isRequired: "isRequired", formControl: "formControl" }, decls: 4, vars: 6, consts: [[1, "date-time-picker"], ["matInput", "", 3, "owlDateTime", "owlDateTimeTrigger", "formControlName", "placeholder", "required", "value"], ["dtpicker", ""]], template: function DateTimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵelement(1, "input", 1)(2, "owl-date-time", null, 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("owlDateTime", _r0)("owlDateTimeTrigger", _r0)("formControlName", ctx.controlName)("placeholder", ctx.placeholderText)("required", ctx.isRequired)("value", ctx.formControl ? ctx.formControl.value : "");
    } }, dependencies: [ɵngcc10.OwlDateTimeTriggerDirective, ɵngcc10.OwlDateTimeInputDirective, ɵngcc10.OwlDateTimeComponent, ɵngcc11.DefaultValueAccessor, ɵngcc11.NgControlStatus, ɵngcc11.RequiredValidator, ɵngcc12.MatInput, ɵngcc11.FormControlName], encapsulation: 2 });
DateTimePickerComponent.ctorParameters = () => [];
DateTimePickerComponent.propDecorators = {
    controlName: [{ type: Input }],
    placeholderText: [{ type: Input }],
    isRequired: [{ type: Input }],
    formControl: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateTimePickerComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-date-time-picker',
                template: "<span class=\"date-time-picker\">\n    <input matInput\n           [owlDateTime]=\"dtpicker\"\n           [owlDateTimeTrigger]=\"dtpicker\"\n           [formControlName]=\"controlName\"\n           [placeholder]=\"placeholderText\"\n           [required]=\"isRequired\"\n           [value]=\"formControl ? formControl.value : ''\">\n    <owl-date-time #dtpicker></owl-date-time>\n</span>"
            }]
    }], function () { return []; }, { controlName: [{
            type: Input
        }], placeholderText: [{
            type: Input
        }], isRequired: [{
            type: Input
        }], formControl: [{
            type: Input
        }] }); })();

class DateMaskDirective {
    constructor(element) {
        this.element = element;
        this.mask = [/\d/, /\d/, /\d/, /\d/, '-', /\d/, /\d/, '-', /\d/, /\d/];
        this.dateInputElement = this.element.nativeElement;
        this.dateInputController = maskInput({
            inputElement: this.element.nativeElement,
            mask: this.mask,
            guide: false
        });
    }
    ngOnDestroy() {
        this.dateInputController.destroy();
    }
}
DateMaskDirective.ɵfac = function DateMaskDirective_Factory(t) { return new (t || DateMaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DateMaskDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DateMaskDirective, selectors: [["", "wf1CoreDateMask", ""]], inputs: { formControl: "formControl" } });
DateMaskDirective.ctorParameters = () => [
    { type: ElementRef }
];
DateMaskDirective.propDecorators = {
    formControl: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DateMaskDirective, [{
        type: Directive,
        args: [{
                selector: '[wf1CoreDateMask]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { formControl: [{
            type: Input
        }] }); })();

class FilterSidebarPanelComponent extends BasicSidebarPanelComponent {
    constructor() {
        super(...arguments);
        this.recordCount = 0;
        this.isInitializing = true;
        this.isShowingFilterOptions = false;
    }
    //   constructor(public token: TokenService) {
    //     super(token);
    //   }
    getMainContentClasses() {
        return (this.isShowingFilterOptions) ? 'side-panel-with-toolbar-and-filter-and-filter-content' : 'side-panel-with-toolbar-and-filter-content';
    }
    setFilterSize(isShowingFilterOptions) {
        this.isShowingFilterOptions = isShowingFilterOptions;
    }
}
FilterSidebarPanelComponent.ɵfac = /*@__PURE__*/ function () { let ɵFilterSidebarPanelComponent_BaseFactory; return function FilterSidebarPanelComponent_Factory(t) { return (ɵFilterSidebarPanelComponent_BaseFactory || (ɵFilterSidebarPanelComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FilterSidebarPanelComponent)))(t || FilterSidebarPanelComponent); }; }();
FilterSidebarPanelComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FilterSidebarPanelComponent, selectors: [["wf1-filter-sidebar-panel"]], inputs: { recordCount: "recordCount", filters: "filters", defaultSort: "defaultSort", sortOptions: "sortOptions", componentId: "componentId" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 12, vars: 9, consts: [[1, "side-panel-container"], [1, "side-panel-title-section"], ["class", "side-panel-link-button side-panel-link-button-left", 4, "ngIf"], [1, "side-panel-title"], [3, "ngClass", 4, "ngIf"], [3, "count", "componentId"], [3, "options", "defaultSort", "componentId", 4, "ngIf"], [3, "filters", "componentId", "isShowingFilterOptions"], [3, "ngClass"], [1, "interior-panel"], [1, "side-panel-link-button", "side-panel-link-button-left"], ["mat-button", "", "matTooltip", "Go Back", 3, "matTooltipShowDelay", "click"], ["mat-button", "", 3, "matTooltip", "matTooltipShowDelay", "click"], [3, "options", "defaultSort", "componentId"]], template: function FilterSidebarPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, FilterSidebarPanelComponent_div_2_Template, 4, 1, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h3", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, FilterSidebarPanelComponent_div_5_Template, 4, 4, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "wf1-search-bar", 5);
        ɵngcc0.ɵɵtemplate(7, FilterSidebarPanelComponent_wf1_sort_modal_7_Template, 1, 3, "wf1-sort-modal", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "wf1-filters", 7);
        ɵngcc0.ɵɵlistener("isShowingFilterOptions", function FilterSidebarPanelComponent_Template_wf1_filters_isShowingFilterOptions_8_listener($event) { return ctx.setFilterSize($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 8)(10, "div", 9);
        ɵngcc0.ɵɵprojection(11);
        ɵngcc0.ɵɵelementEnd()()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showBackButton);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.titleText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.linkIcon !== undefined);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("count", ctx.recordCount)("componentId", ctx.componentId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.sortOptions && ctx.defaultSort);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("filters", ctx.filters)("componentId", ctx.componentId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.getMainContentClasses());
    } }, dependencies: function () { return [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc6.MatButton, ɵngcc4.MatIcon, ɵngcc8.MatTooltip, FiltersComponent, SearchBarComponent, SortComponent]; }, encapsulation: 2 });
FilterSidebarPanelComponent.propDecorators = {
    recordCount: [{ type: Input }],
    filters: [{ type: Input }],
    defaultSort: [{ type: Input }],
    sortOptions: [{ type: Input }],
    componentId: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FilterSidebarPanelComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-filter-sidebar-panel',
                template: "<div class=\"side-panel-container\">\n    <div class=\"side-panel-title-section\">\n        <div class=\"side-panel-link-button side-panel-link-button-left\" *ngIf=\"showBackButton\">\n            <button mat-button (click)=\"titleBackClicked()\" matTooltip=\"Go Back\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>arrow_back</mat-icon></button>\n        </div>\n\n        <h3 class=\"side-panel-title\">{{titleText}}</h3>\n        \n        <div [ngClass]=\"getTitleIconClasses()\" *ngIf=\"linkIcon !== undefined\">\n            <button mat-button (click)=\"titleLinkClicked()\" [matTooltip]=\"linkTitle\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>{{linkIcon}}</mat-icon></button>\n        </div>\n    </div>\n    <wf1-search-bar [count]=\"recordCount\" [componentId]=\"componentId\">\n        <wf1-sort-modal *ngIf=\"sortOptions && defaultSort\" [options]=\"sortOptions\" [defaultSort]=\"defaultSort\" [componentId]=\"componentId\"></wf1-sort-modal>\n    </wf1-search-bar>\n    <wf1-filters [filters]=\"filters\" (isShowingFilterOptions)=\"setFilterSize($event)\" [componentId]=\"componentId\"></wf1-filters>\n    <div [ngClass]=\"getMainContentClasses()\">\n        <div class=\"interior-panel\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n"
            }]
    }], null, { recordCount: [{
            type: Input
        }], filters: [{
            type: Input
        }], defaultSort: [{
            type: Input
        }], sortOptions: [{
            type: Input
        }], componentId: [{
            type: Input
        }] }); })();

class FullWidthContainerComponent {
    constructor(token) {
        this.token = token;
        this.isInitializing = true;
        this.isInitializing = token.getOauthToken() === null;
    }
    ngOnInit() {
        this.token.authTokenEmitter.subscribe(() => {
            this.isInitializing = false;
        });
    }
}
FullWidthContainerComponent.ɵfac = function FullWidthContainerComponent_Factory(t) { return new (t || FullWidthContainerComponent)(ɵngcc0.ɵɵdirectiveInject(TokenService)); };
FullWidthContainerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FullWidthContainerComponent, selectors: [["wf1-full-width-container"]], inputs: { titleText: "titleText", mainContentTemplate: "mainContentTemplate" }, decls: 6, vars: 3, consts: [["defaultMainContent", ""], ["id", "core-interface-container"], [3, "titleText"], ["class", "wf1-loading-screen", 4, "ngIf"], ["class", "main-content-container", 4, "ngIf"], [1, "wf1-loading-screen"], [1, "main-content-container"], [4, "ngTemplateOutlet"]], template: function FullWidthContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FullWidthContainerComponent_ng_template_0_Template, 2, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelement(3, "wf1-application-header", 2);
        ɵngcc0.ɵɵtemplate(4, FullWidthContainerComponent_div_4_Template, 6, 0, "div", 3);
        ɵngcc0.ɵɵtemplate(5, FullWidthContainerComponent_div_5_Template, 2, 1, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("titleText", ctx.titleText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInitializing);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isInitializing);
    } }, dependencies: function () { return [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ApplicationHeaderComponent, SpinnerComponent]; }, encapsulation: 2 });
FullWidthContainerComponent.ctorParameters = () => [
    { type: TokenService }
];
FullWidthContainerComponent.propDecorators = {
    titleText: [{ type: Input }],
    mainContentTemplate: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullWidthContainerComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-full-width-container',
                template: "<!--\n  DEFAULT TEMPLATE DECLARATIONS FOR SUB-COMPONENTS\n-->\n\n<ng-template #defaultMainContent>\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur consectetur debitis, delectus deleniti dolore\n    earum explicabo facere facilis, fugiat itaque numquam provident quam quo quos sint veritatis vero voluptas voluptate?\n  </p>\n</ng-template>\n\n<!--\n  MAIN TEMPLATE DECLARATION\n-->\n<div id=\"core-interface-container\">\n  <wf1-application-header [titleText]=\"titleText\"></wf1-application-header>\n\n  <div class=\"wf1-loading-screen\" *ngIf=\"isInitializing\">\n    <h1>Initializing Application</h1>\n    <wf1-spinner></wf1-spinner>\n    <h3>Please wait while the application initializes.</h3>\n  </div>\n\n  <div class=\"main-content-container\" *ngIf=\"!isInitializing\">\n    <ng-container *ngTemplateOutlet=\"mainContentTemplate ? mainContentTemplate: defaultMainContent\"></ng-container>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: TokenService }]; }, { titleText: [{
            type: Input
        }], mainContentTemplate: [{
            type: Input
        }] }); })();

class FullWidthPanelComponent {
    constructor(token) {
        this.token = token;
        this.recordCount = 0;
        this.linkClick = new EventEmitter();
        this.isInitializing = true;
        this.isShowingFilterOptions = false;
        this.isInitializing = token.getOauthToken() === null;
    }
    ngOnInit() {
        this.token.authTokenEmitter.subscribe(() => {
            this.isInitializing = false;
        });
    }
    getMainContentClasses() {
        return (this.isShowingFilterOptions) ? 'side-panel-with-toolbar-and-filter-and-filter-content' : 'side-panel-with-toolbar-and-filter-content';
    }
    setFilterSize(isShowingFilterOptions) {
        this.isShowingFilterOptions = isShowingFilterOptions;
    }
    titleLinkClicked() {
        this.linkClick.emit(this.titleText);
    }
}
FullWidthPanelComponent.ɵfac = function FullWidthPanelComponent_Factory(t) { return new (t || FullWidthPanelComponent)(ɵngcc0.ɵɵdirectiveInject(TokenService)); };
FullWidthPanelComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FullWidthPanelComponent, selectors: [["wf1-full-width-panel"]], inputs: { recordCount: "recordCount", titleText: "titleText", linkIcon: "linkIcon", filters: "filters" }, outputs: { linkClick: "linkClick" }, ngContentSelectors: _c0, decls: 10, vars: 5, consts: [[1, "side-panel-container"], [1, "side-panel-title-section"], [1, "side-panel-title"], ["class", "side-panel-link-button", 4, "ngIf"], [3, "count"], [3, "filters", "isShowingFilterOptions"], [3, "ngClass"], [1, "interior-panel"], [1, "side-panel-link-button"], ["mat-button", "", 3, "click"]], template: function FullWidthPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "h3", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, FullWidthPanelComponent_div_4_Template, 4, 1, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "wf1-search-bar", 4);
        ɵngcc0.ɵɵelementStart(6, "wf1-filters", 5);
        ɵngcc0.ɵɵlistener("isShowingFilterOptions", function FullWidthPanelComponent_Template_wf1_filters_isShowingFilterOptions_6_listener($event) { return ctx.setFilterSize($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 6)(8, "div", 7);
        ɵngcc0.ɵɵprojection(9);
        ɵngcc0.ɵɵelementEnd()()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.titleText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.linkIcon !== undefined);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("count", ctx.recordCount);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("filters", ctx.filters);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.getMainContentClasses());
    } }, dependencies: function () { return [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc6.MatButton, ɵngcc4.MatIcon, FiltersComponent, SearchBarComponent]; }, encapsulation: 2 });
FullWidthPanelComponent.ctorParameters = () => [
    { type: TokenService }
];
FullWidthPanelComponent.propDecorators = {
    titleText: [{ type: Input }],
    linkIcon: [{ type: Input }],
    recordCount: [{ type: Input }],
    filters: [{ type: Input }],
    linkClick: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullWidthPanelComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-full-width-panel',
                template: "<div class=\"side-panel-container\">\n    <div class=\"side-panel-title-section\">\n        <h3 class=\"side-panel-title\">{{titleText}}</h3>\n        <div class=\"side-panel-link-button\" *ngIf=\"linkIcon !== undefined\">\n            <button mat-button (click)=\"titleLinkClicked()\"><mat-icon>{{linkIcon}}</mat-icon></button>\n        </div>\n    </div>\n    <wf1-search-bar [count]=\"recordCount\"></wf1-search-bar>\n    <wf1-filters [filters]=\"filters\" (isShowingFilterOptions)=\"setFilterSize($event)\"></wf1-filters>\n    <div [ngClass]=\"getMainContentClasses()\">\n        <div class=\"interior-panel\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n"
            }]
    }], function () { return [{ type: TokenService }]; }, { recordCount: [{
            type: Input
        }], linkClick: [{
            type: Output
        }], titleText: [{
            type: Input
        }], linkIcon: [{
            type: Input
        }], filters: [{
            type: Input
        }] }); })();

class MapService {
    constructor(appConfig) {
        this.appConfig = appConfig;
        this.mapInstances = [];
        this.mapInstanceEmitter = new Subject();
        // WFML.BASE_URL = appConfig.getConfig().application.baseUrl + 'assets/js/wfml-v0.3.0/v0.3.0/wfml';
    }
    findMapInstance(mapName) {
        return this.mapInstances.find(instance => instance.name === mapName);
    }
    onResize() {
        // for (const mapInstance of this.mapInstances) {
        //   if (mapInstance.isInitialized && mapInstance.api) {
        //     setTimeout(() => mapInstance.api.map.resize(), 400);
        //   }
        // }
    }
    /**
     * Returns a boolean flag that indicates whether the target map instance has been initialized.
     * @param mapName Id value of the leaflet element on the page.
     */
    isMapInitialized(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        return (targetInstance && targetInstance.isInitialized);
    }
    /**
     * initialize map
     * @param mapName string
     */
    initializeMap(mapName) {
        // let targetInstance = this.findMapInstance(mapName);
        // if (!targetInstance) {
        //   targetInstance = {
        //     name: mapName,
        //     isInitialized: false
        //   };
        //   this.mapInstances.push(targetInstance);
        // }
        // if (!targetInstance.isInitialized) {
        //   const config: ApplicationConfig = this.appConfig.getConfig();
        //   // console.log(`Initializing map: ${targetInstance.name}`);
        //   targetInstance.api = WFML.createMap('map', config.mapServiceConfig.map, config.mapServiceConfig.layerSettings);
        //   targetInstance.isInitialized = true;
        //   this.mapInstanceEmitter.next(mapName);
        // }
    }
    /**
     * get layer tree view
     * @param mapName string
     */
    getLayerTreeView(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        return (targetInstance && targetInstance.isInitialized)
            ? targetInstance.api.layer.treeView()
            : null;
    }
    /**
     * set map layer visibility
     * @param mapName string
     * @param id layer id
     * @param isVisible visibility boolean
     */
    setLayerVisibility(mapName, id, isVisible) {
        const targetInstance = this.findMapInstance(mapName);
        if (targetInstance && targetInstance.isInitialized) {
            targetInstance.api.layer.visible(id, isVisible);
        }
    }
    /**
     * zoomToPoint zooms the map to a specific point.
     * @param mapName string
     * @param coordinates coordinates
     * @param zoomLevel number
     */
    zoomToPoint(mapName, coordinates, zoomLevel) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.navigation.zoom(coordinates, zoomLevel);
    }
    /**
     * stop edit
     * @param mapName string
     */
    stopEdit(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.edit.stop();
    }
    /**
     * hide all map layer objects
     * @param mapName string
     * @param type ued or string
     */
    hideAll(mapName, type) {
        const targetInstance = this.findMapInstance(mapName);
        const data = targetInstance.api.layer.treeView().child.find((e) => e.title === type).child;
        data.map((layer) => {
            layer.lyr.isVisible = false;
        });
    }
    /**
     * redray Layer
     * @param mapName string
     * @param layerName string
     */
    redrawLayer(mapName, layerName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.layer.redraw(layerName);
    }
    /**
     * add Highlight
     * @param mapName string
     * @param lonlat longitude latatude array
     */
    addHighlight(mapName, lonlat) {
        const targetInstance = this.findMapInstance(mapName);
        this.clearHighlight(mapName);
        targetInstance.api.highlight.add(lonlat);
    }
    /**
     * clear all highlights on map.
     * @param mapName string
     */
    clearHighlight(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.highlight.clear();
    }
    /**
     * Load Report of Fires as markers from report of fires resources
     * @param mapName string
     * @param reportOfFires collection of report of fire resources from WFIM api
     * @param markerClickCallback callback function for markers
     */
    loadRoFMarkers(mapName, reportOfFires, markerClickCallback) {
        const targetInstance = this.findMapInstance(mapName);
        const markers = reportOfFires.map(rof => {
            const date = (rof.messageStatusTimestamp) ? new DatePipe('en-US').transform(new Date(rof.messageStatusTimestamp), 'yyyy-MM-dd HH:mm:ss') : '';
            let phoneNumber = '';
            if (rof.callerTelephone) {
                const numberSegments = rof.callerTelephone.replace(/\D/g, '').match(/(\d{3})(\d{3})(\d{4})/);
                if (numberSegments && numberSegments.length === 4) {
                    phoneNumber = `(${numberSegments[1]}) ${numberSegments[2]}-${numberSegments[3]}`;
                }
                else {
                    console.error(`RoF ${rof.wildfireYear}-${rof.reportOfFireNumber} phone number value '${rof.callerTelephone}' is not valid.`);
                }
            }
            return {
                "messageTypeCode": "Public Report of Fire",
                "messageStatusCode": rof.messageStatusCode,
                "reportOfFireNumber": rof.reportOfFireNumber,
                "reportOfFireLabel": rof.reportOfFireLabel,
                "wildfireYear": rof.wildfireYear,
                "hoverTitle": rof.publicReportTypeCode,
                "publicReportTypeCode": rof.publicReportTypeCode,
                "latitude": rof.latitude,
                "longitude": rof.longitude,
                "yearNumber": rof.reportOfFireLabel,
                "latLon": this.formatCoordinates([rof.longitude, rof.latitude]),
                "lastUpdated": date,
                "updatedBy": rof.messageStatusUserId,
                "valuesBeingThreatenedNote": rof.valuesBeingThreatenedNote,
                "fireSizeComparisonCode": rof.fireSizeComparisionCode,
                "callerName": rof.callerName,
                "callerTelephone": phoneNumber
            };
        });
        targetInstance.api.layer.visible(WFML.RoF.LAYER_ID, true);
        WFML.RoF.Util.clear(targetInstance.api);
        WFML.RoF.Util.addClusteredMarkers(targetInstance.api, markers, markerClickCallback);
    }
    /**
     * Load Incidents as markers from incident resources
     * @param mapName string
     * @param optionsCodeTables Code[]
     * @param orgOptionsCodeTables Code[]
     * @param incidents collection of report of fire resources from WFIM api
     * @param markerClickCallback callback function for markers
     */
    loadIncidentMarkers(mapName, incidents, optionsCodeTables, orgOptionsCodeTables, markerClickCallback) {
        const targetInstance = this.findMapInstance(mapName);
        const markers = incidents.map(incident => {
            const interfaceFireInd = (incident.incidentSituation) ? incident.incidentSituation.interfaceFireInd : false;
            const interfaceText = (interfaceFireInd) ? 'Interface' : 'Non Interface';
            const markerLabel = (incident.incidentLabel === `${incident.wildfireYear}-${incident.incidentNumberSequence}`) ? `${incident.incidentNumberSequence}` : incident.incidentLabel;
            const incidentTypeCode = optionsCodeTables['INCIDENT_TYPE_CODE'].find(option => option.code === incident.incidentTypeCode);
            const stageOfControlCode = (incident.incidentSituation) ? optionsCodeTables['STAGE_OF_CONTROL_CODE'].find(option => option.code === incident.incidentSituation.stageOfControlCode) : undefined;
            const fireCentreOrgUnitIdentifier = orgOptionsCodeTables['FIRE_CENTRE_CODE'].find(option => option.code === incident.fireCentreOrgUnitIdentifier);
            const zoneOrgUnitIdentifier = orgOptionsCodeTables['ZONE_CODE'].find(option => option.code === incident.zoneOrgUnitIdentifier);
            return {
                "wildfireYear": incident.wildfireYear,
                "incidentNumberSequence": incident.incidentNumberSequence,
                "hoverTitle": interfaceText,
                "incidentId": incident.incidentId,
                "incidentName": incident.incidentName,
                "incidentLocation": {
                    "latitude": incident.incidentLocation ? incident.incidentLocation.latitude : '',
                    "longitude": incident.incidentLocation ? incident.incidentLocation.longitude : ''
                },
                "incidentSituation": {
                    "interfaceFireInd": interfaceFireInd
                },
                "incidentStatusCode": incident.incidentStatusCode,
                "markerLabel": markerLabel,
                "incidentLabel": incident.incidentLabel,
                "probabilityOfInitialAttackSuccessCode": incident.probabilityOfInitialAttackSuccessCode,
                "suspectedCauseCategoryCode": incident.suspectedCauseCategoryCode,
                "incidentCategoryCode": incident.incidentCategoryCode,
                "incidentTypeCode": incidentTypeCode ? incidentTypeCode.description : '',
                "stageOfControlCode": stageOfControlCode ? stageOfControlCode.description : '',
                "fireCentreOrgUnitIdentifier": fireCentreOrgUnitIdentifier ? fireCentreOrgUnitIdentifier.description : '',
                "zoneOrgUnitIdentifier": zoneOrgUnitIdentifier ? zoneOrgUnitIdentifier.description : '',
                "latLon": incident.incidentLocation ? WFML.Location.format([incident.incidentLocation.longitude, incident.incidentLocation.latitude]) : [],
                "geographicDescription": incident.incidentLocation ? incident.incidentLocation.geographicDescription : '',
                "fireSizeHectares": incident.incidentSituation ? incident.incidentSituation.fireSizeHectares : ''
            };
        });
        targetInstance.api.layer.visible(WFML.Incident.LAYER_ID, true);
        WFML.Incident.Util.clear(targetInstance.api);
        WFML.Incident.Util.addClusteredMarkers(targetInstance.api, markers, markerClickCallback);
    }
    /**
     * Clear markers from the specified mapName and markerLayerId
     * @param mapName string
     * @param markerLayerId identifier for the marker layer tracked by the marker manager
     */
    clearMarkers(mapName, markerLayerId) {
        const targetInstance = this.findMapInstance(mapName);
        return targetInstance.api.marker.removeMarkers(markerLayerId);
    }
    /**
     * Set markers layer visibility from the specified mapName and markerLayerId
     * @param mapName string
     * @param markerLayerId identifier for the marker layer tracked by the marker manager
     * @param visible boolean for setting the visibility of the marker layer
     */
    showMarkers(mapName, markerLayerId, visible) {
        const targetInstance = this.findMapInstance(mapName);
        return targetInstance.api.marker.showMarkers(markerLayerId, visible);
    }
    /**
    * Add legend layers
    * @param mapName name of the map instance
    * @param layerId id of the target map layer the legend attaches to
    * @param legend structure based on WFML api for legends - refer to WFML test bed for examples
    */
    addLegend(mapName, layerId, legend) {
        const targetInstance = this.findMapInstance(mapName);
        if (targetInstance) {
            targetInstance.api.layer.legend(layerId, legend);
        }
    }
    /**
     * Clear selected point (pin) from the specified map instance
     */
    clearSelectPoint(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        if (targetInstance) {
            targetInstance.api.selectPoint.clear();
        }
    }
    setMaxSearchDistance(mapName, withinDistance) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.setMaximumDistance(withinDistance);
    }
    findPlace(mapName, searchText) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.findPlace(searchText);
    }
    findRoad(mapName, searchText) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.findRoad(searchText);
    }
    findIntersection(mapName, roadName, intersectingRoadName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.findIntersection(roadName, intersectingRoadName);
    }
    clearPlaceNameSearch(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.clear();
    }
    panToPlaceNameSearchLocation(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.panToAnchor();
    }
    zoomToPlaceNameSearchLocation(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.zoomToAnchor();
    }
    showCandidate(mapName, location) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.showCandidate(location);
    }
    clearCandidate(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        // showCandidate() with empty params clears the candidate selection.
        targetInstance.api.search.showCandidate();
    }
    setAnchor(mapName, point) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.setAnchor(point);
    }
    setAnchorFromMap(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        const point = targetInstance.api.selectPoint.get();
        if (point) {
            targetInstance.api.search.setAnchor(point);
        }
        return point;
    }
    getBasemaps(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        return targetInstance.api.basemap.all();
    }
    setBasemap(mapName, baseMapIndex) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.basemap.switch(baseMapIndex);
    }
    registerPlaceNameSearchListener(mapName, callback) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.setResultHandler(callback);
    }
    registerMapClickListener(mapName, callback) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.click(callback);
    }
    registerMapHoverListener(mapName, callback, hoverDelay) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.hover(callback, hoverDelay);
    }
    registerMapSelectPointListener(mapName, callback) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.selectPoint(callback);
    }
    clearPlaceNameSearchListener(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.setResultHandler();
    }
    clearMapClickListener(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.click();
    }
    clearMapHoverListener(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.hover();
    }
    clearMapSelectPointListener(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.selectPoint();
    }
    formatCoordinates(coordinates) {
        return WFML.Location.format(coordinates);
    }
    parseCoordinates(url) {
        return WFML.Location.parse(url);
    }
    activateTool(mapName, toolName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.tool.activate(toolName);
    }
    persistState(mapName, key, opt) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.state.persist(key, opt);
    }
}
MapService.ɵfac = function MapService_Factory(t) { return new (t || MapService)(ɵngcc0.ɵɵinject(AppConfigService)); };
MapService.ɵprov = ɵɵdefineInjectable({ factory: function MapService_Factory() { return new MapService(ɵɵinject(AppConfigService)); }, token: MapService, providedIn: "root" });
MapService.ctorParameters = () => [
    { type: AppConfigService }
];
MapService.propDecorators = {
    onResize: [{ type: HostListener, args: ['resize',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MapService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: AppConfigService }]; }, { onResize: [{
            type: HostListener,
            args: ['resize']
        }] }); })();

class InfoIncidentPanelComponent {
    constructor(store, mapService) {
        this.store = store;
        this.mapService = mapService;
        this.codeLabelLookupTables = {};
    }
    ngOnInit() {
        this.getCodeLookupTables();
    }
    getCodeLookupTables() {
        this.store.pipe(select('codeData', 'codeIndex')).subscribe(codeIndex => this.codeLabelLookupTables = codeIndex);
    }
    getLabel(table, value) {
        return this.codeLabelLookupTables[table] && value ? this.codeLabelLookupTables[table][value] : '';
    }
    getPanelClasses() {
        let incidentClass;
        if (this.incident.incidentSituation) {
            incidentClass = (this.incident.incidentSituation.interfaceFireInd)
                ? 'incident-interface'
                : 'incident-non-interface';
        }
        else {
            incidentClass = 'incident-default';
        }
        return `info-panel ${incidentClass}`;
    }
    getFormattedLocation() {
        return (this.incident && this.incident.incidentLocation)
            ? this.mapService.formatCoordinates([this.incident.incidentLocation.longitude, this.incident.incidentLocation.latitude])
            : '';
    }
}
InfoIncidentPanelComponent.ɵfac = function InfoIncidentPanelComponent_Factory(t) { return new (t || InfoIncidentPanelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc13.Store), ɵngcc0.ɵɵdirectiveInject(MapService)); };
InfoIncidentPanelComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: InfoIncidentPanelComponent, selectors: [["wf1-info-incident-panel"]], inputs: { incident: "incident" }, decls: 21, vars: 7, consts: [[3, "ngClass"], [1, "incident-detail-id"], [1, "incident-detail-id-type"]], template: function InfoIncidentPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "h3", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementStart(3, "span", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(5, "div")(6, "strong");
        ɵngcc0.ɵɵtext(7, "Point:");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div")(10, "strong");
        ɵngcc0.ɵɵtext(11, "Incident Commander:");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div")(14, "strong");
        ɵngcc0.ɵɵtext(15, "Stage of Control:");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "div")(18, "strong");
        ɵngcc0.ɵɵtext(19, "Size:");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.getPanelClasses());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.incident.incidentLabel, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.getLabel("INCIDENT_TYPE_CODE", ctx.incident.incidentTypeCode));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.getFormattedLocation(), "");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.incident.incidentCommanderName, "");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.getLabel("STAGE_OF_CONTROL_CODE", ctx.incident.incidentSituation.stageOfControlCode), "");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.incident.incidentSituation.fireSizeHectares, "");
    } }, dependencies: [ɵngcc2.NgClass], styles: [".info-panel[_ngcontent-%COMP%]{padding:1rem}.info-panel[_ngcontent-%COMP%]   .incident-detail-id[_ngcontent-%COMP%]{font-weight:700;padding-bottom:.5rem;margin-bottom:0}.info-panel[_ngcontent-%COMP%]   .incident-detail-id-type[_ngcontent-%COMP%]{font-weight:400;font-style:italic;margin-left:1rem}.incident-default[_ngcontent-%COMP%]{color:#fff;background-color:#263238}.incident-interface[_ngcontent-%COMP%]{color:#fff;background-color:#ff4545}.incident-non-interface[_ngcontent-%COMP%]{color:#fff;background-color:#009e73}"] });
InfoIncidentPanelComponent.ctorParameters = () => [
    { type: Store },
    { type: MapService }
];
InfoIncidentPanelComponent.propDecorators = {
    incident: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InfoIncidentPanelComponent, [{
        type: Component,
        args: [{ selector: 'wf1-info-incident-panel', template: "<div [ngClass]=\"getPanelClasses()\">\n  <h3 class=\"incident-detail-id\">\n    {{incident.incidentLabel}}\n    <span class=\"incident-detail-id-type\">{{getLabel(\"INCIDENT_TYPE_CODE\", incident.incidentTypeCode)}}</span>\n  </h3>\n  <div><strong>Point:</strong> {{getFormattedLocation()}}</div>\n  <div><strong>Incident Commander:</strong> {{incident.incidentCommanderName}}</div>\n  <div><strong>Stage of Control:</strong> {{getLabel(\"STAGE_OF_CONTROL_CODE\", incident.incidentSituation.stageOfControlCode)}}</div>\n  <div><strong>Size:</strong> {{incident.incidentSituation.fireSizeHectares}}</div>\n</div>\n", styles: [".info-panel{padding:1rem}.info-panel .incident-detail-id{font-weight:700;padding-bottom:.5rem;margin-bottom:0}.info-panel .incident-detail-id-type{font-weight:400;font-style:italic;margin-left:1rem}.incident-default{color:#fff;background-color:#263238}.incident-interface{color:#fff;background-color:#ff4545}.incident-non-interface{color:#fff;background-color:#009e73}"] }]
    }], function () { return [{ type: ɵngcc13.Store }, { type: MapService }]; }, { incident: [{
            type: Input
        }] }); })();

class InternalListItemConfig {
}
class ListItemComponent {
    constructor(mapService) {
        this.mapService = mapService;
        this.TOOLTIP_DELAY = 500;
        this.itemSelect = new EventEmitter();
    }
    ngOnInit() {
        if (this.config) {
            this.internalConfig = new InternalListItemConfig();
            this.internalConfig.icon = {
                type: this.config.icon,
                size: (this.config.time) ? IconSize.LIST_SMALL : IconSize.LIST_LARGE,
                colourCode: (this.config.iconColourCode !== undefined)
                    ? this.config.iconColourCode : IncidentType.DEFAULT,
                isBlinking: (this.config.iconIsBlinking !== undefined)
                    ? this.config.iconIsBlinking : false,
                isCancelled: (this.config.iconIsCancelled !== undefined)
                    ? this.config.iconIsCancelled : false,
                isAssignedToIncident: (this.config.iconIsAssignedToIncident !== undefined)
                    ? this.config.iconIsAssignedToIncident : false,
            };
            this.internalConfig.time = this.config.time;
            this.internalConfig.title = this.config.title;
            this.internalConfig.infoRows = [[null, null]];
            let currentRow = [null, null];
            this.internalConfig.infoRows.shift();
            console.log(this.config.info);
            for (let index = 0; index < this.config.info.length; index++) {
                if (index == 0) {
                    this.internalConfig.titleLevelInfo = this.config.info[index];
                }
                else {
                    let isFirstRowEntry = (index % 2);
                    if (isFirstRowEntry) {
                        currentRow[0] = this.config.info[index];
                    }
                    else {
                        currentRow[1] = this.config.info[index];
                        this.internalConfig.infoRows.push(currentRow);
                        currentRow = [null, null];
                    }
                }
            }
            this.internalConfig.location = this.config.location;
            if (currentRow[0]) { //If odd number of items, push half-finished row into set.
                this.internalConfig.infoRows.push(currentRow);
            }
        }
    }
    handleMouseEvent(location) {
        if (location) {
            this.mapService.addHighlight(this.mapElement, location);
        }
        else {
            this.mapService.clearHighlight(this.mapElement);
        }
    }
    handleClick() {
        this.itemSelect.emit(this.config);
    }
    zoomToPlace(location) {
        if (location) {
            this.mapService.zoomToPoint(this.mapElement, location);
        }
    }
}
ListItemComponent.ɵfac = function ListItemComponent_Factory(t) { return new (t || ListItemComponent)(ɵngcc0.ɵɵdirectiveInject(MapService)); };
ListItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListItemComponent, selectors: [["wf1-list-item"]], inputs: { config: "config", mapElement: "mapElement" }, outputs: { itemSelect: "itemSelect" }, decls: 1, vars: 1, consts: [["class", "list-item", 4, "ngIf"], [1, "list-item"], [1, "list-item-icon-section", 3, "mouseover", "mouseout", "focus", "blur", "click", "keydown"], [1, "list-item-icon"], [3, "iconType", "iconSize", "colourCode", "isBlinking", "isCancelled", "isAssignedToIncident"], ["class", "list-item-date", 4, "ngIf"], ["class", "list-item-time", 4, "ngIf"], [1, "list-item-data-section"], [1, "list-item-title-section"], [1, "list-item-title", 3, "mouseover", "mouseout", "click"], [1, "list-item-title-level-info", 3, "mouseover", "mouseout", "click"], [1, "list-item-info-label"], [1, "list-item-locate-button"], ["mat-button", "", "matTooltip", "Locate on Map", 3, "matTooltipShowDelay", "click", 4, "ngIf"], [4, "ngFor", "ngForOf"], [1, "list-item-date"], [1, "list-item-time"], ["mat-button", "", "matTooltip", "Locate on Map", 3, "matTooltipShowDelay", "click"], [1, "list-item-info-row", 3, "mouseover", "mouseout", "focus", "blur", "click", "keydown"], [3, "class", 4, "ngIf"]], template: function ListItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ListItemComponent_mat_list_item_0_Template, 20, 19, "mat-list-item", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.config);
    } }, dependencies: [ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc6.MatButton, ɵngcc14.MatListItem, ɵngcc4.MatIcon, ɵngcc8.MatTooltip, ApplicationIconComponent, ɵngcc15.DateFormatPipe], styles: ["mat-list-item.list-item[_ngcontent-%COMP%]{height:auto;padding:.25rem 0;border-bottom:.0625rem solid #c4c4c4}mat-list-item.list-item[_ngcontent-%COMP%]:hover{background-color:#eee;cursor:pointer}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]{flex:0 0 5rem;width:5rem;height:100%;display:flex;flex-direction:column;justify-content:center;align-items:center}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   .list-item-icon[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%], mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   .list-item-icon[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%], mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   .wf1-application-icon[_ngcontent-%COMP%], mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   .wf1-application-icon[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%], mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   .wf1-main-icon[_ngcontent-%COMP%], mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   .wf1-main-icon[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%], mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   wf1-application-icon[_ngcontent-%COMP%], mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   wf1-application-icon[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{width:3rem;height:3rem}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   .list-item-date[_ngcontent-%COMP%], mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   .list-item-time[_ngcontent-%COMP%]{font-size:x-small;line-height:.75rem}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-icon-section[_ngcontent-%COMP%]   .list-item-date[_ngcontent-%COMP%]{padding-top:.5rem}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]{width:100%}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-title-section[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;align-items:baseline}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-title-section[_ngcontent-%COMP%]   .list-item-title[_ngcontent-%COMP%]{flex:0 0 9rem;display:inline-block;padding-right:1rem;margin-bottom:0;font-size:.9rem;font-weight:900}@media (-ms-high-contrast:active),(-ms-high-contrast:none){mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-title-section[_ngcontent-%COMP%]   .list-item-title[_ngcontent-%COMP%]{padding-right:0}}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-title-section[_ngcontent-%COMP%]   .list-item-locate-button[_ngcontent-%COMP%]{height:1rem;width:1rem}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-title-section[_ngcontent-%COMP%]   .list-item-locate-button[_ngcontent-%COMP%]   .mat-button[_ngcontent-%COMP%]{min-width:1rem;line-height:1rem;padding:0}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-title-section[_ngcontent-%COMP%]   .list-item-locate-button[_ngcontent-%COMP%]   .mat-button[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%]{height:1rem;width:1rem;font-size:1rem}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-info-row[_ngcontent-%COMP%]{display:flex;justify-content:flex-start;align-items:baseline}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-info[_ngcontent-%COMP%]{flex:0 0 9rem;display:flex;justify-content:flex-start;font-size:small}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-info[_ngcontent-%COMP%]   .list-item-info-label[_ngcontent-%COMP%]{flex:0 0 3rem;padding-right:.5rem;width:3rem;font-size:x-small;text-transform:uppercase}mat-list-item.list-item[_ngcontent-%COMP%]   .list-item-data-section[_ngcontent-%COMP%]   .list-item-info[_ngcontent-%COMP%]   .list-item-info-value[_ngcontent-%COMP%]{flex:0 0 6rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:6rem;margin-right:.5rem;font-size:.75rem}"] });
ListItemComponent.ctorParameters = () => [
    { type: MapService }
];
ListItemComponent.propDecorators = {
    config: [{ type: Input }],
    mapElement: [{ type: Input }],
    itemSelect: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListItemComponent, [{
        type: Component,
        args: [{ selector: 'wf1-list-item', template: "<mat-list-item class=\"list-item\" *ngIf=\"config\">\n  <div class=\"list-item-icon-section\" (mouseover)=\"handleMouseEvent(internalConfig.location)\" (mouseout)=\"handleMouseEvent()\" (focus)=\"handleMouseEvent(internalConfig.location)\" (blur)=\"handleMouseEvent()\" (click)=\"handleClick()\" (keydown)=\"handleClick()\">\n    <div class=\"list-item-icon\">\n      <wf1-application-icon\n              [iconType]=\"internalConfig.icon.type\"\n              [iconSize]=\"internalConfig.icon.size\"\n              [colourCode]=\"internalConfig.icon.colourCode\"\n              [isBlinking]=\"internalConfig.icon.isBlinking\"\n              [isCancelled]=\"internalConfig.icon.isCancelled\"\n              [isAssignedToIncident]=\"internalConfig.icon.isAssignedToIncident\"\n      ></wf1-application-icon>\n    </div>\n    <div *ngIf=\"internalConfig.time\" class=\"list-item-date\">{{internalConfig.time | amDateFormat: 'YYYY-MM-DD'}}</div>\n    <div *ngIf=\"internalConfig.time\" class=\"list-item-time\">{{internalConfig.time | amDateFormat: 'HH:mm:ss'}}</div>\n  </div>\n\n  <div class=\"list-item-data-section\">\n    <div class=\"list-item-title-section\">\n      <span class=\"list-item-title\" (mouseover)=\"handleMouseEvent(internalConfig.location)\" (mouseout)=\"handleMouseEvent()\" (click)=\"handleClick()\">{{internalConfig.title}}</span>\n      <span class=\"list-item-title-level-info\" (mouseover)=\"handleMouseEvent(internalConfig.location)\" (mouseout)=\"handleMouseEvent()\" (click)=\"handleClick()\">\n        <span class=\"list-item-info {{internalConfig.titleLevelInfo.fullWidth?'list-item-info-full-width':''}}\">\n          <span class=\"list-item-info-label\">{{internalConfig.titleLevelInfo.label}}:</span>\n          <span class=\"list-item-info-value {{internalConfig.titleLevelInfo.emphasis?'list-item-info-value-emphasis':''}}\"><strong>{{internalConfig.titleLevelInfo.value}}</strong></span>\n        </span>\n      </span>\n      <span class=\"list-item-locate-button\">\n        <button *ngIf=\"internalConfig.location\" mat-button (click)=\"zoomToPlace(internalConfig.location)\" matTooltip=\"Locate on Map\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>place</mat-icon></button>\n      </span>\n    </div>\n\n    <ng-container *ngFor=\"let row of internalConfig.infoRows\">\n      <div class=\"list-item-info-row\" (mouseover)=\"handleMouseEvent(internalConfig.location)\" (mouseout)=\"handleMouseEvent()\" (focus)=\"handleMouseEvent(internalConfig.location)\" (blur)=\"handleMouseEvent()\" (click)=\"handleClick()\" (keydown)=\"handleClick()\">\n        <ng-container *ngFor=\"let column of row\">\n          <span class=\"list-item-info {{column.fullWidth?'list-item-info-full-width':''}}\" *ngIf=\"column\">\n            <span class=\"list-item-info-label\">{{column.label}}:</span>\n            <span class=\"list-item-info-value {{column.emphasis?'list-item-info-value-emphasis':''}}\"><strong>{{column.value}}</strong></span>\n          </span>\n        </ng-container>\n      </div>\n    </ng-container>\n  </div>\n</mat-list-item>\n", styles: ["mat-list-item.list-item{height:auto;padding:.25rem 0;border-bottom:.0625rem solid #c4c4c4}mat-list-item.list-item:hover{background-color:#eee;cursor:pointer}mat-list-item.list-item .list-item-icon-section{flex:0 0 5rem;width:5rem;height:100%;display:flex;flex-direction:column;justify-content:center;align-items:center}mat-list-item.list-item .list-item-icon-section .list-item-icon .mat-icon,mat-list-item.list-item .list-item-icon-section .list-item-icon .mat-icon svg,mat-list-item.list-item .list-item-icon-section .wf1-application-icon,mat-list-item.list-item .list-item-icon-section .wf1-application-icon svg,mat-list-item.list-item .list-item-icon-section .wf1-main-icon,mat-list-item.list-item .list-item-icon-section .wf1-main-icon svg,mat-list-item.list-item .list-item-icon-section wf1-application-icon,mat-list-item.list-item .list-item-icon-section wf1-application-icon svg{width:3rem;height:3rem}mat-list-item.list-item .list-item-icon-section .list-item-date,mat-list-item.list-item .list-item-icon-section .list-item-time{font-size:x-small;line-height:.75rem}mat-list-item.list-item .list-item-icon-section .list-item-date{padding-top:.5rem}mat-list-item.list-item .list-item-data-section{width:100%}mat-list-item.list-item .list-item-data-section .list-item-title-section{display:flex;justify-content:flex-start;align-items:baseline}mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-title{flex:0 0 9rem;display:inline-block;padding-right:1rem;margin-bottom:0;font-size:.9rem;font-weight:900}@media (-ms-high-contrast:active),(-ms-high-contrast:none){mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-title{padding-right:0}}mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-locate-button{height:1rem;width:1rem}mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-locate-button .mat-button{min-width:1rem;line-height:1rem;padding:0}mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-locate-button .mat-button .mat-icon{height:1rem;width:1rem;font-size:1rem}mat-list-item.list-item .list-item-data-section .list-item-info-row{display:flex;justify-content:flex-start;align-items:baseline}mat-list-item.list-item .list-item-data-section .list-item-info{flex:0 0 9rem;display:flex;justify-content:flex-start;font-size:small}mat-list-item.list-item .list-item-data-section .list-item-info .list-item-info-label{flex:0 0 3rem;padding-right:.5rem;width:3rem;font-size:x-small;text-transform:uppercase}mat-list-item.list-item .list-item-data-section .list-item-info .list-item-info-value{flex:0 0 6rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:6rem;margin-right:.5rem;font-size:.75rem}"] }]
    }], function () { return [{ type: MapService }]; }, { itemSelect: [{
            type: Output
        }], config: [{
            type: Input
        }], mapElement: [{
            type: Input
        }] }); })();

class ListContainerComponent {
    constructor() {
        this.loading = false;
    }
}
ListContainerComponent.ɵfac = function ListContainerComponent_Factory(t) { return new (t || ListContainerComponent)(); };
ListContainerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ListContainerComponent, selectors: [["wf1-list-container"]], inputs: { loading: "loading" }, ngContentSelectors: _c0, decls: 3, vars: 2, consts: [["role", "list"], [4, "ngIf"]], template: function ListContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "mat-list", 0);
        ɵngcc0.ɵɵtemplate(1, ListContainerComponent_ng_container_1_Template, 2, 0, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, ListContainerComponent_ng_container_2_Template, 2, 0, "ng-container", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading);
    } }, dependencies: function () { return [ɵngcc2.NgIf, ɵngcc14.MatList, SpinnerComponent]; }, encapsulation: 2 });
ListContainerComponent.propDecorators = {
    loading: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ListContainerComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-list-container',
                template: "<!--<cdk-virtual-scroll-viewport itemSize=\"50\" class=\"example-viewport\">-->\n\t<!--<ng-container *ngIf=\"loading\">-->\n  \t<!--<wf1-spinner></wf1-spinner>-->\n\t<!--</ng-container>-->\n\t<!--<ng-container *ngIf=\"!loading\">-->\n\t  <!--<ng-content></ng-content>-->\n\t<!--</ng-container>-->\n<!--</cdk-virtual-scroll-viewport>-->\n<mat-list role=\"list\">\n\t<ng-container *ngIf=\"loading\">\n\t\t<wf1-spinner></wf1-spinner>\n\t</ng-container>\n\t<ng-container *ngIf=\"!loading\">\n\t\t<ng-content></ng-content>\n\t</ng-container>\n</mat-list>\n"
            }]
    }], function () { return []; }, { loading: [{
            type: Input
        }] }); })();

class LocationSidebarPanelComponent extends BasicSidebarPanelComponent {
    constructor() {
        super(...arguments);
        this.locationSelect = new EventEmitter();
        this.isInitializing = true;
    }
    set location(location) {
        if (location) {
            this.selectedLocation = location;
        }
    }
    //   constructor(public token: TokenService) {
    //       super(token);
    //   }
    locationSelected(coordinates) {
        this.locationSelect.emit(coordinates);
    }
}
LocationSidebarPanelComponent.ɵfac = /*@__PURE__*/ function () { let ɵLocationSidebarPanelComponent_BaseFactory; return function LocationSidebarPanelComponent_Factory(t) { return (ɵLocationSidebarPanelComponent_BaseFactory || (ɵLocationSidebarPanelComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(LocationSidebarPanelComponent)))(t || LocationSidebarPanelComponent); }; }();
LocationSidebarPanelComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LocationSidebarPanelComponent, selectors: [["wf1-location-sidebar-panel"]], inputs: { location: "location" }, outputs: { locationSelect: "locationSelect" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 9, vars: 3, consts: [[1, "side-panel-container"], [1, "side-panel-title-section"], [1, "side-panel-title"], [3, "ngClass", 4, "ngIf"], [3, "location", "locationSelect"], [1, "side-panel-with-toolbar-content"], [1, "interior-panel"], [3, "ngClass"], ["mat-button", "", 3, "matTooltip", "matTooltipShowDelay", "click"]], template: function LocationSidebarPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "h3", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, LocationSidebarPanelComponent_div_4_Template, 4, 4, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "wf1-location-toolbar", 4);
        ɵngcc0.ɵɵlistener("locationSelect", function LocationSidebarPanelComponent_Template_wf1_location_toolbar_locationSelect_5_listener($event) { return ctx.locationSelected($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 5)(7, "div", 6);
        ɵngcc0.ɵɵprojection(8);
        ɵngcc0.ɵɵelementEnd()()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.titleText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.linkIcon !== undefined);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("location", ctx.selectedLocation);
    } }, dependencies: function () { return [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc6.MatButton, ɵngcc4.MatIcon, ɵngcc8.MatTooltip, LocationToolbarComponent]; }, encapsulation: 2 });
LocationSidebarPanelComponent.propDecorators = {
    location: [{ type: Input }],
    locationSelect: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocationSidebarPanelComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-location-sidebar-panel',
                template: "<div class=\"side-panel-container\">\n    <div class=\"side-panel-title-section\">\n        <h3 class=\"side-panel-title\">{{titleText}}</h3>\n        <div [ngClass]=\"getTitleIconClasses()\" *ngIf=\"linkIcon !== undefined\">\n            <button mat-button (click)=\"titleLinkClicked()\" [matTooltip]=\"linkTitle\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>{{linkIcon}}</mat-icon></button>\n        </div>\n    </div>\n    <wf1-location-toolbar [location]=\"selectedLocation\" (locationSelect)=\"locationSelected($event)\"></wf1-location-toolbar>\n    <div class=\"side-panel-with-toolbar-content\">\n        <div class=\"interior-panel\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n"
            }]
    }], null, { locationSelect: [{
            type: Output
        }], location: [{
            type: Input
        }] }); })();

class LocationToolbarComponent {
    // selectedLocation = new FormControl('', this.geometryValidator(this.mapService));
    constructor(config, mapService) {
        this.config = config;
        this.mapService = mapService;
        this.locationSelect = new EventEmitter();
        this.TOOLTIP_DELAY = 500;
        this.MAP_INSTANCE = 'map';
    }
    set location(location) {
        if (location) {
            // this.selectedLocation.setValue(this.mapService.formatCoordinates(location));
            this.locationSelect.emit(location);
        }
    }
    geometryValidator(mapService) {
        return (control) => {
            return null;
            // if (!control.value) {
            //   return null;
            // }
            // const coordinates = mapService.parseCoordinates(control.value);
            // if (!coordinates) {
            //  return { invalidGeom: 'The geometry is invalid' };
            // } else {
            //   this.mapService.setAnchor(this.MAP_INSTANCE, coordinates);
            //   // const formattedCoordinates = mapService.formatCoordinates(coordinates);
            //   // if (formattedCoordinates !== control.value) {
            //   //   control.patchValue(formattedCoordinates, { emitEvent: false })
            //   // }
            // }
            // return null;
        };
    }
    ngOnInit() {
    }
    ngOnDestroy() {
    }
    zoomToSelectedLocation() {
        // this.mapService.zoomToPlaceNameSearchLocation(this.MAP_INSTANCE);
    }
    setAnchorFromMap() {
        // const location = this.mapService.setAnchorFromMap(this.MAP_INSTANCE);
        // if (location) {
        //     this.selectedLocation.setValue(this.mapService.formatCoordinates(location));
        //     this.locationSelect.emit(location);
        // } else if (this.selectedLocation.value) {
        //     this.locationSelect.emit(this.mapService.parseCoordinates(this.selectedLocation.value));
        // } else {
        //     this.locationSelect.emit(null);
        // }
    }
    clearSelectedLocation() {
        // this.selectedLocation.setValue('');
        // this.locationSelect.emit(null);
        // this.mapService.setAnchor(this.MAP_INSTANCE, null);
    }
}
LocationToolbarComponent.ɵfac = function LocationToolbarComponent_Factory(t) { return new (t || LocationToolbarComponent)(ɵngcc0.ɵɵdirectiveInject(AppConfigService), ɵngcc0.ɵɵdirectiveInject(MapService)); };
LocationToolbarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: LocationToolbarComponent, selectors: [["wf1-location-toolbar"]], inputs: { location: "location" }, outputs: { locationSelect: "locationSelect" }, decls: 12, vars: 3, consts: [[1, "location-toolbar"], ["aria-label", "Selected Location", 1, "selected-location"], [1, "location-toolbar-buttons"], ["mat-button", "", "matTooltip", "Zoom To Selected Location", "aria-label", "Zoom To Selected Location", 1, "location-section-header-button", 3, "matTooltipShowDelay", "click"], ["mat-button", "", "matTooltip", "Set Location From Map", "aria-label", "Set Location From Map", 1, "location-section-header-button", 3, "matTooltipShowDelay", "click"], ["mat-button", "", "matTooltip", "Clear Search Fields", "aria-label", "Clear Point ID Search Fields", 1, "location-section-header-button", 3, "matTooltipShowDelay", "click"]], template: function LocationToolbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "mat-form-field", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2)(3, "button", 3);
        ɵngcc0.ɵɵlistener("click", function LocationToolbarComponent_Template_button_click_3_listener() { return ctx.zoomToSelectedLocation(); });
        ɵngcc0.ɵɵelementStart(4, "mat-icon");
        ɵngcc0.ɵɵtext(5, "place");
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(6, "button", 4);
        ɵngcc0.ɵɵlistener("click", function LocationToolbarComponent_Template_button_click_6_listener() { return ctx.setAnchorFromMap(); });
        ɵngcc0.ɵɵelementStart(7, "mat-icon");
        ɵngcc0.ɵɵtext(8, "map");
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(9, "button", 5);
        ɵngcc0.ɵɵlistener("click", function LocationToolbarComponent_Template_button_click_9_listener() { return ctx.clearSelectedLocation(); });
        ɵngcc0.ɵɵelementStart(10, "mat-icon");
        ɵngcc0.ɵɵtext(11, "clear");
        ɵngcc0.ɵɵelementEnd()()()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx.TOOLTIP_DELAY);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx.TOOLTIP_DELAY);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx.TOOLTIP_DELAY);
    } }, dependencies: [ɵngcc6.MatButton, ɵngcc16.MatFormField, ɵngcc4.MatIcon, ɵngcc8.MatTooltip], encapsulation: 2 });
LocationToolbarComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: MapService }
];
LocationToolbarComponent.propDecorators = {
    location: [{ type: Input }],
    locationSelect: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocationToolbarComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-location-toolbar',
                template: "<div class=\"location-toolbar\">\n    <mat-form-field aria-label=\"Selected Location\" class=\"selected-location\">\n        <!-- <input matInput placeholder=\"Selected location (lat, long)\" [formControl]=\"selectedLocation\">\n        <mat-error *ngIf=\"selectedLocation.hasError('required')\">Coordinates are required</mat-error>\n        <mat-error *ngIf=\"selectedLocation.hasError('invalidGeom')\">Coordinates are invalid</mat-error> -->\n    </mat-form-field>\n    <div class=\"location-toolbar-buttons\">\n        <button class=\"location-section-header-button\" mat-button matTooltip=\"Zoom To Selected Location\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" aria-label=\"Zoom To Selected Location\" (click)=\"zoomToSelectedLocation()\">\n            <mat-icon>place</mat-icon>\n        </button>\n        <button class=\"location-section-header-button\" mat-button matTooltip=\"Set Location From Map\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" aria-label=\"Set Location From Map\" (click)=\"setAnchorFromMap()\">\n            <mat-icon>map</mat-icon>\n        </button>\n        <button class=\"location-section-header-button\" mat-button matTooltip=\"Clear Search Fields\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" aria-label=\"Clear Point ID Search Fields\" (click)=\"clearSelectedLocation()\">\n            <mat-icon>clear</mat-icon>\n        </button>\n    </div>\n</div>\n"
            }]
    }], function () { return [{ type: AppConfigService }, { type: MapService }]; }, { locationSelect: [{
            type: Output
        }], location: [{
            type: Input
        }] }); })();

class ReportDialogComponent {
    constructor(data) {
        this.data = data;
        if (data) {
            this.elementId = data.elementId;
            this.reportPath = data.reportPath;
            this.reportParams = data.reportParams;
            this.supportedExportFormats = data.supportedExportFormats;
        }
    }
    ngOnInit() {
    }
}
ReportDialogComponent.ɵfac = function ReportDialogComponent_Factory(t) { return new (t || ReportDialogComponent)(ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
ReportDialogComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ReportDialogComponent, selectors: [["wf1-report-dialog"]], decls: 1, vars: 4, consts: [[3, "elementId", "reportPath", "reportParams", "supportedExportFormats"]], template: function ReportDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "wf1-visualize-js", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("elementId", ctx.elementId)("reportPath", ctx.reportPath)("reportParams", ctx.reportParams)("supportedExportFormats", ctx.supportedExportFormats);
    } }, dependencies: function () { return [VisualizeJSComponent]; } });
ReportDialogComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReportDialogComponent, [{
        type: Component,
        args: [{ selector: 'wf1-report-dialog', template: "<wf1-visualize-js [elementId]=\"elementId\" [reportPath]=\"reportPath\" [reportParams]=\"reportParams\" [supportedExportFormats]=\"supportedExportFormats\"></wf1-visualize-js>\n" }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, null); })();

/**
 * Function needed to run the application config service at app initialization time.
 */
function appInitializerFn(injector) {
    const appConfig = injector.get(AppConfigService);
    appConfig.configEmitter.subscribe(config => {
        const tokenService = injector.get(TokenService);
    });
    return () => appConfig.loadAppConfig();
}
const selectCurrentSearchParam = (prop, param) => (state) => ((state[prop]) ? state[prop][param] : null);

var SearchActionTypes;
(function (SearchActionTypes) {
    SearchActionTypes["UPDATE_SEARCH_QUERY"] = "[ Search ] Update search query text";
    SearchActionTypes["RESET_SEARCH_QUERY"] = "[ Search ] Reset search query text";
    SearchActionTypes["UPDATE_SORT"] = "[ Search ] Update active sort";
    SearchActionTypes["TOGGLE_SORT_MODAL"] = "[ Search ] Toggle sort modal visibility";
    SearchActionTypes["UPDATE_ACTIVE_FILTERS"] = "[ Search ] Update active filters";
    SearchActionTypes["UPDATE_HIDDEN_FILTERS"] = "[ Search ] Update hidden filters";
    SearchActionTypes["CLEAR_FILTER"] = "[ Search ] Clear filter";
    SearchActionTypes["CLEAR_ALL_FILTERS"] = "[ Search ] Clear all filters";
    SearchActionTypes["REFRESH_SEARCH"] = "[ Search ] Refresh search";
})(SearchActionTypes || (SearchActionTypes = {}));
class UpdateSearchQueryAction {
    constructor(query, componentId) {
        this.query = query;
        this.componentId = componentId;
        this.type = SearchActionTypes.UPDATE_SEARCH_QUERY;
    }
}
class ResetSearchQueryAction {
    constructor(componentId) {
        this.componentId = componentId;
        this.type = SearchActionTypes.RESET_SEARCH_QUERY;
    }
}
class UpdateSortAction {
    constructor(param, direction, componentId) {
        this.param = param;
        this.direction = direction;
        this.componentId = componentId;
        this.type = SearchActionTypes.UPDATE_SORT;
    }
}
class ToggleSortModalAction {
    constructor(componentId) {
        this.componentId = componentId;
        this.type = SearchActionTypes.TOGGLE_SORT_MODAL;
    }
}
class UpdateActiveFiltersAction {
    constructor(filters, componentId) {
        this.filters = filters;
        this.componentId = componentId;
        this.type = SearchActionTypes.UPDATE_ACTIVE_FILTERS;
    }
}
class UpdateHiddenFiltersAction {
    constructor(filters, componentId) {
        this.filters = filters;
        this.componentId = componentId;
        this.type = SearchActionTypes.UPDATE_HIDDEN_FILTERS;
    }
}
class ClearFilterAction {
    constructor(filterToRemove, componentId) {
        this.filterToRemove = filterToRemove;
        this.componentId = componentId;
        this.type = SearchActionTypes.CLEAR_FILTER;
    }
}
class ClearAllFiltersAction {
    constructor(componentId) {
        this.componentId = componentId;
        this.type = SearchActionTypes.CLEAR_ALL_FILTERS;
    }
}
class RefreshSearchAction {
    constructor(componentId) {
        this.componentId = componentId;
        this.type = SearchActionTypes.REFRESH_SEARCH;
    }
}

var actions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get SearchActionTypes () { return SearchActionTypes; },
    UpdateSearchQueryAction: UpdateSearchQueryAction,
    ResetSearchQueryAction: ResetSearchQueryAction,
    UpdateSortAction: UpdateSortAction,
    ToggleSortModalAction: ToggleSortModalAction,
    UpdateActiveFiltersAction: UpdateActiveFiltersAction,
    UpdateHiddenFiltersAction: UpdateHiddenFiltersAction,
    ClearFilterAction: ClearFilterAction,
    ClearAllFiltersAction: ClearAllFiltersAction,
    RefreshSearchAction: RefreshSearchAction
});

const moment$1 = momentInstance;
class FiltersComponent {
    constructor(formBuilder, store) {
        this.formBuilder = formBuilder;
        this.store = store;
        this.filters = [];
        this.TOOLTIP_DELAY = 500;
        this.fromDateMin = [];
        this.toDateMax = [];
        this.DATE_FORMATS = {
            fullPickerInput: 'YYYY-MM-DD HH:mm',
            datePickerInput: 'YYYY-MM-DD',
            timePickerInput: 'HH:mm:ss',
            monthYearLabel: 'YYYY-MM',
            dateA11yLabel: 'YYYY-MMM-DD',
            monthYearA11yLabel: 'YYYY-MMM',
        };
        this.isShowingFilterOptions = new EventEmitter();
        this.activeFilters = {};
        this.showBody = false;
        this.lastTabPosition = -1;
        this.clearFilterIconType = IncidentType.NOT_SET;
        this.validateDate = (m) => {
            if (!m) { // empty value , so return valid format true
                return true;
            }
            else if (m.creationData) { //Moment
                let input = m.creationData().input;
                if (input.year) { //datepicker selection - input is a Date object - must be valid
                    return true;
                }
                else { //string input - check strict format using moment
                    return moment$1(input, this.DATE_FORMATS.datePickerInput, true).isValid() || moment$1(input, this.DATE_FORMATS.fullPickerInput, true).isValid();
                }
            }
            else {
                return true;
            }
        };
    }
    ngOnChanges(changes) {
        if (changes.filters) {
            this.createForm();
        }
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
        this.getActiveFilters();
        setTimeout(() => {
            this.toggleActiveTabContent(true, true);
        }, 500);
    }
    createForm() {
        let fb = this.formBuilder;
        const config = this.filters.reduce(function (acc, f) {
            switch (f.type) {
                case 'dateRange':
                case 'dateTimeRange':
                    acc[f.param] = fb.array([fb.control(null), fb.control(null)]);
                    break;
                case 'single':
                    acc[f.param] = fb.control(null);
                    break;
                case 'multi':
                default:
                    acc[f.param] = fb.array(f.options.map(function () {
                        return fb.control(false);
                    }));
                    break;
            }
            return acc;
        }, {});
        this.filterForm = this.formBuilder.group(config);
    }
    checkboxUpdated(event) {
        const fv = this.filterForm.getRawValue();
        // console.log(fv)
        this.extractValuesFromForm(fv);
    }
    dateUpdated(event, param, fromTo) {
        let fromControl = this.getFormControlsFromArray(this.filterForm, param)[0];
        let toControl = this.getFormControlsFromArray(this.filterForm, param)[1];
        let hasError = false;
        let fromVal = fromTo == 'from' ? event.value : fromControl.value;
        let toVal = fromTo == 'to' ? event.value : toControl.value;
        if (fromTo == 'from' && !this.validateDate(fromVal)) {
            fromControl.setErrors({ 'incorrectFormat': true });
            hasError = true;
        }
        else if (fromTo == 'to' && !this.validateDate(toVal)) {
            toControl.setErrors({ 'incorrectFormat': true });
            hasError = true;
        }
        if (!hasError && fromVal && toVal) {
            fromControl.setErrors(null);
            toControl.setErrors(null);
            let toMoment = moment$1(toVal);
            let fromMoment = moment$1(fromVal);
            if (fromMoment.isAfter(toMoment)) {
                if (fromTo == 'from') {
                    fromControl.setErrors({ 'fromAfterTo': true });
                }
                else {
                    toControl.setErrors({ 'toBeforeFrom': true });
                }
                hasError = true;
            }
        }
        if (!hasError) {
            this.extractValuesFromForm(this.filterForm.getRawValue());
        }
    }
    getActiveFilters() {
        this.store.pipe(select(selectCurrentSearchParam(this.componentId, 'filters'))).subscribe(filters => {
            this.activeFilters = filters;
            setTimeout(() => {
                this.updateFormValues();
            }, 0);
        });
    }
    selectTab(tab) {
        // Toggle tab content if active tab is selected, or open tab content if tab clicked and currently tabs are hidden.
        this.toggleActiveTabContent(tab.isActive, this.showBody);
        if (tab.isActive || !this.showBody) {
            this.showBody = !this.showBody;
            this.isShowingFilterOptions.emit(this.showBody);
        }
        this.lastTabPosition = tab.position;
    }
    toggleActiveTabContent(isActiveTab, showBody) {
        let tabBodyWrapperEl = this.filterTabBodyEl.nativeElement.parentElement;
        if (isActiveTab) {
            if (showBody) {
                tabBodyWrapperEl.classList.remove('slidedown');
                tabBodyWrapperEl.classList.add('slideup');
            }
            else {
                tabBodyWrapperEl.classList.remove('slideup');
                tabBodyWrapperEl.classList.add('slidedown');
            }
        }
        else {
            tabBodyWrapperEl.classList.remove('slideup');
            tabBodyWrapperEl.classList.add('slidedown');
        }
    }
    clearFilter(param) {
        this.store.dispatch(new ClearFilterAction(param, this.componentId));
        let formArray = this.filterForm.get(param);
        for (let i = 0; i < formArray.length; i++) {
            let formControl = formArray.controls[i];
            formControl.reset();
        }
    }
    // Update from values from Redux
    updateFormValues() {
        let af = this.activeFilters;
        const formValue = this.filters.reduce(function (acc, f) {
            switch (f.type) {
                case 'dateRange':
                case 'dateTimeRange':
                    acc[f.param] = af && af[f.param] || [null, null];
                    break;
                case 'single':
                    acc[f.param] = ([].concat(af[f.param]))[0]; // ensure scalar, might be array
                    break;
                case 'multi':
                default:
                    acc[f.param] = f.options
                        .map(function (o) {
                        if (!af || !af[f.param])
                            return false;
                        return af[f.param].includes(o.value);
                    });
                    break;
            }
            return acc;
        }, {});
        this.filterForm.patchValue(formValue, { emitEvent: false });
    }
    // Convert form control boolean values to filter values
    extractValuesFromForm(filterValues) {
        const filter = this.filters.reduce(function (acc, f) {
            acc[f.param] = f;
            return acc;
        }, {});
        const validDate = (d) => {
            if (!d || !this.validateDate(d))
                return null;
            return d;
        };
        const activeFilters = Object.entries(filterValues).reduce(function (acc, [prop, val]) {
            let f = filter[prop];
            switch (f.type) {
                case 'dateRange':
                case 'dateTimeRange':
                    acc[prop] = [validDate(val[prop][0]), validDate(val[prop][1])];
                    break;
                case 'single':
                    acc[prop] = val;
                    break;
                case 'multi':
                default:
                    let vals = val
                        .map(function (v, i) { return v ? f.options[i].value : null; })
                        .filter(function (v) { return v; });
                    if (vals.length > 0)
                        acc[prop] = vals;
                    break;
            }
            return acc;
        }, {});
        if (this.filterForm.valid) {
            this.store.dispatch(new UpdateActiveFiltersAction(activeFilters, this.componentId));
        }
    }
    // Template functions
    getFormArrayNames(group) {
        return Object.keys(group.controls);
    }
    getFormControlsFromArray(group, prop) {
        const array = group.get(prop);
        return array.controls;
    }
    getSelectedFilterValues(param) {
        const filter = this.filters.find(function (f) { return f.param == param; });
        let af = this.activeFilters[param];
        switch (filter.type) {
            case 'dateRange':
            case 'dateTimeRange':
                let controls = this.getFormControlsFromArray(this.filterForm, param);
                if (controls) {
                    let format = filter.type == 'dateRange' ? this.DATE_FORMATS.datePickerInput : this.DATE_FORMATS.fullPickerInput;
                    let from = controls[0] && controls[0].value && this.validateDate(controls[0].value) ? moment$1(controls[0].value).format(format) : 'Any';
                    let to = controls[1] && controls[1].value && this.validateDate(controls[1].value) ? moment$1(controls[1].value).format(format) : 'Any';
                    return from == "Any" && to == "Any" ? "Any" : from + ' - ' + to;
                }
                else {
                    return "Any";
                }
            case 'single':
                let val = ([].concat(af))[0];
                if (!val)
                    return 'Any';
                return filter.options.find(function (o) { return o.value == val; }).label;
            case 'multi':
            default:
                if (!af || !af.length)
                    return 'Any';
                return filter.options.find(function (o) { return o.value == af[0]; }).label;
            // return (this.activeFilters
            //     && this.labelLookup
            //     && this.activeFilters[param]
            //     && this.activeFilters[param].length > 0
            //     //&& this.activeFilters[param][0]
            //     && this.labelLookup[param])
            //     ? this.labelLookup[param][this.activeFilters[param][0]]
            //     : "Any";
        }
    }
}
FiltersComponent.ɵfac = function FiltersComponent_Factory(t) { return new (t || FiltersComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc11.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc13.Store)); };
FiltersComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FiltersComponent, selectors: [["wf1-filters"]], viewQuery: function FiltersComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterTabBodyEl = _t.first);
    } }, inputs: { filters: "filters", componentId: "componentId" }, outputs: { isShowingFilterOptions: "isShowingFilterOptions" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [[1, "wf1-filters", 3, "formGroup"], ["class", "filter-tab", 4, "ngFor", "ngForOf"], [1, "filter-tab"], ["tab", "matTab"], ["matTabLabel", ""], ["matTabContent", ""], [1, "filter-tab__header", 3, "click", "keydown"], [1, "filter-tab__header__title"], [1, "filter-tab__header__subtitle"], [1, "filter-tab__body"], ["filtertabbody", ""], [1, "filter-tab__body__icon"], ["iconType", "filter-cancel", "matTooltip", "Clear Filter", 1, "filter-tab__body__clear", 3, "colourCode", "matTooltipShowDelay", "click"], [1, "filter-tab__body__options"], [4, "ngIf"], [1, "date-picker-input"], ["matInput", "", "placeholder", "From", "wf1CoreDateMask", "", 3, "owlDateTime", "formControl", "dateTimeChange"], ["mat-button", "", 3, "owlDateTimeTrigger"], [3, "pickerType", "showSecondsTimer"], ["fromDT", ""], ["matInput", "", "placeholder", "To", "wf1CoreDateMask", "", 3, "owlDateTime", "formControl", "dateTimeChange"], ["toDT", ""], [1, "filter-tab__body__radiogroup", 3, "formControl", "change"], ["class", "filter-tab__body__radiogroup__radiobutton", 3, "value", 4, "ngFor", "ngForOf"], [1, "filter-tab__body__radiogroup__radiobutton", 3, "value"], [1, "filter-tab__body__radiogroup__radiobutton__label"], [4, "ngFor", "ngForOf"], ["class", "filter-tab__body__checkbox", 3, "formControl", "change", 4, "ngIf"], [1, "filter-tab__body__checkbox", 3, "formControl", "change"], [1, "filter-tab__body__checkbox__label"]], template: function FiltersComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0)(1, "mat-tab-group");
        ɵngcc0.ɵɵtemplate(2, FiltersComponent_mat_tab_2_Template, 4, 0, "mat-tab", 1);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.filterForm);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.getFormArrayNames(ctx.filterForm));
    } }, dependencies: [ɵngcc10.OwlDateTimeTriggerDirective, ɵngcc10.OwlDateTimeInputDirective, ɵngcc10.OwlDateTimeComponent, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc11.ɵNgNoValidate, ɵngcc11.DefaultValueAccessor, ɵngcc11.NgControlStatus, ɵngcc11.NgControlStatusGroup, ɵngcc6.MatButton, ɵngcc17.MatCheckbox, ɵngcc16.MatFormField, ɵngcc16.MatError, ɵngcc4.MatIcon, ɵngcc12.MatInput, ɵngcc18.MatRadioGroup, ɵngcc18.MatRadioButton, ɵngcc19.MatTabContent, ɵngcc19.MatTabLabel, ɵngcc19.MatTab, ɵngcc19.MatTabGroup, ɵngcc8.MatTooltip, ɵngcc11.FormControlDirective, ɵngcc11.FormGroupDirective, ApplicationIconComponent, DateMaskDirective], styles: [".slideup{max-height:0!important;overflow-y:hidden!important;transition:max-height .8s ease-in!important}  .slidedown{max-height:500px!important;overflow-y:hidden!important;transition:max-height .8s ease-out!important}"] });
FiltersComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: Store }
];
FiltersComponent.propDecorators = {
    filters: [{ type: Input }],
    componentId: [{ type: Input }],
    isShowingFilterOptions: [{ type: Output }],
    filterTabBodyEl: [{ type: ViewChild, args: ['filtertabbody',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FiltersComponent, [{
        type: Component,
        args: [{ selector: 'wf1-filters', template: "<form class=\"wf1-filters\" [formGroup]=\"filterForm\">\n\t<mat-tab-group>\n\t\t<mat-tab #tab=\"matTab\" class=\"filter-tab\" *ngFor=\"let param of getFormArrayNames(filterForm); let i = index\">\n\t\t\t<ng-template matTabLabel>\n\t\t\t\t<div class=\"filter-tab__header\" (click)=\"selectTab(tab)\" (keydown)=\"selectTab(tab)\">\n\t\t\t\t\t<span class=\"filter-tab__header__title\">{{filters[i].label}}</span>\n\t\t\t\t\t<span class=\"filter-tab__header__subtitle\">\n\t\t\t\t\t\t{{ getSelectedFilterValues( param ) }}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t\t<ng-template matTabContent>\n\t\t\t\t<div class=\"filter-tab__body\" #filtertabbody>\n\t\t\t\t\t<div class=\"filter-tab__body__icon\">\n\t\t\t\t\t\t<wf1-application-icon class=\"filter-tab__body__clear\" iconType=\"filter-cancel\" [colourCode]=\"clearFilterIconType\" (click)=\"clearFilter(param)\" matTooltip=\"Clear Filter\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"></wf1-application-icon>\n\t\t\t\t\t</div>\n          \t\t\t<div class=\"filter-tab__body__options\">\n\t\t\t\t\t\t<ng-container *ngIf=\"filters[i].type == 'dateRange' || filters[i].type == 'dateTimeRange'\">\n\t\t\t\t\t\t\t<mat-form-field class=\"date-picker-input\">\n\t\t\t\t\t\t\t\t<input matInput [owlDateTime]=\"fromDT\" (dateTimeChange)=\"dateUpdated($event, param, 'from')\"\n\t\t\t\t\t\t\t\t\t   placeholder=\"From\"\n\t\t\t\t\t\t\t\t\t   [formControl]=\"getFormControlsFromArray(filterForm, param)[0]\"\n\t\t\t\t\t\t\t\t\t   wf1CoreDateMask>\n\t\t\t\t\t\t\t\t<button mat-button [owlDateTimeTrigger]=\"fromDT\">\n\t\t\t\t\t\t\t\t\t<mat-icon>event</mat-icon>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<owl-date-time #fromDT pickerType=\"{{filters[i].type == 'dateRange'? 'calendar': 'both'}}\"\n\t\t\t\t\t\t\t\t\t\t\t   [showSecondsTimer]=\"false\"></owl-date-time>\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"getFormControlsFromArray(filterForm, param)[0].hasError('incorrectFormat') || getFormControlsFromArray(filterForm, param)[0].hasError('owlDateTimeParse')\">Format must be {{filters[i].type == 'dateRange'? DATE_FORMATS.datePickerInput: DATE_FORMATS.fullPickerInput}}</mat-error>\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"getFormControlsFromArray(filterForm, param)[0].hasError('fromAfterTo')\">\"From\" date cannot be after \"To\" date.</mat-error>\n\t\t\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t\t\t<mat-form-field class=\"date-picker-input\">\n\t\t\t\t\t\t\t\t<input matInput [owlDateTime]=\"toDT\" (dateTimeChange)=\"dateUpdated($event, param,'to')\"\n\t\t\t\t\t\t\t\t\t   placeholder=\"To\"\n\t\t\t\t\t\t\t\t\t   [formControl]=\"getFormControlsFromArray(filterForm, param)[1]\"\n\t\t\t\t\t\t\t\t\t   wf1CoreDateMask>\n\t\t\t\t\t\t\t\t<button mat-button [owlDateTimeTrigger]=\"toDT\">\n\t\t\t\t\t\t\t\t\t<mat-icon>event</mat-icon>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<owl-date-time #toDT pickerType=\"{{filters[i].type == 'dateRange'? 'calendar': 'both'}}\"\n\t\t\t\t\t\t\t\t\t\t\t   [showSecondsTimer]=\"false\" ></owl-date-time>\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"getFormControlsFromArray(filterForm, param)[1].hasError('incorrectFormat') || getFormControlsFromArray(filterForm, param)[1].hasError('owlDateTimeParse')\">Format must be {{filters[i].type == 'dateRange'? DATE_FORMATS.datePickerInput: DATE_FORMATS.fullPickerInput}}</mat-error>\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"getFormControlsFromArray(filterForm, param)[1].hasError('toBeforeFrom')\">\"To\" date cannot be before \"From\" date.</mat-error>\n\t\t\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t\t</ng-container>\n\n                        <ng-container *ngIf=\"filters[i].type == 'single'\">\n\t\t\t\t\t\t\t<mat-radio-group  \n                                class=\"filter-tab__body__radiogroup\" \n                                [formControl]=\"filterForm.get( param )\" \n                                (change)=\"checkboxUpdated($event);\"\n                            >\n\t\t\t\t\t\t\t\t<mat-radio-button\n                                    *ngFor=\"let filterControl of filters[ i ].options; let j = index\" \n                                    class=\"filter-tab__body__radiogroup__radiobutton\" \n                                    [value]=\"filters[i].options[j].value\"\n                                >\n                                    <span class=\"filter-tab__body__radiogroup__radiobutton__label\">\n                                        {{filters[i].options[j].label}}\n                                    </span>\n\t\t\t\t\t\t\t\t</mat-radio-button>\n\t\t\t\t\t\t\t</mat-radio-group>\n\t\t\t\t\t\t</ng-container>\n\n                        <ng-container *ngIf=\"filters[i].type == 'multi' || !filters[i].type\">\n\t\t\t\t\t\t\t<ng-container *ngFor=\"let filterControl of getFormControlsFromArray(filterForm, param); let j = index\" >\n\t\t\t\t\t\t\t\t<mat-checkbox \n                                    class=\"filter-tab__body__checkbox\" \n                                    [formControl]=\"filterControl\" \n                                    *ngIf=\"filters[i].options[j]\" \n                                    (change)=\"checkboxUpdated($event);\"\n                                >\n\t\t\t\t\t\t\t\t    <span class=\"filter-tab__body__checkbox__label\">\n\t\t\t\t\t\t\t\t\t    {{filters[i].options[j].label}}\n\t\t\t\t\t\t\t\t    </span>\n\t\t\t\t\t\t\t\t</mat-checkbox>\n\t\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t</ng-container>\n                    </div>\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t</mat-tab>\n\t</mat-tab-group>\n</form>\n", styles: ["::ng-deep .slideup{max-height:0!important;overflow-y:hidden!important;transition:max-height .8s ease-in!important}::ng-deep .slidedown{max-height:500px!important;overflow-y:hidden!important;transition:max-height .8s ease-out!important}"] }]
    }], function () { return [{ type: ɵngcc11.FormBuilder }, { type: ɵngcc13.Store }]; }, { filters: [{
            type: Input
        }], isShowingFilterOptions: [{
            type: Output
        }], componentId: [{
            type: Input
        }], filterTabBodyEl: [{
            type: ViewChild,
            args: ['filtertabbody']
        }] }); })();

class SortComponent {
    constructor(store) {
        this.store = store;
        this.isVisible = false;
        this.toggleSortDirection = (dir) => dir === 'ASC' ? 'DESC' : 'ASC';
        this.isActiveParam = (param) => param === this.activeSortParam;
        this.isActiveDir = (dir) => dir === this.activeSortDir;
        this.showArrow = (param, dir) => this.isActiveParam(param) && this.isActiveDir(dir);
    }
    ngOnInit() {
        this.setVisiblility();
        this.setDefaultSort();
    }
    setVisiblility() {
        this.isVisible = true;
        this.store.pipe(select(selectCurrentSearchParam(this.componentId, 'sortModalVisible'))).subscribe((isVisible) => this.isVisible = isVisible);
    }
    setDefaultSort() {
        if (this.defaultSort) {
            this.store.dispatch(new UpdateSortAction(this.defaultSort.param, this.defaultSort.direction, this.componentId));
        }
        this.store.pipe(select(selectCurrentSearchParam(this.componentId, 'sortParam'))).subscribe((param) => this.activeSortParam = param);
        this.store.pipe(select(selectCurrentSearchParam(this.componentId, 'sortDirection'))).subscribe((dir) => this.activeSortDir = dir);
    }
    updateSort(option) {
        const direction = option.param === this.activeSortParam ? this.toggleSortDirection(this.activeSortDir) : 'DESC';
        this.store.dispatch(new UpdateSortAction(option.param, direction, this.componentId));
    }
    close() {
        this.store.dispatch(new ToggleSortModalAction(this.componentId));
    }
}
SortComponent.ɵfac = function SortComponent_Factory(t) { return new (t || SortComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc13.Store)); };
SortComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SortComponent, selectors: [["wf1-sort-modal"]], inputs: { defaultSort: "defaultSort", options: "options", componentId: "componentId" }, decls: 7, vars: 3, consts: [[1, "sort-popup"], [1, "sort-popup__header"], [1, "sort-popup__header__text"], [1, "sort-popup__header__icon", 3, "click", "keydown"], [4, "ngFor", "ngForOf"], [1, "sort-popup__item", 3, "ngClass", "click", "keydown"], [1, "sort-popup__item__text"], ["class", "sort-popup__item__icon", 4, "ngIf"], [1, "sort-popup__item__icon"]], template: function SortComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "span", 2);
        ɵngcc0.ɵɵtext(3, "Sort");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-icon", 3);
        ɵngcc0.ɵɵlistener("click", function SortComponent_Template_mat_icon_click_4_listener() { return ctx.close(); })("keydown", function SortComponent_Template_mat_icon_keydown_4_listener() { return ctx.close(); });
        ɵngcc0.ɵɵtext(5, "close");
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵtemplate(6, SortComponent_ng_container_6_Template, 6, 6, "ng-container", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("sort-popup--visible", ctx.isVisible);
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.options);
    } }, dependencies: [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc4.MatIcon], encapsulation: 2 });
SortComponent.ctorParameters = () => [
    { type: Store }
];
SortComponent.propDecorators = {
    defaultSort: [{ type: Input }],
    options: [{ type: Input }],
    componentId: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SortComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-sort-modal',
                template: "<div class=\"sort-popup\" [class.sort-popup--visible]=\"isVisible\">\n\t<div class=\"sort-popup__header\">\n\t\t<span class=\"sort-popup__header__text\">Sort</span>\n\t\t<mat-icon class=\"sort-popup__header__icon\" (click)=\"close()\" (keydown)=\"close()\">close</mat-icon>\n\t</div>\n\t<ng-container *ngFor=\"let option of options\">\n\t\t<div class=\"sort-popup__item\" [ngClass]=\"{'sort-popup__item--active': isActiveParam(option.param)}\" (click)=\"updateSort(option)\" (keydown)=\"updateSort(option)\">\n\t\t\t<span class=\"sort-popup__item__text\">{{option.label}}</span>\n\t\t\t<mat-icon class=\"sort-popup__item__icon\" *ngIf=\"!isActiveParam(option.param) || showArrow(option.param, 'DESC')\">\n\t\t\t\tarrow_drop_down\n\t\t\t</mat-icon>\n\t\t\t<mat-icon class=\"sort-popup__item__icon\" *ngIf=\"showArrow(option.param, 'ASC')\">\n\t\t\t\tarrow_drop_up\n\t\t\t</mat-icon>\n\t\t</div>\n\t</ng-container>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc13.Store }]; }, { defaultSort: [{
            type: Input
        }], options: [{
            type: Input
        }], componentId: [{
            type: Input
        }] }); })();

class SearchBarComponent {
    constructor(store) {
        this.store = store;
        this.TOOLTIP_DELAY = 500;
        this.count = 0;
        this.showSortButton = false;
        this.searchControl = new FormControl();
        this.clearFilterIconType = IncidentType.NOT_SET;
        this.isResetSearch = false;
    }
    set sortModal(modal) {
        this.showSortButton = modal ? true : false;
    }
    ngOnInit() {
        this.resetSearch();
        this.listenSearchChanges();
    }
    resetSearch() {
        this.isResetSearch = true;
        this.store.dispatch(new ResetSearchQueryAction(this.componentId));
    }
    listenSearchChanges() {
        this.store.pipe(select(selectCurrentSearchParam(this.componentId, 'query'))).subscribe((searchTerm) => {
            // console.log("this.searchControl.setValue change: ", searchTerm);
            // console.log("this.searchControl.setValue isResetSearch: " + this.isResetSearch);
            if (this.isResetSearch && this.searchControl.value == searchTerm) {
                // console.log("isReset true and same value so won't trigger searchControl observable.  reset isReset to false;")
                this.isResetSearch = false;
            }
            this.searchControl.setValue(searchTerm, { emitEvent: true });
        });
        this.searchControl.valueChanges.pipe(distinctUntilChanged()).subscribe((searchTerm) => {
            // console.log("this.searchControl.valueChanges isResetSearch: " + this.isResetSearch);
            // console.log("searchControl value change: ", searchTerm);
            if (this.isResetSearch) {
                // console.log("this.searchControl.valueChanges reset to false");
                this.isResetSearch = false;
            }
            else {
                // console.log("this.searchControl.valueChanges update search");
                this.updateSearch(searchTerm);
            }
        });
    }
    refreshSearch() {
        this.store.dispatch(new RefreshSearchAction(this.componentId));
    }
    updateSearch(searchTerm) {
        this.store.dispatch(new UpdateSearchQueryAction(searchTerm, this.componentId));
    }
    toggleSortModal() {
        this.store.dispatch(new ToggleSortModalAction(this.componentId));
    }
    clearFilters() {
        this.store.dispatch(new ClearAllFiltersAction(this.componentId));
    }
}
SearchBarComponent.ɵfac = function SearchBarComponent_Factory(t) { return new (t || SearchBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc13.Store)); };
SearchBarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SearchBarComponent, selectors: [["wf1-search-bar"]], contentQueries: function SearchBarComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, SortComponent, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sortModal = _t.first);
    } }, inputs: { count: "count", componentId: "componentId" }, ngContentSelectors: _c4, decls: 17, vars: 7, consts: [[1, "side-panel-toolbar", "search"], ["class", "search__sort", "matTooltip", "Sort", 3, "matTooltipShowDelay", "click", "keydown", 4, "ngIf"], [1, "search__count"], [1, "search__count__number"], [1, "search__input"], ["aria-label", "Search...", 1, "search__input__control"], ["matInput", "", "placeholder", "Search...", 3, "formControl"], ["matTooltip", "Clear Search", 1, "search__cancel", 3, "matTooltipShowDelay", "click", "keydown"], [1, "search__cancel__icon"], ["matTooltip", "Refresh Search", 1, "search__refresh", 3, "matTooltipShowDelay", "click", "keydown"], [1, "search__refresh__icon"], ["matTooltip", "Clear Filters", 1, "search__clear-filters", 3, "matTooltipShowDelay", "click", "keydown"], ["iconType", "filter-cancel", 3, "colourCode"], ["matTooltip", "Sort", 1, "search__sort", 3, "matTooltipShowDelay", "click", "keydown"], [1, "search__sort__icon"]], template: function SearchBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c3);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, SearchBarComponent_div_1_Template, 3, 1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementStart(3, "div", 2)(4, "span", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(6, "div", 4)(7, "mat-form-field", 5);
        ɵngcc0.ɵɵelement(8, "input", 6);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(9, "div", 7);
        ɵngcc0.ɵɵlistener("click", function SearchBarComponent_Template_div_click_9_listener() { return ctx.resetSearch(); })("keydown", function SearchBarComponent_Template_div_keydown_9_listener() { return ctx.resetSearch(); });
        ɵngcc0.ɵɵelementStart(10, "mat-icon", 8);
        ɵngcc0.ɵɵtext(11, "close");
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵlistener("click", function SearchBarComponent_Template_div_click_12_listener() { return ctx.refreshSearch(); })("keydown", function SearchBarComponent_Template_div_keydown_12_listener() { return ctx.refreshSearch(); });
        ɵngcc0.ɵɵelementStart(13, "mat-icon", 10);
        ɵngcc0.ɵɵtext(14, "refresh");
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(15, "div", 11);
        ɵngcc0.ɵɵlistener("click", function SearchBarComponent_Template_div_click_15_listener() { return ctx.clearFilters(); })("keydown", function SearchBarComponent_Template_div_keydown_15_listener() { return ctx.clearFilters(); });
        ɵngcc0.ɵɵelement(16, "wf1-application-icon", 12);
        ɵngcc0.ɵɵelementEnd()();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSortButton);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ctx.count);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("formControl", ctx.searchControl);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx.TOOLTIP_DELAY);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx.TOOLTIP_DELAY);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("matTooltipShowDelay", ctx.TOOLTIP_DELAY);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("colourCode", ctx.clearFilterIconType);
    } }, dependencies: [ɵngcc2.NgIf, ɵngcc11.DefaultValueAccessor, ɵngcc11.NgControlStatus, ɵngcc16.MatFormField, ɵngcc4.MatIcon, ɵngcc12.MatInput, ɵngcc8.MatTooltip, ɵngcc11.FormControlDirective, ApplicationIconComponent], encapsulation: 2 });
SearchBarComponent.ctorParameters = () => [
    { type: Store }
];
SearchBarComponent.propDecorators = {
    count: [{ type: Input }],
    componentId: [{ type: Input }],
    sortModal: [{ type: ContentChild, args: [SortComponent,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchBarComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-search-bar',
                template: "<div class=\"side-panel-toolbar search\">\n\t<div *ngIf=\"showSortButton\" class=\"search__sort\" matTooltip=\"Sort\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" (click)=\"toggleSortModal()\" (keydown)=\"toggleSortModal()\">\n\t\t<mat-icon class=\"search__sort__icon\">sort</mat-icon>\n\t</div>\n\t<ng-content select=\"wf1-sort-modal\"></ng-content>\n\t<div class=\"search__count\">\n\t\t<span class=\"search__count__number\">{{count}}</span>\n\t</div>\n\t<div class=\"search__input\">\n\t\t<mat-form-field aria-label=\"Search...\" class=\"search__input__control\">\n\t\t\t<input matInput placeholder=\"Search...\" [formControl]=\"searchControl\">\n\t\t</mat-form-field>\n\t</div>\n\t<div class=\"search__cancel\" (click)=\"resetSearch()\" (keydown)=\"resetSearch()\" matTooltip=\"Clear Search\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\">\n\t\t<mat-icon class=\"search__cancel__icon\">close</mat-icon>\n\t</div>\n\t<div class=\"search__refresh\" (click)=\"refreshSearch()\" (keydown)=\"refreshSearch()\" matTooltip=\"Refresh Search\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\">\n\t\t<mat-icon class=\"search__refresh__icon\">refresh</mat-icon>\n\t</div>\n\t<div class=\"search__clear-filters\" (click)=\"clearFilters()\" (keydown)=\"clearFilters()\" matTooltip=\"Clear Filters\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\">\n\t\t<wf1-application-icon iconType=\"filter-cancel\" [colourCode]=\"clearFilterIconType\"></wf1-application-icon>\n\t</div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc13.Store }]; }, { count: [{
            type: Input
        }], sortModal: [{
            type: ContentChild,
            args: [SortComponent]
        }], componentId: [{
            type: Input
        }] }); })();

const MAPTOOL_WINDOW_NAME = 'maptool-application-window';
const WFROF_WINDOW_NAME = 'wfrof-application-window';
const WFNROF_WINDOW_NAME = 'wfnrof-application-window';
const WFIM_WINDOW_NAME = 'wfim-application-window';
const WFIM_LIST_COMPONENT_ID = 'searchIMMap';
const WFROF_LIST_COMPONENT_ID = 'searchROFMap';
const WFNROF_LIST_COMPONENT_ID = 'searchNROFMap';
const WFIM_TABLE_COMPONENT_ID = 'searchIM';
const WFROF_TABLE_COMPONENT_ID = 'searchROF';
const WFNROF_TABLE_COMPONENT_ID = 'searchNROF';
var MessageType;
(function (MessageType) {
    MessageType["ACTION"] = "action";
    MessageType["READY"] = "ready";
    MessageType["WINDOW_CLOSING"] = "window-closing";
    MessageType["ACKNOWLEDGE"] = "acknowledge";
})(MessageType || (MessageType = {}));
class Message {
}
class MessagePacket {
}
class WindowConfig {
}
class ApplicationWindow {
}

class WindowMessagingService {
    constructor() {
        this.children = [];
        if (window.opener) {
            this.parentWindow = {
                id: UUID.UUID(),
                isParent: true,
                window: window.opener,
                messageQueue: []
            };
            window.addEventListener('onbeforeunload', () => this.broadcastMessage(this.getParentWindowId(), { type: MessageType.WINDOW_CLOSING }));
        }
        else {
            window.name = MAPTOOL_WINDOW_NAME;
        }
        this.stream = new Subject();
        window.addEventListener('message', (message) => this.receiveMessage(message.data));
        // setInterval( () => {
        //   if (this.parentWindow) {
        //
        //   } else {
        //     for (let currentChild of this.children) {
        //
        //     }
        //   }
        // }, 1000);
    }
    getParentWindowId() {
        return this.parentWindow ? this.parentWindow.id : null;
    }
    getWindowId(windowName) {
        const targetWindowIndex = this.children.findIndex(currentChild => currentChild.windowName === windowName);
        let targetWindow = (targetWindowIndex > -1) ? this.children[targetWindowIndex] : null;
        if (targetWindow && targetWindow.window && targetWindow.window.closed) {
            // If the window was closed, remove the object from the list of child windows.
            this.children.splice(targetWindowIndex, 1);
            targetWindow = null;
        }
        return (targetWindow) ? targetWindow.id : null;
    }
    broadcastAction(windowId, action) {
        this.broadcastMessage(windowId, {
            type: MessageType.ACTION,
            action
        });
    }
    openWindow(url, windowName = 'default', windowConfig = {
        fullscreen: true,
        rememberWindowSize: true
    }) {
        const windowFeatures = this.getWindowFeaturesSettings(windowConfig);
        const newWindow = {
            id: UUID.UUID(),
            isParent: false,
            url,
            windowName,
            windowConfig,
            window: window.open(url, windowName, windowFeatures),
            messageQueue: []
        };
        this.children.push(newWindow);
        return newWindow.id;
    }
    subscribeToMessageStream(listenerFunction) {
        this.stream.subscribe(message => listenerFunction(message));
        if (this.getParentWindowId() !== null) {
            // Once a listener has been registered, tell the parent to send along any queued messages
            this.broadcastMessage(this.getParentWindowId(), { type: MessageType.READY });
        }
    }
    focusWindow(windowId) {
        let targetWindow;
        if (windowId === this.getParentWindowId()) { // Children will only message their parent
            // This window.open call doesn't actually open a window, but is necessary for window.focus() to work on the parent window
            targetWindow = window.open('', MAPTOOL_WINDOW_NAME);
        }
        else {
            const target = this.getWindow(windowId);
            if (target && target.window) {
                targetWindow = target.window;
            }
        }
        targetWindow.focus();
    }
    broadcastAcknowledge(packet) {
        let target;
        if (this.getParentWindowId()) { // Children will only message their parent
            target = this.parentWindow;
        }
        else {
            target = this.children.find(child => child.windowName === packet.originWindowName);
        }
        if (target) {
            const messagePacket = {
                id: packet.id,
                originWindowName: window.name,
                date: new Date(),
                message: { type: MessageType.ACKNOWLEDGE }
            };
            target.window.postMessage(messagePacket, '*');
        }
    }
    broadcastMessage(windowId, message) {
        let target;
        if (this.getParentWindowId() === windowId) {
            target = this.parentWindow;
        }
        else {
            target = this.getWindow(windowId);
        }
        if (target) {
            const messagePacket = {
                id: UUID.UUID(),
                originWindowName: window.name,
                date: new Date(),
                message: message
            };
            target.messageQueue.push(messagePacket);
            target.window.postMessage(messagePacket, '*');
        }
    }
    receiveMessage(packet) {
        if (!packet || !packet.message) {
            return;
        } // Ignore other window messages.
        let sendAcknowledge = false;
        switch (packet.message.type) {
            case MessageType.READY: {
                const targetWindow = this.children.find(child => child.windowName === packet.originWindowName);
                // If messages were sent before the window was ready, resend them again.
                if (targetWindow && targetWindow.messageQueue.length > 0) {
                    for (let messagePacket of targetWindow.messageQueue) {
                        messagePacket.date = new Date();
                        targetWindow.window.postMessage(messagePacket, '*');
                    }
                }
                sendAcknowledge = true;
                break;
            }
            case MessageType.WINDOW_CLOSING: {
                const closingWindowIndex = this.children.findIndex(child => child.windowName === packet.originWindowName);
                if (closingWindowIndex > -1) {
                    this.children.splice(closingWindowIndex, 1);
                }
                console.log('Child is closing');
                break;
            }
            case MessageType.ACTION: {
                sendAcknowledge = true;
                this.stream.next(packet.message);
                break;
            }
            case MessageType.ACKNOWLEDGE: {
                let targetWindow;
                if (packet.originWindowName === MAPTOOL_WINDOW_NAME) {
                    targetWindow = this.parentWindow;
                }
                else {
                    targetWindow = this.children.find(child => child.windowName === packet.originWindowName);
                }
                if (targetWindow) {
                    const messageIndex = targetWindow.messageQueue.findIndex(message => message.id === packet.id);
                    if (messageIndex > -1) {
                        targetWindow.messageQueue.splice(messageIndex, 1);
                    }
                }
                break;
            }
            default: {
                console.error(`Received message of unknown type ${packet.message.type}: ${JSON.stringify(packet)}`);
            }
        }
        if (sendAcknowledge) {
            this.broadcastAcknowledge(packet);
        }
    }
    getWindow(id) {
        return this.children.find(child => child.id === id);
    }
    getWindowFeaturesSettings(windowConfig) {
        const left = 0;
        const top = 0;
        const { innerWidth, innerHeight, outerWidth, outerHeight } = window;
        const { availWidth: availScreenWidth, availHeight: availScreenHeight } = window.screen;
        const width = availScreenWidth;
        const height = availScreenHeight - (outerHeight - innerHeight);
        const positionSettings = windowConfig.fullscreen ? `,left=${left},top=${top},width=${width},height=${height}` : '';
        return `resizable=yes,scrollbars=yes,status=yes,location=no${positionSettings}`;
    }
}
WindowMessagingService.ɵfac = function WindowMessagingService_Factory(t) { return new (t || WindowMessagingService)(); };
WindowMessagingService.ɵprov = ɵɵdefineInjectable({ factory: function WindowMessagingService_Factory() { return new WindowMessagingService(); }, token: WindowMessagingService, providedIn: "root" });
WindowMessagingService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WindowMessagingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

class SidebarComponent {
    constructor(token) {
        this.token = token;
        this.opened = true;
        this.isInitializing = true;
        this.isInitializing = token.getOauthToken() === null;
    }
    ngOnInit() {
        this.token.authTokenEmitter.subscribe(() => {
            this.isInitializing = false;
        });
    }
}
SidebarComponent.ɵfac = function SidebarComponent_Factory(t) { return new (t || SidebarComponent)(ɵngcc0.ɵɵdirectiveInject(TokenService)); };
SidebarComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SidebarComponent, selectors: [["wf1-sidebar-container"]], inputs: { titleText: "titleText", menuTemplate: "menuTemplate", toolbarTemplate: "toolbarTemplate", sidebarTemplate: "sidebarTemplate", mainContentTemplate: "mainContentTemplate" }, decls: 8, vars: 3, consts: [["defaultSidebar", ""], ["defaultMainContent", ""], ["id", "core-interface-container"], [3, "titleText"], ["class", "wf1-loading-screen", 4, "ngIf"], [4, "ngIf"], [1, "material-icons"], ["name", "basemaps", "aria-label", "Basemaps"], ["value", "imagery"], ["value", "street"], ["value", "topographic"], [1, "wf1-loading-screen"], ["menuTemplate", "menuTemplate", "toolbarTemplate", "toolbarTemplate"], ["hasBackdrop", "false", 1, "mat-typography"], ["id", "side-nav", "mode", "side", 3, "opened", "openedChange"], ["sidebar", ""], [4, "ngTemplateOutlet"], ["id", "side-nav-toggle", 3, "click", "keydown"]], template: function SidebarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SidebarComponent_ng_template_0_Template, 25, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, SidebarComponent_ng_template_2_Template, 2, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelement(5, "wf1-application-header", 3);
        ɵngcc0.ɵɵtemplate(6, SidebarComponent_div_6_Template, 6, 0, "div", 4);
        ɵngcc0.ɵɵtemplate(7, SidebarComponent_ng_container_7_Template, 11, 4, "ng-container", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("titleText", ctx.titleText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInitializing);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isInitializing);
    } }, dependencies: function () { return [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc20.MatButtonToggleGroup, ɵngcc20.MatButtonToggle, ɵngcc21.MatAccordion, ɵngcc21.MatExpansionPanel, ɵngcc21.MatExpansionPanelHeader, ɵngcc21.MatExpansionPanelTitle, ɵngcc21.MatExpansionPanelDescription, ɵngcc4.MatIcon, ɵngcc22.MatSidenav, ɵngcc22.MatSidenavContainer, ɵngcc22.MatSidenavContent, ApplicationHeaderComponent, ApplicationToolbarComponent, SpinnerComponent]; }, encapsulation: 2 });
SidebarComponent.ctorParameters = () => [
    { type: TokenService }
];
SidebarComponent.propDecorators = {
    titleText: [{ type: Input }],
    menuTemplate: [{ type: Input }],
    toolbarTemplate: [{ type: Input }],
    sidebarTemplate: [{ type: Input }],
    mainContentTemplate: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SidebarComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-sidebar-container',
                template: "<!--\n  DEFAULT TEMPLATE DECLARATIONS FOR SUB-COMPONENTS\n-->\n\n<ng-template #defaultSidebar>\n  <h4>WILDFIRE INCIDENT MANAGEMENT</h4>\n  <mat-accordion>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <i class=\"material-icons\">layers</i>\n        </mat-panel-title>\n        <mat-panel-description>\n          Layers\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      Content here\n      <!--<mat-tree>-->\n        <!--<mat-nested-tree-node>-->\n          <!--parent node-->\n          <!--<mat-nested-tree-node> &#45;&#45; child node1 </mat-nested-tree-node>-->\n          <!--<mat-nested-tree-node> &#45;&#45; child node2 </mat-nested-tree-node>-->\n        <!--</mat-nested-tree-node>-->\n      <!--</mat-tree>-->\n\n    </mat-expansion-panel>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <i class=\"material-icons\">apps</i>\n        </mat-panel-title>\n        <mat-panel-description>\n          Basemaps\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <mat-button-toggle-group name=\"basemaps\" aria-label=\"Basemaps\">\n        <mat-button-toggle value=\"imagery\">Imagery</mat-button-toggle>\n        <mat-button-toggle value=\"street\">Street</mat-button-toggle>\n        <mat-button-toggle value=\"topographic\">Topographic</mat-button-toggle>\n      </mat-button-toggle-group>\n\n    </mat-expansion-panel>\n  </mat-accordion>\n</ng-template>\n\n<ng-template #defaultMainContent>\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur consectetur debitis, delectus deleniti dolore\n    earum explicabo facere facilis, fugiat itaque numquam provident quam quo quos sint veritatis vero voluptas voluptate?\n  </p>\n</ng-template>\n\n<!--\n  MAIN TEMPLATE DECLARATION\n-->\n<div id=\"core-interface-container\">\n  <wf1-application-header [titleText]=\"titleText\"></wf1-application-header>\n\n  <div class=\"wf1-loading-screen\" *ngIf=\"isInitializing\">\n    <h1>Initializing Application</h1>\n    <wf1-spinner></wf1-spinner>\n    <h3>Please wait while the application initializes.</h3>\n  </div>\n\n  <ng-container *ngIf=\"!isInitializing\">\n    <wf1-application-toolbar menuTemplate=\"menuTemplate\" toolbarTemplate=\"toolbarTemplate\"></wf1-application-toolbar>\n\n    <mat-sidenav-container class=\"mat-typography\" hasBackdrop=false>\n      <mat-sidenav id=\"side-nav\" #sidebar mode=\"side\" [(opened)]=\"opened\" >\n        <ng-container *ngTemplateOutlet=\"sidebarTemplate ? sidebarTemplate: defaultSidebar\"></ng-container>\n      </mat-sidenav>\n      <mat-sidenav-content>\n        <div id=\"side-nav-toggle\" (click)=\"sidebar.toggle()\" (keydown)=\"sidebar.toggle()\">\n          <mat-icon>{{ (opened) ? 'arrow_left' : 'arrow_right' }}</mat-icon>\n        </div>\n        <ng-container *ngTemplateOutlet=\"mainContentTemplate ? mainContentTemplate: defaultMainContent\"></ng-container>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n  </ng-container>\n</div>\n"
            }]
    }], function () { return [{ type: TokenService }]; }, { titleText: [{
            type: Input
        }], menuTemplate: [{
            type: Input
        }], toolbarTemplate: [{
            type: Input
        }], sidebarTemplate: [{
            type: Input
        }], mainContentTemplate: [{
            type: Input
        }] }); })();

class SpinnerComponent {
}
SpinnerComponent.ɵfac = function SpinnerComponent_Factory(t) { return new (t || SpinnerComponent)(); };
SpinnerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SpinnerComponent, selectors: [["wf1-spinner"]], decls: 2, vars: 0, consts: [[1, "spinner"], ["aria-label", "Loading...", 1, "spinner__icon"]], template: function SpinnerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "mat-spinner", 1);
        ɵngcc0.ɵɵelementEnd();
    } }, dependencies: [ɵngcc23.MatProgressSpinner], styles: [".spinner[_ngcontent-%COMP%]{display:flex;justify-content:center}"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SpinnerComponent, [{
        type: Component,
        args: [{ selector: 'wf1-spinner', template: "<div class=\"spinner\">\n\t<mat-spinner class=\"spinner__icon\" aria-label=\"Loading...\"></mat-spinner>\n</div>\n", styles: [".spinner{display:flex;justify-content:center}"] }]
    }], null, null); })();

class UnauthorizedPageComponent {
    constructor() { }
    ngOnInit() {
    }
}
UnauthorizedPageComponent.ɵfac = function UnauthorizedPageComponent_Factory(t) { return new (t || UnauthorizedPageComponent)(); };
UnauthorizedPageComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: UnauthorizedPageComponent, selectors: [["wf1-unauthorized-page"]], decls: 3, vars: 1, consts: [["mainContent", ""], ["titleText", "Incident Management", 3, "mainContentTemplate"], [1, "unauthorized-page"]], template: function UnauthorizedPageComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, UnauthorizedPageComponent_ng_template_0_Template, 8, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelement(2, "wf1-full-width-container", 1);
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("mainContentTemplate", _r0);
    } }, dependencies: [FullWidthContainerComponent], encapsulation: 2 });
UnauthorizedPageComponent.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UnauthorizedPageComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-unauthorized-page',
                template: "<ng-template #mainContent>\n  <div class=\"unauthorized-page\">\n    <div>\n      <h1>WFIM Unauthorized Page</h1>\n      <p>An authorization error has occurred</p>\n      <h2>Required WebADE role does not exist, is expired, or is not active.</h2>\n    </div>\n  </div>\n</ng-template>\n\n<wf1-full-width-container titleText=\"Incident Management\" [mainContentTemplate]=\"mainContent\"></wf1-full-width-container>\n"
            }]
    }], function () { return []; }, null); })();

class VisualizeJSComponent {
    constructor(appConfig) {
        this.appConfig = appConfig;
        this.currentPage = 1;
    }
    static handleError(err) {
        console.error(err.message);
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
        const config = this.appConfig.getConfig();
        if (!config || !config.externalAppConfig || !config.externalAppConfig.jasper) {
            throw new Error('Could not find Jasper configuration settings in application configuration');
        }
        let themeHref = `${config.externalAppConfig.jasper.url}/_themes/${config.externalAppConfig.jasper.themeHash}/theme.css`.split("/").slice(0, -1).join("/");
        visualize.config({
            server: config.externalAppConfig.jasper.url,
            scripts: `runtime/${config.externalAppConfig.jasper.scriptsHash}/optimized-scripts`,
            logEnabled: true,
            logLevel: "error",
            _showInputControls: "true" === "true",
            theme: {
                href: themeHref
            }
        });
        // new Promise((resolve, reject) => {
        visualize({
            server: config.externalAppConfig.jasper.url
        }, (vis) => {
            let reportConfig = {
                resource: this.reportPath,
                container: `#${this.elementId}`,
                error: VisualizeJSComponent.handleError,
            };
            if (this.reportParams) {
                reportConfig.params = this.reportParams;
            }
            this.report = vis.report(reportConfig);
        });
        // }).then(result => this.report = result)
        //   .catch(error => console.error(error));
    }
    isExportFormatSupported(format) {
        if (format) {
            if (this.supportedExportFormats && this.supportedExportFormats.length > 0) {
                return this.supportedExportFormats.includes(format);
            }
        }
        return false;
    }
    exportToPDF() {
        this.export('pdf');
    }
    exportToExcel() {
        this.export('csv');
    }
    previousPage() {
        if (this.currentPage !== 1) {
            this.currentPage -= 1;
            this.report.pages(this.currentPage).run().fail((err) => console.error(err));
        }
    }
    nextPage() {
        this.currentPage += 1;
        this.report.pages(this.currentPage).run().fail((err) => {
            if (err.errorCode === 'page.number.out.of.range') {
                this.currentPage -= 1;
            }
            else {
                console.error(err);
            }
        });
    }
    export(outputFormat) {
        let params = { outputFormat: outputFormat,
            ignorePagination: outputFormat === 'csv' ? true : false
        };
        this.report.export(params)
            .done(function (link) {
            window.open(link.href); // open new window to download report
        })
            .fail(function (err) {
            alert(err.message);
        });
    }
}
VisualizeJSComponent.ɵfac = function VisualizeJSComponent_Factory(t) { return new (t || VisualizeJSComponent)(ɵngcc0.ɵɵdirectiveInject(AppConfigService)); };
VisualizeJSComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: VisualizeJSComponent, selectors: [["wf1-visualize-js"]], inputs: { elementId: "elementId", reportPath: "reportPath", reportParams: "reportParams", supportedExportFormats: "supportedExportFormats" }, decls: 15, vars: 3, consts: [[1, "wf1-jaspersoft-report"], [1, "wf1-jaspersoft-report-toolbar"], ["matTooltip", "Export to PDF", 3, "hidden", "click"], ["matTooltip", "Export to Excel", 3, "hidden", "click"], ["matTooltip", "Previous Page", 3, "click"], ["matTooltip", "Next Page", 3, "click"], [1, "wf1-jaspersoft-report-content", 3, "id"]], template: function VisualizeJSComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
        ɵngcc0.ɵɵlistener("click", function VisualizeJSComponent_Template_button_click_2_listener() { return ctx.exportToPDF(); });
        ɵngcc0.ɵɵelementStart(3, "mat-icon");
        ɵngcc0.ɵɵtext(4, "picture_as_pdf");
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(5, "button", 3);
        ɵngcc0.ɵɵlistener("click", function VisualizeJSComponent_Template_button_click_5_listener() { return ctx.exportToExcel(); });
        ɵngcc0.ɵɵelementStart(6, "mat-icon");
        ɵngcc0.ɵɵtext(7, "table_chart");
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(8, "button", 4);
        ɵngcc0.ɵɵlistener("click", function VisualizeJSComponent_Template_button_click_8_listener() { return ctx.previousPage(); });
        ɵngcc0.ɵɵelementStart(9, "mat-icon");
        ɵngcc0.ɵɵtext(10, "navigate_before");
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(11, "button", 5);
        ɵngcc0.ɵɵlistener("click", function VisualizeJSComponent_Template_button_click_11_listener() { return ctx.nextPage(); });
        ɵngcc0.ɵɵelementStart(12, "mat-icon");
        ɵngcc0.ɵɵtext(13, "navigate_next");
        ɵngcc0.ɵɵelementEnd()()();
        ɵngcc0.ɵɵelement(14, "div", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("hidden", !ctx.isExportFormatSupported("pdf"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("hidden", !ctx.isExportFormatSupported("csv"));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("id", ctx.elementId);
    } }, dependencies: [ɵngcc4.MatIcon, ɵngcc8.MatTooltip] });
VisualizeJSComponent.ctorParameters = () => [
    { type: AppConfigService }
];
VisualizeJSComponent.propDecorators = {
    elementId: [{ type: Input }],
    reportPath: [{ type: Input }],
    reportParams: [{ type: Input }],
    supportedExportFormats: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VisualizeJSComponent, [{
        type: Component,
        args: [{ selector: 'wf1-visualize-js', template: "<div class=\"wf1-jaspersoft-report\">\n  <div class=\"wf1-jaspersoft-report-toolbar\">\n    <button matTooltip=\"Export to PDF\" (click)=\"exportToPDF()\" [hidden]=\"!isExportFormatSupported('pdf')\"><mat-icon>picture_as_pdf</mat-icon></button>\n    <button matTooltip=\"Export to Excel\" (click)=\"exportToExcel()\" [hidden]=\"!isExportFormatSupported('csv')\"><mat-icon>table_chart</mat-icon></button>\n    <button matTooltip=\"Previous Page\" (click)=\"previousPage()\"><mat-icon>navigate_before</mat-icon></button>\n    <button matTooltip=\"Next Page\" (click)=\"nextPage()\"><mat-icon>navigate_next</mat-icon></button>\n  </div>\n  <div [id]=\"elementId\" class=\"wf1-jaspersoft-report-content\"></div>\n</div>\n" }]
    }], function () { return [{ type: AppConfigService }]; }, { elementId: [{
            type: Input
        }], reportPath: [{
            type: Input
        }], reportParams: [{
            type: Input
        }], supportedExportFormats: [{
            type: Input
        }] }); })();

class WFMLBasemapSelectorComponent {
    constructor(mapService) {
        this.mapService = mapService;
        this.basemaps = [];
    }
    ngOnInit() {
        if (this.mapService.isMapInitialized('map')) {
            this.initializeBasemaps();
        }
        else {
            this.mapService.mapInstanceEmitter.asObservable().subscribe(data => {
                this.initializeBasemaps();
            });
        }
    }
    initializeBasemaps() {
        this.basemaps = this.mapService.getBasemaps('map');
    }
    displayBasemap(index) {
        this.mapService.setBasemap('map', index);
    }
}
WFMLBasemapSelectorComponent.ɵfac = function WFMLBasemapSelectorComponent_Factory(t) { return new (t || WFMLBasemapSelectorComponent)(ɵngcc0.ɵɵdirectiveInject(MapService)); };
WFMLBasemapSelectorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WFMLBasemapSelectorComponent, selectors: [["wf1-wfml-basemap-selector"]], decls: 2, vars: 1, consts: [[1, "basemap-list"], ["class", "basemap", 3, "click", 4, "ngFor", "ngForOf"], [1, "basemap", 3, "click"], ["mat-card-image", "", 3, "alt", "src"]], template: function WFMLBasemapSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, WFMLBasemapSelectorComponent_mat_card_1_Template, 4, 3, "mat-card", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.basemaps);
    } }, dependencies: [ɵngcc2.NgForOf, ɵngcc24.MatCard, ɵngcc24.MatCardImage, ɵngcc24.MatCardTitle], styles: [".basemap-list[_ngcontent-%COMP%]{display:flex}.basemap-list[_ngcontent-%COMP%]   .basemap[_ngcontent-%COMP%]{flex:1 1 2rem;text-align:center;padding:0}.basemap-list[_ngcontent-%COMP%]   .basemap[_ngcontent-%COMP%]   .mat-card-image[_ngcontent-%COMP%]{width:100%;margin:0}.basemap-list[_ngcontent-%COMP%]   .basemap[_ngcontent-%COMP%]   .mat-card-title[_ngcontent-%COMP%]{padding:1.25rem;font-size:medium}"] });
WFMLBasemapSelectorComponent.ctorParameters = () => [
    { type: MapService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WFMLBasemapSelectorComponent, [{
        type: Component,
        args: [{ selector: 'wf1-wfml-basemap-selector', template: "<div class=\"basemap-list\">\n    <mat-card class=\"basemap\" *ngFor=\"let basemap of basemaps; let i = index\" (click)=\"displayBasemap(i)\">\n        <img alt=\"{{basemap.title}}\" mat-card-image src=\"assets/images/map-thumbnails/{{basemap.key}}.jpg\">\n        <mat-card-title>{{basemap.title}}</mat-card-title>\n    </mat-card>\n</div>\n", styles: [".basemap-list{display:flex}.basemap-list .basemap{flex:1 1 2rem;text-align:center;padding:0}.basemap-list .basemap .mat-card-image{width:100%;margin:0}.basemap-list .basemap .mat-card-title{padding:1.25rem;font-size:medium}"] }]
    }], function () { return [{ type: MapService }]; }, null); })();

class WFMLLayerTreeComponent {
    constructor(mapService, changeDetectorRef) {
        this.mapService = mapService;
        this.changeDetectorRef = changeDetectorRef;
        /** The selection for checklist */
        this.checklistSelection = new SelectionModel(true /* multiple */);
        this.hasChildren = (_, node) => !!node.child;
        this.treeControl = new NestedTreeControl((node) => node.child);
        this.dataSource = new MatTreeNestedDataSource();
    }
    ngOnInit() {
        if (this.mapService.isMapInitialized('map')) {
            this.initializeTreeLayer();
        }
        else {
            this.mapService.mapInstanceEmitter.asObservable().subscribe(data => {
                this.initializeTreeLayer();
            });
        }
    }
    initializeTreeLayer() {
        const layerTreeView = this.mapService.getLayerTreeView('map');
        if (layerTreeView) {
            this.dataSource.data = layerTreeView.child;
            this.checklistSelection.select(...this.findSelectedElements(layerTreeView));
        }
    }
    findSelectedElements(node) {
        const results = [];
        if (node.isVisible || (node.lyr && node.lyr.isVisible)) {
            results.push(node);
        }
        if (node.child) {
            for (const childNode of node.child) {
                results.push(...this.findSelectedElements(childNode));
            }
        }
        return results;
    }
    /** Whether all the descendants of the node are selected */
    descendantsAllSelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        if (!descendants.length) {
            return this.checklistSelection.isSelected(node);
        }
        const selected = this.checklistSelection.isSelected(node);
        const allSelected = descendants.every(child => this.checklistSelection.isSelected(child));
        if (!selected && allSelected) {
            this.checklistSelection.select(node);
            this.changeDetectorRef.markForCheck();
        }
        return allSelected;
    }
    /** Whether part of the descendants are selected */
    descendantsPartiallySelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        if (!descendants.length) {
            return false;
        }
        const result = descendants.some(child => this.checklistSelection.isSelected(child));
        return result && !this.descendantsAllSelected(node);
    }
    /** Toggle the game selection. Select/deselect all the descendants node */
    nodeSelectionToggle(node) {
        this.checklistSelection.toggle(node);
        if (node.lyr) {
            this.mapService.setLayerVisibility('map', node.lyr.id, this.checklistSelection.isSelected(node));
        }
        const descendants = this.treeControl.getDescendants(node);
        if (this.checklistSelection.isSelected(node)) {
            this.checklistSelection.select(...descendants, node);
        }
        else {
            this.checklistSelection.deselect(...descendants, node);
        }
        for (const childNode of descendants) {
            if (childNode.lyr) {
                this.mapService.setLayerVisibility('map', childNode.lyr.id, this.checklistSelection.isSelected(childNode));
            }
        }
        this.changeDetectorRef.markForCheck();
    }
}
WFMLLayerTreeComponent.ɵfac = function WFMLLayerTreeComponent_Factory(t) { return new (t || WFMLLayerTreeComponent)(ɵngcc0.ɵɵdirectiveInject(MapService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
WFMLLayerTreeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WFMLLayerTreeComponent, selectors: [["wf1-wfml-layer-tree"]], decls: 3, vars: 3, consts: [[1, "wf1-layer-tree", 3, "dataSource", "treeControl"], [4, "matTreeNodeDef"], [4, "matTreeNodeDef", "matTreeNodeDefWhen"], [1, "mat-tree-node"], ["labelPosition", "before", 3, "checked", "indeterminate", "change"], ["mat-icon-button", "", "matTreeNodeToggle", ""], [4, "ngIf"], ["matTreeNodeOutlet", ""]], template: function WFMLLayerTreeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-tree", 0);
        ɵngcc0.ɵɵtemplate(1, WFMLLayerTreeComponent_mat_nested_tree_node_1_Template, 5, 3, "mat-nested-tree-node", 1);
        ɵngcc0.ɵɵtemplate(2, WFMLLayerTreeComponent_mat_nested_tree_node_2_Template, 10, 6, "mat-nested-tree-node", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("dataSource", ctx.dataSource)("treeControl", ctx.treeControl);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("matTreeNodeDefWhen", ctx.hasChildren);
    } }, dependencies: [ɵngcc2.NgIf, ɵngcc6.MatIconButton, ɵngcc17.MatCheckbox, ɵngcc4.MatIcon, ɵngcc25.MatNestedTreeNode, ɵngcc25.MatTreeNodeDef, ɵngcc25.MatTreeNodeToggle, ɵngcc25.MatTree, ɵngcc25.MatTreeNodeOutlet], encapsulation: 2 });
WFMLLayerTreeComponent.ctorParameters = () => [
    { type: MapService },
    { type: ChangeDetectorRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WFMLLayerTreeComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-wfml-layer-tree',
                template: "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"wf1-layer-tree\">\n    <mat-nested-tree-node *matTreeNodeDef=\"let node\">\n      <li>\n        <div class=\"mat-tree-node\">\n<!--          <button mat-icon-button disabled></button>-->\n          <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                        [indeterminate]=\"descendantsPartiallySelected(node)\"\n                        (change)=\"nodeSelectionToggle(node)\"\n                        labelPosition=\"before\">\n            {{node.title}}\n          </mat-checkbox>\n        </div>\n      </li>\n    </mat-nested-tree-node>\n\n    <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChildren\">\n      <li>\n        <div class=\"mat-tree-node\">\n          <button mat-icon-button matTreeNodeToggle\n                  [attr.aria-label]=\"'toggle ' + node.title\">\n            <mat-icon>\n              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n            </mat-icon>\n          </button>\n          <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                        [indeterminate]=\"descendantsPartiallySelected(node)\"\n                        (change)=\"nodeSelectionToggle(node)\"\n                        labelPosition=\"before\">\n            {{node.title}}\n          </mat-checkbox>\n        </div>\n        <ul>\n          <div *ngIf=\"treeControl.isExpanded(node)\">\n            <ng-container matTreeNodeOutlet></ng-container>\n          </div>\n        </ul>\n      </li>\n    </mat-nested-tree-node>\n  </mat-tree>\n"
            }]
    }], function () { return [{ type: MapService }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();

class WFMLMappingContainerComponent {
    //   isMapInitialized = false;
    constructor(token, appConfig) {
        this.token = token;
        this.appConfig = appConfig;
        this.showToolbar = true;
        this.opened = true;
        //   mapControlsOpened = false;
        //   layerTreeSelected = false;
        //   basemapsSelected = false;
        this.isInitializing = true;
        this.isInitializing = token.getOauthToken() === null;
    }
    ngOnInit() {
        if (!this.appConfig.getConfig().application.lazyAuthenticate) {
            this.token.authTokenEmitter.subscribe(() => {
                this.isInitializing = false;
            });
        }
        else {
            this.isInitializing = false;
        }
    }
    ngAfterViewChecked() {
        // if (!this.isInitializing && !this.isMapInitialized) {
        //   this.initializeMap();
        //   this.isMapInitialized = true;
        // }
    }
    toggleSideNav() {
        // this.mapService.onResize();
    }
    initializeMap() {
        // this.mapService.initializeMap('map');
    }
    onMapControlToggled(currentMapControl) {
        // this.mapControlsOpened = currentMapControl !== MapControl.NONE;
        // this.layerTreeSelected = currentMapControl === MapControl.LAYER_TREE;
        // this.basemapsSelected = currentMapControl === MapControl.BASEMAPS;
    }
}
WFMLMappingContainerComponent.ɵfac = function WFMLMappingContainerComponent_Factory(t) { return new (t || WFMLMappingContainerComponent)(ɵngcc0.ɵɵdirectiveInject(TokenService), ɵngcc0.ɵɵdirectiveInject(AppConfigService)); };
WFMLMappingContainerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: WFMLMappingContainerComponent, selectors: [["wf1-wfml-mapping-container"]], inputs: { showToolbar: "showToolbar", titleText: "titleText", menuTemplate: "menuTemplate", toolbarTemplate: "toolbarTemplate", sidebarTemplate: "sidebarTemplate", mainContentTemplate: "mainContentTemplate" }, decls: 8, vars: 3, consts: [["wfmlMapPanel", ""], ["wfmlSidebar", ""], ["id", "core-interface-container"], [3, "titleText"], ["class", "wf1-loading-screen", 4, "ngIf"], [4, "ngIf"], ["id", "map"], [1, "material-icons"], ["name", "basemaps", "aria-label", "Basemaps"], ["value", "imagery"], ["value", "street"], ["value", "topographic"], [1, "wf1-loading-screen"], [3, "menuTemplate", "toolbarTemplate", "selectedMapControl", 4, "ngIf"], ["hasBackdrop", "false", 1, "mat-typography"], ["id", "side-nav", "mode", "side", 3, "opened", "openedChange"], ["sidebar", ""], [4, "ngTemplateOutlet"], ["id", "side-nav-toggle", 3, "click", "keydown"], [3, "menuTemplate", "toolbarTemplate", "selectedMapControl"]], template: function WFMLMappingContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, WFMLMappingContainerComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(2, WFMLMappingContainerComponent_ng_template_2_Template, 26, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelement(5, "wf1-application-header", 3);
        ɵngcc0.ɵɵtemplate(6, WFMLMappingContainerComponent_div_6_Template, 6, 0, "div", 4);
        ɵngcc0.ɵɵtemplate(7, WFMLMappingContainerComponent_ng_container_7_Template, 11, 5, "ng-container", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("titleText", ctx.titleText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInitializing);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isInitializing);
    } }, dependencies: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc20.MatButtonToggleGroup, ɵngcc20.MatButtonToggle, ɵngcc21.MatAccordion, ɵngcc21.MatExpansionPanel, ɵngcc21.MatExpansionPanelHeader, ɵngcc21.MatExpansionPanelTitle, ɵngcc21.MatExpansionPanelDescription, ɵngcc4.MatIcon, ɵngcc22.MatSidenav, ɵngcc22.MatSidenavContainer, ɵngcc22.MatSidenavContent, ApplicationHeaderComponent, ApplicationToolbarComponent, SpinnerComponent, WFMLLayerTreeComponent], encapsulation: 2 });
WFMLMappingContainerComponent.ctorParameters = () => [
    { type: TokenService },
    { type: AppConfigService }
];
WFMLMappingContainerComponent.propDecorators = {
    titleText: [{ type: Input }],
    menuTemplate: [{ type: Input }],
    toolbarTemplate: [{ type: Input }],
    sidebarTemplate: [{ type: Input }],
    mainContentTemplate: [{ type: Input }],
    showToolbar: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(WFMLMappingContainerComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-wfml-mapping-container',
                template: "<!--\n  TEMPLATE DECLARATIONS FOR SUB-COMPONENTS\n-->\n<ng-template #wfmlMapPanel>\n  <div id=\"map\"></div>\n</ng-template>\n\n<ng-template #wfmlSidebar>\n  <header>\n    <h4>WILDFIRE INCIDENT MANAGEMENT</h4>\n  </header>\n  <mat-accordion>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <i class=\"material-icons\">layers</i>\n        </mat-panel-title>\n        <mat-panel-description>\n          Layers\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <wf1-wfml-layer-tree></wf1-wfml-layer-tree>\n\n    </mat-expansion-panel>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <i class=\"material-icons\">apps</i>\n        </mat-panel-title>\n        <mat-panel-description>\n          Basemaps\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <mat-button-toggle-group name=\"basemaps\" aria-label=\"Basemaps\">\n        <mat-button-toggle value=\"imagery\">Imagery</mat-button-toggle>\n        <mat-button-toggle value=\"street\">Street</mat-button-toggle>\n        <mat-button-toggle value=\"topographic\">Topographic</mat-button-toggle>\n      </mat-button-toggle-group>\n\n    </mat-expansion-panel>\n  </mat-accordion>\n</ng-template>\n\n<!--\n  MAIN TEMPLATE DECLARATION\n-->\n\n\n<!--\n  MAIN TEMPLATE DECLARATION\n-->\n<div id=\"core-interface-container\">\n  <wf1-application-header [titleText]=\"titleText\"></wf1-application-header>\n\n  <div class=\"wf1-loading-screen\" *ngIf=\"isInitializing\">\n    <h1>Initializing Application</h1>\n    <wf1-spinner></wf1-spinner>\n    <h3>Please wait while the application initializes.</h3>\n  </div>\n\n  <ng-container *ngIf=\"!isInitializing\">\n    <wf1-application-toolbar \n        *ngIf=\"showToolbar\"\n        [menuTemplate]=\"menuTemplate\" \n        [toolbarTemplate]=\"toolbarTemplate\" \n        (selectedMapControl)=\"onMapControlToggled($event)\"\n    ></wf1-application-toolbar>\n\n    <mat-sidenav-container class=\"mat-typography\" hasBackdrop=false>\n      <mat-sidenav id=\"side-nav\" #sidebar mode=\"side\" [(opened)]=\"opened\" >\n        <ng-container *ngTemplateOutlet=\"sidebarTemplate ? sidebarTemplate : wfmlSidebar\"></ng-container>\n      </mat-sidenav>\n      <!-- <mat-sidenav id=\"layers-sidebar\" #mapControls mode=\"over\" hasBackdrop=\"false\" position=\"end\" [(opened)]=\"mapControlsOpened\" > -->\n        <!-- <ng-container *ngIf=\"layerTreeSelected\">\n          <wf1-wfml-layer-tree></wf1-wfml-layer-tree>\n        </ng-container>\n        <ng-container *ngIf=\"basemapsSelected\">\n          <wf1-wfml-basemap-selector></wf1-wfml-basemap-selector>\n        </ng-container> -->\n      <!-- </mat-sidenav> -->\n      <mat-sidenav-content>\n        <div id=\"side-nav-toggle\" (click)=\"sidebar.toggle();toggleSideNav()\" (keydown)=\"sidebar.toggle();toggleSideNav()\">\n          <mat-icon>{{ (opened) ? 'arrow_left' : 'arrow_right' }}</mat-icon>\n        </div>\n        <ng-container *ngTemplateOutlet=\"mainContentTemplate ? mainContentTemplate : wfmlMapPanel\"></ng-container>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n  </ng-container>\n</div>\n"
            }]
    }], function () { return [{ type: TokenService }, { type: AppConfigService }]; }, { showToolbar: [{
            type: Input
        }], titleText: [{
            type: Input
        }], menuTemplate: [{
            type: Input
        }], toolbarTemplate: [{
            type: Input
        }], sidebarTemplate: [{
            type: Input
        }], mainContentTemplate: [{
            type: Input
        }] }); })();

const DATE_FORMATS = {
    fullPickerInput: 'YYYY-MM-DD HH:mm',
    datePickerInput: 'YYYY-MM-DD',
    timePickerInput: 'HH:mm:ss',
    monthYearLabel: 'YYYY-MM',
    dateA11yLabel: 'YYYY-MMM-DD',
    monthYearA11yLabel: 'YYYY-MMM',
};
// Below dynamic decorator is here to resolve a compile problem described here: https://github.com/angular/angular/issues/20903
// See also: https://angular.io/guide/aot-compiler#strictmetadataemit
// @dynamic
class CoreUIModule {
    static forRoot(config) {
        // User config get logged here
        // console.log(config);
        return {
            ngModule: CoreUIModule,
            providers: [
                // Initializes the AppConfigService on Angular app init, so it is ready before components are loaded.
                // Technically, we're adding an additional dependency for the Angular APP_INITIALIZER token (Thus: 'multi:true').
                // That dependency fires a factory function 'appInitializerFn' that depends on the AppConfigService singleton,
                // and which call the service's loadAppConfig() function on Angular init.
                // See for reference: https://www.intertech.com/Blog/angular-4-tutorial-run-code-during-app-initialization/
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInitializerFn,
                    multi: true,
                    deps: [Injector]
                },
                {
                    provide: LibraryConfig,
                    useValue: config
                },
                {
                    provide: AppConfigService,
                    useClass: AppConfigService,
                    deps: [HttpHandler, LibraryConfig]
                },
                MapService,
                {
                    provide: OWL_DATE_TIME_FORMATS,
                    useValue: DATE_FORMATS
                },
                NavigationService
            ]
        };
    }
}
CoreUIModule.ɵfac = function CoreUIModule_Factory(t) { return new (t || CoreUIModule)(); };
CoreUIModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CoreUIModule });
CoreUIModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        SpatialUtilsService,
        WindowMessagingService,
    ], imports: [ApiModule,
        OwlDateTimeModule,
        OwlMomentDateTimeModule,
        BrowserAnimationsModule,
        BrowserModule,
        CommonModule,
        FormsModule,
        HttpClientModule,
        MatButtonModule,
        MatButtonToggleModule,
        MatCardModule,
        MatCheckboxModule,
        MatExpansionModule,
        MatFormFieldModule,
        MatGridListModule,
        MatListModule,
        MatIconModule,
        MatInputModule,
        MatMenuModule,
        MatProgressSpinnerModule,
        MatRadioModule,
        MatSidenavModule,
        MatTabsModule,
        MatToolbarModule,
        MatTooltipModule,
        MatTreeModule,
        ScrollingModule,
        MomentModule,
        OAuthModule.forRoot(),
        ReactiveFormsModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CoreUIModule, [{
        type: NgModule,
        args: [{
                imports: [
                    ApiModule,
                    OwlDateTimeModule,
                    OwlMomentDateTimeModule,
                    BrowserAnimationsModule,
                    BrowserModule,
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    MatButtonModule,
                    MatButtonToggleModule,
                    MatCardModule,
                    MatCheckboxModule,
                    MatExpansionModule,
                    MatFormFieldModule,
                    MatGridListModule,
                    MatListModule,
                    MatIconModule,
                    MatInputModule,
                    MatMenuModule,
                    MatProgressSpinnerModule,
                    MatRadioModule,
                    MatSidenavModule,
                    MatTabsModule,
                    MatToolbarModule,
                    MatTooltipModule,
                    MatTreeModule,
                    ScrollingModule,
                    MomentModule,
                    OAuthModule.forRoot(),
                    ReactiveFormsModule,
                ],
                providers: [
                    SpatialUtilsService,
                    WindowMessagingService,
                ],
                declarations: [
                    ApplicationHeaderComponent,
                    ApplicationIconComponent,
                    ApplicationToolbarComponent,
                    BasicSidebarPanelComponent,
                    DateTimePickerComponent,
                    DateMaskDirective,
                    FiltersComponent,
                    FilterSidebarPanelComponent,
                    FullWidthContainerComponent,
                    FullWidthPanelComponent,
                    InfoIncidentPanelComponent,
                    ListContainerComponent,
                    ListItemComponent,
                    LocationSidebarPanelComponent,
                    LocationToolbarComponent,
                    ReportDialogComponent,
                    SearchBarComponent,
                    SidebarComponent,
                    SortComponent,
                    SpinnerComponent,
                    UnauthorizedPageComponent,
                    VisualizeJSComponent,
                    WFMLBasemapSelectorComponent,
                    WFMLLayerTreeComponent,
                    WFMLMappingContainerComponent
                ],
                exports: [
                    ApplicationIconComponent,
                    BasicSidebarPanelComponent,
                    DateTimePickerComponent,
                    FiltersComponent,
                    FilterSidebarPanelComponent,
                    FullWidthContainerComponent,
                    FullWidthPanelComponent,
                    // InfoIncidentPanelComponent,
                    ListContainerComponent,
                    // ListItemComponent,
                    // LocationSidebarPanelComponent,
                    ReportDialogComponent,
                    SearchBarComponent,
                    SidebarComponent,
                    SortComponent,
                    SpinnerComponent,
                    UnauthorizedPageComponent,
                    VisualizeJSComponent,
                    WFMLMappingContainerComponent,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CoreUIModule, { declarations: function () { return [ApplicationHeaderComponent, ApplicationIconComponent, ApplicationToolbarComponent, BasicSidebarPanelComponent, DateTimePickerComponent, DateMaskDirective, FiltersComponent, FilterSidebarPanelComponent, FullWidthContainerComponent, FullWidthPanelComponent, InfoIncidentPanelComponent, ListContainerComponent, ListItemComponent, LocationSidebarPanelComponent, LocationToolbarComponent, ReportDialogComponent, SearchBarComponent, SidebarComponent, SortComponent, SpinnerComponent, UnauthorizedPageComponent, VisualizeJSComponent, WFMLBasemapSelectorComponent, WFMLLayerTreeComponent, WFMLMappingContainerComponent]; }, imports: function () { return [ApiModule,
        OwlDateTimeModule,
        OwlMomentDateTimeModule,
        BrowserAnimationsModule,
        BrowserModule,
        CommonModule,
        FormsModule,
        HttpClientModule,
        MatButtonModule,
        MatButtonToggleModule,
        MatCardModule,
        MatCheckboxModule,
        MatExpansionModule,
        MatFormFieldModule,
        MatGridListModule,
        MatListModule,
        MatIconModule,
        MatInputModule,
        MatMenuModule,
        MatProgressSpinnerModule,
        MatRadioModule,
        MatSidenavModule,
        MatTabsModule,
        MatToolbarModule,
        MatTooltipModule,
        MatTreeModule,
        ScrollingModule,
        MomentModule, ɵngcc26.OAuthModule, ReactiveFormsModule]; }, exports: function () { return [ApplicationIconComponent, BasicSidebarPanelComponent, DateTimePickerComponent, FiltersComponent, FilterSidebarPanelComponent, FullWidthContainerComponent, FullWidthPanelComponent, ListContainerComponent, ReportDialogComponent, SearchBarComponent, SidebarComponent, SortComponent, SpinnerComponent, UnauthorizedPageComponent, VisualizeJSComponent, WFMLMappingContainerComponent]; } }); })();

class AuthGuard {
    constructor(tokenService, router) {
        this.tokenService = tokenService;
        this.router = router;
        this.baseScopes = []; //["WFRM.GET_CODE_TABLES","WFRM.GET_TOPLEVEL"];
        // console.log("using auth guard");
        this.tokenService.credentialsEmitter.subscribe(credentials => {
            this.credentials = credentials;
        });
    }
    canActivate(next, state) {
        let url = state.url;
        let result = this.checkLogin(url, this.baseScopes);
        return of(result);
    }
    checkLogin(url, scopes) {
        let isAuthorized = (this.credentials) ? this.tokenService.doesUserHaveApplicationPermissions(scopes) : false;
        if (!isAuthorized) {
            this.redirectToErrorPage();
        }
        return isAuthorized;
    }
    redirectToErrorPage() {
        // Navigate to the unauthorized page
        this.router.navigate([{ outlets: { root: ['unauthorized'] } }]);
    }
}
AuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(ɵngcc0.ɵɵinject(TokenService), ɵngcc0.ɵɵinject(ɵngcc9.Router)); };
AuthGuard.ɵprov = ɵɵdefineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(ɵɵinject(TokenService), ɵɵinject(Router)); }, token: AuthGuard, providedIn: "root" });
AuthGuard.ctorParameters = () => [
    { type: TokenService },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthGuard, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: TokenService }, { type: ɵngcc9.Router }]; }, null); })();

class PublicAppHeaderActionItem {
}
class PublicAppHeaderMenuItem {
}
class PublicApplicationHeaderComponent {
    constructor() { }
    ngOnInit() {
    }
}
PublicApplicationHeaderComponent.ɵfac = function PublicApplicationHeaderComponent_Factory(t) { return new (t || PublicApplicationHeaderComponent)(); };
PublicApplicationHeaderComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PublicApplicationHeaderComponent, selectors: [["wf1-public-application-header"]], inputs: { titleText: "titleText", headerItems: "headerItems", headerLogoPath: "headerLogoPath" }, decls: 5, vars: 3, consts: [["color", "primary", 1, "mat-typography", "wf1-public-application-header"], [1, "bc-logo-div"], ["alt", "BC Gov", 1, "img-fluid", "center-block", "logo", 3, "src"], ["class", "app-logo-and-title-div", 4, "ngIf"], ["class", "action-items mat-caption", 4, "ngIf"], [1, "app-logo-and-title-div"], ["src", "assets/images/logo/wildfire-one-logo-text-horizontal-light.png", "alt", "Wildfire ONE", 1, "img-fluid", "center-block", "logo"], [1, "title-hyphen"], ["id", "header-title", 1, "mat-title"], [1, "action-items", "mat-caption"], [4, "ngFor", "ngForOf"], [4, "ngIf"], [3, "mat-menu-trigger-for"], ["xPosition", "before", 1, "wf1-public-application-header-menu"], ["headerItemMenu", "matMenu"], ["mat-menu-item", "", 3, "click", 4, "ngFor", "ngForOf"], ["mat-menu-item", "", 3, "click"], [3, "svgIcon", 4, "ngIf"], [3, "svgIcon"], [3, "click"]], template: function PublicApplicationHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-toolbar", 0)(1, "div", 1);
        ɵngcc0.ɵɵelement(2, "img", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, PublicApplicationHeaderComponent_div_3_Template, 6, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(4, PublicApplicationHeaderComponent_div_4_Template, 2, 1, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("src", ctx.headerLogoPath ? ctx.headerLogoPath : "assets/images/logo/bcgov-logo.png", ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.titleText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerItems);
    } }, dependencies: [ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc4.MatIcon, ɵngcc7.MatMenu, ɵngcc7.MatMenuItem, ɵngcc7.MatMenuTrigger, ɵngcc3.MatToolbar], encapsulation: 2 });
PublicApplicationHeaderComponent.ctorParameters = () => [];
PublicApplicationHeaderComponent.propDecorators = {
    titleText: [{ type: Input }],
    headerItems: [{ type: Input }],
    headerLogoPath: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PublicApplicationHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'wf1-public-application-header',
                template: "<mat-toolbar class=\"mat-typography wf1-public-application-header\" color=\"primary\">\n  <div class=\"bc-logo-div\">\n    <img [src]=\"headerLogoPath?headerLogoPath:'assets/images/logo/bcgov-logo.png'\" class=\"img-fluid center-block logo\" alt=\"BC Gov\">\n  </div>\n  <div *ngIf=\"titleText\" class=\"app-logo-and-title-div\">\n    <img src=\"assets/images/logo/wildfire-one-logo-text-horizontal-light.png\" class=\"img-fluid center-block logo\" alt=\"Wildfire ONE\">\n    <span class=\"title-hyphen\"> - </span>\n    <span class=\"mat-title\" id=\"header-title\">{{ titleText }}</span>\n  </div>\n  <div class=\"action-items mat-caption\" *ngIf=\"headerItems\">\n    <ng-container *ngFor=\"let headerItem of headerItems\">\n      <div *ngIf=\"headerItem.menuItems && headerItem.menuItems.length > 0\">\n        <button [attr.aria-label]=\"headerItem.label\"  [mat-menu-trigger-for]=\"headerItemMenu\"><mat-icon >{{headerItem.icon}}</mat-icon></button>\n        <mat-menu #headerItemMenu=\"matMenu\" xPosition=\"before\" class=\"wf1-public-application-header-menu\">\n          <button [attr.aria-label]=\"headerMenuItem.label\" *ngFor=\"let headerMenuItem of headerItem.menuItems\" mat-menu-item (click)=\"headerMenuItem.callBackFunction()\">\n            <mat-icon *ngIf=\"headerMenuItem.svgIcon\" [svgIcon]=\"headerMenuItem.svgIcon\"></mat-icon>\n            <mat-icon *ngIf=\"headerMenuItem.icon\">{{headerMenuItem.icon}}</mat-icon>\n            <span>{{headerMenuItem.label}}</span>\n          </button>\n        </mat-menu>\n      </div>\n      <div *ngIf=\"!headerItem.menuItems || headerItem.menuItems.length == 0\">\n        <button [attr.aria-label]=\"headerItem.label\" (click)=\"headerItem.callBackFunction()\">\n          <mat-icon *ngIf=\"headerItem.svgIcon\" [svgIcon]=\"headerItem.svgIcon\"></mat-icon>\n          <mat-icon *ngIf=\"headerItem.icon\">{{headerItem.icon}}</mat-icon>\n        </button>\n      </div>\n    </ng-container>\n  </div>\n</mat-toolbar>\n"
            }]
    }], function () { return []; }, { titleText: [{
            type: Input
        }], headerItems: [{
            type: Input
        }], headerLogoPath: [{
            type: Input
        }] }); })();

class PublicApplicationHeaderModule {
}
PublicApplicationHeaderModule.ɵfac = function PublicApplicationHeaderModule_Factory(t) { return new (t || PublicApplicationHeaderModule)(); };
PublicApplicationHeaderModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: PublicApplicationHeaderModule });
PublicApplicationHeaderModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule,
        MatIconModule,
        MatMenuModule,
        MatToolbarModule,
        MatDividerModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PublicApplicationHeaderModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MatIconModule,
                    MatMenuModule,
                    MatToolbarModule,
                    MatDividerModule,
                ],
                declarations: [
                    PublicApplicationHeaderComponent
                ],
                exports: [
                    PublicApplicationHeaderComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PublicApplicationHeaderModule, { declarations: function () { return [PublicApplicationHeaderComponent]; }, imports: function () { return [CommonModule,
        MatIconModule,
        MatMenuModule,
        MatToolbarModule,
        MatDividerModule]; }, exports: function () { return [PublicApplicationHeaderComponent]; } }); })();

/** Pass untouched request through to the next request handler. */
class AuthenticationInterceptor {
    constructor(injector) {
        this.injector = injector;
    }
    intercept(req, next) {
        // console.log(this.appConfig.getConfig());
        let processedRequest = req;
        if (this.isUrlSecured(req.url)) {
            this.token = this.injector.get(TokenService);
            this.authToken = this.token.getOauthToken();
            if (this.authToken) {
                processedRequest = req.clone({
                    headers: req.headers.set('Authorization', 'Bearer ' + this.authToken)
                });
            }
        }
        return next.handle(processedRequest);
    }
    isUrlSecured(url) {
        let isSecured = false;
        const config = this.injector.get(AppConfigService).getConfig();
        if (config && config.rest) {
            for (let endpoint in config.rest) {
                if (url.startsWith(config.rest[endpoint])) {
                    isSecured = true;
                    break;
                }
            }
        }
        return isSecured;
    }
}
AuthenticationInterceptor.ɵfac = function AuthenticationInterceptor_Factory(t) { return new (t || AuthenticationInterceptor)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
AuthenticationInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AuthenticationInterceptor, factory: AuthenticationInterceptor.ɵfac });
AuthenticationInterceptor.ctorParameters = () => [
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthenticationInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();

class FilterConfig {
    constructor() {
        this.type = 'multi';
    }
}

const initialState = {
    query: null,
    sortParam: null,
    sortDirection: null,
    sortModalVisible: false,
    filters: {},
    hiddenFilters: {}
};

const getSearchQuery = (state) => state.query;
const getSortParam = (state) => state.sortParam;
const getSortDirection = (state) => state.sortDirection;
const getEncodedSort = (state) => encodeURIComponent(`${state.sortParam} ${state.sortDirection}`);
const isSortModalVisible = (state) => state.sortModalVisible;
const getActiveFilters = (state) => state.filters;

var functions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getSearchQuery: getSearchQuery,
    getSortParam: getSortParam,
    getSortDirection: getSortDirection,
    getEncodedSort: getEncodedSort,
    isSortModalVisible: isSortModalVisible,
    getActiveFilters: getActiveFilters
});

const getSearchState = (state) => state;
const ɵ0 = getSearchState;
const getSearchQuerySelector = createSelector(getSearchState, getSearchQuery);
const getSortParamSelector = createSelector(getSearchState, getSortParam);
const getSortDirectionSelector = createSelector(getSearchState, getSortDirection);
const getEncodedSortSelector = createSelector(getSearchState, getEncodedSort);
const isSortModalVisibleSelector = createSelector(getSearchState, isSortModalVisible);
const getActiveFiltersSelector = createSelector(getSearchState, getActiveFilters);

var selectors = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getSearchQuerySelector: getSearchQuerySelector,
    getSortParamSelector: getSortParamSelector,
    getSortDirectionSelector: getSortDirectionSelector,
    getEncodedSortSelector: getEncodedSortSelector,
    isSortModalVisibleSelector: isSortModalVisibleSelector,
    getActiveFiltersSelector: getActiveFiltersSelector,
    ɵ0: ɵ0
});

function searchReducer(state, action) {
    switch (action.type) {
        case SearchActionTypes.UPDATE_SEARCH_QUERY: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const query = action.query;
            return Object.assign({}, state, { query: query });
        }
        case SearchActionTypes.RESET_SEARCH_QUERY: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            return Object.assign({}, state, { query: null });
        }
        case SearchActionTypes.UPDATE_SORT: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const { param, direction } = action;
            return Object.assign({}, state, { sortParam: param, sortDirection: direction });
        }
        case SearchActionTypes.TOGGLE_SORT_MODAL: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            return Object.assign({}, state, { sortModalVisible: !state.sortModalVisible });
        }
        case SearchActionTypes.UPDATE_ACTIVE_FILTERS: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const activeFilters = action.filters;
            return Object.assign({}, state, { filters: activeFilters });
        }
        case SearchActionTypes.UPDATE_HIDDEN_FILTERS: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const hiddenFilters = action.filters;
            return Object.assign({}, state, { hiddenFilters: hiddenFilters });
        }
        case SearchActionTypes.CLEAR_FILTER: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const filterName = action.filterToRemove;
            const _a = state.filters, _b = filterName, clearedFilter = _a[_b], remainingFilters = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
            return Object.assign({}, state, { filters: remainingFilters });
        }
        case SearchActionTypes.CLEAR_ALL_FILTERS: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            return Object.assign({}, state, { filters: {} });
        }
        default: {
            return state;
        }
    }
}
const isMyComponent = (state, componentId) => {
    if (state && state.componentId && componentId) {
        if (state.componentId === componentId) {
            return true;
        }
    }
    return false;
};
const ɵ0$1 = isMyComponent;

/*
 * Public API Surface of core-ui
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AppConfigService, ApplicationIconComponent, AuthGuard, AuthenticationInterceptor, BasicSidebarPanelComponent, CoreUIModule, DATE_FORMATS, DateTimePickerComponent, FilterConfig, FilterSidebarPanelComponent, FiltersComponent, FullWidthContainerComponent, FullWidthPanelComponent, IconSize, IconType, IncidentType, IncidentTypeAgencyAssist, IncidentTypeFieldActivity, IncidentTypeWithStatus, InfoIncidentPanelComponent, LibraryConfig, ListContainerComponent, ListItemComponent, LocationSidebarPanelComponent, MAPTOOL_WINDOW_NAME, Message, MessageType, PublicApplicationHeaderComponent, PublicApplicationHeaderModule, ReportDialogComponent, ReportOfFireType, actions as SearchActions, SearchBarComponent, functions as SearchFunctions, selectors as SearchSelectors, SidebarComponent, SortComponent, SpatialUtilsService, SpinnerComponent, TokenService, UnauthorizedPageComponent, VisualizeJSComponent, WFIM_LIST_COMPONENT_ID, WFIM_TABLE_COMPONENT_ID, WFIM_WINDOW_NAME, WFMLMappingContainerComponent, WFNROF_LIST_COMPONENT_ID, WFNROF_TABLE_COMPONENT_ID, WFNROF_WINDOW_NAME, WFROF_LIST_COMPONENT_ID, WFROF_TABLE_COMPONENT_ID, WFROF_WINDOW_NAME, WindowConfig, WindowMessagingService, appInitializerFn, initialState, searchReducer, ApplicationHeaderComponent as ɵa, ApplicationToolbarComponent as ɵb, NavigationService as ɵc, DateMaskDirective as ɵd, MapService as ɵe, LocationToolbarComponent as ɵf, WFMLBasemapSelectorComponent as ɵg, WFMLLayerTreeComponent as ɵh };

//# sourceMappingURL=wf1-core-ui.js.map