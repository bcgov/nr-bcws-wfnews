(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('angular-oauth2-oidc'), require('moment'), require('rxjs/operators'), require('@angular/cdk/scrolling'), require('@angular/common'), require('@angular/forms'), require('@angular/material/button'), require('@angular/material/button-toggle'), require('@angular/material/card'), require('@angular/material/checkbox'), require('@angular/material/expansion'), require('@angular/material/form-field'), require('@angular/material/grid-list'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/list'), require('@angular/material/menu'), require('@angular/material/progress-spinner'), require('@angular/material/radio'), require('@angular/material/sidenav'), require('@angular/material/tabs'), require('@angular/material/toolbar'), require('@angular/material/tooltip'), require('@angular/material/tree'), require('@angular/platform-browser'), require('@angular/platform-browser/animations'), require('@busacca/ng-pick-datetime'), require('@wf1/orgunit-rest-api'), require('ngx-moment'), require('@angular/router'), require('vanilla-text-mask'), require('@ngrx/store'), require('@angular/material/dialog'), require('angular2-uuid'), require('@angular/cdk/tree'), require('@angular/cdk/collections'), require('@angular/material/divider')) :
    typeof define === 'function' && define.amd ? define('@wf1/core-ui', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'angular-oauth2-oidc', 'moment', 'rxjs/operators', '@angular/cdk/scrolling', '@angular/common', '@angular/forms', '@angular/material/button', '@angular/material/button-toggle', '@angular/material/card', '@angular/material/checkbox', '@angular/material/expansion', '@angular/material/form-field', '@angular/material/grid-list', '@angular/material/icon', '@angular/material/input', '@angular/material/list', '@angular/material/menu', '@angular/material/progress-spinner', '@angular/material/radio', '@angular/material/sidenav', '@angular/material/tabs', '@angular/material/toolbar', '@angular/material/tooltip', '@angular/material/tree', '@angular/platform-browser', '@angular/platform-browser/animations', '@busacca/ng-pick-datetime', '@wf1/orgunit-rest-api', 'ngx-moment', '@angular/router', 'vanilla-text-mask', '@ngrx/store', '@angular/material/dialog', 'angular2-uuid', '@angular/cdk/tree', '@angular/cdk/collections', '@angular/material/divider'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.wf1 = global.wf1 || {}, global.wf1['core-ui'] = {}), global.ng.core, global.ng.common.http, global.rxjs, global.angularOauth2Oidc, global.momentInstance, global.rxjs.operators, global.ng.cdk.scrolling, global.ng.common, global.ng.forms, global.ng.material.button, global.ng.material.buttonToggle, global.ng.material.card, global.ng.material.checkbox, global.ng.material.expansion, global.ng.material.formField, global.ng.material.gridList, global.ng.material.icon, global.ng.material.input, global.ng.material.list, global.ng.material.menu, global.ng.material.progressSpinner, global.ng.material.radio, global.ng.material.sidenav, global.ng.material.tabs, global.ng.material.toolbar, global.ng.material.tooltip, global.ng.material.tree, global.ng.platformBrowser, global.ng.platformBrowser.animations, global.ngPickDatetime, global.orgunitRestApi, global.ngxMoment, global.ng.router, global.textMask, global.store, global.ng.material.dialog, global.angular2Uuid, global.ng.cdk.tree, global.ng.cdk.collections, global.ng.material.divider));
}(this, (function (exports, i0, i1, rxjs, angularOauth2Oidc, momentInstance, operators, scrolling, i2, forms, button, buttonToggle, card, checkbox, expansion, formField, gridList, icon, input, list, menu, progressSpinner, radio, sidenav, tabs, toolbar, tooltip, tree$1, platformBrowser, animations, ngPickDatetime, orgunitRestApi, ngxMoment, i1$1, textMask, store, dialog, angular2Uuid, tree, collections, divider) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var momentInstance__namespace = /*#__PURE__*/_interopNamespace(momentInstance);

    var LibraryConfig = /** @class */ (function () {
        function LibraryConfig() {
        }
        return LibraryConfig;
    }());
    LibraryConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function LibraryConfig_Factory() { return new LibraryConfig(); }, token: LibraryConfig, providedIn: "root" });
    LibraryConfig.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    var AppConfigService = /** @class */ (function () {
        function AppConfigService(httpHandler, libConfig) {
            this.httpHandler = httpHandler;
            this.libConfig = libConfig;
            this.config = new rxjs.AsyncSubject();
            this.configEmitter = this.config.asObservable();
            // console.log("initing app config service");
        }
        AppConfigService.prototype.loadAppConfig = function () {
            var _this = this;
            // console.log("loading app config");
            var http = new i1.HttpClient(this.httpHandler);
            return http.get(this.libConfig.configurationPath).toPromise().then(function (data) {
                _this.appConfig = data;
                _this.config.next(_this.appConfig);
                _this.config.complete();
            });
        };
        AppConfigService.prototype.getConfig = function () {
            return this.appConfig;
        };
        return AppConfigService;
    }());
    AppConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AppConfigService_Factory() { return new AppConfigService(i0.ɵɵinject(i1.HttpBackend), i0.ɵɵinject(LibraryConfig)); }, token: AppConfigService, providedIn: "root" });
    AppConfigService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AppConfigService.ctorParameters = function () { return [
        { type: i1.HttpBackend },
        { type: LibraryConfig }
    ]; };

    var PRECISION_SECONDS = 3;
    var PRECISION_DECIMAL_DEGREES_FRACTION = 8;
    var RE_ATOM = {
        start: '^\\s*',
        separator: '[ \\t,\\|]+',
        zone: '([zZ]([oO][nN][eE])?[ ])?',
        end: '\\s*$',
        numDec: '(\\d+(?:\\.\\d+)?)',
        numUTM: '(\\d+)'
    };
    var REGEXP_UTM = new RegExp(RE_ATOM.start +
        RE_ATOM.numDec +
        RE_ATOM.separator +
        RE_ATOM.numDec +
        RE_ATOM.separator + RE_ATOM.zone +
        RE_ATOM.numUTM +
        RE_ATOM.end);
    var EPSG_GEOGRAPHIC = "EPSG:4326";
    var SCALE = {
        '°': 'deg',
        '\'': 'min',
        '"': 'sec',
        '’': 'min',
        '”': 'sec',
    };
    var SCALE_FACTOR = {
        deg: 1, min: 60, sec: 3600
    };
    var LONG_MIN = -200;
    var LONG_MAX = -100;
    var LAT_MIN = 0;
    var LAT_MAX = 90;
    var SpatialUtilsService = /** @class */ (function () {
        function SpatialUtilsService() {
        }
        SpatialUtilsService.prototype.convertPointCoordinatesToGeoJSON = function (coordinates) {
            return coordinates ? {
                type: 'Feature',
                geometry: {
                    type: 'Point',
                    coordinates: coordinates
                }
            } : undefined;
        };
        SpatialUtilsService.prototype.formatCoordinates = function (coordinates) {
            return this.formatDM(coordinates);
        };
        SpatialUtilsService.prototype.parseCoordinates = function (coordinatesText) {
            var longLat = this.parseLocation(coordinatesText);
            if (!longLat)
                return;
            var long = parseFloat(longLat[0].toFixed(PRECISION_DECIMAL_DEGREES_FRACTION));
            var lat = parseFloat(longLat[1].toFixed(PRECISION_DECIMAL_DEGREES_FRACTION));
            return [long, lat];
        };
        SpatialUtilsService.prototype.formatDM = function (lonlat) {
            if (!lonlat)
                return "";
            return toDM(lonlat[1]) + ', ' + toDM(lonlat[0]);
            function int(value) {
                if (value < 0) {
                    return Math.ceil(value);
                }
                else {
                    return Math.floor(value);
                }
            }
            function fraction(value) {
                var absValue = Math.abs(value);
                return absValue - Math.floor(absValue);
            }
            function toDM(value) {
                var degrees = int(value), minutes = fraction(value) * 60;
                return degrees + " " + minutes.toFixed(PRECISION_SECONDS) + "'";
                0;
            }
        };
        // will be needed once more coordinate systems are handled - e.g. UTM
        SpatialUtilsService.prototype.parseLocation = function (s) {
            var lonlat = this.parseGeo(s);
            if (lonlat)
                return lonlat;
            return this.parseUTM(s);
        };
        SpatialUtilsService.prototype.getUTMCoordinate = function (s) {
            var match = REGEXP_UTM.exec(s);
            if (match) {
                var num = [
                    parseInt(match[1]),
                    parseInt(match[2]),
                    parseInt(match[5])
                ];
                return num;
            }
            return null;
        };
        SpatialUtilsService.prototype.parseUTM = function (s) {
            var utm = this.getUTMCoordinate(s);
            if (!utm)
                return null;
            return this.convertUTM(utm);
        };
        SpatialUtilsService.prototype.convertUTM = function (num) {
            var easting = num[0];
            var northing = num[1];
            var zone = num[2];
            return this.transformUTMtoGeo([easting, northing, zone]);
        };
        SpatialUtilsService.prototype.transformUTMtoGeo = function (pt) {
            var utmZone = pt[2];
            Proj4js.defs['UTM'] = '+proj=utm +zone=' + utmZone;
            var source = new Proj4js.Proj('UTM');
            var dest = new Proj4js.Proj(EPSG_GEOGRAPHIC);
            var p = new Proj4js.Point(pt[0], pt[1]);
            Proj4js.transform(source, dest, p);
            return [p.x, p.y];
        };
        SpatialUtilsService.prototype.parseGeo = function (s) {
            // associate comma with following component, so it can be used to indicate deg
            var normalizedComma = (new String(s)).replace(/\s*,\s*/g, ' ,');
            // remove hemisphere indicators
            // TODO: use this information
            var noHemisphere = normalizedComma.replace(/[news]/ig, '').trim();
            try {
                var split = noHemisphere.split(/\s+/);
                var comps = split.map(function (c, i) {
                    var m = c.match(/^([,]?)([-]?\d+[.]?\d*)([Â°'"â€™â€]?)$/);
                    if (!m)
                        throw new Error('component not valid: ' + c);
                    // scale specifier, if any
                    var scale = SCALE[m[3]];
                    // the first component, or one after a comma is assumed to be deg
                    if (i == 0 || m[1])
                        if (scale && scale != 'deg')
                            throw new Error('component scale should be degrees: ' + c);
                        else
                            scale = 'deg';
                    // only deg scale is allowed to be negative
                    var val = parseFloat(m[2]);
                    if (scale && scale != 'deg' && val < 0)
                        throw new Error('component should not be negative: ' + c);
                    return {
                        val: val,
                        scale: scale
                    };
                });
            }
            catch (e) {
                return;
            }
            if (comps.length < 2 || comps.length > 6)
                return;
            // prefer a parse that splits the components evenly into 2 halves
            // failing that, use longest possible set of components for the first ordinate
            switch (comps.length) {
                case 2:
                    return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 1), comps.slice(1, 2))); // 1 2
                case 3:
                    return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 2), comps.slice(2, 3))) // 12 3
                        ||
                            this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 1), comps.slice(1, 3))); // 1 23
                case 4:
                    return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 2), comps.slice(2, 4))) // 12 34
                        ||
                            this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 3), comps.slice(3, 4))) // 123 4
                        ||
                            this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 1), comps.slice(1, 4))); // 1 234
                case 5:
                    return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 3), comps.slice(3, 5))) // 123 45
                        ||
                            this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 2), comps.slice(2, 5))); // 12 345
                case 6:
                    return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 3), comps.slice(3, 6))); // 123 456
            }
            return;
        };
        SpatialUtilsService.prototype.checkRangeFixOrderSign = function (p) {
            if (!p)
                return;
            var x = p[0], y = p[1];
            return this.checkRangeFixOrder(x, y) ||
                this.checkRangeFixOrder(-x, y) ||
                this.checkRangeFixOrder(x, -y) ||
                this.checkRangeFixOrder(-x, -y);
        };
        SpatialUtilsService.prototype.checkRangeFixOrder = function (x, y) {
            return this.checkRange(y, x) ||
                this.checkRange(x, y);
        };
        SpatialUtilsService.prototype.checkRange = function (long, lat) {
            if (lat > LAT_MAX || lat < LAT_MIN)
                return;
            if (long > LONG_MAX || long < LONG_MIN)
                return;
            return [long, lat];
        };
        SpatialUtilsService.prototype.resolveDMSpair = function (compsA, compsB) {
            var dmsA = this.resolveDMS.apply(this, compsA);
            if (dmsA === false)
                return false;
            var dmsB = this.resolveDMS.apply(this, compsB);
            if (dmsB === false)
                return false;
            return [dmsA, dmsB];
        };
        SpatialUtilsService.prototype.resolveDMS = function (deg, min, sec) {
            if (deg == null)
                return false;
            if (deg.scale && deg.scale != 'deg')
                return false;
            if (min != null && min.scale && min.scale == 'deg')
                return false;
            if (sec != null && sec.scale && (sec.scale == 'deg' || sec.scale == 'min' || min.scale == 'sec'))
                return false;
            var val = deg.val;
            if (min == null)
                return val;
            // minutes not allowed to be negative
            if (min.val < 0)
                return false;
            val += this.sameSign(min.val, deg.val) / SCALE_FACTOR[min.scale || 'min'];
            if (sec == null)
                return val;
            // seconds not allowed to be negative
            if (sec.val < 0)
                return false;
            val += this.sameSign(sec.val, deg.val) / SCALE_FACTOR['sec'];
            return val;
        };
        SpatialUtilsService.prototype.sameSign = function (val, proto) {
            if (proto >= 0)
                return Math.abs(val);
            return -Math.abs(val);
        };
        return SpatialUtilsService;
    }());
    SpatialUtilsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SpatialUtilsService_Factory() { return new SpatialUtilsService(); }, token: SpatialUtilsService, providedIn: "root" });
    SpatialUtilsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    SpatialUtilsService.ctorParameters = function () { return []; };

    var moment = momentInstance__namespace;
    var OAUTH_LOCAL_STORAGE_KEY = 'oauth';
    var TokenService = /** @class */ (function () {
        function TokenService(injector, appConfigService) {
            //console.log("initing token service", appConfigService.getConfig());
            this.injector = injector;
            this.appConfigService = appConfigService;
            this.LOCAL_STORAGE_KEY = OAUTH_LOCAL_STORAGE_KEY;
            this.useLocalStore = false;
            this.credentials = new rxjs.AsyncSubject();
            this.authToken = new rxjs.AsyncSubject();
            this.credentialsEmitter = this.credentials.asObservable();
            this.authTokenEmitter = this.authToken.asObservable();
            var lazyAuthenticate = appConfigService.getConfig().application.lazyAuthenticate;
            var enableLocalStorageToken = appConfigService.getConfig().application.enableLocalStorageToken;
            var localStorageTokenKey = appConfigService.getConfig().application.localStorageTokenKey;
            var allowLocalExpiredToken = appConfigService.getConfig().application.allowLocalExpiredToken;
            if (localStorageTokenKey) {
                this.LOCAL_STORAGE_KEY = localStorageTokenKey;
            }
            if (enableLocalStorageToken) {
                this.useLocalStore = true;
            }
            this.checkForToken(undefined, lazyAuthenticate, allowLocalExpiredToken);
        }
        /*
         * Check window location hash fragment or local storage session for access token.
         * Parse and set the token if the access token is present,
         * otherwise initiate implicit flow.
         *
         * @param {string} redirectUri The redirect URI after login is complete
         * @param {boolean} lazyAuth When true, allows application to handle when to login ( by default: false which will require login as soon as the application initializes)
         * @param {boolean} allowLocalExpiredToken When true, expired tokens are not removed and does not invoke login (allows token to be used even when expired for offline mode and service workers).
         */
        TokenService.prototype.checkForToken = function (redirectUri, lazyAuth, allowLocalExpiredToken) {
            // console.log('redirect uri', redirectUri);
            var hash = window.location.hash;
            // Check if URL has token (redirected back from oauth)
            if (hash && hash.indexOf('access_token') > -1) {
                // We have a token in the URL, parse it
                this.parseToken(hash);
            }
            else if (this.useLocalStore && !navigator.onLine) {
                // Only use local storage if application is offline
                // this is to refresh expired tokens before check token is enabled, when there is connectivity
                // Check if local storage has a token
                var tokenStore = localStorage.getItem(this.LOCAL_STORAGE_KEY);
                // Parse the token
                if (tokenStore) {
                    try {
                        tokenStore = JSON.parse(tokenStore);
                        this.initAuthFromSession();
                    }
                    catch (err) {
                        // Failed to parse the token, remove the old token and get a new token by logging in again
                        console.log('Failed to read session token - reinitializing');
                        this.tokenDetails = undefined;
                        localStorage.removeItem(this.LOCAL_STORAGE_KEY);
                        this.initImplicitFlow(redirectUri);
                    }
                }
                else {
                    // no token was found initiate login
                    this.initImplicitFlow(redirectUri);
                }
                // Check if token is expired if it is not allowed
                if (!allowLocalExpiredToken && this.isTokenExpired(this.tokenDetails)) {
                    localStorage.removeItem(this.LOCAL_STORAGE_KEY);
                    this.initImplicitFlow(redirectUri);
                }
            }
            else if (hash && hash.indexOf('error') > -1) {
                alert('Error occurred during authentication.');
                return;
            }
            else {
                // login if lazy auth not enabled as we need a token
                if (!lazyAuth) {
                    this.initImplicitFlow(redirectUri);
                }
            }
        };
        TokenService.prototype.isTokenExpired = function (token) {
            var expiryDate;
            var now = moment();
            if (token && token.exp) {
                expiryDate = moment.unix(token.exp);
                if (now.isBefore(expiryDate)) {
                    return false;
                }
            }
            return true;
        };
        /*
         * Parse token from a hash fragment
         * Example:
         *    #access_token=ABC&token_type=bearer&state=&expires_in=43199&scope=WFIM.GET_WILDFIRE_INCIDENT%20WFORG.GET_ORG_UNITS%&jti=3a642b53-d90e-4ee3-a00c-5cd780155225
         */
        TokenService.prototype.parseToken = function (hash) {
            if (hash.startsWith('#')) {
                hash = hash.substr(1);
            }
            var responseParameters = (hash).split("&");
            var parameterMap = [];
            for (var i = 0; i < responseParameters.length; i++) {
                parameterMap[responseParameters[i].split("=")[0]] = responseParameters[i].split("=")[1];
            }
            if (parameterMap['access_token'] !== undefined && parameterMap['access_token'] !== null) {
                location.hash = '';
                this.initAuth(parameterMap);
            }
        };
        /*
         * Set authentication configuration and initiate implicit flow
         */
        TokenService.prototype.initImplicitFlow = function (redirectUri) {
            var configuration = this.appConfigService.getConfig();
            var authConfig = {
                oidc: false,
                issuer: configuration.application.baseUrl,
                loginUrl: configuration.webade.oauth2Url,
                redirectUri: redirectUri ? redirectUri : window.location.href,
                clientId: configuration.webade.clientId,
                scope: configuration.webade.authScopes
            };
            // console.log('authConfig', authConfig);
            var oauthService = this.injector.get(angularOauth2Oidc.OAuthService);
            oauthService.configure(authConfig);
            oauthService.initImplicitFlow();
        };
        /*
         * Set authentication configuration and initiate refresh token implicit flow
         */
        TokenService.prototype.initRefreshTokenImplicitFlow = function (authorizeURL, storageKey, errorCallback) {
            var _this = this;
            var options = 'resizable=yes,scrollbars=yes,statusbar=yes,status=yes';
            var refreshWindow = window.open(authorizeURL, null, options);
            var refreshAsync = new rxjs.AsyncSubject();
            var refreshInterval = setInterval(function () {
                if (!refreshWindow) {
                    errorCallback('Session Expired. Unable to open refresh window. Please allow pop-ups.');
                    refreshWindow = window.open(authorizeURL, null, options);
                }
                if (refreshWindow && refreshWindow.closed) {
                    clearInterval(refreshInterval);
                    var newToken = window.localStorage.getItem("" + storageKey);
                    newToken = JSON.parse(newToken);
                    window.localStorage.removeItem("" + storageKey);
                    _this.updateToken(newToken);
                    refreshAsync.next(newToken);
                    refreshAsync.complete();
                }
            }, 500);
            return refreshAsync.asObservable();
        };
        /*
         * initialize authentication from session in application, emit to subscribers
         */
        TokenService.prototype.initAuthFromSession = function () {
            try {
                var localOauth = localStorage.getItem(this.LOCAL_STORAGE_KEY);
                localOauth = JSON.parse(localOauth);
                this.oauth = localOauth;
                this.initAndEmit();
            }
            catch (err) {
                localStorage.removeItem(this.LOCAL_STORAGE_KEY);
                console.log('Failed to handle token payload', this.oauth);
                this.handleError(err, 'Failed to handle token');
            }
        };
        /*
         * initialize authentication response in application, emit to subscribers
         */
        TokenService.prototype.initAuth = function (response) {
            if (response) {
                try {
                    if (this.useLocalStore) {
                        var tokenStore = {
                            access_token: response.access_token,
                            expires_in: response.expires_in
                        };
                        localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(tokenStore));
                    }
                    this.oauth = response;
                    this.initAndEmit();
                }
                catch (err) {
                    if (this.useLocalStore) {
                        localStorage.removeItem(this.LOCAL_STORAGE_KEY);
                    }
                    console.log('Failed to handle token payload', this.oauth);
                    this.handleError(err, 'Failed to handle token');
                }
            }
        };
        /*
         * Initialize all token service attributes and emit
         */
        TokenService.prototype.initAndEmit = function () {
            var _this = this;
            // console.log('init and emit', this.appConfigService.getConfig());
            if (this.appConfigService.getConfig().webade.enableCheckToken) {
                var baseUrl = this.appConfigService.getConfig().application.baseUrl;
                if (!baseUrl.endsWith('/')) {
                    baseUrl = baseUrl.concat('/');
                }
                var checkTokenUrl_1 = "" + baseUrl + this.appConfigService.getConfig().webade.checkTokenUrl;
                var headers_1 = new i1.HttpHeaders({
                    'Authorization': "Bearer " + this.oauth.access_token,
                });
                // console.log('checkTokenUrl', checkTokenUrl);
                setTimeout(function () {
                    var http = new i1.HttpClient(_this.injector.get(i1.HttpHandler));
                    http.get(checkTokenUrl_1, { headers: headers_1 }).toPromise()
                        .then(function (response) {
                        _this.tokenDetails = response;
                        // console.log('access_token', this.oauth.access_token);
                        _this.authToken.next(_this.oauth.access_token);
                        _this.authToken.complete();
                        // console.log('tokenDetails', this.tokenDetails);
                        _this.credentials.next(_this.tokenDetails);
                        _this.credentials.complete();
                    })
                        , operators.catchError(function (error) {
                            console.log(error);
                            alert("App initialization Failed " + error.status + ". Status(Check token failed)");
                            return error;
                        });
                });
            }
            else {
                //Split for JWT
                var oauthInfo = this.oauth.access_token.split('.');
                // console.log('oauthInfo', oauthInfo);
                if (oauthInfo.length > 1) {
                    this.tokenDetails = JSON.parse(atob(oauthInfo[1]));
                }
                // console.log('access_token2', this.oauth.access_token);
                this.authToken.next(this.oauth.access_token);
                this.authToken.complete();
                // console.log('tokenDetails2', this.tokenDetails);
                this.credentials.next(this.tokenDetails);
                this.credentials.complete();
            }
        };
        TokenService.prototype.updateToken = function (oauthToken) {
            this.oauth = oauthToken;
            this.initAndEmit();
        };
        TokenService.prototype.getOauthToken = function () {
            return (this.oauth) ? this.oauth.access_token : null;
        };
        TokenService.prototype.getTokenDetails = function () {
            return (this.tokenDetails) ? this.tokenDetails : null;
        };
        TokenService.prototype.doesUserHaveApplicationPermissions = function (scopes) {
            if (this.tokenDetails && this.tokenDetails.scope && this.tokenDetails.scope.length > 0) {
                if (scopes) {
                    for (var i = 0; i < scopes.length; i++) {
                        if (this.tokenDetails.scope.indexOf(scopes[i]) == -1) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        };
        TokenService.prototype.clearLocalStorageToken = function () {
            localStorage.removeItem(this.LOCAL_STORAGE_KEY);
        };
        TokenService.prototype.handleError = function (err, message) {
            console.error('Unexpected error', err);
            alert(message ? message + ' ' + err : '' + err);
            throw err;
        };
        return TokenService;
    }());
    TokenService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TokenService_Factory() { return new TokenService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(AppConfigService)); }, token: TokenService, providedIn: "root" });
    TokenService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    TokenService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: AppConfigService }
    ]; };

    var ApplicationHeaderComponent = /** @class */ (function () {
        function ApplicationHeaderComponent(appConfig, token) {
            this.appConfig = appConfig;
            this.token = token;
        }
        ApplicationHeaderComponent.prototype.ngOnInit = function () {
            var _this = this;
            var config = this.appConfig.getConfig();
            this.appVersion = config.application.version;
            this.acronym = config.application.acronym;
            this.environment = config.application.environment;
            this.buildNumber = config.application.buildNumber ? "." + config.application.buildNumber : '';
            this.token.credentialsEmitter.subscribe(function (credentialDetails) {
                if (credentialDetails.given_name && credentialDetails.family_name) {
                    _this.userName = credentialDetails.given_name + " " + credentialDetails.family_name;
                }
                else if (credentialDetails.givenName && credentialDetails.familyName) {
                    _this.userName = credentialDetails.givenName + " " + credentialDetails.familyName;
                }
            });
        };
        return ApplicationHeaderComponent;
    }());
    ApplicationHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-application-header',
                    template: "<mat-toolbar class=\"mat-typography wf1-application-header\" color=\"primary\">\n  <div class=\"bc-logo-div\">\n    <img src=\"assets/images/logo/bcgov-logo.png\" class=\"img-fluid center-block logo\" alt=\"BC Gov\">\n  </div>\n  <div class=\"app-logo-and-title-div\">\n    <img src=\"assets/images/logo/wildfire-one-logo-text-horizontal-light.png\" class=\"img-fluid center-block logo\" alt=\"Wildfire ONE\">\n    <span class=\"mat-title\" id=\"header-title\">- {{ titleText }}</span>\n  </div>\n  <div class=\"system-and-user-info mat-caption\">\n    <div *ngIf=\"appVersion\">\n      <p class=\"header-caption-label\">SYSTEM: </p>\n      <p class=\"header-caption-text\"> {{ acronym }} {{ appVersion }}{{ buildNumber }} {{ environment }} </p>\n    </div>\n    <div *ngIf=\"userName\">\n      <p class=\"header-caption-label\">USER: </p>\n      <p class=\"header-caption-text\"> {{ userName }} </p>\n    </div>\n  </div>\n</mat-toolbar>\n"
                },] }
    ];
    ApplicationHeaderComponent.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: TokenService }
    ]; };
    ApplicationHeaderComponent.propDecorators = {
        titleText: [{ type: i0.Input }]
    };

    (function (IconType) {
        IconType["INCIDENT"] = "incident";
        IconType["INCIDENT_WITH_STATUS"] = "incident-with-status";
        IconType["INCIDENT_AGENCY_ASSIST"] = "incident-agency-assist";
        IconType["INCIDENT_FIELD_ACTIVITY"] = "incident-field-activity";
        IconType["REPORT_OF_FIRE"] = "report-of-fire";
        IconType["NO_MORE_REPORT_OF_FIRE"] = "no-more-report-of-fire";
        IconType["NO_MORE_REPORT_OF_FIRE_DARK"] = "no-more-report-of-fire-dark";
        IconType["NO_MORE_REPORT_OF_FIRE_LIGHT"] = "no-more-report-of-fire-light";
        IconType["PLACE_NAME_SEARCH"] = "place-name-search";
        IconType["POINT_ID"] = "point-id";
        IconType["FILTER_CANCEL"] = "filter-cancel";
    })(exports.IconType || (exports.IconType = {}));
    (function (IconSize) {
        IconSize["DEFAULT"] = "toolbar";
        IconSize["TOOLBAR"] = "toolbar";
        IconSize["LIST_SMALL"] = "list-small";
        IconSize["LIST_LARGE"] = "list-large";
    })(exports.IconSize || (exports.IconSize = {}));
    (function (IncidentType) {
        IncidentType["DEFAULT"] = "wf1-incident-icon-default";
        IncidentType["OUT"] = "wf1-incident-icon-out";
        IncidentType["BEING_HELD"] = "wf1-incident-icon-being-held";
        IncidentType["NOT_SET"] = "wf1-incident-icon-not-set";
        IncidentType["OUT_OF_CONTROL"] = "wf1-incident-icon-out-of-control";
        IncidentType["UNDER_CONTROL"] = "wf1-incident-icon-under-control";
    })(exports.IncidentType || (exports.IncidentType = {}));
    (function (IncidentTypeWithStatus) {
        IncidentTypeWithStatus["ACTIVE"] = "wf1-incident-with-status-icon-active";
        IncidentTypeWithStatus["COMPLETED"] = "wf1-incident-with-status-icon-completed";
    })(exports.IncidentTypeWithStatus || (exports.IncidentTypeWithStatus = {}));
    (function (IncidentTypeAgencyAssist) {
        IncidentTypeAgencyAssist["ACTIVE"] = "wf1-incident-agency-assist-icon-active";
        IncidentTypeAgencyAssist["COMPLETED"] = "wf1-incident-agency-assist-icon-completed";
    })(exports.IncidentTypeAgencyAssist || (exports.IncidentTypeAgencyAssist = {}));
    (function (IncidentTypeFieldActivity) {
        IncidentTypeFieldActivity["ACTIVE"] = "wf1-incident-field-activity-icon-active";
        IncidentTypeFieldActivity["COMPLETED"] = "wf1-incident-field-activity-icon-completed";
    })(exports.IncidentTypeFieldActivity || (exports.IncidentTypeFieldActivity = {}));
    (function (ReportOfFireType) {
        ReportOfFireType["DEFAULT"] = "wf1-rof-icon-default";
        ReportOfFireType["GENERAL"] = "wf1-rof-icon-general";
        ReportOfFireType["INTERFACE"] = "wf1-rof-icon-interface";
        ReportOfFireType["CAMPFIRE"] = "wf1-rof-icon-campfire";
        ReportOfFireType["CIGARETTE"] = "wf1-rof-icon-cigarette";
    })(exports.ReportOfFireType || (exports.ReportOfFireType = {}));
    var Icons = {
        incident: {
            icon: "\n      <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"189.000000pt\" height=\"191.000000pt\"\n           viewBox=\"0 0 189.000000 191.000000\" preserveAspectRatio=\"xMidYMid meet\">\n        <g transform=\"translate(0.000000,191.000000) scale(0.100000,-0.100000)\" stroke=\"none\">\n          <path d=\"M493 1407 c-366 -365 -423 -426 -423 -452 0 -25 38 -67 262 -292\n          l262 -263 103 0 c57 0 103 4 103 9 0 4 -30 26 -66 47 -122 71 -191 172 -201\n          293 -8 95 14 161 90 271 84 123 117 187 117 229 0 47 12 67 28 48 22 -26 40\n          -82 47 -147 l8 -65 27 34 c78 93 58 271 -47 409 -18 23 -33 45 -33 48 0 12 76\n          -8 130 -34 67 -33 191 -154 239 -235 79 -133 109 -267 91 -399 -6 -39 -13 -74\n          -16 -79 -14 -23 17 -5 44 25 33 38 51 84 62 160 l7 51 28 -59 c90 -190 -11\n          -466 -203 -555 -80 -37 -69 -51 41 -51 l92 0 262 262 c143 145 264 274 268\n          287 6 21 -40 70 -421 452 -337 337 -434 429 -454 429 -19 0 -116 -91 -447\n          -423z\"/>\n          <path d=\"M878 985 c-48 -80 -53 -95 -37 -95 10 0 19 -2 19 -4 0 -2 -16 -32\n            -34 -65 -25 -44 -31 -61 -20 -61 19 0 19 -2 -18 -73 -18 -34 -34 -65 -36 -69\n          -2 -5 6 -8 17 -8 12 0 21 -2 21 -3 0 -2 -13 -28 -30 -58 -16 -30 -30 -57 -30\n          -61 0 -4 33 -8 73 -10 l72 -3 3 -59 3 -59 -120 6 c-67 3 -121 2 -121 -2 0 -4\n          62 -69 138 -144 99 -98 145 -137 162 -137 17 0 63 39 162 137 76 75 138 141\n          138 146 0 5 -49 8 -112 6 l-113 -4 -3 52 c-3 60 -2 61 100 65 l56 3 -34 58\n          c-19 32 -34 60 -34 62 0 3 9 5 20 5 26 0 26 3 -15 77 -29 52 -32 65 -20 69 13\n          5 10 16 -16 62 -28 48 -30 56 -17 66 14 10 8 24 -39 104 -31 50 -61 92 -67 92\n          -6 -1 -36 -43 -68 -95z\"/>\n        </g>\n      </svg>\n    ",
            halo: "\n      <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"189.000000pt\" height=\"191.000000pt\"\n           viewBox=\"0 0 189.000000 191.000000\" preserveAspectRatio=\"xMidYMid meet\">\n        <g transform=\"translate(0.000000,191.000000) scale(0.100000,-0.100000)\" stroke=\"none\">\n          <path d=\"M910 1870 c-39 -24 -882 -878 -887 -898 -3 -13 -2 -32 3 -43 10 -22\n          860 -875 887 -891 11 -5 29 -7 40 -4 29 7 903 884 912 914 6 21 -44 75 -447\n          478 -297 298 -460 454 -473 454 -11 0 -27 -4 -35 -10z\"/>\n        </g>\n      </svg>\n    "
        },
        incidentAgencyAssist: {
            icon: "\n        <svg id=\"Capa_1\" enable-background=\"new 0 0 512 512\" height=\"512\" viewBox=\"0 0 512 512\" width=\"512\" \n        xmlns=\"http://www.w3.org/2000/svg\">\n            <g>\n                <path d=\"m483.577 335.232c-4.061-5.345-9.542-9.517-15.783-11.989-10.92-4.325-22.773-3.425-32.737 \n                  2.328l-65.792 37.985c-.373 5.55-1.426 11.155-3.267 16.71-11.309 34.118-47.824 53.021-82.542 \n                  43.718l-65.035-17.426c-8.002-2.144-12.751-10.369-10.607-18.371 2.144-8.002 10.369-12.751 \n                  18.371-10.607l66.028 17.692c20.005 5.36 40.568-6.511 45.928-26.516 \n                  5.36-20.005-6.512-40.568-26.516-45.928l-100.807-27.011c-19.351-5.185-39.562-2.525-56.911 \n                  7.492l-125.702 72.575c-7.174 4.142-9.633 13.316-5.49 20.49l62.426 108.126c1.989 3.446 5.265 5.959 \n                  9.108 6.989s7.937.491 11.382-1.499l56.689-32.729 121.262 7.822c14.825.955 29.461-2.466 \n                  42.327-9.894l146.648-84.666c19.295-11.142 24.947-36.96 11.02-55.291z\"/>\n                <path d=\"m156 240h200c8.284 0 15-6.716 15-15 0-39.813-20.34-74.962-51.171-95.612-16.612 15.86-39.103 \n                    25.612-63.829 25.612s-47.217-9.752-63.829-25.612c-30.831 20.65-51.171 55.799-51.171 95.612 0 8.284 \n                    6.716 15 15 15z\"/><circle cx=\"256\" cy=\"62.5\" r=\"62.5\"/>\n            </g>\n        </svg>\n    ",
            halo: "\n      <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"189.000000pt\" height=\"191.000000pt\"\n           viewBox=\"0 0 189.000000 191.000000\" preserveAspectRatio=\"xMidYMid meet\">\n        <g transform=\"translate(0.000000,191.000000) scale(0.100000,-0.100000)\" stroke=\"none\">\n          <path d=\"M910 1870 c-39 -24 -882 -878 -887 -898 -3 -13 -2 -32 3 -43 10 -22\n          860 -875 887 -891 11 -5 29 -7 40 -4 29 7 903 884 912 914 6 21 -44 75 -447\n          478 -297 298 -460 454 -473 454 -11 0 -27 -4 -35 -10z\"/>\n        </g>\n      </svg>\n    "
        },
        incidentFieldActivity: {
            icon: "\n\n      <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" \n        x=\"0px\" y=\"0px\" viewBox=\"0 0 511.999 511.999\" style=\"enable-background:new 0 0 511.999 511.999;\" \n        xml:space=\"preserve\">\n        <g>\n            <g>\n              <path d=\"M507.408,145.509l-73.855-17.919l-16.404-11.476l8.541-12.21c4.603-6.58,\n                3-15.647-3.58-20.25l-27.314-19.108c-6.58-4.603-15.647-3-20.25,3.58l-8.541,\n                12.21l-7.72-5.4c-6.928-4.847-16.473-3.159-21.32,3.769l-45.227,64.653c-4.847,6.928-3.159,16.474,3.769,\n                21.32l7.72,5.4l-26.752,38.243l38.085,54.444l39.81-56.91l16.404,11.476l42.155,63.234c1.614,2.422,4.736,\n                3.341,7.402,2.173c11.908-5.219,43.951-21.367,65.302-51.889c21.351-30.522,25.533-66.16,26.353-79.135\n                C512.171,148.805,510.242,146.196,507.408,145.509z\"/>\n            </g>\n        </g>\n        <g>\n            <g>\n              <path d=\"M197.44,321.307l-60.711,86.788c-4.603,6.58-3,15.647,3.58,20.25l27.314,19.107c6.58,4.603,15.647,3,20.25-3.58\n              l47.652-68.12L197.44,321.307z\"/>\n            </g>\n        </g>\n        <g>\n            <g>\n              <path d=\"M375.27,408.096L208.773,170.082l7.72-5.4c6.928-4.847,8.616-14.392,3.769-21.32l-45.227-64.654\n              c-4.847-6.928-14.392-8.616-21.32-3.769l-7.72,5.4l-8.541-12.21c-4.603-6.579-13.668-8.184-20.25-3.58L89.89,83.655\n              c-6.58,4.603-8.183,13.669-3.58,20.25l8.541,12.21L78.447,127.59l-14.122,3.426L4.591,145.509\n              c-2.829,0.687-4.763,3.303-4.579,6.208c0.819,12.976,5.002,48.613,26.353,79.135c21.351,30.522,53.394,46.67,65.302,51.889\n              c2.671,1.171,5.784,0.254,7.402-2.173l34.095-51.144l8.06-12.091l16.404-11.476l166.498,238.015\n              c4.603,6.58,13.668,8.183,20.25,3.58l27.314-19.106C378.27,423.743,379.873,414.676,375.27,408.096z\"/>\n            </g>\n        </g>      \n        <g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\n      </svg>\n    ",
            halo: "\n      <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"189.000000pt\" height=\"191.000000pt\"\n           viewBox=\"0 0 189.000000 191.000000\" preserveAspectRatio=\"xMidYMid meet\">\n        <g transform=\"translate(0.000000,191.000000) scale(0.100000,-0.100000)\" stroke=\"none\">\n          <path d=\"M910 1870 c-39 -24 -882 -878 -887 -898 -3 -13 -2 -32 3 -43 10 -22\n          860 -875 887 -891 11 -5 29 -7 40 -4 29 7 903 884 912 914 6 21 -44 75 -447\n          478 -297 298 -460 454 -473 454 -11 0 -27 -4 -35 -10z\"/>\n        </g>\n      </svg>\n    "
        },
        rof: {
            icon: "\n      <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"245.000000pt\" height=\"245.000000pt\"\n           viewBox=\"0 0 245.000000 245.000000\" preserveAspectRatio=\"xMidYMid meet\">\n        <g transform=\"translate(0.000000,245.000000) scale(0.100000,-0.100000)\" stroke=\"none\">\n          <path d=\"M1631 2331 c-14 -14 -21 -34 -21 -59 0 -104 -52 -218 -162 -357 -107\n            -135 -123 -176 -123 -310 0 -96 3 -116 24 -155 47 -91 122 -146 229 -169 80\n          -17 79 -17 87 46 4 32 16 87 27 123 22 70 91 214 108 225 14 9 104 -183 124\n          -266 9 -36 16 -82 16 -103 l0 -38 48 6 c107 15 152 35 208 90 44 45 56 65 75\n          126 18 61 21 87 16 164 -10 156 -60 276 -117 276 -12 0 -54 -32 -100 -75 -122\n          -114 -119 -114 -113 8 10 192 -58 350 -189 440 -70 48 -109 56 -137 28z\"/>\n          <path d=\"M525 2190 c-36 -15 -353 -343 -360 -373 -11 -41 1 -95 41 -190 219\n            -525 1022 -1308 1541 -1503 53 -20 77 -24 113 -19 42 6 56 18 216 178 183 183\n          196 204 175 270 -8 23 -84 105 -239 259 -288 285 -280 283 -430 135 l-82 -82\n          -287 287 -287 287 87 90 c87 90 87 90 87 143 l0 52 -222 224 c-123 123 -235\n          230 -250 238 -30 15 -72 17 -103 4z\"/>\n        </g>\n      </svg>\n    ",
            halo: "\n      <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"245.000000pt\" height=\"245.000000pt\"\n      viewBox=\"0 0 245.000000 245.000000\" preserveAspectRatio=\"xMidYMid meet\">\n        <g transform=\"translate(0.000000,245.000000) scale(0.100000,-0.100000)\" stroke=\"none\">\n        <path d=\"M1600 2428 c-60 -30 -90 -77 -90 -139 0 -100 -37 -179 -150 -319 -29\n          -36 -71 -103 -94 -150 l-41 -85 0 -130 c0 -125 1 -132 32 -197 62 -132 175\n        -209 335 -229 133 -17 154 0 177 147 6 39 16 84 22 100 l12 29 18 -55 c10 -30\n        18 -72 18 -93 2 -95 54 -131 176 -125 145 8 255 75 318 196 66 124 74 305 23\n        468 -34 105 -58 141 -109 164 -54 25 -98 25 -148 0 -44 -23 -40 -26 -59 55\n        -34 149 -146 295 -272 355 -75 36 -109 37 -168 8z\"/>\n        <path d=\"M480 2279 c-63 -28 -362 -326 -395 -393 -48 -96 -30 -189 75 -396\n        145 -283 403 -604 717 -893 259 -237 470 -390 693 -502 201 -101 284 -115 379\n        -65 46 24 363 343 387 390 26 50 24 143 -3 195 -26 48 -465 486 -510 509 -43\n        21 -154 21 -195 0 -18 -9 -55 -38 -83 -65 l-51 -48 -214 214 -215 215 52 52\n        c28 29 58 67 67 85 23 45 21 144 -3 191 -29 54 -477 498 -523 517 -51 21 -124\n        19 -178 -6z\"/>\n        </g>\n      </svg>\n    "
        },
        nrof: {
            icon: "\n      <svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid meet\" \n      viewBox=\"0 0 322.723 322.723\" height=\"430.297\" width=\"430.297\"><defs><symbol >\n      <g stroke=\"none\"><path d=\"M1600 2428c-60-30-90-77-90-139 0-100-37-179-150-319-29-36-71-103-94-150l-41-85v-130c0-125 \n      1-132 32-197 62-132 175-209 335-229 133-17 154 0 177 147 6 39 16 84 22 100l12 29 18-55c10-30 18-72 18-93 2-95 54-131 \n      176-125 145 8 255 75 318 196 66 124 74 305 23 468-34 105-58 141-109 164-54 25-98 25-148 0-44-23-40-26-59 55-34 149-146 \n      295-272 355-75 36-109 37-168 8zM480 2279c-63-28-362-326-395-393-48-96-30-189 75-396 145-283 403-604 717-893 259-237 \n      470-390 693-502 201-101 284-115 379-65 46 24 363 343 387 390 26 50 24 143-3 195-26 48-465 486-510 509-43 21-154 21-195 \n      0-18-9-55-38-83-65l-51-48-429 429 52 52c28 29 58 67 67 85 23 45 21 144-3 191-29 54-477 498-523 517-51 21-124 19-178-6z\" \n      fill=\"#fff\" transform=\"matrix(.1 0 0 -.1 35.477344 281.60534)\"/><path d=\"M1631 2331c-14-14-21-34-21-59 0-104-52-218-162-357-107-135-123-176-123-310\n       0-96 3-116 24-155 47-91 122-146 229-169 80-17 79-17 87 46 4 32 16 87 27 123 22 70 91 214 108 225 14 9 104-183 124-266 9-36 16-82 16-103v-38l48 \n       6c107 15 152 35 208 90 44 45 56 65 75 126 18 61 21 87 16 164-10 156-60 276-117 276-12 0-54-32-100-75-122-114-119-114-113 8 10 192-58 350-189 440-70 \n       48-109 56-137 28zM525 2190c-36-15-353-343-360-373-11-41 1-95 41-190C425 1102 1228 319 1747 124c53-20 77-24 113-19 42 6 56 18 216 178 183 183 196 204 \n       175 270-8 23-84 105-239 259-288 285-280 283-430 135l-82-82-574 574 87 90c87 90 87 90 87 143v52l-222 224c-123 123-235 230-250 238-30 15-72 17-103 4z\" \n       transform=\"matrix(.1 0 0 -.1 35.510667 281.87686)\"/></g></symbol></defs><path d=\"M103.432 95.678c-2.533 1.056-24.84 24.137-25.334 26.25-.774 2.885.07\n        6.685 2.885 13.37 15.41 36.945 71.92 92.046 108.442 105.768 3.73 1.407 5.42 1.69 7.952 1.337 2.956-.422 3.94-1.267 15.2-12.526 12.878-12.878 \n        13.793-14.356 12.315-19-.563-1.62-5.91-7.39-16.82-18.226-20.267-20.056-19.704-19.915-30.26-9.5l-5.77 5.77-40.393-40.393 6.122-6.333c6.122-6.333 \n        6.122-6.333 6.122-10.063v-3.66l-15.622-15.763c-8.656-8.656-16.537-16.185-17.593-16.748-2.11-1.056-5.067-1.196-7.248-.28zm77.83-9.922c-.985.985-1.478 \n        2.393-1.478 4.152 0 7.32-3.66 15.34-11.4 25.123-7.53 9.5-8.656 12.385-8.656 21.815 0 6.756.21 8.163 1.69 10.908 3.307 6.404 8.585 10.274 16.115 \n        11.893 5.63 1.196 5.56 1.196 6.122-3.237.28-2.252 1.126-6.122 1.9-8.656 1.548-4.926 6.404-15.06 7.6-15.834.985-.633 7.32 12.878 8.726 18.72.633 \n        2.533 1.126 5.77 1.126 7.248v2.674l3.378-.422c7.53-1.056 10.696-2.463 14.637-6.333 3.096-3.167 3.94-4.574 5.278-8.867 1.267-4.293 1.478-6.122 \n        1.126-11.54-.704-10.978-4.222-19.422-8.233-19.422-.844 0-3.8 2.252-7.037 5.278-8.585 8.022-8.374 8.022-7.952-.563.704-13.51-4.082-24.63-13.3-30.963-4.926-3.378-7.67-3.94-9.64-1.97zM228.2-.001L94.524.001 \n        0 94.523.001 228.2l94.523 94.524 133.677.001 94.523-94.525-.001-133.676-9.344-9.344zM107.74 31.906h107.246l75.834 75.834v107.246l-75.834 75.833H107.74l-75.834-75.833V107.74z\" \n        fill=\"#263238\" paint-order=\"markers stroke fill\"/></svg>\n    ",
            dark: "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"430.667\" height=\"430.667\" viewBox=\"0 0 323 323\" xmlns:v=\"https://vecta.io/nano\"><style><![CDATA[.B{dominant-baseline:auto}]]></style><path d=\"M103 19.7l-83 83v117l83 83h117l83-83v-117l-83-83z\" fill=\"#fff\" stroke=\"#fff\" stroke-linejoin=\"round\" stroke-width=\"39.5\" paint-order=\"markers stroke fill\" class=\"B\"/><g transform=\"matrix(.878 0 0 .878 19.7 19.7)\"><path d=\"M94.5 0L0 94.5l.001 134L94.5 323h134l94.5-94.5v-134L228.5.001z\" fill=\"maroon\" paint-order=\"markers stroke fill\" class=\"B\"/><path d=\"M225 8.45L98 8.452l-89.6 89.6.002 127 89.6 89.6h127l89.6-89.6-.002-127-6.87-6.87z\" fill=\"#d40000\" paint-order=\"markers stroke fill\" class=\"B\"/><path d=\"M107 87.3c-2.26-.094-4.56.335-6.9 1.32-3.044 1.272-2.834 1.732-3.854 2.612l-3.45 3.17c-2.57 2.45-5.66 5.56-8.7 8.7s-6 6.3-8.3 8.9c-1.16 1.3-2.14 2.45-2.96 3.48a24.79 24.79 0 0 0-1.15 1.55c-.367.548-.83.73-1.4 3.02-1.52 5.8.25 11.1 3.23 18.2.006.013.007.018.01.024 8.47 20.3 26.9 43.5 48 64.1s44.6 38.3 64.8 45.9c4.132 1.56 8.162 2.25 11.702 1.76l.014-.002.016-.002c2.07-.295 5.68-1.73 8.28-3.88s5.6-5.18 11.3-10.8c6.48-6.48 10-9.95 12.6-13.8 2.52-3.9 2.6-9.9 1.64-12.9l-.03-.098-.033-.096c-.913-2.62-1.64-3.1-2.6-4.28-.942-1.18-2.1-2.48-3.55-4.06-2.9-3.15-7.02-7.35-12.5-12.8l-.006-.006-.006-.004c-10.1-10-14.1-15.6-21.9-18-3.9-1.23-8.83-.037-11.7 1.88-2.87 1.9-4.86 4.08-7.46 6.65l-.018.02-.373.373-29.7-29.7.89-.922c3.06-3.17 4.76-4.66 6.4-7.35 1.64-2.7 1.88-6.17 1.88-8.04v-6.8l-17.912-18.012-11.8-11.5-4.13-3.85c-.558-.502-1.04-.927-1.5-1.3-.464-.385-.477-.584-2-1.4l-.1-.047-.1-.045c-2.2-1.1-4.44-1.72-6.7-1.82zm76.4-10.2c-2.9.19-6.04 1.4-7.92 3.27-2.66 2.66-3.72 6.38-3.72 9.57 0 4.77-2.54 11.3-9.75 20.4-7.77 9.8-10.3 16.5-10.3 26.6 0 3.46.012 5.75.38 8.12.362 2.35 1.28 4.63 2.2 6.34 4.26 8.2 12 13.8 21.3 15.8l.008.002.01.002c1.4.298 2.52.558 3.9.73s3.48.516 6.27-.977 4.14-4.46 4.55-5.97c.402-1.52.46-2.46.6-3.54v-.014c.18-1.45 1.03-5.4 1.62-7.34.05-.16.26-.59.326-.783.358 1 1.1 2.67 1.24 3.2l.016.062c.488 1.95.896 5.6.896 5.4v11.3l12.057-1.508c8.16-1.14 14.2-3.8 18.9-8.45l.057-.055.055-.057c3.4-3.48 5.65-7.23 7.1-11.9l.016-.057.018-.055c1.37-4.64 1.8-8.48 1.42-14.2l.002.006c-.396-6.18-1.5-11.7-3.46-16.3-.974-2.3-2.13-4.43-3.95-6.37s-4.77-3.9-8.46-3.9c-3.6 0-3.96.923-4.84 1.43s-1.6 1.02-2.4 1.62c-.157.12-.346.308-.506.432-1.48-11.7-6.96-22-16.2-28.4l-.004-.004c-2.85-1.95-5.34-3.48-8.72-4.18-.847-.173-1.78-.222-2.74-.158z\" fill=\"maroon\" paint-order=\"markers stroke fill\" class=\"B\"/><path d=\"M103 95.7c-2.53 1.06-24.8 24.1-25.3 26.2-.774 2.9.07 6.7 2.9 13.4 15.4 36.9 71.9 92 108 106 3.73 1.4 5.42 1.7 7.95 1.34 2.96-.422 3.94-1.27 15.2-12.5 12.9-12.9 13.8-14.4 12.3-19-.563-1.62-5.9-7.4-16.8-18.2-20.3-20.1-19.7-19.9-30.3-9.5l-5.77 5.77-40.4-40.4 6.12-6.33c6.12-6.33 6.12-6.33 6.12-10.1v-3.66l-15.6-15.8c-8.66-8.66-16.5-16.2-17.6-16.7-2.1-1.06-5.07-1.2-7.25-.28zm77.8-9.92c-.985.985-1.48 2.4-1.48 4.15 0 7.32-3.66 15.3-11.4 25.1-7.53 9.5-8.66 12.4-8.66 21.8 0 6.76.21 8.16 1.7 10.9 3.3 6.4 8.6 10.3 16.1 11.9 5.63 1.2 5.56 1.2 6.12-3.24.282-2.25 1.13-6.12 1.9-8.66 1.55-4.93 6.4-15.1 7.6-15.8.985-.633 7.32 12.9 8.73 18.7.633 2.53 1.13 5.77 1.13 7.25v2.67l3.38-.422c7.53-1.06 10.7-2.46 14.6-6.33 3.1-3.17 3.94-4.57 5.28-8.87 1.27-4.3 1.48-6.12 1.13-11.5-.704-11-4.22-19.4-8.23-19.4-.844 0-3.8 2.25-7.04 5.28-8.6 8.02-8.37 8.02-7.95-.563.704-13.5-4.08-24.6-13.3-31-4.93-3.38-7.67-3.94-9.64-1.97z\" fill=\"#fff\" paint-order=\"markers stroke fill\"/><path d=\"M222 121c.01-.006-.046.17-.492.344L222 121zm-136.9 4c-.16.3-.26.343-.258.34l.258-.34zM199 137c.024-.035.042.067-.207.34L199 137zm19 76c.005.016.01.005.014.02z\" paint-order=\"markers stroke fill\" fill=\"maroon\" class=\"B\"/></g></svg>",
            light: "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"430.667\" height=\"430.667\" viewBox=\"0 0 323 323\" xmlns:v=\"https://vecta.io/nano\"><g transform=\"matrix(.878 0 0 .878 19.7 19.7)\"><path d=\"M94.5 0L0 94.5l.001 134L94.5 323h134l94.5-94.5v-134L228.5.001z\" dominant-baseline=\"auto\" fill=\"#fff\" stroke=\"#fff\" stroke-linejoin=\"round\" stroke-width=\"45\" paint-order=\"markers stroke fill\"/><path d=\"M94.5 0L0 94.5l.001 134L94.5 323h134l94.5-94.5v-134L228.5.001z\" dominant-baseline=\"auto\" fill=\"maroon\" paint-order=\"markers stroke fill\"/><path d=\"M101 16l-85.2 85.2v120l85.2 85.2h120l85.2-85.2v-120L221 16z\" dominant-baseline=\"auto\" fill=\"none\" stroke=\"#d40000\" stroke-width=\"15\" paint-order=\"markers stroke fill\"/><path d=\"M290.78 107.676l-.055 107.28-75.845 75.87-107.28-.055-75.87-75.845.055-107.28 75.845-75.87 107.28.055z\" fill=\"#fff\" paint-order=\"markers stroke fill\"/><path d=\"M103 95.7c-2.53 1.06-24.8 24.1-25.3 26.2-.774 2.9.07 6.7 2.9 13.4 15.4 36.9 71.9 92 108 106 3.73 1.4 5.42 1.7 7.95 1.34 2.96-.422 3.94-1.27 15.2-12.5 12.9-12.9 13.8-14.4 12.3-19-.563-1.62-5.9-7.4-16.8-18.2-20.3-20.1-19.7-19.9-30.3-9.5l-5.77 5.77-40.4-40.4 6.12-6.33c6.12-6.33 6.12-6.33 6.12-10.1v-3.66l-15.6-15.8c-8.66-8.66-16.5-16.2-17.6-16.7-2.1-1.06-5.07-1.2-7.25-.28zm77.8-9.92c-.985.985-1.48 2.4-1.48 4.15 0 7.32-3.66 15.3-11.4 25.1-7.53 9.5-8.66 12.4-8.66 21.8 0 6.76.21 8.16 1.7 10.9 3.3 6.4 8.6 10.3 16.1 11.9 5.63 1.2 5.56 1.2 6.12-3.24.282-2.25 1.13-6.12 1.9-8.66 1.55-4.93 6.4-15.1 7.6-15.8.985-.633 7.32 12.9 8.73 18.7.633 2.53 1.13 5.77 1.13 7.25v2.67l3.38-.422c7.53-1.06 10.7-2.46 14.6-6.33 3.1-3.17 3.94-4.57 5.28-8.87 1.27-4.3 1.48-6.12 1.13-11.5-.704-11-4.22-19.4-8.23-19.4-.844 0-3.8 2.25-7.04 5.28-8.6 8.02-8.37 8.02-7.95-.563.704-13.5-4.08-24.6-13.3-31-4.93-3.38-7.67-3.94-9.64-1.97z\" fill=\"maroon\" paint-order=\"markers stroke fill\"/><path d=\"M186 94c-1.4 13.4-12.2 22.7-18.3 33.9-4.02 8.6-1.9 21.5 8.27 24.5 2.28.517 1.4-4.28 2.53-5.88 2.34-7.63 5.43-16.1 12-20.9 2.37-1.16 5.88.477 7.1 1.42-2.42-5.68.83-11.8-1.18-17.7-1.3-6.42-4.54-13-10.4-16.3l-.08.847zm-80.1 8.37c-6.62 4.6-11 11.7-17.2 16.8-3.13 2.45-5.15 6.3-2.95 10.1 5.93 17.6 18.6 31.8 30.2 46.1 21.2 24.2 46 45.9 75.3 59.4 4.55 2.2 8.42-1.2 11-4.65 5.02-5.6 11.8-10.2 15.5-16.7-3.34-5.87-9.73-9.52-13.9-14.9-5.15-5.3-10.2-11.8-16.9-14.9-5.28 3.57-8.1 12.2-15.7 11.5-8.03-1-11.1-9.78-17-14.1l-31.8-31.9c3.05-7.2 12.2-10.2 14.1-17.7-3.88-5.65-9.98-9.32-14.3-14.7-5.13-4.86-9.98-11.7-16.3-14.4zm112 20.5c-4.26 4.18-9.8 11.4-16.6 8.2-1.6-1.05 1.26 2.53 1.3 3.54 2.74 5.9 5.34 12 6.46 18.4 9.67-2.46 13-13.5 11.1-22.3-.337-2.58-.807-5.98-2.22-7.8z\" fill=\"#d40000\" paint-order=\"markers stroke fill\"/></g></svg>"
        },
        placeNameSearch: {
            icon: "\n      <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"309.000000pt\" height=\"308.000000pt\"\n           viewBox=\"0 0 309.000000 308.000000\" preserveAspectRatio=\"xMidYMid meet\">\n        <g transform=\"translate(0.000000,308.000000) scale(0.100000,-0.100000)\" stroke=\"none\">\n        <path d=\"M1086 3004 c-380 -69 -718 -321 -891 -664 -277 -550 -126 -1213 360\n        -1578 87 -66 305 -175 405 -202 340 -94 697 -50 981 121 l83 50 321 -320 c176\n        -175 336 -327 355 -337 47 -24 143 -24 190 0 83 43 133 118 133 201 1 102 -1\n        105 -350 456 l-324 326 47 76 c211 352 228 821 43 1189 -89 177 -261 379 -406\n        477 -146 98 -340 176 -507 206 -110 19 -332 18 -440 -1z m411 -459 c241 -56\n        464 -248 558 -482 69 -171 73 -386 10 -565 -29 -83 -84 -183 -95 -171 -4 4\n        -67 157 -139 339 -73 183 -140 339 -150 348 -14 13 -43 16 -161 16 -113 0\n        -140 -3 -132 -12 5 -7 11 -53 13 -103 l4 -90 -90 0 -90 0 4 90 c2 50 8 96 13\n        103 8 9 -19 12 -132 12 -118 0 -147 -3 -161 -16 -10 -9 -80 -171 -156 -361\n        -155 -389 -136 -367 -203 -228 -57 116 -74 196 -74 345 0 219 64 381 213 542\n        195 211 483 298 768 233z m-84 -842 c3 -5 10 -73 17 -152 9 -118 9 -146 -2\n        -153 -15 -10 -223 -7 -233 4 -8 7 12 267 21 293 5 12 25 15 99 15 52 0 96 -3\n        98 -7z m41 -490 c2 -10 8 -66 11 -124 l7 -106 -38 -6 c-51 -9 -203 -9 -244 -1\n        l-32 7 7 106 c3 58 9 114 11 124 5 15 20 17 139 17 119 0 134 -2 139 -17z\"/>\n        </g>\n      </svg>\n    "
        },
        pointId: {
            icon: "\n      <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 24 24\" height=\"24\" width=\"24\">\n        <path d=\"M 5,1 C 3.9,1 3.0097656,1.9 3.0097656,3 L 3,15.929688 c 0,0.69 0.3508594,1.300156 0.8808594,1.660156\n        L 12,23 20.109375,17.589844 c 0.53,-0.36 0.880859,-0.970156 0.880859,-1.660156 L 21,3 C 21,1.9 20.1,1 19,1 Z m\n        7.017578,1.765625 c 0.34378,0 0.638348,0.1141006 0.882813,0.34375 0.244465,0.2296493 0.367187,0.510388\n        0.367187,0.84375 0,0.325954 -0.122722,0.6086457 -0.367187,0.8457031 -0.244465,0.2370574 -0.539033,0.3554688\n        -0.882813,0.3554688 -0.320861,0 -0.603191,-0.1184114 -0.847656,-0.3554688 -0.244465,-0.2444655\n        -0.365234,-0.5271572 -0.365234,-0.8457031 0,-0.3111379 0.120769,-0.5852082 0.365234,-0.8222656\n        0.244465,-0.2444655 0.526795,-0.3652344 0.847656,-0.3652344 z m -1.03125,4.2988281 h 2.085938 L 13,16 h -2 z\" />\n      </svg>\n    "
        },
        filterCancel: {
            icon: "\n      <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 133.15887 117.29034\" height=\"117.29034mm\" width=\"133.15887mm\">\n        <g transform=\"translate(-34.473864,-66.676034)\">\n          <g>\n            <g>\n              <path d=\"M 94.473677,137.49393 34.473864,66.783005 34.564632,66.676034 H 154.38314 l 0.0907,0.106971 z\" />\n              <rect y=\"129.02737\" x=\"88.416046\" height=\"45.357258\" width=\"12.115609\" />\n            </g>\n            <rect width=\"29.482143\" height=\"76.351196\" x=\"79.73278\" y=\"107.61517\" />\n          </g>\n          <g transform=\"translate(500.06128,136.57473)\">\n            <rect width=\"14.363094\" height=\"49.892857\" x=\"-249.284\" y=\"235.20406\" transform=\"rotate(45)\" />\n            <rect width=\"14.363095\" height=\"49.892857\" x=\"-267.59927\" y=\"-266.99539\" transform=\"rotate(-45)\" />\n          </g>\n        </g>\n      </svg>\n    "
        }
    };

    var ApplicationIconComponent = /** @class */ (function () {
        function ApplicationIconComponent(iconRegistry, sanitizer) {
            this.iconSize = exports.IconSize.DEFAULT;
            this.hasHalo = false;
            this.colourCode = exports.IncidentType.DEFAULT;
            this.isBlinking = false;
            this.isCancelled = false;
            this.isAssignedToIncident = false;
            this.HALO_SUFFIX = '-halo';
            var registerIcon = function (iconName, icon) {
                iconRegistry.addSvgIconLiteral(iconName, sanitizer.bypassSecurityTrustHtml(icon));
            };
            registerIcon(exports.IconType.INCIDENT, Icons.incident.icon);
            registerIcon(exports.IconType.INCIDENT_WITH_STATUS, Icons.incident.icon);
            registerIcon(exports.IconType.INCIDENT_AGENCY_ASSIST, Icons.incidentAgencyAssist.icon);
            registerIcon(exports.IconType.INCIDENT_FIELD_ACTIVITY, Icons.incidentFieldActivity.icon);
            registerIcon(exports.IconType.REPORT_OF_FIRE, Icons.rof.icon);
            registerIcon(exports.IconType.NO_MORE_REPORT_OF_FIRE, Icons.nrof.icon);
            registerIcon(exports.IconType.NO_MORE_REPORT_OF_FIRE_DARK, Icons.nrof.dark);
            registerIcon(exports.IconType.NO_MORE_REPORT_OF_FIRE_LIGHT, Icons.nrof.light);
            registerIcon(exports.IconType.INCIDENT + this.HALO_SUFFIX, Icons.incident.halo);
            registerIcon(exports.IconType.REPORT_OF_FIRE + this.HALO_SUFFIX, Icons.rof.halo);
            registerIcon(exports.IconType.PLACE_NAME_SEARCH, Icons.placeNameSearch.icon);
            registerIcon(exports.IconType.POINT_ID, Icons.pointId.icon);
            registerIcon(exports.IconType.FILTER_CANCEL, Icons.filterCancel.icon);
        }
        ApplicationIconComponent.prototype.ngOnInit = function () {
        };
        ApplicationIconComponent.prototype.getHaloType = function () {
            return this.iconType + this.HALO_SUFFIX;
        };
        ApplicationIconComponent.prototype.getRootIconClasses = function () {
            var iconSizeClass;
            if (this.iconSize === exports.IconSize.TOOLBAR) {
                iconSizeClass = 'wf1-icon-size-toolbar';
            }
            else if (this.iconSize === exports.IconSize.LIST_SMALL) {
                iconSizeClass = 'wf1-icon-size-list-small';
            }
            else if (this.iconSize === exports.IconSize.LIST_LARGE) {
                iconSizeClass = 'wf1-icon-size-list-large';
            }
            else { //Default
                iconSizeClass = 'wf1-icon-size-toolbar';
            }
            return "wf1-application-icon " + iconSizeClass;
        };
        ApplicationIconComponent.prototype.getMainIconClasses = function () {
            return this.colourCode + " " + (this.isBlinking ? 'wf1-icon-blink' : '') + " " + (this.isCancelled || this.isAssignedToIncident ? 'wf1-icon-contained' : '');
        };
        ApplicationIconComponent.prototype.getHaloIconClasses = function () {
            return (this.isBlinking ? 'wf1-icon-blink' : '') + " " + (this.isCancelled || this.isAssignedToIncident ? 'wf1-icon-contained' : '');
        };
        return ApplicationIconComponent;
    }());
    ApplicationIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-application-icon',
                    template: "<div [ngClass]=\"getRootIconClasses()\">\n  <div class=\"wf1-main-icon\">\n    <mat-icon [ngClass]=\"getMainIconClasses()\" [svgIcon]=\"iconType\" color=\"primary\"></mat-icon>\n  </div>\n  <div class=\"wf1-halo-icon\" *ngIf=\"hasHalo\">\n    <mat-icon [ngClass]=\"getHaloIconClasses()\" [svgIcon]=\"getHaloType()\"></mat-icon>\n  </div>\n  <div class=\"wf1-cancelled-icon\" *ngIf=\"isCancelled\">\n    <mat-icon>block</mat-icon>\n  </div>\n  <div class=\"wf1-assigned-to-incident-icon\" *ngIf=\"isAssignedToIncident\">\n    <mat-icon>panorama_fish_eye</mat-icon>\n  </div>\n</div>\n",
                    styles: [""]
                },] }
    ];
    ApplicationIconComponent.ctorParameters = function () { return [
        { type: icon.MatIconRegistry },
        { type: platformBrowser.DomSanitizer }
    ]; };
    ApplicationIconComponent.propDecorators = {
        iconType: [{ type: i0.Input }],
        iconSize: [{ type: i0.Input }],
        hasHalo: [{ type: i0.Input }],
        colourCode: [{ type: i0.Input }],
        isBlinking: [{ type: i0.Input }],
        isCancelled: [{ type: i0.Input }],
        isAssignedToIncident: [{ type: i0.Input }]
    };

    var MapControl;
    (function (MapControl) {
        MapControl["NONE"] = "none";
        MapControl["LAYER_TREE"] = "layer-tree";
        MapControl["BASEMAPS"] = "basemaps";
    })(MapControl || (MapControl = {}));
    var ApplicationToolbarComponent = /** @class */ (function () {
        function ApplicationToolbarComponent() {
            this.selectedMapControl = new i0.EventEmitter();
            this.isLayersToggled = false;
            this.isBasemapsToggled = false;
        }
        ApplicationToolbarComponent.prototype.ngOnInit = function () {
        };
        ApplicationToolbarComponent.prototype.ngAfterViewInit = function () {
        };
        return ApplicationToolbarComponent;
    }());
    ApplicationToolbarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-application-toolbar',
                    template: "<ng-template #defaultToolbar>\n  <button class=\"wf1-menu-button\" mat-button color=\"primary\">\n    <wf1-application-icon iconType=\"incident\" [hasHalo]=\"true\"></wf1-application-icon>\n  </button>\n  <button class=\"wf1-menu-button\" mat-button color=\"primary\">\n    <wf1-application-icon iconType=\"report-of-fire\"></wf1-application-icon>\n  </button>\n</ng-template>\n\n<mat-toolbar class=\"mat-typography wf1-application-toolbar\" color=\"accent\">\n\n  <ng-container *ngIf=\"menuTemplate\">\n    <mat-menu #appMenu=\"matMenu\">\n      <div *ngTemplateOutlet=\"menuTemplate\"></div>\n    </mat-menu>\n\n    <button class=\"wf1-menu-button\" mat-button color=\"primary\" [matMenuTriggerFor]=\"appMenu\" matTooltip=\"Menu\">\n      <mat-icon>menu</mat-icon>\n    </button>\n  </ng-container>\n\n  <div *ngTemplateOutlet=\"toolbarTemplate ? toolbarTemplate: defaultToolbar\"></div>\n\n</mat-toolbar>\n"
                },] }
    ];
    ApplicationToolbarComponent.ctorParameters = function () { return []; };
    ApplicationToolbarComponent.propDecorators = {
        menuTemplate: [{ type: i0.Input }],
        toolbarTemplate: [{ type: i0.Input }],
        selectedMapControl: [{ type: i0.Output }]
    };

    var NavigationService = /** @class */ (function () {
        function NavigationService(router, location) {
            var _this = this;
            this.router = router;
            this.location = location;
            this.navigations = 0;
            this.router.events.subscribe(function (event) {
                if (event instanceof i1$1.NavigationEnd) {
                    _this.navigations += 1;
                    // console.log( this.navigations, event.urlAfterRedirects )
                }
            });
        }
        NavigationService.prototype.back = function () {
            if (this.navigations > 1) {
                this.location.back();
            }
            else {
                this.router.navigateByUrl('/');
            }
        };
        return NavigationService;
    }());
    NavigationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NavigationService_Factory() { return new NavigationService(i0.ɵɵinject(i1$1.Router), i0.ɵɵinject(i2.Location)); }, token: NavigationService, providedIn: "root" });
    NavigationService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    NavigationService.ctorParameters = function () { return [
        { type: i1$1.Router },
        { type: i2.Location }
    ]; };

    var BasicSidebarPanelComponent = /** @class */ (function () {
        function BasicSidebarPanelComponent(token, navigationService) {
            this.token = token;
            this.navigationService = navigationService;
            this.TOOLTIP_DELAY = 500;
            this.showBackButton = false;
            this.linkClick = new i0.EventEmitter();
            this.isInitializing = true;
            this.isInitializing = token.getOauthToken() === null;
        }
        BasicSidebarPanelComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.token.authTokenEmitter.subscribe(function () {
                _this.isInitializing = false;
            });
            if (!this.linkTitle) {
                if (this.linkIcon == "launch") {
                    this.linkTitle = "Launch Dual Window";
                }
                else if (this.linkIcon == "arrow_back") {
                    this.linkTitle = "Back";
                }
                else {
                    this.linkTitle = null;
                }
            }
        };
        BasicSidebarPanelComponent.prototype.getTitleIconClasses = function () {
            return this.linkAlignLeft ? 'side-panel-link-button side-panel-link-button-left' : 'side-panel-link-button side-panel-link-button-right';
        };
        BasicSidebarPanelComponent.prototype.getMainContentClasses = function () {
            return 'side-panel-content';
        };
        BasicSidebarPanelComponent.prototype.titleLinkClicked = function () {
            this.linkClick.emit(this.titleText);
        };
        BasicSidebarPanelComponent.prototype.titleBackClicked = function () {
            this.navigationService.back();
        };
        return BasicSidebarPanelComponent;
    }());
    BasicSidebarPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-basic-sidebar-panel',
                    template: "<div class=\"side-panel-container\">\n    <div class=\"side-panel-title-section\">\n        <div class=\"side-panel-link-button side-panel-link-button-left\" *ngIf=\"showBackButton\">\n            <button mat-button (click)=\"titleBackClicked()\" matTooltip=\"Go Back\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>arrow_back</mat-icon></button>\n        </div>\n\n        <h3 class=\"side-panel-title\">{{titleText}}</h3>\n\n        <div [ngClass]=\"getTitleIconClasses()\" *ngIf=\"linkIcon !== undefined\">\n            <button mat-button (click)=\"titleLinkClicked()\" [matTooltip]=\"linkTitle\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>{{linkIcon}}</mat-icon></button>\n        </div>\n    </div>\n    <div [ngClass]=\"getMainContentClasses()\">\n        <div class=\"interior-panel\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n"
                },] }
    ];
    BasicSidebarPanelComponent.ctorParameters = function () { return [
        { type: TokenService },
        { type: NavigationService }
    ]; };
    BasicSidebarPanelComponent.propDecorators = {
        titleText: [{ type: i0.Input }],
        linkIcon: [{ type: i0.Input }],
        linkAlignLeft: [{ type: i0.Input }],
        linkTitle: [{ type: i0.Input }],
        showBackButton: [{ type: i0.Input }],
        linkClick: [{ type: i0.Output }]
    };

    var DateTimePickerComponent = /** @class */ (function () {
        function DateTimePickerComponent() {
        }
        return DateTimePickerComponent;
    }());
    DateTimePickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-date-time-picker',
                    template: "<span class=\"date-time-picker\">\n    <input matInput\n           [owlDateTime]=\"dtpicker\"\n           [owlDateTimeTrigger]=\"dtpicker\"\n           [formControlName]=\"controlName\"\n           [placeholder]=\"placeholderText\"\n           [required]=\"isRequired\"\n           [value]=\"formControl ? formControl.value : ''\">\n    <owl-date-time #dtpicker></owl-date-time>\n</span>"
                },] }
    ];
    DateTimePickerComponent.ctorParameters = function () { return []; };
    DateTimePickerComponent.propDecorators = {
        controlName: [{ type: i0.Input }],
        placeholderText: [{ type: i0.Input }],
        isRequired: [{ type: i0.Input }],
        formControl: [{ type: i0.Input }]
    };

    var DateMaskDirective = /** @class */ (function () {
        function DateMaskDirective(element) {
            this.element = element;
            this.mask = [/\d/, /\d/, /\d/, /\d/, '-', /\d/, /\d/, '-', /\d/, /\d/];
            this.dateInputElement = this.element.nativeElement;
            this.dateInputController = textMask.maskInput({
                inputElement: this.element.nativeElement,
                mask: this.mask,
                guide: false
            });
        }
        DateMaskDirective.prototype.ngOnDestroy = function () {
            this.dateInputController.destroy();
        };
        return DateMaskDirective;
    }());
    DateMaskDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[wf1CoreDateMask]'
                },] }
    ];
    DateMaskDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    DateMaskDirective.propDecorators = {
        formControl: [{ type: i0.Input }]
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var FilterSidebarPanelComponent = /** @class */ (function (_super) {
        __extends(FilterSidebarPanelComponent, _super);
        function FilterSidebarPanelComponent() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.recordCount = 0;
            _this.isInitializing = true;
            _this.isShowingFilterOptions = false;
            return _this;
        }
        //   constructor(public token: TokenService) {
        //     super(token);
        //   }
        FilterSidebarPanelComponent.prototype.getMainContentClasses = function () {
            return (this.isShowingFilterOptions) ? 'side-panel-with-toolbar-and-filter-and-filter-content' : 'side-panel-with-toolbar-and-filter-content';
        };
        FilterSidebarPanelComponent.prototype.setFilterSize = function (isShowingFilterOptions) {
            this.isShowingFilterOptions = isShowingFilterOptions;
        };
        return FilterSidebarPanelComponent;
    }(BasicSidebarPanelComponent));
    FilterSidebarPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-filter-sidebar-panel',
                    template: "<div class=\"side-panel-container\">\n    <div class=\"side-panel-title-section\">\n        <div class=\"side-panel-link-button side-panel-link-button-left\" *ngIf=\"showBackButton\">\n            <button mat-button (click)=\"titleBackClicked()\" matTooltip=\"Go Back\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>arrow_back</mat-icon></button>\n        </div>\n\n        <h3 class=\"side-panel-title\">{{titleText}}</h3>\n        \n        <div [ngClass]=\"getTitleIconClasses()\" *ngIf=\"linkIcon !== undefined\">\n            <button mat-button (click)=\"titleLinkClicked()\" [matTooltip]=\"linkTitle\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>{{linkIcon}}</mat-icon></button>\n        </div>\n    </div>\n    <wf1-search-bar [count]=\"recordCount\" [componentId]=\"componentId\">\n        <wf1-sort-modal *ngIf=\"sortOptions && defaultSort\" [options]=\"sortOptions\" [defaultSort]=\"defaultSort\" [componentId]=\"componentId\"></wf1-sort-modal>\n    </wf1-search-bar>\n    <wf1-filters [filters]=\"filters\" (isShowingFilterOptions)=\"setFilterSize($event)\" [componentId]=\"componentId\"></wf1-filters>\n    <div [ngClass]=\"getMainContentClasses()\">\n        <div class=\"interior-panel\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n"
                },] }
    ];
    FilterSidebarPanelComponent.propDecorators = {
        recordCount: [{ type: i0.Input }],
        filters: [{ type: i0.Input }],
        defaultSort: [{ type: i0.Input }],
        sortOptions: [{ type: i0.Input }],
        componentId: [{ type: i0.Input }]
    };

    var FullWidthContainerComponent = /** @class */ (function () {
        function FullWidthContainerComponent(token) {
            this.token = token;
            this.isInitializing = true;
            this.isInitializing = token.getOauthToken() === null;
        }
        FullWidthContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.token.authTokenEmitter.subscribe(function () {
                _this.isInitializing = false;
            });
        };
        return FullWidthContainerComponent;
    }());
    FullWidthContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-full-width-container',
                    template: "<!--\n  DEFAULT TEMPLATE DECLARATIONS FOR SUB-COMPONENTS\n-->\n\n<ng-template #defaultMainContent>\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur consectetur debitis, delectus deleniti dolore\n    earum explicabo facere facilis, fugiat itaque numquam provident quam quo quos sint veritatis vero voluptas voluptate?\n  </p>\n</ng-template>\n\n<!--\n  MAIN TEMPLATE DECLARATION\n-->\n<div id=\"core-interface-container\">\n  <wf1-application-header [titleText]=\"titleText\"></wf1-application-header>\n\n  <div class=\"wf1-loading-screen\" *ngIf=\"isInitializing\">\n    <h1>Initializing Application</h1>\n    <wf1-spinner></wf1-spinner>\n    <h3>Please wait while the application initializes.</h3>\n  </div>\n\n  <div class=\"main-content-container\" *ngIf=\"!isInitializing\">\n    <ng-container *ngTemplateOutlet=\"mainContentTemplate ? mainContentTemplate: defaultMainContent\"></ng-container>\n  </div>\n</div>\n"
                },] }
    ];
    FullWidthContainerComponent.ctorParameters = function () { return [
        { type: TokenService }
    ]; };
    FullWidthContainerComponent.propDecorators = {
        titleText: [{ type: i0.Input }],
        mainContentTemplate: [{ type: i0.Input }]
    };

    var FullWidthPanelComponent = /** @class */ (function () {
        function FullWidthPanelComponent(token) {
            this.token = token;
            this.recordCount = 0;
            this.linkClick = new i0.EventEmitter();
            this.isInitializing = true;
            this.isShowingFilterOptions = false;
            this.isInitializing = token.getOauthToken() === null;
        }
        FullWidthPanelComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.token.authTokenEmitter.subscribe(function () {
                _this.isInitializing = false;
            });
        };
        FullWidthPanelComponent.prototype.getMainContentClasses = function () {
            return (this.isShowingFilterOptions) ? 'side-panel-with-toolbar-and-filter-and-filter-content' : 'side-panel-with-toolbar-and-filter-content';
        };
        FullWidthPanelComponent.prototype.setFilterSize = function (isShowingFilterOptions) {
            this.isShowingFilterOptions = isShowingFilterOptions;
        };
        FullWidthPanelComponent.prototype.titleLinkClicked = function () {
            this.linkClick.emit(this.titleText);
        };
        return FullWidthPanelComponent;
    }());
    FullWidthPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-full-width-panel',
                    template: "<div class=\"side-panel-container\">\n    <div class=\"side-panel-title-section\">\n        <h3 class=\"side-panel-title\">{{titleText}}</h3>\n        <div class=\"side-panel-link-button\" *ngIf=\"linkIcon !== undefined\">\n            <button mat-button (click)=\"titleLinkClicked()\"><mat-icon>{{linkIcon}}</mat-icon></button>\n        </div>\n    </div>\n    <wf1-search-bar [count]=\"recordCount\"></wf1-search-bar>\n    <wf1-filters [filters]=\"filters\" (isShowingFilterOptions)=\"setFilterSize($event)\"></wf1-filters>\n    <div [ngClass]=\"getMainContentClasses()\">\n        <div class=\"interior-panel\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n"
                },] }
    ];
    FullWidthPanelComponent.ctorParameters = function () { return [
        { type: TokenService }
    ]; };
    FullWidthPanelComponent.propDecorators = {
        titleText: [{ type: i0.Input }],
        linkIcon: [{ type: i0.Input }],
        recordCount: [{ type: i0.Input }],
        filters: [{ type: i0.Input }],
        linkClick: [{ type: i0.Output }]
    };

    var MapService = /** @class */ (function () {
        function MapService(appConfig) {
            this.appConfig = appConfig;
            this.mapInstances = [];
            this.mapInstanceEmitter = new rxjs.Subject();
            // WFML.BASE_URL = appConfig.getConfig().application.baseUrl + 'assets/js/wfml-v0.3.0/v0.3.0/wfml';
        }
        MapService.prototype.findMapInstance = function (mapName) {
            return this.mapInstances.find(function (instance) { return instance.name === mapName; });
        };
        MapService.prototype.onResize = function () {
            // for (const mapInstance of this.mapInstances) {
            //   if (mapInstance.isInitialized && mapInstance.api) {
            //     setTimeout(() => mapInstance.api.map.resize(), 400);
            //   }
            // }
        };
        /**
         * Returns a boolean flag that indicates whether the target map instance has been initialized.
         * @param mapName Id value of the leaflet element on the page.
         */
        MapService.prototype.isMapInitialized = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            return (targetInstance && targetInstance.isInitialized);
        };
        /**
         * initialize map
         * @param mapName string
         */
        MapService.prototype.initializeMap = function (mapName) {
            // let targetInstance = this.findMapInstance(mapName);
            // if (!targetInstance) {
            //   targetInstance = {
            //     name: mapName,
            //     isInitialized: false
            //   };
            //   this.mapInstances.push(targetInstance);
            // }
            // if (!targetInstance.isInitialized) {
            //   const config: ApplicationConfig = this.appConfig.getConfig();
            //   // console.log(`Initializing map: ${targetInstance.name}`);
            //   targetInstance.api = WFML.createMap('map', config.mapServiceConfig.map, config.mapServiceConfig.layerSettings);
            //   targetInstance.isInitialized = true;
            //   this.mapInstanceEmitter.next(mapName);
            // }
        };
        /**
         * get layer tree view
         * @param mapName string
         */
        MapService.prototype.getLayerTreeView = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            return (targetInstance && targetInstance.isInitialized)
                ? targetInstance.api.layer.treeView()
                : null;
        };
        /**
         * set map layer visibility
         * @param mapName string
         * @param id layer id
         * @param isVisible visibility boolean
         */
        MapService.prototype.setLayerVisibility = function (mapName, id, isVisible) {
            var targetInstance = this.findMapInstance(mapName);
            if (targetInstance && targetInstance.isInitialized) {
                targetInstance.api.layer.visible(id, isVisible);
            }
        };
        /**
         * zoomToPoint zooms the map to a specific point.
         * @param mapName string
         * @param coordinates coordinates
         * @param zoomLevel number
         */
        MapService.prototype.zoomToPoint = function (mapName, coordinates, zoomLevel) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.navigation.zoom(coordinates, zoomLevel);
        };
        /**
         * stop edit
         * @param mapName string
         */
        MapService.prototype.stopEdit = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.edit.stop();
        };
        /**
         * hide all map layer objects
         * @param mapName string
         * @param type ued or string
         */
        MapService.prototype.hideAll = function (mapName, type) {
            var targetInstance = this.findMapInstance(mapName);
            var data = targetInstance.api.layer.treeView().child.find(function (e) { return e.title === type; }).child;
            data.map(function (layer) {
                layer.lyr.isVisible = false;
            });
        };
        /**
         * redray Layer
         * @param mapName string
         * @param layerName string
         */
        MapService.prototype.redrawLayer = function (mapName, layerName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.layer.redraw(layerName);
        };
        /**
         * add Highlight
         * @param mapName string
         * @param lonlat longitude latatude array
         */
        MapService.prototype.addHighlight = function (mapName, lonlat) {
            var targetInstance = this.findMapInstance(mapName);
            this.clearHighlight(mapName);
            targetInstance.api.highlight.add(lonlat);
        };
        /**
         * clear all highlights on map.
         * @param mapName string
         */
        MapService.prototype.clearHighlight = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.highlight.clear();
        };
        /**
         * Load Report of Fires as markers from report of fires resources
         * @param mapName string
         * @param reportOfFires collection of report of fire resources from WFIM api
         * @param markerClickCallback callback function for markers
         */
        MapService.prototype.loadRoFMarkers = function (mapName, reportOfFires, markerClickCallback) {
            var _this = this;
            var targetInstance = this.findMapInstance(mapName);
            var markers = reportOfFires.map(function (rof) {
                var date = (rof.messageStatusTimestamp) ? new i2.DatePipe('en-US').transform(new Date(rof.messageStatusTimestamp), 'yyyy-MM-dd HH:mm:ss') : '';
                var phoneNumber = '';
                if (rof.callerTelephone) {
                    var numberSegments = rof.callerTelephone.replace(/\D/g, '').match(/(\d{3})(\d{3})(\d{4})/);
                    if (numberSegments && numberSegments.length === 4) {
                        phoneNumber = "(" + numberSegments[1] + ") " + numberSegments[2] + "-" + numberSegments[3];
                    }
                    else {
                        console.error("RoF " + rof.wildfireYear + "-" + rof.reportOfFireNumber + " phone number value '" + rof.callerTelephone + "' is not valid.");
                    }
                }
                return {
                    "messageTypeCode": "Public Report of Fire",
                    "messageStatusCode": rof.messageStatusCode,
                    "reportOfFireNumber": rof.reportOfFireNumber,
                    "reportOfFireLabel": rof.reportOfFireLabel,
                    "wildfireYear": rof.wildfireYear,
                    "hoverTitle": rof.publicReportTypeCode,
                    "publicReportTypeCode": rof.publicReportTypeCode,
                    "latitude": rof.latitude,
                    "longitude": rof.longitude,
                    "yearNumber": rof.reportOfFireLabel,
                    "latLon": _this.formatCoordinates([rof.longitude, rof.latitude]),
                    "lastUpdated": date,
                    "updatedBy": rof.messageStatusUserId,
                    "valuesBeingThreatenedNote": rof.valuesBeingThreatenedNote,
                    "fireSizeComparisonCode": rof.fireSizeComparisionCode,
                    "callerName": rof.callerName,
                    "callerTelephone": phoneNumber
                };
            });
            targetInstance.api.layer.visible(WFML.RoF.LAYER_ID, true);
            WFML.RoF.Util.clear(targetInstance.api);
            WFML.RoF.Util.addClusteredMarkers(targetInstance.api, markers, markerClickCallback);
        };
        /**
         * Load Incidents as markers from incident resources
         * @param mapName string
         * @param optionsCodeTables Code[]
         * @param orgOptionsCodeTables Code[]
         * @param incidents collection of report of fire resources from WFIM api
         * @param markerClickCallback callback function for markers
         */
        MapService.prototype.loadIncidentMarkers = function (mapName, incidents, optionsCodeTables, orgOptionsCodeTables, markerClickCallback) {
            var targetInstance = this.findMapInstance(mapName);
            var markers = incidents.map(function (incident) {
                var interfaceFireInd = (incident.incidentSituation) ? incident.incidentSituation.interfaceFireInd : false;
                var interfaceText = (interfaceFireInd) ? 'Interface' : 'Non Interface';
                var markerLabel = (incident.incidentLabel === incident.wildfireYear + "-" + incident.incidentNumberSequence) ? "" + incident.incidentNumberSequence : incident.incidentLabel;
                var incidentTypeCode = optionsCodeTables['INCIDENT_TYPE_CODE'].find(function (option) { return option.code === incident.incidentTypeCode; });
                var stageOfControlCode = (incident.incidentSituation) ? optionsCodeTables['STAGE_OF_CONTROL_CODE'].find(function (option) { return option.code === incident.incidentSituation.stageOfControlCode; }) : undefined;
                var fireCentreOrgUnitIdentifier = orgOptionsCodeTables['FIRE_CENTRE_CODE'].find(function (option) { return option.code === incident.fireCentreOrgUnitIdentifier; });
                var zoneOrgUnitIdentifier = orgOptionsCodeTables['ZONE_CODE'].find(function (option) { return option.code === incident.zoneOrgUnitIdentifier; });
                return {
                    "wildfireYear": incident.wildfireYear,
                    "incidentNumberSequence": incident.incidentNumberSequence,
                    "hoverTitle": interfaceText,
                    "incidentId": incident.incidentId,
                    "incidentName": incident.incidentName,
                    "incidentLocation": {
                        "latitude": incident.incidentLocation ? incident.incidentLocation.latitude : '',
                        "longitude": incident.incidentLocation ? incident.incidentLocation.longitude : ''
                    },
                    "incidentSituation": {
                        "interfaceFireInd": interfaceFireInd
                    },
                    "incidentStatusCode": incident.incidentStatusCode,
                    "markerLabel": markerLabel,
                    "incidentLabel": incident.incidentLabel,
                    "probabilityOfInitialAttackSuccessCode": incident.probabilityOfInitialAttackSuccessCode,
                    "suspectedCauseCategoryCode": incident.suspectedCauseCategoryCode,
                    "incidentCategoryCode": incident.incidentCategoryCode,
                    "incidentTypeCode": incidentTypeCode ? incidentTypeCode.description : '',
                    "stageOfControlCode": stageOfControlCode ? stageOfControlCode.description : '',
                    "fireCentreOrgUnitIdentifier": fireCentreOrgUnitIdentifier ? fireCentreOrgUnitIdentifier.description : '',
                    "zoneOrgUnitIdentifier": zoneOrgUnitIdentifier ? zoneOrgUnitIdentifier.description : '',
                    "latLon": incident.incidentLocation ? WFML.Location.format([incident.incidentLocation.longitude, incident.incidentLocation.latitude]) : [],
                    "geographicDescription": incident.incidentLocation ? incident.incidentLocation.geographicDescription : '',
                    "fireSizeHectares": incident.incidentSituation ? incident.incidentSituation.fireSizeHectares : ''
                };
            });
            targetInstance.api.layer.visible(WFML.Incident.LAYER_ID, true);
            WFML.Incident.Util.clear(targetInstance.api);
            WFML.Incident.Util.addClusteredMarkers(targetInstance.api, markers, markerClickCallback);
        };
        /**
         * Clear markers from the specified mapName and markerLayerId
         * @param mapName string
         * @param markerLayerId identifier for the marker layer tracked by the marker manager
         */
        MapService.prototype.clearMarkers = function (mapName, markerLayerId) {
            var targetInstance = this.findMapInstance(mapName);
            return targetInstance.api.marker.removeMarkers(markerLayerId);
        };
        /**
         * Set markers layer visibility from the specified mapName and markerLayerId
         * @param mapName string
         * @param markerLayerId identifier for the marker layer tracked by the marker manager
         * @param visible boolean for setting the visibility of the marker layer
         */
        MapService.prototype.showMarkers = function (mapName, markerLayerId, visible) {
            var targetInstance = this.findMapInstance(mapName);
            return targetInstance.api.marker.showMarkers(markerLayerId, visible);
        };
        /**
        * Add legend layers
        * @param mapName name of the map instance
        * @param layerId id of the target map layer the legend attaches to
        * @param legend structure based on WFML api for legends - refer to WFML test bed for examples
        */
        MapService.prototype.addLegend = function (mapName, layerId, legend) {
            var targetInstance = this.findMapInstance(mapName);
            if (targetInstance) {
                targetInstance.api.layer.legend(layerId, legend);
            }
        };
        /**
         * Clear selected point (pin) from the specified map instance
         */
        MapService.prototype.clearSelectPoint = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            if (targetInstance) {
                targetInstance.api.selectPoint.clear();
            }
        };
        MapService.prototype.setMaxSearchDistance = function (mapName, withinDistance) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.setMaximumDistance(withinDistance);
        };
        MapService.prototype.findPlace = function (mapName, searchText) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.findPlace(searchText);
        };
        MapService.prototype.findRoad = function (mapName, searchText) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.findRoad(searchText);
        };
        MapService.prototype.findIntersection = function (mapName, roadName, intersectingRoadName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.findIntersection(roadName, intersectingRoadName);
        };
        MapService.prototype.clearPlaceNameSearch = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.clear();
        };
        MapService.prototype.panToPlaceNameSearchLocation = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.panToAnchor();
        };
        MapService.prototype.zoomToPlaceNameSearchLocation = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.zoomToAnchor();
        };
        MapService.prototype.showCandidate = function (mapName, location) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.showCandidate(location);
        };
        MapService.prototype.clearCandidate = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            // showCandidate() with empty params clears the candidate selection.
            targetInstance.api.search.showCandidate();
        };
        MapService.prototype.setAnchor = function (mapName, point) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.setAnchor(point);
        };
        MapService.prototype.setAnchorFromMap = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            var point = targetInstance.api.selectPoint.get();
            if (point) {
                targetInstance.api.search.setAnchor(point);
            }
            return point;
        };
        MapService.prototype.getBasemaps = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            return targetInstance.api.basemap.all();
        };
        MapService.prototype.setBasemap = function (mapName, baseMapIndex) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.basemap.switch(baseMapIndex);
        };
        MapService.prototype.registerPlaceNameSearchListener = function (mapName, callback) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.setResultHandler(callback);
        };
        MapService.prototype.registerMapClickListener = function (mapName, callback) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.callback.click(callback);
        };
        MapService.prototype.registerMapHoverListener = function (mapName, callback, hoverDelay) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.callback.hover(callback, hoverDelay);
        };
        MapService.prototype.registerMapSelectPointListener = function (mapName, callback) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.callback.selectPoint(callback);
        };
        MapService.prototype.clearPlaceNameSearchListener = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.search.setResultHandler();
        };
        MapService.prototype.clearMapClickListener = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.callback.click();
        };
        MapService.prototype.clearMapHoverListener = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.callback.hover();
        };
        MapService.prototype.clearMapSelectPointListener = function (mapName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.callback.selectPoint();
        };
        MapService.prototype.formatCoordinates = function (coordinates) {
            return WFML.Location.format(coordinates);
        };
        MapService.prototype.parseCoordinates = function (url) {
            return WFML.Location.parse(url);
        };
        MapService.prototype.activateTool = function (mapName, toolName) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.tool.activate(toolName);
        };
        MapService.prototype.persistState = function (mapName, key, opt) {
            var targetInstance = this.findMapInstance(mapName);
            targetInstance.api.state.persist(key, opt);
        };
        return MapService;
    }());
    MapService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MapService_Factory() { return new MapService(i0.ɵɵinject(AppConfigService)); }, token: MapService, providedIn: "root" });
    MapService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    MapService.ctorParameters = function () { return [
        { type: AppConfigService }
    ]; };
    MapService.propDecorators = {
        onResize: [{ type: i0.HostListener, args: ['resize',] }]
    };

    var InfoIncidentPanelComponent = /** @class */ (function () {
        function InfoIncidentPanelComponent(store, mapService) {
            this.store = store;
            this.mapService = mapService;
            this.codeLabelLookupTables = {};
        }
        InfoIncidentPanelComponent.prototype.ngOnInit = function () {
            this.getCodeLookupTables();
        };
        InfoIncidentPanelComponent.prototype.getCodeLookupTables = function () {
            var _this = this;
            this.store.pipe(store.select('codeData', 'codeIndex')).subscribe(function (codeIndex) { return _this.codeLabelLookupTables = codeIndex; });
        };
        InfoIncidentPanelComponent.prototype.getLabel = function (table, value) {
            return this.codeLabelLookupTables[table] && value ? this.codeLabelLookupTables[table][value] : '';
        };
        InfoIncidentPanelComponent.prototype.getPanelClasses = function () {
            var incidentClass;
            if (this.incident.incidentSituation) {
                incidentClass = (this.incident.incidentSituation.interfaceFireInd)
                    ? 'incident-interface'
                    : 'incident-non-interface';
            }
            else {
                incidentClass = 'incident-default';
            }
            return "info-panel " + incidentClass;
        };
        InfoIncidentPanelComponent.prototype.getFormattedLocation = function () {
            return (this.incident && this.incident.incidentLocation)
                ? this.mapService.formatCoordinates([this.incident.incidentLocation.longitude, this.incident.incidentLocation.latitude])
                : '';
        };
        return InfoIncidentPanelComponent;
    }());
    InfoIncidentPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-info-incident-panel',
                    template: "<div [ngClass]=\"getPanelClasses()\">\n  <h3 class=\"incident-detail-id\">\n    {{incident.incidentLabel}}\n    <span class=\"incident-detail-id-type\">{{getLabel(\"INCIDENT_TYPE_CODE\", incident.incidentTypeCode)}}</span>\n  </h3>\n  <div><strong>Point:</strong> {{getFormattedLocation()}}</div>\n  <div><strong>Incident Commander:</strong> {{incident.incidentCommanderName}}</div>\n  <div><strong>Stage of Control:</strong> {{getLabel(\"STAGE_OF_CONTROL_CODE\", incident.incidentSituation.stageOfControlCode)}}</div>\n  <div><strong>Size:</strong> {{incident.incidentSituation.fireSizeHectares}}</div>\n</div>\n",
                    styles: [".info-panel{padding:1rem}.info-panel .incident-detail-id{font-weight:700;padding-bottom:.5rem;margin-bottom:0}.info-panel .incident-detail-id-type{font-weight:400;font-style:italic;margin-left:1rem}.incident-default{color:#fff;background-color:#263238}.incident-interface{color:#fff;background-color:#ff4545}.incident-non-interface{color:#fff;background-color:#009e73}"]
                },] }
    ];
    InfoIncidentPanelComponent.ctorParameters = function () { return [
        { type: store.Store },
        { type: MapService }
    ]; };
    InfoIncidentPanelComponent.propDecorators = {
        incident: [{ type: i0.Input }]
    };

    var InternalListItemConfig = /** @class */ (function () {
        function InternalListItemConfig() {
        }
        return InternalListItemConfig;
    }());
    var ListItemComponent = /** @class */ (function () {
        function ListItemComponent(mapService) {
            this.mapService = mapService;
            this.TOOLTIP_DELAY = 500;
            this.itemSelect = new i0.EventEmitter();
        }
        ListItemComponent.prototype.ngOnInit = function () {
            if (this.config) {
                this.internalConfig = new InternalListItemConfig();
                this.internalConfig.icon = {
                    type: this.config.icon,
                    size: (this.config.time) ? exports.IconSize.LIST_SMALL : exports.IconSize.LIST_LARGE,
                    colourCode: (this.config.iconColourCode !== undefined)
                        ? this.config.iconColourCode : exports.IncidentType.DEFAULT,
                    isBlinking: (this.config.iconIsBlinking !== undefined)
                        ? this.config.iconIsBlinking : false,
                    isCancelled: (this.config.iconIsCancelled !== undefined)
                        ? this.config.iconIsCancelled : false,
                    isAssignedToIncident: (this.config.iconIsAssignedToIncident !== undefined)
                        ? this.config.iconIsAssignedToIncident : false,
                };
                this.internalConfig.time = this.config.time;
                this.internalConfig.title = this.config.title;
                this.internalConfig.infoRows = [[null, null]];
                var currentRow = [null, null];
                this.internalConfig.infoRows.shift();
                console.log(this.config.info);
                for (var index = 0; index < this.config.info.length; index++) {
                    if (index == 0) {
                        this.internalConfig.titleLevelInfo = this.config.info[index];
                    }
                    else {
                        var isFirstRowEntry = (index % 2);
                        if (isFirstRowEntry) {
                            currentRow[0] = this.config.info[index];
                        }
                        else {
                            currentRow[1] = this.config.info[index];
                            this.internalConfig.infoRows.push(currentRow);
                            currentRow = [null, null];
                        }
                    }
                }
                this.internalConfig.location = this.config.location;
                if (currentRow[0]) { //If odd number of items, push half-finished row into set.
                    this.internalConfig.infoRows.push(currentRow);
                }
            }
        };
        ListItemComponent.prototype.handleMouseEvent = function (location) {
            if (location) {
                this.mapService.addHighlight(this.mapElement, location);
            }
            else {
                this.mapService.clearHighlight(this.mapElement);
            }
        };
        ListItemComponent.prototype.handleClick = function () {
            this.itemSelect.emit(this.config);
        };
        ListItemComponent.prototype.zoomToPlace = function (location) {
            if (location) {
                this.mapService.zoomToPoint(this.mapElement, location);
            }
        };
        return ListItemComponent;
    }());
    ListItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-list-item',
                    template: "<mat-list-item class=\"list-item\" *ngIf=\"config\">\n  <div class=\"list-item-icon-section\" (mouseover)=\"handleMouseEvent(internalConfig.location)\" (mouseout)=\"handleMouseEvent()\" (focus)=\"handleMouseEvent(internalConfig.location)\" (blur)=\"handleMouseEvent()\" (click)=\"handleClick()\" (keydown)=\"handleClick()\">\n    <div class=\"list-item-icon\">\n      <wf1-application-icon\n              [iconType]=\"internalConfig.icon.type\"\n              [iconSize]=\"internalConfig.icon.size\"\n              [colourCode]=\"internalConfig.icon.colourCode\"\n              [isBlinking]=\"internalConfig.icon.isBlinking\"\n              [isCancelled]=\"internalConfig.icon.isCancelled\"\n              [isAssignedToIncident]=\"internalConfig.icon.isAssignedToIncident\"\n      ></wf1-application-icon>\n    </div>\n    <div *ngIf=\"internalConfig.time\" class=\"list-item-date\">{{internalConfig.time | amDateFormat: 'YYYY-MM-DD'}}</div>\n    <div *ngIf=\"internalConfig.time\" class=\"list-item-time\">{{internalConfig.time | amDateFormat: 'HH:mm:ss'}}</div>\n  </div>\n\n  <div class=\"list-item-data-section\">\n    <div class=\"list-item-title-section\">\n      <span class=\"list-item-title\" (mouseover)=\"handleMouseEvent(internalConfig.location)\" (mouseout)=\"handleMouseEvent()\" (click)=\"handleClick()\">{{internalConfig.title}}</span>\n      <span class=\"list-item-title-level-info\" (mouseover)=\"handleMouseEvent(internalConfig.location)\" (mouseout)=\"handleMouseEvent()\" (click)=\"handleClick()\">\n        <span class=\"list-item-info {{internalConfig.titleLevelInfo.fullWidth?'list-item-info-full-width':''}}\">\n          <span class=\"list-item-info-label\">{{internalConfig.titleLevelInfo.label}}:</span>\n          <span class=\"list-item-info-value {{internalConfig.titleLevelInfo.emphasis?'list-item-info-value-emphasis':''}}\"><strong>{{internalConfig.titleLevelInfo.value}}</strong></span>\n        </span>\n      </span>\n      <span class=\"list-item-locate-button\">\n        <button *ngIf=\"internalConfig.location\" mat-button (click)=\"zoomToPlace(internalConfig.location)\" matTooltip=\"Locate on Map\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>place</mat-icon></button>\n      </span>\n    </div>\n\n    <ng-container *ngFor=\"let row of internalConfig.infoRows\">\n      <div class=\"list-item-info-row\" (mouseover)=\"handleMouseEvent(internalConfig.location)\" (mouseout)=\"handleMouseEvent()\" (focus)=\"handleMouseEvent(internalConfig.location)\" (blur)=\"handleMouseEvent()\" (click)=\"handleClick()\" (keydown)=\"handleClick()\">\n        <ng-container *ngFor=\"let column of row\">\n          <span class=\"list-item-info {{column.fullWidth?'list-item-info-full-width':''}}\" *ngIf=\"column\">\n            <span class=\"list-item-info-label\">{{column.label}}:</span>\n            <span class=\"list-item-info-value {{column.emphasis?'list-item-info-value-emphasis':''}}\"><strong>{{column.value}}</strong></span>\n          </span>\n        </ng-container>\n      </div>\n    </ng-container>\n  </div>\n</mat-list-item>\n",
                    styles: ["mat-list-item.list-item{height:auto;padding:.25rem 0;border-bottom:.0625rem solid #c4c4c4}mat-list-item.list-item:hover{background-color:#eee;cursor:pointer}mat-list-item.list-item .list-item-icon-section{flex:0 0 5rem;width:5rem;height:100%;display:flex;flex-direction:column;justify-content:center;align-items:center}mat-list-item.list-item .list-item-icon-section .list-item-icon .mat-icon,mat-list-item.list-item .list-item-icon-section .list-item-icon .mat-icon svg,mat-list-item.list-item .list-item-icon-section .wf1-application-icon,mat-list-item.list-item .list-item-icon-section .wf1-application-icon svg,mat-list-item.list-item .list-item-icon-section .wf1-main-icon,mat-list-item.list-item .list-item-icon-section .wf1-main-icon svg,mat-list-item.list-item .list-item-icon-section wf1-application-icon,mat-list-item.list-item .list-item-icon-section wf1-application-icon svg{width:3rem;height:3rem}mat-list-item.list-item .list-item-icon-section .list-item-date,mat-list-item.list-item .list-item-icon-section .list-item-time{font-size:x-small;line-height:.75rem}mat-list-item.list-item .list-item-icon-section .list-item-date{padding-top:.5rem}mat-list-item.list-item .list-item-data-section{width:100%}mat-list-item.list-item .list-item-data-section .list-item-title-section{display:flex;justify-content:flex-start;align-items:baseline}mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-title{flex:0 0 9rem;display:inline-block;padding-right:1rem;margin-bottom:0;font-size:.9rem;font-weight:900}@media (-ms-high-contrast:active),(-ms-high-contrast:none){mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-title{padding-right:0}}mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-locate-button{height:1rem;width:1rem}mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-locate-button .mat-button{min-width:1rem;line-height:1rem;padding:0}mat-list-item.list-item .list-item-data-section .list-item-title-section .list-item-locate-button .mat-button .mat-icon{height:1rem;width:1rem;font-size:1rem}mat-list-item.list-item .list-item-data-section .list-item-info-row{display:flex;justify-content:flex-start;align-items:baseline}mat-list-item.list-item .list-item-data-section .list-item-info{flex:0 0 9rem;display:flex;justify-content:flex-start;font-size:small}mat-list-item.list-item .list-item-data-section .list-item-info .list-item-info-label{flex:0 0 3rem;padding-right:.5rem;width:3rem;font-size:x-small;text-transform:uppercase}mat-list-item.list-item .list-item-data-section .list-item-info .list-item-info-value{flex:0 0 6rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:6rem;margin-right:.5rem;font-size:.75rem}"]
                },] }
    ];
    ListItemComponent.ctorParameters = function () { return [
        { type: MapService }
    ]; };
    ListItemComponent.propDecorators = {
        config: [{ type: i0.Input }],
        mapElement: [{ type: i0.Input }],
        itemSelect: [{ type: i0.Output }]
    };

    var ListContainerComponent = /** @class */ (function () {
        function ListContainerComponent() {
            this.loading = false;
        }
        return ListContainerComponent;
    }());
    ListContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-list-container',
                    template: "<!--<cdk-virtual-scroll-viewport itemSize=\"50\" class=\"example-viewport\">-->\n\t<!--<ng-container *ngIf=\"loading\">-->\n  \t<!--<wf1-spinner></wf1-spinner>-->\n\t<!--</ng-container>-->\n\t<!--<ng-container *ngIf=\"!loading\">-->\n\t  <!--<ng-content></ng-content>-->\n\t<!--</ng-container>-->\n<!--</cdk-virtual-scroll-viewport>-->\n<mat-list role=\"list\">\n\t<ng-container *ngIf=\"loading\">\n\t\t<wf1-spinner></wf1-spinner>\n\t</ng-container>\n\t<ng-container *ngIf=\"!loading\">\n\t\t<ng-content></ng-content>\n\t</ng-container>\n</mat-list>\n"
                },] }
    ];
    ListContainerComponent.propDecorators = {
        loading: [{ type: i0.Input }]
    };

    var LocationSidebarPanelComponent = /** @class */ (function (_super) {
        __extends(LocationSidebarPanelComponent, _super);
        function LocationSidebarPanelComponent() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.locationSelect = new i0.EventEmitter();
            _this.isInitializing = true;
            return _this;
        }
        Object.defineProperty(LocationSidebarPanelComponent.prototype, "location", {
            set: function (location) {
                if (location) {
                    this.selectedLocation = location;
                }
            },
            enumerable: false,
            configurable: true
        });
        //   constructor(public token: TokenService) {
        //       super(token);
        //   }
        LocationSidebarPanelComponent.prototype.locationSelected = function (coordinates) {
            this.locationSelect.emit(coordinates);
        };
        return LocationSidebarPanelComponent;
    }(BasicSidebarPanelComponent));
    LocationSidebarPanelComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-location-sidebar-panel',
                    template: "<div class=\"side-panel-container\">\n    <div class=\"side-panel-title-section\">\n        <h3 class=\"side-panel-title\">{{titleText}}</h3>\n        <div [ngClass]=\"getTitleIconClasses()\" *ngIf=\"linkIcon !== undefined\">\n            <button mat-button (click)=\"titleLinkClicked()\" [matTooltip]=\"linkTitle\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"><mat-icon>{{linkIcon}}</mat-icon></button>\n        </div>\n    </div>\n    <wf1-location-toolbar [location]=\"selectedLocation\" (locationSelect)=\"locationSelected($event)\"></wf1-location-toolbar>\n    <div class=\"side-panel-with-toolbar-content\">\n        <div class=\"interior-panel\">\n            <ng-content></ng-content>\n        </div>\n    </div>\n</div>\n"
                },] }
    ];
    LocationSidebarPanelComponent.propDecorators = {
        location: [{ type: i0.Input }],
        locationSelect: [{ type: i0.Output }]
    };

    var LocationToolbarComponent = /** @class */ (function () {
        // selectedLocation = new FormControl('', this.geometryValidator(this.mapService));
        function LocationToolbarComponent(config, mapService) {
            this.config = config;
            this.mapService = mapService;
            this.locationSelect = new i0.EventEmitter();
            this.TOOLTIP_DELAY = 500;
            this.MAP_INSTANCE = 'map';
        }
        Object.defineProperty(LocationToolbarComponent.prototype, "location", {
            set: function (location) {
                if (location) {
                    // this.selectedLocation.setValue(this.mapService.formatCoordinates(location));
                    this.locationSelect.emit(location);
                }
            },
            enumerable: false,
            configurable: true
        });
        LocationToolbarComponent.prototype.geometryValidator = function (mapService) {
            return function (control) {
                return null;
                // if (!control.value) {
                //   return null;
                // }
                // const coordinates = mapService.parseCoordinates(control.value);
                // if (!coordinates) {
                //  return { invalidGeom: 'The geometry is invalid' };
                // } else {
                //   this.mapService.setAnchor(this.MAP_INSTANCE, coordinates);
                //   // const formattedCoordinates = mapService.formatCoordinates(coordinates);
                //   // if (formattedCoordinates !== control.value) {
                //   //   control.patchValue(formattedCoordinates, { emitEvent: false })
                //   // }
                // }
                // return null;
            };
        };
        LocationToolbarComponent.prototype.ngOnInit = function () {
        };
        LocationToolbarComponent.prototype.ngOnDestroy = function () {
        };
        LocationToolbarComponent.prototype.zoomToSelectedLocation = function () {
            // this.mapService.zoomToPlaceNameSearchLocation(this.MAP_INSTANCE);
        };
        LocationToolbarComponent.prototype.setAnchorFromMap = function () {
            // const location = this.mapService.setAnchorFromMap(this.MAP_INSTANCE);
            // if (location) {
            //     this.selectedLocation.setValue(this.mapService.formatCoordinates(location));
            //     this.locationSelect.emit(location);
            // } else if (this.selectedLocation.value) {
            //     this.locationSelect.emit(this.mapService.parseCoordinates(this.selectedLocation.value));
            // } else {
            //     this.locationSelect.emit(null);
            // }
        };
        LocationToolbarComponent.prototype.clearSelectedLocation = function () {
            // this.selectedLocation.setValue('');
            // this.locationSelect.emit(null);
            // this.mapService.setAnchor(this.MAP_INSTANCE, null);
        };
        return LocationToolbarComponent;
    }());
    LocationToolbarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-location-toolbar',
                    template: "<div class=\"location-toolbar\">\n    <mat-form-field aria-label=\"Selected Location\" class=\"selected-location\">\n        <!-- <input matInput placeholder=\"Selected location (lat, long)\" [formControl]=\"selectedLocation\">\n        <mat-error *ngIf=\"selectedLocation.hasError('required')\">Coordinates are required</mat-error>\n        <mat-error *ngIf=\"selectedLocation.hasError('invalidGeom')\">Coordinates are invalid</mat-error> -->\n    </mat-form-field>\n    <div class=\"location-toolbar-buttons\">\n        <button class=\"location-section-header-button\" mat-button matTooltip=\"Zoom To Selected Location\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" aria-label=\"Zoom To Selected Location\" (click)=\"zoomToSelectedLocation()\">\n            <mat-icon>place</mat-icon>\n        </button>\n        <button class=\"location-section-header-button\" mat-button matTooltip=\"Set Location From Map\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" aria-label=\"Set Location From Map\" (click)=\"setAnchorFromMap()\">\n            <mat-icon>map</mat-icon>\n        </button>\n        <button class=\"location-section-header-button\" mat-button matTooltip=\"Clear Search Fields\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" aria-label=\"Clear Point ID Search Fields\" (click)=\"clearSelectedLocation()\">\n            <mat-icon>clear</mat-icon>\n        </button>\n    </div>\n</div>\n"
                },] }
    ];
    LocationToolbarComponent.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: MapService }
    ]; };
    LocationToolbarComponent.propDecorators = {
        location: [{ type: i0.Input }],
        locationSelect: [{ type: i0.Output }]
    };

    var ReportDialogComponent = /** @class */ (function () {
        function ReportDialogComponent(data) {
            this.data = data;
            if (data) {
                this.elementId = data.elementId;
                this.reportPath = data.reportPath;
                this.reportParams = data.reportParams;
                this.supportedExportFormats = data.supportedExportFormats;
            }
        }
        ReportDialogComponent.prototype.ngOnInit = function () {
        };
        return ReportDialogComponent;
    }());
    ReportDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-report-dialog',
                    template: "<wf1-visualize-js [elementId]=\"elementId\" [reportPath]=\"reportPath\" [reportParams]=\"reportParams\" [supportedExportFormats]=\"supportedExportFormats\"></wf1-visualize-js>\n",
                    styles: [""]
                },] }
    ];
    ReportDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [dialog.MAT_DIALOG_DATA,] }] }
    ]; };

    /**
     * Function needed to run the application config service at app initialization time.
     */
    function appInitializerFn(injector) {
        var appConfig = injector.get(AppConfigService);
        appConfig.configEmitter.subscribe(function (config) {
            var tokenService = injector.get(TokenService);
        });
        return function () { return appConfig.loadAppConfig(); };
    }
    var selectCurrentSearchParam = function (prop, param) { return function (state) { return ((state[prop]) ? state[prop][param] : null); }; };

    var SearchActionTypes;
    (function (SearchActionTypes) {
        SearchActionTypes["UPDATE_SEARCH_QUERY"] = "[ Search ] Update search query text";
        SearchActionTypes["RESET_SEARCH_QUERY"] = "[ Search ] Reset search query text";
        SearchActionTypes["UPDATE_SORT"] = "[ Search ] Update active sort";
        SearchActionTypes["TOGGLE_SORT_MODAL"] = "[ Search ] Toggle sort modal visibility";
        SearchActionTypes["UPDATE_ACTIVE_FILTERS"] = "[ Search ] Update active filters";
        SearchActionTypes["UPDATE_HIDDEN_FILTERS"] = "[ Search ] Update hidden filters";
        SearchActionTypes["CLEAR_FILTER"] = "[ Search ] Clear filter";
        SearchActionTypes["CLEAR_ALL_FILTERS"] = "[ Search ] Clear all filters";
        SearchActionTypes["REFRESH_SEARCH"] = "[ Search ] Refresh search";
    })(SearchActionTypes || (SearchActionTypes = {}));
    var UpdateSearchQueryAction = /** @class */ (function () {
        function UpdateSearchQueryAction(query, componentId) {
            this.query = query;
            this.componentId = componentId;
            this.type = SearchActionTypes.UPDATE_SEARCH_QUERY;
        }
        return UpdateSearchQueryAction;
    }());
    var ResetSearchQueryAction = /** @class */ (function () {
        function ResetSearchQueryAction(componentId) {
            this.componentId = componentId;
            this.type = SearchActionTypes.RESET_SEARCH_QUERY;
        }
        return ResetSearchQueryAction;
    }());
    var UpdateSortAction = /** @class */ (function () {
        function UpdateSortAction(param, direction, componentId) {
            this.param = param;
            this.direction = direction;
            this.componentId = componentId;
            this.type = SearchActionTypes.UPDATE_SORT;
        }
        return UpdateSortAction;
    }());
    var ToggleSortModalAction = /** @class */ (function () {
        function ToggleSortModalAction(componentId) {
            this.componentId = componentId;
            this.type = SearchActionTypes.TOGGLE_SORT_MODAL;
        }
        return ToggleSortModalAction;
    }());
    var UpdateActiveFiltersAction = /** @class */ (function () {
        function UpdateActiveFiltersAction(filters, componentId) {
            this.filters = filters;
            this.componentId = componentId;
            this.type = SearchActionTypes.UPDATE_ACTIVE_FILTERS;
        }
        return UpdateActiveFiltersAction;
    }());
    var UpdateHiddenFiltersAction = /** @class */ (function () {
        function UpdateHiddenFiltersAction(filters, componentId) {
            this.filters = filters;
            this.componentId = componentId;
            this.type = SearchActionTypes.UPDATE_HIDDEN_FILTERS;
        }
        return UpdateHiddenFiltersAction;
    }());
    var ClearFilterAction = /** @class */ (function () {
        function ClearFilterAction(filterToRemove, componentId) {
            this.filterToRemove = filterToRemove;
            this.componentId = componentId;
            this.type = SearchActionTypes.CLEAR_FILTER;
        }
        return ClearFilterAction;
    }());
    var ClearAllFiltersAction = /** @class */ (function () {
        function ClearAllFiltersAction(componentId) {
            this.componentId = componentId;
            this.type = SearchActionTypes.CLEAR_ALL_FILTERS;
        }
        return ClearAllFiltersAction;
    }());
    var RefreshSearchAction = /** @class */ (function () {
        function RefreshSearchAction(componentId) {
            this.componentId = componentId;
            this.type = SearchActionTypes.REFRESH_SEARCH;
        }
        return RefreshSearchAction;
    }());

    var actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get SearchActionTypes () { return SearchActionTypes; },
        UpdateSearchQueryAction: UpdateSearchQueryAction,
        ResetSearchQueryAction: ResetSearchQueryAction,
        UpdateSortAction: UpdateSortAction,
        ToggleSortModalAction: ToggleSortModalAction,
        UpdateActiveFiltersAction: UpdateActiveFiltersAction,
        UpdateHiddenFiltersAction: UpdateHiddenFiltersAction,
        ClearFilterAction: ClearFilterAction,
        ClearAllFiltersAction: ClearAllFiltersAction,
        RefreshSearchAction: RefreshSearchAction
    });

    var moment$1 = momentInstance__namespace;
    var FiltersComponent = /** @class */ (function () {
        function FiltersComponent(formBuilder, store) {
            var _this = this;
            this.formBuilder = formBuilder;
            this.store = store;
            this.filters = [];
            this.TOOLTIP_DELAY = 500;
            this.fromDateMin = [];
            this.toDateMax = [];
            this.DATE_FORMATS = {
                fullPickerInput: 'YYYY-MM-DD HH:mm',
                datePickerInput: 'YYYY-MM-DD',
                timePickerInput: 'HH:mm:ss',
                monthYearLabel: 'YYYY-MM',
                dateA11yLabel: 'YYYY-MMM-DD',
                monthYearA11yLabel: 'YYYY-MMM',
            };
            this.isShowingFilterOptions = new i0.EventEmitter();
            this.activeFilters = {};
            this.showBody = false;
            this.lastTabPosition = -1;
            this.clearFilterIconType = exports.IncidentType.NOT_SET;
            this.validateDate = function (m) {
                if (!m) { // empty value , so return valid format true
                    return true;
                }
                else if (m.creationData) { //Moment
                    var input = m.creationData().input;
                    if (input.year) { //datepicker selection - input is a Date object - must be valid
                        return true;
                    }
                    else { //string input - check strict format using moment
                        return moment$1(input, _this.DATE_FORMATS.datePickerInput, true).isValid() || moment$1(input, _this.DATE_FORMATS.fullPickerInput, true).isValid();
                    }
                }
                else {
                    return true;
                }
            };
        }
        FiltersComponent.prototype.ngOnChanges = function (changes) {
            if (changes.filters) {
                this.createForm();
            }
        };
        FiltersComponent.prototype.ngOnInit = function () {
        };
        FiltersComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.getActiveFilters();
            setTimeout(function () {
                _this.toggleActiveTabContent(true, true);
            }, 500);
        };
        FiltersComponent.prototype.createForm = function () {
            var fb = this.formBuilder;
            var config = this.filters.reduce(function (acc, f) {
                switch (f.type) {
                    case 'dateRange':
                    case 'dateTimeRange':
                        acc[f.param] = fb.array([fb.control(null), fb.control(null)]);
                        break;
                    case 'single':
                        acc[f.param] = fb.control(null);
                        break;
                    case 'multi':
                    default:
                        acc[f.param] = fb.array(f.options.map(function () {
                            return fb.control(false);
                        }));
                        break;
                }
                return acc;
            }, {});
            this.filterForm = this.formBuilder.group(config);
        };
        FiltersComponent.prototype.checkboxUpdated = function (event) {
            var fv = this.filterForm.getRawValue();
            // console.log(fv)
            this.extractValuesFromForm(fv);
        };
        FiltersComponent.prototype.dateUpdated = function (event, param, fromTo) {
            var fromControl = this.getFormControlsFromArray(this.filterForm, param)[0];
            var toControl = this.getFormControlsFromArray(this.filterForm, param)[1];
            var hasError = false;
            var fromVal = fromTo == 'from' ? event.value : fromControl.value;
            var toVal = fromTo == 'to' ? event.value : toControl.value;
            if (fromTo == 'from' && !this.validateDate(fromVal)) {
                fromControl.setErrors({ 'incorrectFormat': true });
                hasError = true;
            }
            else if (fromTo == 'to' && !this.validateDate(toVal)) {
                toControl.setErrors({ 'incorrectFormat': true });
                hasError = true;
            }
            if (!hasError && fromVal && toVal) {
                fromControl.setErrors(null);
                toControl.setErrors(null);
                var toMoment = moment$1(toVal);
                var fromMoment = moment$1(fromVal);
                if (fromMoment.isAfter(toMoment)) {
                    if (fromTo == 'from') {
                        fromControl.setErrors({ 'fromAfterTo': true });
                    }
                    else {
                        toControl.setErrors({ 'toBeforeFrom': true });
                    }
                    hasError = true;
                }
            }
            if (!hasError) {
                this.extractValuesFromForm(this.filterForm.getRawValue());
            }
        };
        FiltersComponent.prototype.getActiveFilters = function () {
            var _this = this;
            this.store.pipe(store.select(selectCurrentSearchParam(this.componentId, 'filters'))).subscribe(function (filters) {
                _this.activeFilters = filters;
                setTimeout(function () {
                    _this.updateFormValues();
                }, 0);
            });
        };
        FiltersComponent.prototype.selectTab = function (tab) {
            // Toggle tab content if active tab is selected, or open tab content if tab clicked and currently tabs are hidden.
            this.toggleActiveTabContent(tab.isActive, this.showBody);
            if (tab.isActive || !this.showBody) {
                this.showBody = !this.showBody;
                this.isShowingFilterOptions.emit(this.showBody);
            }
            this.lastTabPosition = tab.position;
        };
        FiltersComponent.prototype.toggleActiveTabContent = function (isActiveTab, showBody) {
            var tabBodyWrapperEl = this.filterTabBodyEl.nativeElement.parentElement;
            if (isActiveTab) {
                if (showBody) {
                    tabBodyWrapperEl.classList.remove('slidedown');
                    tabBodyWrapperEl.classList.add('slideup');
                }
                else {
                    tabBodyWrapperEl.classList.remove('slideup');
                    tabBodyWrapperEl.classList.add('slidedown');
                }
            }
            else {
                tabBodyWrapperEl.classList.remove('slideup');
                tabBodyWrapperEl.classList.add('slidedown');
            }
        };
        FiltersComponent.prototype.clearFilter = function (param) {
            this.store.dispatch(new ClearFilterAction(param, this.componentId));
            var formArray = this.filterForm.get(param);
            for (var i = 0; i < formArray.length; i++) {
                var formControl = formArray.controls[i];
                formControl.reset();
            }
        };
        // Update from values from Redux
        FiltersComponent.prototype.updateFormValues = function () {
            var af = this.activeFilters;
            var formValue = this.filters.reduce(function (acc, f) {
                switch (f.type) {
                    case 'dateRange':
                    case 'dateTimeRange':
                        acc[f.param] = af && af[f.param] || [null, null];
                        break;
                    case 'single':
                        acc[f.param] = ([].concat(af[f.param]))[0]; // ensure scalar, might be array
                        break;
                    case 'multi':
                    default:
                        acc[f.param] = f.options
                            .map(function (o) {
                            if (!af || !af[f.param])
                                return false;
                            return af[f.param].includes(o.value);
                        });
                        break;
                }
                return acc;
            }, {});
            this.filterForm.patchValue(formValue, { emitEvent: false });
        };
        // Convert form control boolean values to filter values
        FiltersComponent.prototype.extractValuesFromForm = function (filterValues) {
            var _this = this;
            var filter = this.filters.reduce(function (acc, f) {
                acc[f.param] = f;
                return acc;
            }, {});
            var validDate = function (d) {
                if (!d || !_this.validateDate(d))
                    return null;
                return d;
            };
            var activeFilters = Object.entries(filterValues).reduce(function (acc, _a) {
                var _b = __read(_a, 2), prop = _b[0], val = _b[1];
                var f = filter[prop];
                switch (f.type) {
                    case 'dateRange':
                    case 'dateTimeRange':
                        acc[prop] = [validDate(val[prop][0]), validDate(val[prop][1])];
                        break;
                    case 'single':
                        acc[prop] = val;
                        break;
                    case 'multi':
                    default:
                        var vals = val
                            .map(function (v, i) { return v ? f.options[i].value : null; })
                            .filter(function (v) { return v; });
                        if (vals.length > 0)
                            acc[prop] = vals;
                        break;
                }
                return acc;
            }, {});
            if (this.filterForm.valid) {
                this.store.dispatch(new UpdateActiveFiltersAction(activeFilters, this.componentId));
            }
        };
        // Template functions
        FiltersComponent.prototype.getFormArrayNames = function (group) {
            return Object.keys(group.controls);
        };
        FiltersComponent.prototype.getFormControlsFromArray = function (group, prop) {
            var array = group.get(prop);
            return array.controls;
        };
        FiltersComponent.prototype.getSelectedFilterValues = function (param) {
            var filter = this.filters.find(function (f) { return f.param == param; });
            var af = this.activeFilters[param];
            switch (filter.type) {
                case 'dateRange':
                case 'dateTimeRange':
                    var controls = this.getFormControlsFromArray(this.filterForm, param);
                    if (controls) {
                        var format = filter.type == 'dateRange' ? this.DATE_FORMATS.datePickerInput : this.DATE_FORMATS.fullPickerInput;
                        var from = controls[0] && controls[0].value && this.validateDate(controls[0].value) ? moment$1(controls[0].value).format(format) : 'Any';
                        var to = controls[1] && controls[1].value && this.validateDate(controls[1].value) ? moment$1(controls[1].value).format(format) : 'Any';
                        return from == "Any" && to == "Any" ? "Any" : from + ' - ' + to;
                    }
                    else {
                        return "Any";
                    }
                case 'single':
                    var val_1 = ([].concat(af))[0];
                    if (!val_1)
                        return 'Any';
                    return filter.options.find(function (o) { return o.value == val_1; }).label;
                case 'multi':
                default:
                    if (!af || !af.length)
                        return 'Any';
                    return filter.options.find(function (o) { return o.value == af[0]; }).label;
                // return (this.activeFilters
                //     && this.labelLookup
                //     && this.activeFilters[param]
                //     && this.activeFilters[param].length > 0
                //     //&& this.activeFilters[param][0]
                //     && this.labelLookup[param])
                //     ? this.labelLookup[param][this.activeFilters[param][0]]
                //     : "Any";
            }
        };
        return FiltersComponent;
    }());
    FiltersComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-filters',
                    template: "<form class=\"wf1-filters\" [formGroup]=\"filterForm\">\n\t<mat-tab-group>\n\t\t<mat-tab #tab=\"matTab\" class=\"filter-tab\" *ngFor=\"let param of getFormArrayNames(filterForm); let i = index\">\n\t\t\t<ng-template matTabLabel>\n\t\t\t\t<div class=\"filter-tab__header\" (click)=\"selectTab(tab)\" (keydown)=\"selectTab(tab)\">\n\t\t\t\t\t<span class=\"filter-tab__header__title\">{{filters[i].label}}</span>\n\t\t\t\t\t<span class=\"filter-tab__header__subtitle\">\n\t\t\t\t\t\t{{ getSelectedFilterValues( param ) }}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t\t<ng-template matTabContent>\n\t\t\t\t<div class=\"filter-tab__body\" #filtertabbody>\n\t\t\t\t\t<div class=\"filter-tab__body__icon\">\n\t\t\t\t\t\t<wf1-application-icon class=\"filter-tab__body__clear\" iconType=\"filter-cancel\" [colourCode]=\"clearFilterIconType\" (click)=\"clearFilter(param)\" matTooltip=\"Clear Filter\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\"></wf1-application-icon>\n\t\t\t\t\t</div>\n          \t\t\t<div class=\"filter-tab__body__options\">\n\t\t\t\t\t\t<ng-container *ngIf=\"filters[i].type == 'dateRange' || filters[i].type == 'dateTimeRange'\">\n\t\t\t\t\t\t\t<mat-form-field class=\"date-picker-input\">\n\t\t\t\t\t\t\t\t<input matInput [owlDateTime]=\"fromDT\" (dateTimeChange)=\"dateUpdated($event, param, 'from')\"\n\t\t\t\t\t\t\t\t\t   placeholder=\"From\"\n\t\t\t\t\t\t\t\t\t   [formControl]=\"getFormControlsFromArray(filterForm, param)[0]\"\n\t\t\t\t\t\t\t\t\t   wf1CoreDateMask>\n\t\t\t\t\t\t\t\t<button mat-button [owlDateTimeTrigger]=\"fromDT\">\n\t\t\t\t\t\t\t\t\t<mat-icon>event</mat-icon>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<owl-date-time #fromDT pickerType=\"{{filters[i].type == 'dateRange'? 'calendar': 'both'}}\"\n\t\t\t\t\t\t\t\t\t\t\t   [showSecondsTimer]=\"false\"></owl-date-time>\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"getFormControlsFromArray(filterForm, param)[0].hasError('incorrectFormat') || getFormControlsFromArray(filterForm, param)[0].hasError('owlDateTimeParse')\">Format must be {{filters[i].type == 'dateRange'? DATE_FORMATS.datePickerInput: DATE_FORMATS.fullPickerInput}}</mat-error>\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"getFormControlsFromArray(filterForm, param)[0].hasError('fromAfterTo')\">\"From\" date cannot be after \"To\" date.</mat-error>\n\t\t\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t\t\t<mat-form-field class=\"date-picker-input\">\n\t\t\t\t\t\t\t\t<input matInput [owlDateTime]=\"toDT\" (dateTimeChange)=\"dateUpdated($event, param,'to')\"\n\t\t\t\t\t\t\t\t\t   placeholder=\"To\"\n\t\t\t\t\t\t\t\t\t   [formControl]=\"getFormControlsFromArray(filterForm, param)[1]\"\n\t\t\t\t\t\t\t\t\t   wf1CoreDateMask>\n\t\t\t\t\t\t\t\t<button mat-button [owlDateTimeTrigger]=\"toDT\">\n\t\t\t\t\t\t\t\t\t<mat-icon>event</mat-icon>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<owl-date-time #toDT pickerType=\"{{filters[i].type == 'dateRange'? 'calendar': 'both'}}\"\n\t\t\t\t\t\t\t\t\t\t\t   [showSecondsTimer]=\"false\" ></owl-date-time>\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"getFormControlsFromArray(filterForm, param)[1].hasError('incorrectFormat') || getFormControlsFromArray(filterForm, param)[1].hasError('owlDateTimeParse')\">Format must be {{filters[i].type == 'dateRange'? DATE_FORMATS.datePickerInput: DATE_FORMATS.fullPickerInput}}</mat-error>\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"getFormControlsFromArray(filterForm, param)[1].hasError('toBeforeFrom')\">\"To\" date cannot be before \"From\" date.</mat-error>\n\t\t\t\t\t\t\t</mat-form-field>\n\t\t\t\t\t\t</ng-container>\n\n                        <ng-container *ngIf=\"filters[i].type == 'single'\">\n\t\t\t\t\t\t\t<mat-radio-group  \n                                class=\"filter-tab__body__radiogroup\" \n                                [formControl]=\"filterForm.get( param )\" \n                                (change)=\"checkboxUpdated($event);\"\n                            >\n\t\t\t\t\t\t\t\t<mat-radio-button\n                                    *ngFor=\"let filterControl of filters[ i ].options; let j = index\" \n                                    class=\"filter-tab__body__radiogroup__radiobutton\" \n                                    [value]=\"filters[i].options[j].value\"\n                                >\n                                    <span class=\"filter-tab__body__radiogroup__radiobutton__label\">\n                                        {{filters[i].options[j].label}}\n                                    </span>\n\t\t\t\t\t\t\t\t</mat-radio-button>\n\t\t\t\t\t\t\t</mat-radio-group>\n\t\t\t\t\t\t</ng-container>\n\n                        <ng-container *ngIf=\"filters[i].type == 'multi' || !filters[i].type\">\n\t\t\t\t\t\t\t<ng-container *ngFor=\"let filterControl of getFormControlsFromArray(filterForm, param); let j = index\" >\n\t\t\t\t\t\t\t\t<mat-checkbox \n                                    class=\"filter-tab__body__checkbox\" \n                                    [formControl]=\"filterControl\" \n                                    *ngIf=\"filters[i].options[j]\" \n                                    (change)=\"checkboxUpdated($event);\"\n                                >\n\t\t\t\t\t\t\t\t    <span class=\"filter-tab__body__checkbox__label\">\n\t\t\t\t\t\t\t\t\t    {{filters[i].options[j].label}}\n\t\t\t\t\t\t\t\t    </span>\n\t\t\t\t\t\t\t\t</mat-checkbox>\n\t\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t</ng-container>\n                    </div>\n\t\t\t\t</div>\n\t\t\t</ng-template>\n\t\t</mat-tab>\n\t</mat-tab-group>\n</form>\n",
                    styles: ["::ng-deep .slideup{max-height:0!important;overflow-y:hidden!important;transition:max-height .8s ease-in!important}::ng-deep .slidedown{max-height:500px!important;overflow-y:hidden!important;transition:max-height .8s ease-out!important}"]
                },] }
    ];
    FiltersComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: store.Store }
    ]; };
    FiltersComponent.propDecorators = {
        filters: [{ type: i0.Input }],
        componentId: [{ type: i0.Input }],
        isShowingFilterOptions: [{ type: i0.Output }],
        filterTabBodyEl: [{ type: i0.ViewChild, args: ['filtertabbody',] }]
    };

    var SortComponent = /** @class */ (function () {
        function SortComponent(store) {
            var _this = this;
            this.store = store;
            this.isVisible = false;
            this.toggleSortDirection = function (dir) { return dir === 'ASC' ? 'DESC' : 'ASC'; };
            this.isActiveParam = function (param) { return param === _this.activeSortParam; };
            this.isActiveDir = function (dir) { return dir === _this.activeSortDir; };
            this.showArrow = function (param, dir) { return _this.isActiveParam(param) && _this.isActiveDir(dir); };
        }
        SortComponent.prototype.ngOnInit = function () {
            this.setVisiblility();
            this.setDefaultSort();
        };
        SortComponent.prototype.setVisiblility = function () {
            var _this = this;
            this.isVisible = true;
            this.store.pipe(store.select(selectCurrentSearchParam(this.componentId, 'sortModalVisible'))).subscribe(function (isVisible) { return _this.isVisible = isVisible; });
        };
        SortComponent.prototype.setDefaultSort = function () {
            var _this = this;
            if (this.defaultSort) {
                this.store.dispatch(new UpdateSortAction(this.defaultSort.param, this.defaultSort.direction, this.componentId));
            }
            this.store.pipe(store.select(selectCurrentSearchParam(this.componentId, 'sortParam'))).subscribe(function (param) { return _this.activeSortParam = param; });
            this.store.pipe(store.select(selectCurrentSearchParam(this.componentId, 'sortDirection'))).subscribe(function (dir) { return _this.activeSortDir = dir; });
        };
        SortComponent.prototype.updateSort = function (option) {
            var direction = option.param === this.activeSortParam ? this.toggleSortDirection(this.activeSortDir) : 'DESC';
            this.store.dispatch(new UpdateSortAction(option.param, direction, this.componentId));
        };
        SortComponent.prototype.close = function () {
            this.store.dispatch(new ToggleSortModalAction(this.componentId));
        };
        return SortComponent;
    }());
    SortComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-sort-modal',
                    template: "<div class=\"sort-popup\" [class.sort-popup--visible]=\"isVisible\">\n\t<div class=\"sort-popup__header\">\n\t\t<span class=\"sort-popup__header__text\">Sort</span>\n\t\t<mat-icon class=\"sort-popup__header__icon\" (click)=\"close()\" (keydown)=\"close()\">close</mat-icon>\n\t</div>\n\t<ng-container *ngFor=\"let option of options\">\n\t\t<div class=\"sort-popup__item\" [ngClass]=\"{'sort-popup__item--active': isActiveParam(option.param)}\" (click)=\"updateSort(option)\" (keydown)=\"updateSort(option)\">\n\t\t\t<span class=\"sort-popup__item__text\">{{option.label}}</span>\n\t\t\t<mat-icon class=\"sort-popup__item__icon\" *ngIf=\"!isActiveParam(option.param) || showArrow(option.param, 'DESC')\">\n\t\t\t\tarrow_drop_down\n\t\t\t</mat-icon>\n\t\t\t<mat-icon class=\"sort-popup__item__icon\" *ngIf=\"showArrow(option.param, 'ASC')\">\n\t\t\t\tarrow_drop_up\n\t\t\t</mat-icon>\n\t\t</div>\n\t</ng-container>\n</div>\n"
                },] }
    ];
    SortComponent.ctorParameters = function () { return [
        { type: store.Store }
    ]; };
    SortComponent.propDecorators = {
        defaultSort: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        componentId: [{ type: i0.Input }]
    };

    var SearchBarComponent = /** @class */ (function () {
        function SearchBarComponent(store) {
            this.store = store;
            this.TOOLTIP_DELAY = 500;
            this.count = 0;
            this.showSortButton = false;
            this.searchControl = new forms.FormControl();
            this.clearFilterIconType = exports.IncidentType.NOT_SET;
            this.isResetSearch = false;
        }
        Object.defineProperty(SearchBarComponent.prototype, "sortModal", {
            set: function (modal) {
                this.showSortButton = modal ? true : false;
            },
            enumerable: false,
            configurable: true
        });
        SearchBarComponent.prototype.ngOnInit = function () {
            this.resetSearch();
            this.listenSearchChanges();
        };
        SearchBarComponent.prototype.resetSearch = function () {
            this.isResetSearch = true;
            this.store.dispatch(new ResetSearchQueryAction(this.componentId));
        };
        SearchBarComponent.prototype.listenSearchChanges = function () {
            var _this = this;
            this.store.pipe(store.select(selectCurrentSearchParam(this.componentId, 'query'))).subscribe(function (searchTerm) {
                // console.log("this.searchControl.setValue change: ", searchTerm);
                // console.log("this.searchControl.setValue isResetSearch: " + this.isResetSearch);
                if (_this.isResetSearch && _this.searchControl.value == searchTerm) {
                    // console.log("isReset true and same value so won't trigger searchControl observable.  reset isReset to false;")
                    _this.isResetSearch = false;
                }
                _this.searchControl.setValue(searchTerm, { emitEvent: true });
            });
            this.searchControl.valueChanges.pipe(operators.distinctUntilChanged()).subscribe(function (searchTerm) {
                // console.log("this.searchControl.valueChanges isResetSearch: " + this.isResetSearch);
                // console.log("searchControl value change: ", searchTerm);
                if (_this.isResetSearch) {
                    // console.log("this.searchControl.valueChanges reset to false");
                    _this.isResetSearch = false;
                }
                else {
                    // console.log("this.searchControl.valueChanges update search");
                    _this.updateSearch(searchTerm);
                }
            });
        };
        SearchBarComponent.prototype.refreshSearch = function () {
            this.store.dispatch(new RefreshSearchAction(this.componentId));
        };
        SearchBarComponent.prototype.updateSearch = function (searchTerm) {
            this.store.dispatch(new UpdateSearchQueryAction(searchTerm, this.componentId));
        };
        SearchBarComponent.prototype.toggleSortModal = function () {
            this.store.dispatch(new ToggleSortModalAction(this.componentId));
        };
        SearchBarComponent.prototype.clearFilters = function () {
            this.store.dispatch(new ClearAllFiltersAction(this.componentId));
        };
        return SearchBarComponent;
    }());
    SearchBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-search-bar',
                    template: "<div class=\"side-panel-toolbar search\">\n\t<div *ngIf=\"showSortButton\" class=\"search__sort\" matTooltip=\"Sort\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" (click)=\"toggleSortModal()\" (keydown)=\"toggleSortModal()\">\n\t\t<mat-icon class=\"search__sort__icon\">sort</mat-icon>\n\t</div>\n\t<ng-content select=\"wf1-sort-modal\"></ng-content>\n\t<div class=\"search__count\">\n\t\t<span class=\"search__count__number\">{{count}}</span>\n\t</div>\n\t<div class=\"search__input\">\n\t\t<mat-form-field aria-label=\"Search...\" class=\"search__input__control\">\n\t\t\t<input matInput placeholder=\"Search...\" [formControl]=\"searchControl\">\n\t\t</mat-form-field>\n\t</div>\n\t<div class=\"search__cancel\" (click)=\"resetSearch()\" (keydown)=\"resetSearch()\" matTooltip=\"Clear Search\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\">\n\t\t<mat-icon class=\"search__cancel__icon\">close</mat-icon>\n\t</div>\n\t<div class=\"search__refresh\" (click)=\"refreshSearch()\" (keydown)=\"refreshSearch()\" matTooltip=\"Refresh Search\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\">\n\t\t<mat-icon class=\"search__refresh__icon\">refresh</mat-icon>\n\t</div>\n\t<div class=\"search__clear-filters\" (click)=\"clearFilters()\" (keydown)=\"clearFilters()\" matTooltip=\"Clear Filters\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\">\n\t\t<wf1-application-icon iconType=\"filter-cancel\" [colourCode]=\"clearFilterIconType\"></wf1-application-icon>\n\t</div>\n</div>\n"
                },] }
    ];
    SearchBarComponent.ctorParameters = function () { return [
        { type: store.Store }
    ]; };
    SearchBarComponent.propDecorators = {
        count: [{ type: i0.Input }],
        componentId: [{ type: i0.Input }],
        sortModal: [{ type: i0.ContentChild, args: [SortComponent,] }]
    };

    var MAPTOOL_WINDOW_NAME = 'maptool-application-window';
    var WFROF_WINDOW_NAME = 'wfrof-application-window';
    var WFNROF_WINDOW_NAME = 'wfnrof-application-window';
    var WFIM_WINDOW_NAME = 'wfim-application-window';
    var WFIM_LIST_COMPONENT_ID = 'searchIMMap';
    var WFROF_LIST_COMPONENT_ID = 'searchROFMap';
    var WFNROF_LIST_COMPONENT_ID = 'searchNROFMap';
    var WFIM_TABLE_COMPONENT_ID = 'searchIM';
    var WFROF_TABLE_COMPONENT_ID = 'searchROF';
    var WFNROF_TABLE_COMPONENT_ID = 'searchNROF';
    (function (MessageType) {
        MessageType["ACTION"] = "action";
        MessageType["READY"] = "ready";
        MessageType["WINDOW_CLOSING"] = "window-closing";
        MessageType["ACKNOWLEDGE"] = "acknowledge";
    })(exports.MessageType || (exports.MessageType = {}));
    var Message = /** @class */ (function () {
        function Message() {
        }
        return Message;
    }());
    var MessagePacket = /** @class */ (function () {
        function MessagePacket() {
        }
        return MessagePacket;
    }());
    var WindowConfig = /** @class */ (function () {
        function WindowConfig() {
        }
        return WindowConfig;
    }());
    var ApplicationWindow = /** @class */ (function () {
        function ApplicationWindow() {
        }
        return ApplicationWindow;
    }());

    var WindowMessagingService = /** @class */ (function () {
        function WindowMessagingService() {
            var _this = this;
            this.children = [];
            if (window.opener) {
                this.parentWindow = {
                    id: angular2Uuid.UUID.UUID(),
                    isParent: true,
                    window: window.opener,
                    messageQueue: []
                };
                window.addEventListener('onbeforeunload', function () { return _this.broadcastMessage(_this.getParentWindowId(), { type: exports.MessageType.WINDOW_CLOSING }); });
            }
            else {
                window.name = MAPTOOL_WINDOW_NAME;
            }
            this.stream = new rxjs.Subject();
            window.addEventListener('message', function (message) { return _this.receiveMessage(message.data); });
            // setInterval( () => {
            //   if (this.parentWindow) {
            //
            //   } else {
            //     for (let currentChild of this.children) {
            //
            //     }
            //   }
            // }, 1000);
        }
        WindowMessagingService.prototype.getParentWindowId = function () {
            return this.parentWindow ? this.parentWindow.id : null;
        };
        WindowMessagingService.prototype.getWindowId = function (windowName) {
            var targetWindowIndex = this.children.findIndex(function (currentChild) { return currentChild.windowName === windowName; });
            var targetWindow = (targetWindowIndex > -1) ? this.children[targetWindowIndex] : null;
            if (targetWindow && targetWindow.window && targetWindow.window.closed) {
                // If the window was closed, remove the object from the list of child windows.
                this.children.splice(targetWindowIndex, 1);
                targetWindow = null;
            }
            return (targetWindow) ? targetWindow.id : null;
        };
        WindowMessagingService.prototype.broadcastAction = function (windowId, action) {
            this.broadcastMessage(windowId, {
                type: exports.MessageType.ACTION,
                action: action
            });
        };
        WindowMessagingService.prototype.openWindow = function (url, windowName, windowConfig) {
            if (windowName === void 0) { windowName = 'default'; }
            if (windowConfig === void 0) { windowConfig = {
                fullscreen: true,
                rememberWindowSize: true
            }; }
            var windowFeatures = this.getWindowFeaturesSettings(windowConfig);
            var newWindow = {
                id: angular2Uuid.UUID.UUID(),
                isParent: false,
                url: url,
                windowName: windowName,
                windowConfig: windowConfig,
                window: window.open(url, windowName, windowFeatures),
                messageQueue: []
            };
            this.children.push(newWindow);
            return newWindow.id;
        };
        WindowMessagingService.prototype.subscribeToMessageStream = function (listenerFunction) {
            this.stream.subscribe(function (message) { return listenerFunction(message); });
            if (this.getParentWindowId() !== null) {
                // Once a listener has been registered, tell the parent to send along any queued messages
                this.broadcastMessage(this.getParentWindowId(), { type: exports.MessageType.READY });
            }
        };
        WindowMessagingService.prototype.focusWindow = function (windowId) {
            var targetWindow;
            if (windowId === this.getParentWindowId()) { // Children will only message their parent
                // This window.open call doesn't actually open a window, but is necessary for window.focus() to work on the parent window
                targetWindow = window.open('', MAPTOOL_WINDOW_NAME);
            }
            else {
                var target = this.getWindow(windowId);
                if (target && target.window) {
                    targetWindow = target.window;
                }
            }
            targetWindow.focus();
        };
        WindowMessagingService.prototype.broadcastAcknowledge = function (packet) {
            var target;
            if (this.getParentWindowId()) { // Children will only message their parent
                target = this.parentWindow;
            }
            else {
                target = this.children.find(function (child) { return child.windowName === packet.originWindowName; });
            }
            if (target) {
                var messagePacket = {
                    id: packet.id,
                    originWindowName: window.name,
                    date: new Date(),
                    message: { type: exports.MessageType.ACKNOWLEDGE }
                };
                target.window.postMessage(messagePacket, '*');
            }
        };
        WindowMessagingService.prototype.broadcastMessage = function (windowId, message) {
            var target;
            if (this.getParentWindowId() === windowId) {
                target = this.parentWindow;
            }
            else {
                target = this.getWindow(windowId);
            }
            if (target) {
                var messagePacket = {
                    id: angular2Uuid.UUID.UUID(),
                    originWindowName: window.name,
                    date: new Date(),
                    message: message
                };
                target.messageQueue.push(messagePacket);
                target.window.postMessage(messagePacket, '*');
            }
        };
        WindowMessagingService.prototype.receiveMessage = function (packet) {
            var e_1, _a;
            if (!packet || !packet.message) {
                return;
            } // Ignore other window messages.
            var sendAcknowledge = false;
            switch (packet.message.type) {
                case exports.MessageType.READY: {
                    var targetWindow = this.children.find(function (child) { return child.windowName === packet.originWindowName; });
                    // If messages were sent before the window was ready, resend them again.
                    if (targetWindow && targetWindow.messageQueue.length > 0) {
                        try {
                            for (var _b = __values(targetWindow.messageQueue), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var messagePacket = _c.value;
                                messagePacket.date = new Date();
                                targetWindow.window.postMessage(messagePacket, '*');
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    sendAcknowledge = true;
                    break;
                }
                case exports.MessageType.WINDOW_CLOSING: {
                    var closingWindowIndex = this.children.findIndex(function (child) { return child.windowName === packet.originWindowName; });
                    if (closingWindowIndex > -1) {
                        this.children.splice(closingWindowIndex, 1);
                    }
                    console.log('Child is closing');
                    break;
                }
                case exports.MessageType.ACTION: {
                    sendAcknowledge = true;
                    this.stream.next(packet.message);
                    break;
                }
                case exports.MessageType.ACKNOWLEDGE: {
                    var targetWindow = void 0;
                    if (packet.originWindowName === MAPTOOL_WINDOW_NAME) {
                        targetWindow = this.parentWindow;
                    }
                    else {
                        targetWindow = this.children.find(function (child) { return child.windowName === packet.originWindowName; });
                    }
                    if (targetWindow) {
                        var messageIndex = targetWindow.messageQueue.findIndex(function (message) { return message.id === packet.id; });
                        if (messageIndex > -1) {
                            targetWindow.messageQueue.splice(messageIndex, 1);
                        }
                    }
                    break;
                }
                default: {
                    console.error("Received message of unknown type " + packet.message.type + ": " + JSON.stringify(packet));
                }
            }
            if (sendAcknowledge) {
                this.broadcastAcknowledge(packet);
            }
        };
        WindowMessagingService.prototype.getWindow = function (id) {
            return this.children.find(function (child) { return child.id === id; });
        };
        WindowMessagingService.prototype.getWindowFeaturesSettings = function (windowConfig) {
            var left = 0;
            var top = 0;
            var innerWidth = window.innerWidth, innerHeight = window.innerHeight, outerWidth = window.outerWidth, outerHeight = window.outerHeight;
            var _a = window.screen, availScreenWidth = _a.availWidth, availScreenHeight = _a.availHeight;
            var width = availScreenWidth;
            var height = availScreenHeight - (outerHeight - innerHeight);
            var positionSettings = windowConfig.fullscreen ? ",left=" + left + ",top=" + top + ",width=" + width + ",height=" + height : '';
            return "resizable=yes,scrollbars=yes,status=yes,location=no" + positionSettings;
        };
        return WindowMessagingService;
    }());
    WindowMessagingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WindowMessagingService_Factory() { return new WindowMessagingService(); }, token: WindowMessagingService, providedIn: "root" });
    WindowMessagingService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    WindowMessagingService.ctorParameters = function () { return []; };

    var SidebarComponent = /** @class */ (function () {
        function SidebarComponent(token) {
            this.token = token;
            this.opened = true;
            this.isInitializing = true;
            this.isInitializing = token.getOauthToken() === null;
        }
        SidebarComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.token.authTokenEmitter.subscribe(function () {
                _this.isInitializing = false;
            });
        };
        return SidebarComponent;
    }());
    SidebarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-sidebar-container',
                    template: "<!--\n  DEFAULT TEMPLATE DECLARATIONS FOR SUB-COMPONENTS\n-->\n\n<ng-template #defaultSidebar>\n  <h4>WILDFIRE INCIDENT MANAGEMENT</h4>\n  <mat-accordion>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <i class=\"material-icons\">layers</i>\n        </mat-panel-title>\n        <mat-panel-description>\n          Layers\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      Content here\n      <!--<mat-tree>-->\n        <!--<mat-nested-tree-node>-->\n          <!--parent node-->\n          <!--<mat-nested-tree-node> &#45;&#45; child node1 </mat-nested-tree-node>-->\n          <!--<mat-nested-tree-node> &#45;&#45; child node2 </mat-nested-tree-node>-->\n        <!--</mat-nested-tree-node>-->\n      <!--</mat-tree>-->\n\n    </mat-expansion-panel>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <i class=\"material-icons\">apps</i>\n        </mat-panel-title>\n        <mat-panel-description>\n          Basemaps\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <mat-button-toggle-group name=\"basemaps\" aria-label=\"Basemaps\">\n        <mat-button-toggle value=\"imagery\">Imagery</mat-button-toggle>\n        <mat-button-toggle value=\"street\">Street</mat-button-toggle>\n        <mat-button-toggle value=\"topographic\">Topographic</mat-button-toggle>\n      </mat-button-toggle-group>\n\n    </mat-expansion-panel>\n  </mat-accordion>\n</ng-template>\n\n<ng-template #defaultMainContent>\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur consectetur debitis, delectus deleniti dolore\n    earum explicabo facere facilis, fugiat itaque numquam provident quam quo quos sint veritatis vero voluptas voluptate?\n  </p>\n</ng-template>\n\n<!--\n  MAIN TEMPLATE DECLARATION\n-->\n<div id=\"core-interface-container\">\n  <wf1-application-header [titleText]=\"titleText\"></wf1-application-header>\n\n  <div class=\"wf1-loading-screen\" *ngIf=\"isInitializing\">\n    <h1>Initializing Application</h1>\n    <wf1-spinner></wf1-spinner>\n    <h3>Please wait while the application initializes.</h3>\n  </div>\n\n  <ng-container *ngIf=\"!isInitializing\">\n    <wf1-application-toolbar menuTemplate=\"menuTemplate\" toolbarTemplate=\"toolbarTemplate\"></wf1-application-toolbar>\n\n    <mat-sidenav-container class=\"mat-typography\" hasBackdrop=false>\n      <mat-sidenav id=\"side-nav\" #sidebar mode=\"side\" [(opened)]=\"opened\" >\n        <ng-container *ngTemplateOutlet=\"sidebarTemplate ? sidebarTemplate: defaultSidebar\"></ng-container>\n      </mat-sidenav>\n      <mat-sidenav-content>\n        <div id=\"side-nav-toggle\" (click)=\"sidebar.toggle()\" (keydown)=\"sidebar.toggle()\">\n          <mat-icon>{{ (opened) ? 'arrow_left' : 'arrow_right' }}</mat-icon>\n        </div>\n        <ng-container *ngTemplateOutlet=\"mainContentTemplate ? mainContentTemplate: defaultMainContent\"></ng-container>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n  </ng-container>\n</div>\n"
                },] }
    ];
    SidebarComponent.ctorParameters = function () { return [
        { type: TokenService }
    ]; };
    SidebarComponent.propDecorators = {
        titleText: [{ type: i0.Input }],
        menuTemplate: [{ type: i0.Input }],
        toolbarTemplate: [{ type: i0.Input }],
        sidebarTemplate: [{ type: i0.Input }],
        mainContentTemplate: [{ type: i0.Input }]
    };

    var SpinnerComponent = /** @class */ (function () {
        function SpinnerComponent() {
        }
        return SpinnerComponent;
    }());
    SpinnerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-spinner',
                    template: "<div class=\"spinner\">\n\t<mat-spinner class=\"spinner__icon\" aria-label=\"Loading...\"></mat-spinner>\n</div>\n",
                    styles: [".spinner{display:flex;justify-content:center}"]
                },] }
    ];

    var UnauthorizedPageComponent = /** @class */ (function () {
        function UnauthorizedPageComponent() {
        }
        UnauthorizedPageComponent.prototype.ngOnInit = function () {
        };
        return UnauthorizedPageComponent;
    }());
    UnauthorizedPageComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-unauthorized-page',
                    template: "<ng-template #mainContent>\n  <div class=\"unauthorized-page\">\n    <div>\n      <h1>WFIM Unauthorized Page</h1>\n      <p>An authorization error has occurred</p>\n      <h2>Required WebADE role does not exist, is expired, or is not active.</h2>\n    </div>\n  </div>\n</ng-template>\n\n<wf1-full-width-container titleText=\"Incident Management\" [mainContentTemplate]=\"mainContent\"></wf1-full-width-container>\n"
                },] }
    ];
    UnauthorizedPageComponent.ctorParameters = function () { return []; };

    var VisualizeJSComponent = /** @class */ (function () {
        function VisualizeJSComponent(appConfig) {
            this.appConfig = appConfig;
            this.currentPage = 1;
        }
        VisualizeJSComponent.handleError = function (err) {
            console.error(err.message);
        };
        VisualizeJSComponent.prototype.ngOnInit = function () {
        };
        VisualizeJSComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            var config = this.appConfig.getConfig();
            if (!config || !config.externalAppConfig || !config.externalAppConfig.jasper) {
                throw new Error('Could not find Jasper configuration settings in application configuration');
            }
            var themeHref = (config.externalAppConfig.jasper.url + "/_themes/" + config.externalAppConfig.jasper.themeHash + "/theme.css").split("/").slice(0, -1).join("/");
            visualize.config({
                server: config.externalAppConfig.jasper.url,
                scripts: "runtime/" + config.externalAppConfig.jasper.scriptsHash + "/optimized-scripts",
                logEnabled: true,
                logLevel: "error",
                _showInputControls: "true" === "true",
                theme: {
                    href: themeHref
                }
            });
            // new Promise((resolve, reject) => {
            visualize({
                server: config.externalAppConfig.jasper.url
            }, function (vis) {
                var reportConfig = {
                    resource: _this.reportPath,
                    container: "#" + _this.elementId,
                    error: VisualizeJSComponent.handleError,
                };
                if (_this.reportParams) {
                    reportConfig.params = _this.reportParams;
                }
                _this.report = vis.report(reportConfig);
            });
            // }).then(result => this.report = result)
            //   .catch(error => console.error(error));
        };
        VisualizeJSComponent.prototype.isExportFormatSupported = function (format) {
            if (format) {
                if (this.supportedExportFormats && this.supportedExportFormats.length > 0) {
                    return this.supportedExportFormats.includes(format);
                }
            }
            return false;
        };
        VisualizeJSComponent.prototype.exportToPDF = function () {
            this.export('pdf');
        };
        VisualizeJSComponent.prototype.exportToExcel = function () {
            this.export('csv');
        };
        VisualizeJSComponent.prototype.previousPage = function () {
            if (this.currentPage !== 1) {
                this.currentPage -= 1;
                this.report.pages(this.currentPage).run().fail(function (err) { return console.error(err); });
            }
        };
        VisualizeJSComponent.prototype.nextPage = function () {
            var _this = this;
            this.currentPage += 1;
            this.report.pages(this.currentPage).run().fail(function (err) {
                if (err.errorCode === 'page.number.out.of.range') {
                    _this.currentPage -= 1;
                }
                else {
                    console.error(err);
                }
            });
        };
        VisualizeJSComponent.prototype.export = function (outputFormat) {
            var params = { outputFormat: outputFormat,
                ignorePagination: outputFormat === 'csv' ? true : false
            };
            this.report.export(params)
                .done(function (link) {
                window.open(link.href); // open new window to download report
            })
                .fail(function (err) {
                alert(err.message);
            });
        };
        return VisualizeJSComponent;
    }());
    VisualizeJSComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-visualize-js',
                    template: "<div class=\"wf1-jaspersoft-report\">\n  <div class=\"wf1-jaspersoft-report-toolbar\">\n    <button matTooltip=\"Export to PDF\" (click)=\"exportToPDF()\" [hidden]=\"!isExportFormatSupported('pdf')\"><mat-icon>picture_as_pdf</mat-icon></button>\n    <button matTooltip=\"Export to Excel\" (click)=\"exportToExcel()\" [hidden]=\"!isExportFormatSupported('csv')\"><mat-icon>table_chart</mat-icon></button>\n    <button matTooltip=\"Previous Page\" (click)=\"previousPage()\"><mat-icon>navigate_before</mat-icon></button>\n    <button matTooltip=\"Next Page\" (click)=\"nextPage()\"><mat-icon>navigate_next</mat-icon></button>\n  </div>\n  <div [id]=\"elementId\" class=\"wf1-jaspersoft-report-content\"></div>\n</div>\n",
                    styles: [""]
                },] }
    ];
    VisualizeJSComponent.ctorParameters = function () { return [
        { type: AppConfigService }
    ]; };
    VisualizeJSComponent.propDecorators = {
        elementId: [{ type: i0.Input }],
        reportPath: [{ type: i0.Input }],
        reportParams: [{ type: i0.Input }],
        supportedExportFormats: [{ type: i0.Input }]
    };

    var WFMLBasemapSelectorComponent = /** @class */ (function () {
        function WFMLBasemapSelectorComponent(mapService) {
            this.mapService = mapService;
            this.basemaps = [];
        }
        WFMLBasemapSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.mapService.isMapInitialized('map')) {
                this.initializeBasemaps();
            }
            else {
                this.mapService.mapInstanceEmitter.asObservable().subscribe(function (data) {
                    _this.initializeBasemaps();
                });
            }
        };
        WFMLBasemapSelectorComponent.prototype.initializeBasemaps = function () {
            this.basemaps = this.mapService.getBasemaps('map');
        };
        WFMLBasemapSelectorComponent.prototype.displayBasemap = function (index) {
            this.mapService.setBasemap('map', index);
        };
        return WFMLBasemapSelectorComponent;
    }());
    WFMLBasemapSelectorComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-wfml-basemap-selector',
                    template: "<div class=\"basemap-list\">\n    <mat-card class=\"basemap\" *ngFor=\"let basemap of basemaps; let i = index\" (click)=\"displayBasemap(i)\">\n        <img alt=\"{{basemap.title}}\" mat-card-image src=\"assets/images/map-thumbnails/{{basemap.key}}.jpg\">\n        <mat-card-title>{{basemap.title}}</mat-card-title>\n    </mat-card>\n</div>\n",
                    styles: [".basemap-list{display:flex}.basemap-list .basemap{flex:1 1 2rem;text-align:center;padding:0}.basemap-list .basemap .mat-card-image{width:100%;margin:0}.basemap-list .basemap .mat-card-title{padding:1.25rem;font-size:medium}"]
                },] }
    ];
    WFMLBasemapSelectorComponent.ctorParameters = function () { return [
        { type: MapService }
    ]; };

    var WFMLLayerTreeComponent = /** @class */ (function () {
        function WFMLLayerTreeComponent(mapService, changeDetectorRef) {
            this.mapService = mapService;
            this.changeDetectorRef = changeDetectorRef;
            /** The selection for checklist */
            this.checklistSelection = new collections.SelectionModel(true /* multiple */);
            this.hasChildren = function (_, node) { return !!node.child; };
            this.treeControl = new tree.NestedTreeControl(function (node) { return node.child; });
            this.dataSource = new tree$1.MatTreeNestedDataSource();
        }
        WFMLLayerTreeComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.mapService.isMapInitialized('map')) {
                this.initializeTreeLayer();
            }
            else {
                this.mapService.mapInstanceEmitter.asObservable().subscribe(function (data) {
                    _this.initializeTreeLayer();
                });
            }
        };
        WFMLLayerTreeComponent.prototype.initializeTreeLayer = function () {
            var _a;
            var layerTreeView = this.mapService.getLayerTreeView('map');
            if (layerTreeView) {
                this.dataSource.data = layerTreeView.child;
                (_a = this.checklistSelection).select.apply(_a, __spread(this.findSelectedElements(layerTreeView)));
            }
        };
        WFMLLayerTreeComponent.prototype.findSelectedElements = function (node) {
            var e_1, _a;
            var results = [];
            if (node.isVisible || (node.lyr && node.lyr.isVisible)) {
                results.push(node);
            }
            if (node.child) {
                try {
                    for (var _b = __values(node.child), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var childNode = _c.value;
                        results.push.apply(results, __spread(this.findSelectedElements(childNode)));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return results;
        };
        /** Whether all the descendants of the node are selected */
        WFMLLayerTreeComponent.prototype.descendantsAllSelected = function (node) {
            var _this = this;
            var descendants = this.treeControl.getDescendants(node);
            if (!descendants.length) {
                return this.checklistSelection.isSelected(node);
            }
            var selected = this.checklistSelection.isSelected(node);
            var allSelected = descendants.every(function (child) { return _this.checklistSelection.isSelected(child); });
            if (!selected && allSelected) {
                this.checklistSelection.select(node);
                this.changeDetectorRef.markForCheck();
            }
            return allSelected;
        };
        /** Whether part of the descendants are selected */
        WFMLLayerTreeComponent.prototype.descendantsPartiallySelected = function (node) {
            var _this = this;
            var descendants = this.treeControl.getDescendants(node);
            if (!descendants.length) {
                return false;
            }
            var result = descendants.some(function (child) { return _this.checklistSelection.isSelected(child); });
            return result && !this.descendantsAllSelected(node);
        };
        /** Toggle the game selection. Select/deselect all the descendants node */
        WFMLLayerTreeComponent.prototype.nodeSelectionToggle = function (node) {
            var _a, _b, e_2, _c;
            this.checklistSelection.toggle(node);
            if (node.lyr) {
                this.mapService.setLayerVisibility('map', node.lyr.id, this.checklistSelection.isSelected(node));
            }
            var descendants = this.treeControl.getDescendants(node);
            if (this.checklistSelection.isSelected(node)) {
                (_a = this.checklistSelection).select.apply(_a, __spread(descendants, [node]));
            }
            else {
                (_b = this.checklistSelection).deselect.apply(_b, __spread(descendants, [node]));
            }
            try {
                for (var descendants_1 = __values(descendants), descendants_1_1 = descendants_1.next(); !descendants_1_1.done; descendants_1_1 = descendants_1.next()) {
                    var childNode = descendants_1_1.value;
                    if (childNode.lyr) {
                        this.mapService.setLayerVisibility('map', childNode.lyr.id, this.checklistSelection.isSelected(childNode));
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (descendants_1_1 && !descendants_1_1.done && (_c = descendants_1.return)) _c.call(descendants_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.changeDetectorRef.markForCheck();
        };
        return WFMLLayerTreeComponent;
    }());
    WFMLLayerTreeComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-wfml-layer-tree',
                    template: "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"wf1-layer-tree\">\n    <mat-nested-tree-node *matTreeNodeDef=\"let node\">\n      <li>\n        <div class=\"mat-tree-node\">\n<!--          <button mat-icon-button disabled></button>-->\n          <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                        [indeterminate]=\"descendantsPartiallySelected(node)\"\n                        (change)=\"nodeSelectionToggle(node)\"\n                        labelPosition=\"before\">\n            {{node.title}}\n          </mat-checkbox>\n        </div>\n      </li>\n    </mat-nested-tree-node>\n\n    <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChildren\">\n      <li>\n        <div class=\"mat-tree-node\">\n          <button mat-icon-button matTreeNodeToggle\n                  [attr.aria-label]=\"'toggle ' + node.title\">\n            <mat-icon>\n              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n            </mat-icon>\n          </button>\n          <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                        [indeterminate]=\"descendantsPartiallySelected(node)\"\n                        (change)=\"nodeSelectionToggle(node)\"\n                        labelPosition=\"before\">\n            {{node.title}}\n          </mat-checkbox>\n        </div>\n        <ul>\n          <div *ngIf=\"treeControl.isExpanded(node)\">\n            <ng-container matTreeNodeOutlet></ng-container>\n          </div>\n        </ul>\n      </li>\n    </mat-nested-tree-node>\n  </mat-tree>\n"
                },] }
    ];
    WFMLLayerTreeComponent.ctorParameters = function () { return [
        { type: MapService },
        { type: i0.ChangeDetectorRef }
    ]; };

    var WFMLMappingContainerComponent = /** @class */ (function () {
        //   isMapInitialized = false;
        function WFMLMappingContainerComponent(token, appConfig) {
            this.token = token;
            this.appConfig = appConfig;
            this.showToolbar = true;
            this.opened = true;
            //   mapControlsOpened = false;
            //   layerTreeSelected = false;
            //   basemapsSelected = false;
            this.isInitializing = true;
            this.isInitializing = token.getOauthToken() === null;
        }
        WFMLMappingContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.appConfig.getConfig().application.lazyAuthenticate) {
                this.token.authTokenEmitter.subscribe(function () {
                    _this.isInitializing = false;
                });
            }
            else {
                this.isInitializing = false;
            }
        };
        WFMLMappingContainerComponent.prototype.ngAfterViewChecked = function () {
            // if (!this.isInitializing && !this.isMapInitialized) {
            //   this.initializeMap();
            //   this.isMapInitialized = true;
            // }
        };
        WFMLMappingContainerComponent.prototype.toggleSideNav = function () {
            // this.mapService.onResize();
        };
        WFMLMappingContainerComponent.prototype.initializeMap = function () {
            // this.mapService.initializeMap('map');
        };
        WFMLMappingContainerComponent.prototype.onMapControlToggled = function (currentMapControl) {
            // this.mapControlsOpened = currentMapControl !== MapControl.NONE;
            // this.layerTreeSelected = currentMapControl === MapControl.LAYER_TREE;
            // this.basemapsSelected = currentMapControl === MapControl.BASEMAPS;
        };
        return WFMLMappingContainerComponent;
    }());
    WFMLMappingContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-wfml-mapping-container',
                    template: "<!--\n  TEMPLATE DECLARATIONS FOR SUB-COMPONENTS\n-->\n<ng-template #wfmlMapPanel>\n  <div id=\"map\"></div>\n</ng-template>\n\n<ng-template #wfmlSidebar>\n  <header>\n    <h4>WILDFIRE INCIDENT MANAGEMENT</h4>\n  </header>\n  <mat-accordion>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <i class=\"material-icons\">layers</i>\n        </mat-panel-title>\n        <mat-panel-description>\n          Layers\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <wf1-wfml-layer-tree></wf1-wfml-layer-tree>\n\n    </mat-expansion-panel>\n    <mat-expansion-panel>\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <i class=\"material-icons\">apps</i>\n        </mat-panel-title>\n        <mat-panel-description>\n          Basemaps\n        </mat-panel-description>\n      </mat-expansion-panel-header>\n\n      <mat-button-toggle-group name=\"basemaps\" aria-label=\"Basemaps\">\n        <mat-button-toggle value=\"imagery\">Imagery</mat-button-toggle>\n        <mat-button-toggle value=\"street\">Street</mat-button-toggle>\n        <mat-button-toggle value=\"topographic\">Topographic</mat-button-toggle>\n      </mat-button-toggle-group>\n\n    </mat-expansion-panel>\n  </mat-accordion>\n</ng-template>\n\n<!--\n  MAIN TEMPLATE DECLARATION\n-->\n\n\n<!--\n  MAIN TEMPLATE DECLARATION\n-->\n<div id=\"core-interface-container\">\n  <wf1-application-header [titleText]=\"titleText\"></wf1-application-header>\n\n  <div class=\"wf1-loading-screen\" *ngIf=\"isInitializing\">\n    <h1>Initializing Application</h1>\n    <wf1-spinner></wf1-spinner>\n    <h3>Please wait while the application initializes.</h3>\n  </div>\n\n  <ng-container *ngIf=\"!isInitializing\">\n    <wf1-application-toolbar \n        *ngIf=\"showToolbar\"\n        [menuTemplate]=\"menuTemplate\" \n        [toolbarTemplate]=\"toolbarTemplate\" \n        (selectedMapControl)=\"onMapControlToggled($event)\"\n    ></wf1-application-toolbar>\n\n    <mat-sidenav-container class=\"mat-typography\" hasBackdrop=false>\n      <mat-sidenav id=\"side-nav\" #sidebar mode=\"side\" [(opened)]=\"opened\" >\n        <ng-container *ngTemplateOutlet=\"sidebarTemplate ? sidebarTemplate : wfmlSidebar\"></ng-container>\n      </mat-sidenav>\n      <!-- <mat-sidenav id=\"layers-sidebar\" #mapControls mode=\"over\" hasBackdrop=\"false\" position=\"end\" [(opened)]=\"mapControlsOpened\" > -->\n        <!-- <ng-container *ngIf=\"layerTreeSelected\">\n          <wf1-wfml-layer-tree></wf1-wfml-layer-tree>\n        </ng-container>\n        <ng-container *ngIf=\"basemapsSelected\">\n          <wf1-wfml-basemap-selector></wf1-wfml-basemap-selector>\n        </ng-container> -->\n      <!-- </mat-sidenav> -->\n      <mat-sidenav-content>\n        <div id=\"side-nav-toggle\" (click)=\"sidebar.toggle();toggleSideNav()\" (keydown)=\"sidebar.toggle();toggleSideNav()\">\n          <mat-icon>{{ (opened) ? 'arrow_left' : 'arrow_right' }}</mat-icon>\n        </div>\n        <ng-container *ngTemplateOutlet=\"mainContentTemplate ? mainContentTemplate : wfmlMapPanel\"></ng-container>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n  </ng-container>\n</div>\n"
                },] }
    ];
    WFMLMappingContainerComponent.ctorParameters = function () { return [
        { type: TokenService },
        { type: AppConfigService }
    ]; };
    WFMLMappingContainerComponent.propDecorators = {
        titleText: [{ type: i0.Input }],
        menuTemplate: [{ type: i0.Input }],
        toolbarTemplate: [{ type: i0.Input }],
        sidebarTemplate: [{ type: i0.Input }],
        mainContentTemplate: [{ type: i0.Input }],
        showToolbar: [{ type: i0.Input }]
    };

    var DATE_FORMATS = {
        fullPickerInput: 'YYYY-MM-DD HH:mm',
        datePickerInput: 'YYYY-MM-DD',
        timePickerInput: 'HH:mm:ss',
        monthYearLabel: 'YYYY-MM',
        dateA11yLabel: 'YYYY-MMM-DD',
        monthYearA11yLabel: 'YYYY-MMM',
    };
    // Below dynamic decorator is here to resolve a compile problem described here: https://github.com/angular/angular/issues/20903
    // See also: https://angular.io/guide/aot-compiler#strictmetadataemit
    // @dynamic
    var CoreUIModule = /** @class */ (function () {
        function CoreUIModule() {
        }
        CoreUIModule.forRoot = function (config) {
            // User config get logged here
            // console.log(config);
            return {
                ngModule: CoreUIModule,
                providers: [
                    // Initializes the AppConfigService on Angular app init, so it is ready before components are loaded.
                    // Technically, we're adding an additional dependency for the Angular APP_INITIALIZER token (Thus: 'multi:true').
                    // That dependency fires a factory function 'appInitializerFn' that depends on the AppConfigService singleton,
                    // and which call the service's loadAppConfig() function on Angular init.
                    // See for reference: https://www.intertech.com/Blog/angular-4-tutorial-run-code-during-app-initialization/
                    {
                        provide: i0.APP_INITIALIZER,
                        useFactory: appInitializerFn,
                        multi: true,
                        deps: [i0.Injector]
                    },
                    {
                        provide: LibraryConfig,
                        useValue: config
                    },
                    {
                        provide: AppConfigService,
                        useClass: AppConfigService,
                        deps: [i1.HttpHandler, LibraryConfig]
                    },
                    MapService,
                    {
                        provide: ngPickDatetime.OWL_DATE_TIME_FORMATS,
                        useValue: DATE_FORMATS
                    },
                    NavigationService
                ]
            };
        };
        return CoreUIModule;
    }());
    CoreUIModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        orgunitRestApi.ApiModule,
                        ngPickDatetime.OwlDateTimeModule,
                        ngPickDatetime.OwlMomentDateTimeModule,
                        animations.BrowserAnimationsModule,
                        platformBrowser.BrowserModule,
                        i2.CommonModule,
                        forms.FormsModule,
                        i1.HttpClientModule,
                        button.MatButtonModule,
                        buttonToggle.MatButtonToggleModule,
                        card.MatCardModule,
                        checkbox.MatCheckboxModule,
                        expansion.MatExpansionModule,
                        formField.MatFormFieldModule,
                        gridList.MatGridListModule,
                        list.MatListModule,
                        icon.MatIconModule,
                        input.MatInputModule,
                        menu.MatMenuModule,
                        progressSpinner.MatProgressSpinnerModule,
                        radio.MatRadioModule,
                        sidenav.MatSidenavModule,
                        tabs.MatTabsModule,
                        toolbar.MatToolbarModule,
                        tooltip.MatTooltipModule,
                        tree$1.MatTreeModule,
                        scrolling.ScrollingModule,
                        ngxMoment.MomentModule,
                        angularOauth2Oidc.OAuthModule.forRoot(),
                        forms.ReactiveFormsModule,
                    ],
                    providers: [
                        SpatialUtilsService,
                        WindowMessagingService,
                    ],
                    declarations: [
                        ApplicationHeaderComponent,
                        ApplicationIconComponent,
                        ApplicationToolbarComponent,
                        BasicSidebarPanelComponent,
                        DateTimePickerComponent,
                        DateMaskDirective,
                        FiltersComponent,
                        FilterSidebarPanelComponent,
                        FullWidthContainerComponent,
                        FullWidthPanelComponent,
                        InfoIncidentPanelComponent,
                        ListContainerComponent,
                        ListItemComponent,
                        LocationSidebarPanelComponent,
                        LocationToolbarComponent,
                        ReportDialogComponent,
                        SearchBarComponent,
                        SidebarComponent,
                        SortComponent,
                        SpinnerComponent,
                        UnauthorizedPageComponent,
                        VisualizeJSComponent,
                        WFMLBasemapSelectorComponent,
                        WFMLLayerTreeComponent,
                        WFMLMappingContainerComponent
                    ],
                    exports: [
                        ApplicationIconComponent,
                        BasicSidebarPanelComponent,
                        DateTimePickerComponent,
                        FiltersComponent,
                        FilterSidebarPanelComponent,
                        FullWidthContainerComponent,
                        FullWidthPanelComponent,
                        // InfoIncidentPanelComponent,
                        ListContainerComponent,
                        // ListItemComponent,
                        // LocationSidebarPanelComponent,
                        ReportDialogComponent,
                        SearchBarComponent,
                        SidebarComponent,
                        SortComponent,
                        SpinnerComponent,
                        UnauthorizedPageComponent,
                        VisualizeJSComponent,
                        WFMLMappingContainerComponent,
                    ]
                },] }
    ];

    var AuthGuard = /** @class */ (function () {
        function AuthGuard(tokenService, router) {
            var _this = this;
            this.tokenService = tokenService;
            this.router = router;
            this.baseScopes = []; //["WFRM.GET_CODE_TABLES","WFRM.GET_TOPLEVEL"];
            // console.log("using auth guard");
            this.tokenService.credentialsEmitter.subscribe(function (credentials) {
                _this.credentials = credentials;
            });
        }
        AuthGuard.prototype.canActivate = function (next, state) {
            var url = state.url;
            var result = this.checkLogin(url, this.baseScopes);
            return rxjs.of(result);
        };
        AuthGuard.prototype.checkLogin = function (url, scopes) {
            var isAuthorized = (this.credentials) ? this.tokenService.doesUserHaveApplicationPermissions(scopes) : false;
            if (!isAuthorized) {
                this.redirectToErrorPage();
            }
            return isAuthorized;
        };
        AuthGuard.prototype.redirectToErrorPage = function () {
            // Navigate to the unauthorized page
            this.router.navigate([{ outlets: { root: ['unauthorized'] } }]);
        };
        return AuthGuard;
    }());
    AuthGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(i0.ɵɵinject(TokenService), i0.ɵɵinject(i1$1.Router)); }, token: AuthGuard, providedIn: "root" });
    AuthGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    AuthGuard.ctorParameters = function () { return [
        { type: TokenService },
        { type: i1$1.Router }
    ]; };

    var PublicAppHeaderActionItem = /** @class */ (function () {
        function PublicAppHeaderActionItem() {
        }
        return PublicAppHeaderActionItem;
    }());
    var PublicAppHeaderMenuItem = /** @class */ (function () {
        function PublicAppHeaderMenuItem() {
        }
        return PublicAppHeaderMenuItem;
    }());
    var PublicApplicationHeaderComponent = /** @class */ (function () {
        function PublicApplicationHeaderComponent() {
        }
        PublicApplicationHeaderComponent.prototype.ngOnInit = function () {
        };
        return PublicApplicationHeaderComponent;
    }());
    PublicApplicationHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'wf1-public-application-header',
                    template: "<mat-toolbar class=\"mat-typography wf1-public-application-header\" color=\"primary\">\n  <div class=\"bc-logo-div\">\n    <img [src]=\"headerLogoPath?headerLogoPath:'assets/images/logo/bcgov-logo.png'\" class=\"img-fluid center-block logo\" alt=\"BC Gov\">\n  </div>\n  <div *ngIf=\"titleText\" class=\"app-logo-and-title-div\">\n    <img src=\"assets/images/logo/wildfire-one-logo-text-horizontal-light.png\" class=\"img-fluid center-block logo\" alt=\"Wildfire ONE\">\n    <span class=\"title-hyphen\"> - </span>\n    <span class=\"mat-title\" id=\"header-title\">{{ titleText }}</span>\n  </div>\n  <div class=\"action-items mat-caption\" *ngIf=\"headerItems\">\n    <ng-container *ngFor=\"let headerItem of headerItems\">\n      <div *ngIf=\"headerItem.menuItems && headerItem.menuItems.length > 0\">\n        <button [attr.aria-label]=\"headerItem.label\"  [mat-menu-trigger-for]=\"headerItemMenu\"><mat-icon >{{headerItem.icon}}</mat-icon></button>\n        <mat-menu #headerItemMenu=\"matMenu\" xPosition=\"before\" class=\"wf1-public-application-header-menu\">\n          <button [attr.aria-label]=\"headerMenuItem.label\" *ngFor=\"let headerMenuItem of headerItem.menuItems\" mat-menu-item (click)=\"headerMenuItem.callBackFunction()\">\n            <mat-icon *ngIf=\"headerMenuItem.svgIcon\" [svgIcon]=\"headerMenuItem.svgIcon\"></mat-icon>\n            <mat-icon *ngIf=\"headerMenuItem.icon\">{{headerMenuItem.icon}}</mat-icon>\n            <span>{{headerMenuItem.label}}</span>\n          </button>\n        </mat-menu>\n      </div>\n      <div *ngIf=\"!headerItem.menuItems || headerItem.menuItems.length == 0\">\n        <button [attr.aria-label]=\"headerItem.label\" (click)=\"headerItem.callBackFunction()\">\n          <mat-icon *ngIf=\"headerItem.svgIcon\" [svgIcon]=\"headerItem.svgIcon\"></mat-icon>\n          <mat-icon *ngIf=\"headerItem.icon\">{{headerItem.icon}}</mat-icon>\n        </button>\n      </div>\n    </ng-container>\n  </div>\n</mat-toolbar>\n"
                },] }
    ];
    PublicApplicationHeaderComponent.ctorParameters = function () { return []; };
    PublicApplicationHeaderComponent.propDecorators = {
        titleText: [{ type: i0.Input }],
        headerItems: [{ type: i0.Input }],
        headerLogoPath: [{ type: i0.Input }]
    };

    var PublicApplicationHeaderModule = /** @class */ (function () {
        function PublicApplicationHeaderModule() {
        }
        return PublicApplicationHeaderModule;
    }());
    PublicApplicationHeaderModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i2.CommonModule,
                        icon.MatIconModule,
                        menu.MatMenuModule,
                        toolbar.MatToolbarModule,
                        divider.MatDividerModule,
                    ],
                    declarations: [
                        PublicApplicationHeaderComponent
                    ],
                    exports: [
                        PublicApplicationHeaderComponent
                    ]
                },] }
    ];

    /** Pass untouched request through to the next request handler. */
    var AuthenticationInterceptor = /** @class */ (function () {
        function AuthenticationInterceptor(injector) {
            this.injector = injector;
        }
        AuthenticationInterceptor.prototype.intercept = function (req, next) {
            // console.log(this.appConfig.getConfig());
            var processedRequest = req;
            if (this.isUrlSecured(req.url)) {
                this.token = this.injector.get(TokenService);
                this.authToken = this.token.getOauthToken();
                if (this.authToken) {
                    processedRequest = req.clone({
                        headers: req.headers.set('Authorization', 'Bearer ' + this.authToken)
                    });
                }
            }
            return next.handle(processedRequest);
        };
        AuthenticationInterceptor.prototype.isUrlSecured = function (url) {
            var isSecured = false;
            var config = this.injector.get(AppConfigService).getConfig();
            if (config && config.rest) {
                for (var endpoint in config.rest) {
                    if (url.startsWith(config.rest[endpoint])) {
                        isSecured = true;
                        break;
                    }
                }
            }
            return isSecured;
        };
        return AuthenticationInterceptor;
    }());
    AuthenticationInterceptor.decorators = [
        { type: i0.Injectable }
    ];
    AuthenticationInterceptor.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };

    var FilterConfig = /** @class */ (function () {
        function FilterConfig() {
            this.type = 'multi';
        }
        return FilterConfig;
    }());

    var initialState = {
        query: null,
        sortParam: null,
        sortDirection: null,
        sortModalVisible: false,
        filters: {},
        hiddenFilters: {}
    };

    var getSearchQuery = function (state) { return state.query; };
    var getSortParam = function (state) { return state.sortParam; };
    var getSortDirection = function (state) { return state.sortDirection; };
    var getEncodedSort = function (state) { return encodeURIComponent(state.sortParam + " " + state.sortDirection); };
    var isSortModalVisible = function (state) { return state.sortModalVisible; };
    var getActiveFilters = function (state) { return state.filters; };

    var functions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getSearchQuery: getSearchQuery,
        getSortParam: getSortParam,
        getSortDirection: getSortDirection,
        getEncodedSort: getEncodedSort,
        isSortModalVisible: isSortModalVisible,
        getActiveFilters: getActiveFilters
    });

    var getSearchState = function (state) { return state; };
    var ɵ0 = getSearchState;
    var getSearchQuerySelector = store.createSelector(getSearchState, getSearchQuery);
    var getSortParamSelector = store.createSelector(getSearchState, getSortParam);
    var getSortDirectionSelector = store.createSelector(getSearchState, getSortDirection);
    var getEncodedSortSelector = store.createSelector(getSearchState, getEncodedSort);
    var isSortModalVisibleSelector = store.createSelector(getSearchState, isSortModalVisible);
    var getActiveFiltersSelector = store.createSelector(getSearchState, getActiveFilters);

    var selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getSearchQuerySelector: getSearchQuerySelector,
        getSortParamSelector: getSortParamSelector,
        getSortDirectionSelector: getSortDirectionSelector,
        getEncodedSortSelector: getEncodedSortSelector,
        isSortModalVisibleSelector: isSortModalVisibleSelector,
        getActiveFiltersSelector: getActiveFiltersSelector,
        ɵ0: ɵ0
    });

    function searchReducer(state, action) {
        switch (action.type) {
            case SearchActionTypes.UPDATE_SEARCH_QUERY: {
                if (!isMyComponent(state, action.componentId)) {
                    return state;
                }
                var query = action.query;
                return Object.assign({}, state, { query: query });
            }
            case SearchActionTypes.RESET_SEARCH_QUERY: {
                if (!isMyComponent(state, action.componentId)) {
                    return state;
                }
                return Object.assign({}, state, { query: null });
            }
            case SearchActionTypes.UPDATE_SORT: {
                if (!isMyComponent(state, action.componentId)) {
                    return state;
                }
                var param = action.param, direction = action.direction;
                return Object.assign({}, state, { sortParam: param, sortDirection: direction });
            }
            case SearchActionTypes.TOGGLE_SORT_MODAL: {
                if (!isMyComponent(state, action.componentId)) {
                    return state;
                }
                return Object.assign({}, state, { sortModalVisible: !state.sortModalVisible });
            }
            case SearchActionTypes.UPDATE_ACTIVE_FILTERS: {
                if (!isMyComponent(state, action.componentId)) {
                    return state;
                }
                var activeFilters = action.filters;
                return Object.assign({}, state, { filters: activeFilters });
            }
            case SearchActionTypes.UPDATE_HIDDEN_FILTERS: {
                if (!isMyComponent(state, action.componentId)) {
                    return state;
                }
                var hiddenFilters = action.filters;
                return Object.assign({}, state, { hiddenFilters: hiddenFilters });
            }
            case SearchActionTypes.CLEAR_FILTER: {
                if (!isMyComponent(state, action.componentId)) {
                    return state;
                }
                var filterName = action.filterToRemove;
                var _a = state.filters, _b = filterName, clearedFilter = _a[_b], remainingFilters = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
                return Object.assign({}, state, { filters: remainingFilters });
            }
            case SearchActionTypes.CLEAR_ALL_FILTERS: {
                if (!isMyComponent(state, action.componentId)) {
                    return state;
                }
                return Object.assign({}, state, { filters: {} });
            }
            default: {
                return state;
            }
        }
    }
    var isMyComponent = function (state, componentId) {
        if (state && state.componentId && componentId) {
            if (state.componentId === componentId) {
                return true;
            }
        }
        return false;
    };
    var ɵ0$1 = isMyComponent;

    /*
     * Public API Surface of core-ui
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AppConfigService = AppConfigService;
    exports.ApplicationIconComponent = ApplicationIconComponent;
    exports.AuthGuard = AuthGuard;
    exports.AuthenticationInterceptor = AuthenticationInterceptor;
    exports.BasicSidebarPanelComponent = BasicSidebarPanelComponent;
    exports.CoreUIModule = CoreUIModule;
    exports.DATE_FORMATS = DATE_FORMATS;
    exports.DateTimePickerComponent = DateTimePickerComponent;
    exports.FilterConfig = FilterConfig;
    exports.FilterSidebarPanelComponent = FilterSidebarPanelComponent;
    exports.FiltersComponent = FiltersComponent;
    exports.FullWidthContainerComponent = FullWidthContainerComponent;
    exports.FullWidthPanelComponent = FullWidthPanelComponent;
    exports.InfoIncidentPanelComponent = InfoIncidentPanelComponent;
    exports.LibraryConfig = LibraryConfig;
    exports.ListContainerComponent = ListContainerComponent;
    exports.ListItemComponent = ListItemComponent;
    exports.LocationSidebarPanelComponent = LocationSidebarPanelComponent;
    exports.MAPTOOL_WINDOW_NAME = MAPTOOL_WINDOW_NAME;
    exports.Message = Message;
    exports.PublicApplicationHeaderComponent = PublicApplicationHeaderComponent;
    exports.PublicApplicationHeaderModule = PublicApplicationHeaderModule;
    exports.ReportDialogComponent = ReportDialogComponent;
    exports.SearchActions = actions;
    exports.SearchBarComponent = SearchBarComponent;
    exports.SearchFunctions = functions;
    exports.SearchSelectors = selectors;
    exports.SidebarComponent = SidebarComponent;
    exports.SortComponent = SortComponent;
    exports.SpatialUtilsService = SpatialUtilsService;
    exports.SpinnerComponent = SpinnerComponent;
    exports.TokenService = TokenService;
    exports.UnauthorizedPageComponent = UnauthorizedPageComponent;
    exports.VisualizeJSComponent = VisualizeJSComponent;
    exports.WFIM_LIST_COMPONENT_ID = WFIM_LIST_COMPONENT_ID;
    exports.WFIM_TABLE_COMPONENT_ID = WFIM_TABLE_COMPONENT_ID;
    exports.WFIM_WINDOW_NAME = WFIM_WINDOW_NAME;
    exports.WFMLMappingContainerComponent = WFMLMappingContainerComponent;
    exports.WFNROF_LIST_COMPONENT_ID = WFNROF_LIST_COMPONENT_ID;
    exports.WFNROF_TABLE_COMPONENT_ID = WFNROF_TABLE_COMPONENT_ID;
    exports.WFNROF_WINDOW_NAME = WFNROF_WINDOW_NAME;
    exports.WFROF_LIST_COMPONENT_ID = WFROF_LIST_COMPONENT_ID;
    exports.WFROF_TABLE_COMPONENT_ID = WFROF_TABLE_COMPONENT_ID;
    exports.WFROF_WINDOW_NAME = WFROF_WINDOW_NAME;
    exports.WindowConfig = WindowConfig;
    exports.WindowMessagingService = WindowMessagingService;
    exports.appInitializerFn = appInitializerFn;
    exports.initialState = initialState;
    exports.searchReducer = searchReducer;
    exports.ɵa = ApplicationHeaderComponent;
    exports.ɵb = ApplicationToolbarComponent;
    exports.ɵc = NavigationService;
    exports.ɵd = DateMaskDirective;
    exports.ɵe = MapService;
    exports.ɵf = LocationToolbarComponent;
    exports.ɵg = WFMLBasemapSelectorComponent;
    exports.ɵh = WFMLLayerTreeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=wf1-core-ui.umd.js.map
