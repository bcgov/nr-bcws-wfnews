import { Component, EventEmitter, Input, Output, TemplateRef } from "@angular/core";
export var MapControl;
(function (MapControl) {
    MapControl["NONE"] = "none";
    MapControl["LAYER_TREE"] = "layer-tree";
    MapControl["BASEMAPS"] = "basemaps";
})(MapControl || (MapControl = {}));
export class ApplicationToolbarComponent {
    constructor() {
        this.selectedMapControl = new EventEmitter();
        this.isLayersToggled = false;
        this.isBasemapsToggled = false;
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
    }
}
ApplicationToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf1-application-toolbar',
                template: "<ng-template #defaultToolbar>\n  <button class=\"wf1-menu-button\" mat-button color=\"primary\">\n    <wf1-application-icon iconType=\"incident\" [hasHalo]=\"true\"></wf1-application-icon>\n  </button>\n  <button class=\"wf1-menu-button\" mat-button color=\"primary\">\n    <wf1-application-icon iconType=\"report-of-fire\"></wf1-application-icon>\n  </button>\n</ng-template>\n\n<mat-toolbar class=\"mat-typography wf1-application-toolbar\" color=\"accent\">\n\n  <ng-container *ngIf=\"menuTemplate\">\n    <mat-menu #appMenu=\"matMenu\">\n      <div *ngTemplateOutlet=\"menuTemplate\"></div>\n    </mat-menu>\n\n    <button class=\"wf1-menu-button\" mat-button color=\"primary\" [matMenuTriggerFor]=\"appMenu\" matTooltip=\"Menu\">\n      <mat-icon>menu</mat-icon>\n    </button>\n  </ng-container>\n\n  <div *ngTemplateOutlet=\"toolbarTemplate ? toolbarTemplate: defaultToolbar\"></div>\n\n</mat-toolbar>\n"
            },] }
];
ApplicationToolbarComponent.ctorParameters = () => [];
ApplicationToolbarComponent.propDecorators = {
    menuTemplate: [{ type: Input }],
    toolbarTemplate: [{ type: Input }],
    selectedMapControl: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb24tdG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlLXVpL3NyYy9saWIvYXBwbGljYXRpb24tdG9vbGJhci9hcHBsaWNhdGlvbi10b29sYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekcsTUFBTSxDQUFOLElBQVksVUFJWDtBQUpELFdBQVksVUFBVTtJQUNwQiwyQkFBYSxDQUFBO0lBQ2IsdUNBQXlCLENBQUE7SUFDekIsbUNBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQUpXLFVBQVUsS0FBVixVQUFVLFFBSXJCO0FBT0QsTUFBTSxPQUFPLDJCQUEyQjtJQVd0QztRQUxVLHVCQUFrQixHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFFOUQsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFDeEIsc0JBQWlCLEdBQUcsS0FBSyxDQUFDO0lBRVgsQ0FBQztJQUVoQixRQUFRO0lBQ1IsQ0FBQztJQUVELGVBQWU7SUFDZixDQUFDOzs7WUF0QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLHk1QkFBbUQ7YUFFcEQ7Ozs7MkJBRUUsS0FBSzs4QkFFTCxLQUFLO2lDQUdMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIFRlbXBsYXRlUmVmfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5leHBvcnQgZW51bSBNYXBDb250cm9sIHtcbiAgTk9ORSA9ICdub25lJyxcbiAgTEFZRVJfVFJFRSA9ICdsYXllci10cmVlJyxcbiAgQkFTRU1BUFMgPSAnYmFzZW1hcHMnLFxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd3ZjEtYXBwbGljYXRpb24tdG9vbGJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9hcHBsaWNhdGlvbi10b29sYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBBcHBsaWNhdGlvblRvb2xiYXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKVxuICBtZW51VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gIEBJbnB1dCgpXG4gIHRvb2xiYXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBAT3V0cHV0KCkgc2VsZWN0ZWRNYXBDb250cm9sID0gbmV3IEV2ZW50RW1pdHRlcjxNYXBDb250cm9sPigpO1xuXG4gIGlzTGF5ZXJzVG9nZ2xlZCA9IGZhbHNlO1xuICBpc0Jhc2VtYXBzVG9nZ2xlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgfVxufVxuIl19