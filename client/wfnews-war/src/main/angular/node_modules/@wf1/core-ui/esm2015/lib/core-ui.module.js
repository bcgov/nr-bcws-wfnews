import { ScrollingModule } from "@angular/cdk/scrolling";
import { CommonModule } from "@angular/common";
import { HttpClientModule, HttpHandler } from "@angular/common/http";
import { APP_INITIALIZER, Injector, NgModule } from "@angular/core";
import { FormsModule, ReactiveFormsModule } from "@angular/forms";
import { MatButtonModule } from "@angular/material/button";
import { MatButtonToggleModule } from "@angular/material/button-toggle";
import { MatCardModule } from "@angular/material/card";
import { MatCheckboxModule } from "@angular/material/checkbox";
import { MatExpansionModule } from "@angular/material/expansion";
import { MatFormFieldModule } from "@angular/material/form-field";
import { MatGridListModule } from "@angular/material/grid-list";
import { MatIconModule } from "@angular/material/icon";
import { MatInputModule } from "@angular/material/input";
import { MatListModule } from "@angular/material/list";
import { MatMenuModule } from "@angular/material/menu";
import { MatProgressSpinnerModule } from "@angular/material/progress-spinner";
import { MatRadioModule } from "@angular/material/radio";
import { MatSidenavModule } from "@angular/material/sidenav";
import { MatTabsModule } from "@angular/material/tabs";
import { MatToolbarModule } from "@angular/material/toolbar";
import { MatTooltipModule } from "@angular/material/tooltip";
import { MatTreeModule } from "@angular/material/tree";
import { BrowserModule } from "@angular/platform-browser";
import { BrowserAnimationsModule } from "@angular/platform-browser/animations";
import { OwlDateTimeModule, OwlMomentDateTimeModule, OWL_DATE_TIME_FORMATS } from "@busacca/ng-pick-datetime";
import { ApiModule as OrgUnitApiModule } from "@wf1/orgunit-rest-api";
import { OAuthModule } from "angular-oauth2-oidc";
import { MomentModule } from "ngx-moment";
import { ApplicationHeaderComponent } from "./application-header/application-header.component";
import { ApplicationIconComponent } from "./application-icon/application-icon.component";
import { ApplicationToolbarComponent } from "./application-toolbar/application-toolbar.component";
import { BasicSidebarPanelComponent } from "./basic-sidebar-panel/basic-sidebar-panel.component";
import { LibraryConfig } from "./config/library-config";
import { DateTimePickerComponent } from "./date-time-picker/date-time-picker.component";
import { DateMaskDirective } from "./directives/date-mask.directive";
import { FilterSidebarPanelComponent } from "./filter-sidebar-panel/filter-sidebar-panel.component";
import { FullWidthContainerComponent } from "./full-width-container/full-width-container.component";
import { FullWidthPanelComponent } from "./full-width-panel/full-width-panel.component";
import { InfoIncidentPanelComponent } from "./info-incident-panel/info-incident-panel.component";
import { ListItemComponent } from "./list/item/list-item.component";
import { ListContainerComponent } from "./list/list-container.component";
import { LocationSidebarPanelComponent } from "./location-sidebar-panel/location-sidebar-panel.component";
import { LocationToolbarComponent } from "./location/location-toolbar.component";
import { ReportDialogComponent } from "./report-dialog/report-dialog.component";
import { FiltersComponent } from "./search/components/filters/filters.component";
import { SearchBarComponent } from "./search/components/search-bar/search-bar.component";
import { SortComponent } from "./search/components/sort/sort.component";
import { AppConfigService } from "./services/app-config.service";
import { MapService } from "./services/map.service";
import { NavigationService } from "./services/navigation.service";
import { SpatialUtilsService } from "./services/spatial-utils.service";
import { WindowMessagingService } from "./services/window-messaging.service";
import { SidebarComponent } from "./sidebar-container/sidebar.component";
import { SpinnerComponent } from "./spinner/spinner.component";
import { UnauthorizedPageComponent } from "./unauthorized-panel/unauthorized-page.component";
import { appInitializerFn } from "./utils";
import { VisualizeJSComponent } from "./visualize-js/visualize-js.component";
import { WFMLBasemapSelectorComponent } from "./wfml-basemap-selector/wfml-basemap-selector.component";
import { WFMLLayerTreeComponent } from "./wfml-layer-tree/wfml-layer-tree.component";
import { WFMLMappingContainerComponent } from "./wfml-mapping-container/wfml-mapping-container.component";
export const DATE_FORMATS = {
    fullPickerInput: 'YYYY-MM-DD HH:mm',
    datePickerInput: 'YYYY-MM-DD',
    timePickerInput: 'HH:mm:ss',
    monthYearLabel: 'YYYY-MM',
    dateA11yLabel: 'YYYY-MMM-DD',
    monthYearA11yLabel: 'YYYY-MMM',
};
// Below dynamic decorator is here to resolve a compile problem described here: https://github.com/angular/angular/issues/20903
// See also: https://angular.io/guide/aot-compiler#strictmetadataemit
// @dynamic
export class CoreUIModule {
    static forRoot(config) {
        // User config get logged here
        // console.log(config);
        return {
            ngModule: CoreUIModule,
            providers: [
                // Initializes the AppConfigService on Angular app init, so it is ready before components are loaded.
                // Technically, we're adding an additional dependency for the Angular APP_INITIALIZER token (Thus: 'multi:true').
                // That dependency fires a factory function 'appInitializerFn' that depends on the AppConfigService singleton,
                // and which call the service's loadAppConfig() function on Angular init.
                // See for reference: https://www.intertech.com/Blog/angular-4-tutorial-run-code-during-app-initialization/
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInitializerFn,
                    multi: true,
                    deps: [Injector]
                },
                {
                    provide: LibraryConfig,
                    useValue: config
                },
                {
                    provide: AppConfigService,
                    useClass: AppConfigService,
                    deps: [HttpHandler, LibraryConfig]
                },
                MapService,
                {
                    provide: OWL_DATE_TIME_FORMATS,
                    useValue: DATE_FORMATS
                },
                NavigationService
            ]
        };
    }
}
CoreUIModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    OrgUnitApiModule,
                    OwlDateTimeModule,
                    OwlMomentDateTimeModule,
                    BrowserAnimationsModule,
                    BrowserModule,
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    MatButtonModule,
                    MatButtonToggleModule,
                    MatCardModule,
                    MatCheckboxModule,
                    MatExpansionModule,
                    MatFormFieldModule,
                    MatGridListModule,
                    MatListModule,
                    MatIconModule,
                    MatInputModule,
                    MatMenuModule,
                    MatProgressSpinnerModule,
                    MatRadioModule,
                    MatSidenavModule,
                    MatTabsModule,
                    MatToolbarModule,
                    MatTooltipModule,
                    MatTreeModule,
                    ScrollingModule,
                    MomentModule,
                    OAuthModule.forRoot(),
                    ReactiveFormsModule,
                ],
                providers: [
                    SpatialUtilsService,
                    WindowMessagingService,
                ],
                declarations: [
                    ApplicationHeaderComponent,
                    ApplicationIconComponent,
                    ApplicationToolbarComponent,
                    BasicSidebarPanelComponent,
                    DateTimePickerComponent,
                    DateMaskDirective,
                    FiltersComponent,
                    FilterSidebarPanelComponent,
                    FullWidthContainerComponent,
                    FullWidthPanelComponent,
                    InfoIncidentPanelComponent,
                    ListContainerComponent,
                    ListItemComponent,
                    LocationSidebarPanelComponent,
                    LocationToolbarComponent,
                    ReportDialogComponent,
                    SearchBarComponent,
                    SidebarComponent,
                    SortComponent,
                    SpinnerComponent,
                    UnauthorizedPageComponent,
                    VisualizeJSComponent,
                    WFMLBasemapSelectorComponent,
                    WFMLLayerTreeComponent,
                    WFMLMappingContainerComponent
                ],
                exports: [
                    ApplicationIconComponent,
                    BasicSidebarPanelComponent,
                    DateTimePickerComponent,
                    FiltersComponent,
                    FilterSidebarPanelComponent,
                    FullWidthContainerComponent,
                    FullWidthPanelComponent,
                    // InfoIncidentPanelComponent,
                    ListContainerComponent,
                    // ListItemComponent,
                    // LocationSidebarPanelComponent,
                    ReportDialogComponent,
                    SearchBarComponent,
                    SidebarComponent,
                    SortComponent,
                    SpinnerComponent,
                    UnauthorizedPageComponent,
                    VisualizeJSComponent,
                    WFMLMappingContainerComponent,
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,