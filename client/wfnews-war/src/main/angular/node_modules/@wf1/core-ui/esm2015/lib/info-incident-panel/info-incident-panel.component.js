import { Component, Input } from "@angular/core";
// External
import { select, Store } from "@ngrx/store";
// Redux
import { MapService } from "../services/map.service";
export class InfoIncidentPanelComponent {
    constructor(store, mapService) {
        this.store = store;
        this.mapService = mapService;
        this.codeLabelLookupTables = {};
    }
    ngOnInit() {
        this.getCodeLookupTables();
    }
    getCodeLookupTables() {
        this.store.pipe(select('codeData', 'codeIndex')).subscribe(codeIndex => this.codeLabelLookupTables = codeIndex);
    }
    getLabel(table, value) {
        return this.codeLabelLookupTables[table] && value ? this.codeLabelLookupTables[table][value] : '';
    }
    getPanelClasses() {
        let incidentClass;
        if (this.incident.incidentSituation) {
            incidentClass = (this.incident.incidentSituation.interfaceFireInd)
                ? 'incident-interface'
                : 'incident-non-interface';
        }
        else {
            incidentClass = 'incident-default';
        }
        return `info-panel ${incidentClass}`;
    }
    getFormattedLocation() {
        return (this.incident && this.incident.incidentLocation)
            ? this.mapService.formatCoordinates([this.incident.incidentLocation.longitude, this.incident.incidentLocation.latitude])
            : '';
    }
}
InfoIncidentPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf1-info-incident-panel',
                template: "<div [ngClass]=\"getPanelClasses()\">\n  <h3 class=\"incident-detail-id\">\n    {{incident.incidentLabel}}\n    <span class=\"incident-detail-id-type\">{{getLabel(\"INCIDENT_TYPE_CODE\", incident.incidentTypeCode)}}</span>\n  </h3>\n  <div><strong>Point:</strong> {{getFormattedLocation()}}</div>\n  <div><strong>Incident Commander:</strong> {{incident.incidentCommanderName}}</div>\n  <div><strong>Stage of Control:</strong> {{getLabel(\"STAGE_OF_CONTROL_CODE\", incident.incidentSituation.stageOfControlCode)}}</div>\n  <div><strong>Size:</strong> {{incident.incidentSituation.fireSizeHectares}}</div>\n</div>\n",
                styles: [".info-panel{padding:1rem}.info-panel .incident-detail-id{font-weight:700;padding-bottom:.5rem;margin-bottom:0}.info-panel .incident-detail-id-type{font-weight:400;font-style:italic;margin-left:1rem}.incident-default{color:#fff;background-color:#263238}.incident-interface{color:#fff;background-color:#ff4545}.incident-non-interface{color:#fff;background-color:#009e73}"]
            },] }
];
InfoIncidentPanelComponent.ctorParameters = () => [
    { type: Store },
    { type: MapService }
];
InfoIncidentPanelComponent.propDecorators = {
    incident: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mby1pbmNpZGVudC1wYW5lbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlLXVpL3NyYy9saWIvaW5mby1pbmNpZGVudC1wYW5lbC9pbmZvLWluY2lkZW50LXBhbmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUN2RCxXQUFXO0FBQ1gsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFJMUMsUUFBUTtBQUNSLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQU9uRCxNQUFNLE9BQU8sMEJBQTBCO0lBS3RDLFlBQ1MsS0FBaUIsRUFDZixVQUFzQjtRQUR4QixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQ2YsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUpqQywwQkFBcUIsR0FBb0IsRUFBRSxDQUFDO0lBS3pDLENBQUM7SUFFSixRQUFRO1FBQ1AsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELG1CQUFtQjtRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxDQUFDO0lBQ2pILENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYSxFQUFFLEtBQWE7UUFDcEMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNuRyxDQUFDO0lBRUQsZUFBZTtRQUNaLElBQUksYUFBYSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtZQUNuQyxhQUFhLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDO2dCQUNoRSxDQUFDLENBQUMsb0JBQW9CO2dCQUN0QixDQUFDLENBQUMsd0JBQXdCLENBQUM7U0FDOUI7YUFBTTtZQUNMLGFBQWEsR0FBRyxrQkFBa0IsQ0FBQztTQUNwQztRQUNGLE9BQU8sY0FBYyxhQUFhLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsb0JBQW9CO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7WUFDckQsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hILENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDVCxDQUFDOzs7WUEzQ0YsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLGluQkFBbUQ7O2FBRW5EOzs7WUFYZSxLQUFLO1lBS2IsVUFBVTs7O3VCQVNoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkluaXR9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vLyBFeHRlcm5hbFxuaW1wb3J0IHtzZWxlY3QsIFN0b3JlfSBmcm9tIFwiQG5ncngvc3RvcmVcIjtcbi8vIE1vZGVsc1xuaW1wb3J0IHsgQ29kZVRhYmxlc0luZGV4IH0gZnJvbSAnLi9tb2RlbHMvY29kZS10YWJsZXMtaW5kZXgnO1xuaW1wb3J0IHsgV2lsZGZpcmVJbmNpZGVudFJlc291cmNlIH0gZnJvbSAnQHdmMS9pbmNpZGVudHMtcmVzdC1hcGknO1xuLy8gUmVkdXhcbmltcG9ydCB7TWFwU2VydmljZX0gZnJvbSBcIi4uL3NlcnZpY2VzL21hcC5zZXJ2aWNlXCI7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ3dmMS1pbmZvLWluY2lkZW50LXBhbmVsJyxcblx0dGVtcGxhdGVVcmw6ICcuL2luZm8taW5jaWRlbnQtcGFuZWwuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFsnLi9pbmZvLWluY2lkZW50LXBhbmVsLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgSW5mb0luY2lkZW50UGFuZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG5cdEBJbnB1dCgpIGluY2lkZW50OiBXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U7XG5cdGNvZGVMYWJlbExvb2t1cFRhYmxlczogQ29kZVRhYmxlc0luZGV4ID0ge307XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSBzdG9yZTogU3RvcmU8YW55PixcbiAgICBwcml2YXRlIG1hcFNlcnZpY2U6IE1hcFNlcnZpY2Vcblx0KSB7fVxuXG5cdG5nT25Jbml0KCkge1xuXHRcdHRoaXMuZ2V0Q29kZUxvb2t1cFRhYmxlcygpO1xuXHR9XG5cblx0Z2V0Q29kZUxvb2t1cFRhYmxlcygpIHtcblx0XHR0aGlzLnN0b3JlLnBpcGUoc2VsZWN0KCdjb2RlRGF0YScsICdjb2RlSW5kZXgnKSkuc3Vic2NyaWJlKGNvZGVJbmRleCA9PiB0aGlzLmNvZGVMYWJlbExvb2t1cFRhYmxlcyA9IGNvZGVJbmRleCk7XG5cdH1cblxuXHRnZXRMYWJlbCh0YWJsZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHRoaXMuY29kZUxhYmVsTG9va3VwVGFibGVzW3RhYmxlXSAmJiB2YWx1ZSA/IHRoaXMuY29kZUxhYmVsTG9va3VwVGFibGVzW3RhYmxlXVt2YWx1ZV0gOiAnJztcblx0fVxuXG5cdGdldFBhbmVsQ2xhc3NlcygpIHtcbiAgICBsZXQgaW5jaWRlbnRDbGFzcztcbiAgICBpZiAodGhpcy5pbmNpZGVudC5pbmNpZGVudFNpdHVhdGlvbikge1xuICAgICAgaW5jaWRlbnRDbGFzcyA9ICh0aGlzLmluY2lkZW50LmluY2lkZW50U2l0dWF0aW9uLmludGVyZmFjZUZpcmVJbmQpXG4gICAgICAgID8gJ2luY2lkZW50LWludGVyZmFjZSdcbiAgICAgICAgOiAnaW5jaWRlbnQtbm9uLWludGVyZmFjZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluY2lkZW50Q2xhc3MgPSAnaW5jaWRlbnQtZGVmYXVsdCc7XG4gICAgfVxuXHQgIHJldHVybiBgaW5mby1wYW5lbCAke2luY2lkZW50Q2xhc3N9YDtcbiAgfVxuXG4gIGdldEZvcm1hdHRlZExvY2F0aW9uKCkge1xuXHQgIHJldHVybiAodGhpcy5pbmNpZGVudCAmJiB0aGlzLmluY2lkZW50LmluY2lkZW50TG9jYXRpb24pXG4gICAgICA/IHRoaXMubWFwU2VydmljZS5mb3JtYXRDb29yZGluYXRlcyhbdGhpcy5pbmNpZGVudC5pbmNpZGVudExvY2F0aW9uLmxvbmdpdHVkZSwgdGhpcy5pbmNpZGVudC5pbmNpZGVudExvY2F0aW9uLmxhdGl0dWRlXSlcbiAgICAgIDogJyc7XG4gIH1cbn1cbiJdfQ==