import { Injectable, Injector } from "@angular/core";
import { AppConfigService } from "../services/app-config.service";
import { TokenService } from "../services/token.service";
/** Pass untouched request through to the next request handler. */
export class AuthenticationInterceptor {
    constructor(injector) {
        this.injector = injector;
    }
    intercept(req, next) {
        // console.log(this.appConfig.getConfig());
        let processedRequest = req;
        if (this.isUrlSecured(req.url)) {
            this.token = this.injector.get(TokenService);
            this.authToken = this.token.getOauthToken();
            if (this.authToken) {
                processedRequest = req.clone({
                    headers: req.headers.set('Authorization', 'Bearer ' + this.authToken)
                });
            }
        }
        return next.handle(processedRequest);
    }
    isUrlSecured(url) {
        let isSecured = false;
        const config = this.injector.get(AppConfigService).getConfig();
        if (config && config.rest) {
            for (let endpoint in config.rest) {
                if (url.startsWith(config.rest[endpoint])) {
                    isSecured = true;
                    break;
                }
            }
        }
        return isSecured;
    }
}
AuthenticationInterceptor.decorators = [
    { type: Injectable }
];
AuthenticationInterceptor.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24taW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlLXVpL3NyYy9saWIvaW50ZXJjZXB0b3JzL2F1dGhlbnRpY2F0aW9uLWludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBR25ELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUV2RCxrRUFBa0U7QUFFbEUsTUFBTSxPQUFPLHlCQUF5QjtJQUlwQyxZQUFzQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQ3hDLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjtRQUNqRCwyQ0FBMkM7UUFDMUMsSUFBSSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7UUFDM0IsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUU1QyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7b0JBQzNCLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7aUJBQ3RFLENBQUMsQ0FBQzthQUNKO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsWUFBWSxDQUFDLEdBQVc7UUFDdEIsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDL0QsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtZQUN6QixLQUFLLElBQUksUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Z0JBQ2hDLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUU7b0JBQ3pDLFNBQVMsR0FBRyxJQUFJLENBQUM7b0JBQ2pCLE1BQU07aUJBQ1A7YUFDRjtTQUNGO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7O1lBcENGLFVBQVU7OztZQVBTLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIEluamVjdG9yfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0fSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7QXBwQ29uZmlnU2VydmljZX0gZnJvbSBcIi4uL3NlcnZpY2VzL2FwcC1jb25maWcuc2VydmljZVwiO1xuaW1wb3J0IHtUb2tlblNlcnZpY2V9IGZyb20gXCIuLi9zZXJ2aWNlcy90b2tlbi5zZXJ2aWNlXCI7XG5cbi8qKiBQYXNzIHVudG91Y2hlZCByZXF1ZXN0IHRocm91Z2ggdG8gdGhlIG5leHQgcmVxdWVzdCBoYW5kbGVyLiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBwcml2YXRlIHRva2VuO1xuICBwcml2YXRlIGF1dGhUb2tlbjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgIC8vIGNvbnNvbGUubG9nKHRoaXMuYXBwQ29uZmlnLmdldENvbmZpZygpKTtcbiAgICBsZXQgcHJvY2Vzc2VkUmVxdWVzdCA9IHJlcTtcbiAgICBpZiAodGhpcy5pc1VybFNlY3VyZWQocmVxLnVybCkpIHtcbiAgICAgIHRoaXMudG9rZW4gPSB0aGlzLmluamVjdG9yLmdldChUb2tlblNlcnZpY2UpO1xuICAgICAgdGhpcy5hdXRoVG9rZW4gPSB0aGlzLnRva2VuLmdldE9hdXRoVG9rZW4oKTtcblxuICAgICAgaWYgKHRoaXMuYXV0aFRva2VuKSB7XG4gICAgICAgIHByb2Nlc3NlZFJlcXVlc3QgPSByZXEuY2xvbmUoe1xuICAgICAgICAgIGhlYWRlcnM6IHJlcS5oZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIHRoaXMuYXV0aFRva2VuKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHByb2Nlc3NlZFJlcXVlc3QpO1xuICB9XG5cbiAgaXNVcmxTZWN1cmVkKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IGlzU2VjdXJlZCA9IGZhbHNlO1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuaW5qZWN0b3IuZ2V0KEFwcENvbmZpZ1NlcnZpY2UpLmdldENvbmZpZygpO1xuICAgIGlmIChjb25maWcgJiYgY29uZmlnLnJlc3QpIHtcbiAgICAgIGZvciAobGV0IGVuZHBvaW50IGluIGNvbmZpZy5yZXN0KSB7XG4gICAgICAgIGlmICh1cmwuc3RhcnRzV2l0aChjb25maWcucmVzdFtlbmRwb2ludF0pKSB7XG4gICAgICAgICAgaXNTZWN1cmVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXNTZWN1cmVkO1xuICB9XG59XG4iXX0=