import { Component, EventEmitter, Input, Output } from "@angular/core";
// Models
import { AppConfigService } from "../services/app-config.service";
import { MapService } from "../services/map.service";
export class LocationToolbarComponent {
    // selectedLocation = new FormControl('', this.geometryValidator(this.mapService));
    constructor(config, mapService) {
        this.config = config;
        this.mapService = mapService;
        this.locationSelect = new EventEmitter();
        this.TOOLTIP_DELAY = 500;
        this.MAP_INSTANCE = 'map';
    }
    set location(location) {
        if (location) {
            // this.selectedLocation.setValue(this.mapService.formatCoordinates(location));
            this.locationSelect.emit(location);
        }
    }
    geometryValidator(mapService) {
        return (control) => {
            return null;
            // if (!control.value) {
            //   return null;
            // }
            // const coordinates = mapService.parseCoordinates(control.value);
            // if (!coordinates) {
            //  return { invalidGeom: 'The geometry is invalid' };
            // } else {
            //   this.mapService.setAnchor(this.MAP_INSTANCE, coordinates);
            //   // const formattedCoordinates = mapService.formatCoordinates(coordinates);
            //   // if (formattedCoordinates !== control.value) {
            //   //   control.patchValue(formattedCoordinates, { emitEvent: false })
            //   // }
            // }
            // return null;
        };
    }
    ngOnInit() {
    }
    ngOnDestroy() {
    }
    zoomToSelectedLocation() {
        // this.mapService.zoomToPlaceNameSearchLocation(this.MAP_INSTANCE);
    }
    setAnchorFromMap() {
        // const location = this.mapService.setAnchorFromMap(this.MAP_INSTANCE);
        // if (location) {
        //     this.selectedLocation.setValue(this.mapService.formatCoordinates(location));
        //     this.locationSelect.emit(location);
        // } else if (this.selectedLocation.value) {
        //     this.locationSelect.emit(this.mapService.parseCoordinates(this.selectedLocation.value));
        // } else {
        //     this.locationSelect.emit(null);
        // }
    }
    clearSelectedLocation() {
        // this.selectedLocation.setValue('');
        // this.locationSelect.emit(null);
        // this.mapService.setAnchor(this.MAP_INSTANCE, null);
    }
}
LocationToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf1-location-toolbar',
                template: "<div class=\"location-toolbar\">\n    <mat-form-field aria-label=\"Selected Location\" class=\"selected-location\">\n        <!-- <input matInput placeholder=\"Selected location (lat, long)\" [formControl]=\"selectedLocation\">\n        <mat-error *ngIf=\"selectedLocation.hasError('required')\">Coordinates are required</mat-error>\n        <mat-error *ngIf=\"selectedLocation.hasError('invalidGeom')\">Coordinates are invalid</mat-error> -->\n    </mat-form-field>\n    <div class=\"location-toolbar-buttons\">\n        <button class=\"location-section-header-button\" mat-button matTooltip=\"Zoom To Selected Location\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" aria-label=\"Zoom To Selected Location\" (click)=\"zoomToSelectedLocation()\">\n            <mat-icon>place</mat-icon>\n        </button>\n        <button class=\"location-section-header-button\" mat-button matTooltip=\"Set Location From Map\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" aria-label=\"Set Location From Map\" (click)=\"setAnchorFromMap()\">\n            <mat-icon>map</mat-icon>\n        </button>\n        <button class=\"location-section-header-button\" mat-button matTooltip=\"Clear Search Fields\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" aria-label=\"Clear Point ID Search Fields\" (click)=\"clearSelectedLocation()\">\n            <mat-icon>clear</mat-icon>\n        </button>\n    </div>\n</div>\n"
            },] }
];
LocationToolbarComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: MapService }
];
LocationToolbarComponent.propDecorators = {
    location: [{ type: Input }],
    locationSelect: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb24tdG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlLXVpL3NyYy9saWIvbG9jYXRpb24vbG9jYXRpb24tdG9vbGJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEYsU0FBUztBQUNULE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQU9uRCxNQUFNLE9BQU8sd0JBQXdCO0lBZWpDLG1GQUFtRjtJQUVuRixZQUNZLE1BQXdCLEVBQ3hCLFVBQXNCO1FBRHRCLFdBQU0sR0FBTixNQUFNLENBQWtCO1FBQ3hCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFUbEMsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUUvQyxrQkFBYSxHQUFHLEdBQUcsQ0FBQztRQUNwQixpQkFBWSxHQUFHLEtBQUssQ0FBQztJQVE1QixDQUFDO0lBcEJELElBQ0ksUUFBUSxDQUFDLFFBQTBCO1FBQ3JDLElBQUksUUFBUSxFQUFFO1lBQ1osK0VBQStFO1lBQy9FLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQWdCRCxpQkFBaUIsQ0FBQyxVQUFVO1FBQzFCLE9BQU8sQ0FBQyxPQUF3QixFQUFpQyxFQUFFO1lBQy9ELE9BQU8sSUFBSSxDQUFBO1lBQ2Isd0JBQXdCO1lBQ3hCLGlCQUFpQjtZQUNqQixJQUFJO1lBQ0osa0VBQWtFO1lBQ2xFLHNCQUFzQjtZQUN0QixzREFBc0Q7WUFDdEQsV0FBVztZQUNYLCtEQUErRDtZQUMvRCwrRUFBK0U7WUFDL0UscURBQXFEO1lBQ3JELHdFQUF3RTtZQUN4RSxTQUFTO1lBQ1QsSUFBSTtZQUNKLGVBQWU7UUFDakIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFFBQVE7SUFDUixDQUFDO0lBRUQsV0FBVztJQUNYLENBQUM7SUFFRCxzQkFBc0I7UUFDbEIsb0VBQW9FO0lBQ3hFLENBQUM7SUFFRCxnQkFBZ0I7UUFDWix3RUFBd0U7UUFDeEUsa0JBQWtCO1FBQ2xCLG1GQUFtRjtRQUNuRiwwQ0FBMEM7UUFDMUMsNENBQTRDO1FBQzVDLCtGQUErRjtRQUMvRixXQUFXO1FBQ1gsc0NBQXNDO1FBQ3RDLElBQUk7SUFDUixDQUFDO0lBRUQscUJBQXFCO1FBQ2pCLHNDQUFzQztRQUN0QyxrQ0FBa0M7UUFDbEMsc0RBQXNEO0lBQzFELENBQUM7OztZQXpFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjtnQkFDaEMsODJDQUE4QzthQUNqRDs7O1lBUE8sZ0JBQWdCO1lBQ2hCLFVBQVU7Ozt1QkFRYixLQUFLOzZCQVFMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8vIE1vZGVsc1xuaW1wb3J0IHtBcHBDb25maWdTZXJ2aWNlfSBmcm9tIFwiLi4vc2VydmljZXMvYXBwLWNvbmZpZy5zZXJ2aWNlXCI7XG5pbXBvcnQge01hcFNlcnZpY2V9IGZyb20gXCIuLi9zZXJ2aWNlcy9tYXAuc2VydmljZVwiO1xuaW1wb3J0IHtBYnN0cmFjdENvbnRyb2wsIEZvcm1Db250cm9sLCBWYWxpZGF0b3JGbn0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnd2YxLWxvY2F0aW9uLXRvb2xiYXInLFxuICAgIHRlbXBsYXRlVXJsOiAnbG9jYXRpb24tdG9vbGJhci5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIExvY2F0aW9uVG9vbGJhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKVxuICAgIHNldCBsb2NhdGlvbihsb2NhdGlvbjogW251bWJlciwgbnVtYmVyXSkge1xuICAgICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICAgIC8vIHRoaXMuc2VsZWN0ZWRMb2NhdGlvbi5zZXRWYWx1ZSh0aGlzLm1hcFNlcnZpY2UuZm9ybWF0Q29vcmRpbmF0ZXMobG9jYXRpb24pKTtcbiAgICAgICAgdGhpcy5sb2NhdGlvblNlbGVjdC5lbWl0KGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAT3V0cHV0KClcbiAgICBsb2NhdGlvblNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8W251bWJlciwgbnVtYmVyXT4oKTtcblxuICAgIHB1YmxpYyBUT09MVElQX0RFTEFZID0gNTAwO1xuICAgIHB1YmxpYyBNQVBfSU5TVEFOQ0UgPSAnbWFwJztcblxuICAgIC8vIHNlbGVjdGVkTG9jYXRpb24gPSBuZXcgRm9ybUNvbnRyb2woJycsIHRoaXMuZ2VvbWV0cnlWYWxpZGF0b3IodGhpcy5tYXBTZXJ2aWNlKSk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBjb25maWc6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbWFwU2VydmljZTogTWFwU2VydmljZSxcbiAgICApIHtcbiAgICB9XG5cbiAgICBnZW9tZXRyeVZhbGlkYXRvcihtYXBTZXJ2aWNlKTogVmFsaWRhdG9yRm4ge1xuICAgICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgbnVsbCA9PiB7XG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgLy8gaWYgKCFjb250cm9sLnZhbHVlKSB7XG4gICAgICAgIC8vICAgcmV0dXJuIG51bGw7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gY29uc3QgY29vcmRpbmF0ZXMgPSBtYXBTZXJ2aWNlLnBhcnNlQ29vcmRpbmF0ZXMoY29udHJvbC52YWx1ZSk7XG4gICAgICAgIC8vIGlmICghY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgLy8gIHJldHVybiB7IGludmFsaWRHZW9tOiAnVGhlIGdlb21ldHJ5IGlzIGludmFsaWQnIH07XG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIC8vICAgdGhpcy5tYXBTZXJ2aWNlLnNldEFuY2hvcih0aGlzLk1BUF9JTlNUQU5DRSwgY29vcmRpbmF0ZXMpO1xuICAgICAgICAvLyAgIC8vIGNvbnN0IGZvcm1hdHRlZENvb3JkaW5hdGVzID0gbWFwU2VydmljZS5mb3JtYXRDb29yZGluYXRlcyhjb29yZGluYXRlcyk7XG4gICAgICAgIC8vICAgLy8gaWYgKGZvcm1hdHRlZENvb3JkaW5hdGVzICE9PSBjb250cm9sLnZhbHVlKSB7XG4gICAgICAgIC8vICAgLy8gICBjb250cm9sLnBhdGNoVmFsdWUoZm9ybWF0dGVkQ29vcmRpbmF0ZXMsIHsgZW1pdEV2ZW50OiBmYWxzZSB9KVxuICAgICAgICAvLyAgIC8vIH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvLyByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgfVxuXG4gICAgem9vbVRvU2VsZWN0ZWRMb2NhdGlvbigpIHtcbiAgICAgICAgLy8gdGhpcy5tYXBTZXJ2aWNlLnpvb21Ub1BsYWNlTmFtZVNlYXJjaExvY2F0aW9uKHRoaXMuTUFQX0lOU1RBTkNFKTtcbiAgICB9XG5cbiAgICBzZXRBbmNob3JGcm9tTWFwKCkge1xuICAgICAgICAvLyBjb25zdCBsb2NhdGlvbiA9IHRoaXMubWFwU2VydmljZS5zZXRBbmNob3JGcm9tTWFwKHRoaXMuTUFQX0lOU1RBTkNFKTtcbiAgICAgICAgLy8gaWYgKGxvY2F0aW9uKSB7XG4gICAgICAgIC8vICAgICB0aGlzLnNlbGVjdGVkTG9jYXRpb24uc2V0VmFsdWUodGhpcy5tYXBTZXJ2aWNlLmZvcm1hdENvb3JkaW5hdGVzKGxvY2F0aW9uKSk7XG4gICAgICAgIC8vICAgICB0aGlzLmxvY2F0aW9uU2VsZWN0LmVtaXQobG9jYXRpb24pO1xuICAgICAgICAvLyB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRMb2NhdGlvbi52YWx1ZSkge1xuICAgICAgICAvLyAgICAgdGhpcy5sb2NhdGlvblNlbGVjdC5lbWl0KHRoaXMubWFwU2VydmljZS5wYXJzZUNvb3JkaW5hdGVzKHRoaXMuc2VsZWN0ZWRMb2NhdGlvbi52YWx1ZSkpO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgdGhpcy5sb2NhdGlvblNlbGVjdC5lbWl0KG51bGwpO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgY2xlYXJTZWxlY3RlZExvY2F0aW9uKCkge1xuICAgICAgICAvLyB0aGlzLnNlbGVjdGVkTG9jYXRpb24uc2V0VmFsdWUoJycpO1xuICAgICAgICAvLyB0aGlzLmxvY2F0aW9uU2VsZWN0LmVtaXQobnVsbCk7XG4gICAgICAgIC8vIHRoaXMubWFwU2VydmljZS5zZXRBbmNob3IodGhpcy5NQVBfSU5TVEFOQ0UsIG51bGwpO1xuICAgIH1cbn1cbiJdfQ==