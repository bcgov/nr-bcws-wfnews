import { Component, ContentChild, Input } from "@angular/core";
import { FormControl } from "@angular/forms";
// Components
import { SortComponent } from "../sort/sort.component";
// External
import { select, Store } from "@ngrx/store";
import { distinctUntilChanged } from "rxjs/operators";
import * as SearchActions from "../../store/actions";
import { IncidentType } from "../../../application-icon/application-icon.model";
import { selectCurrentSearchParam } from "../../../utils";
export class SearchBarComponent {
    constructor(store) {
        this.store = store;
        this.TOOLTIP_DELAY = 500;
        this.count = 0;
        this.showSortButton = false;
        this.searchControl = new FormControl();
        this.clearFilterIconType = IncidentType.NOT_SET;
        this.isResetSearch = false;
    }
    set sortModal(modal) {
        this.showSortButton = modal ? true : false;
    }
    ngOnInit() {
        this.resetSearch();
        this.listenSearchChanges();
    }
    resetSearch() {
        this.isResetSearch = true;
        this.store.dispatch(new SearchActions.ResetSearchQueryAction(this.componentId));
    }
    listenSearchChanges() {
        this.store.pipe(select(selectCurrentSearchParam(this.componentId, 'query'))).subscribe((searchTerm) => {
            // console.log("this.searchControl.setValue change: ", searchTerm);
            // console.log("this.searchControl.setValue isResetSearch: " + this.isResetSearch);
            if (this.isResetSearch && this.searchControl.value == searchTerm) {
                // console.log("isReset true and same value so won't trigger searchControl observable.  reset isReset to false;")
                this.isResetSearch = false;
            }
            this.searchControl.setValue(searchTerm, { emitEvent: true });
        });
        this.searchControl.valueChanges.pipe(distinctUntilChanged()).subscribe((searchTerm) => {
            // console.log("this.searchControl.valueChanges isResetSearch: " + this.isResetSearch);
            // console.log("searchControl value change: ", searchTerm);
            if (this.isResetSearch) {
                // console.log("this.searchControl.valueChanges reset to false");
                this.isResetSearch = false;
            }
            else {
                // console.log("this.searchControl.valueChanges update search");
                this.updateSearch(searchTerm);
            }
        });
    }
    refreshSearch() {
        this.store.dispatch(new SearchActions.RefreshSearchAction(this.componentId));
    }
    updateSearch(searchTerm) {
        this.store.dispatch(new SearchActions.UpdateSearchQueryAction(searchTerm, this.componentId));
    }
    toggleSortModal() {
        this.store.dispatch(new SearchActions.ToggleSortModalAction(this.componentId));
    }
    clearFilters() {
        this.store.dispatch(new SearchActions.ClearAllFiltersAction(this.componentId));
    }
}
SearchBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf1-search-bar',
                template: "<div class=\"side-panel-toolbar search\">\n\t<div *ngIf=\"showSortButton\" class=\"search__sort\" matTooltip=\"Sort\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\" (click)=\"toggleSortModal()\" (keydown)=\"toggleSortModal()\">\n\t\t<mat-icon class=\"search__sort__icon\">sort</mat-icon>\n\t</div>\n\t<ng-content select=\"wf1-sort-modal\"></ng-content>\n\t<div class=\"search__count\">\n\t\t<span class=\"search__count__number\">{{count}}</span>\n\t</div>\n\t<div class=\"search__input\">\n\t\t<mat-form-field aria-label=\"Search...\" class=\"search__input__control\">\n\t\t\t<input matInput placeholder=\"Search...\" [formControl]=\"searchControl\">\n\t\t</mat-form-field>\n\t</div>\n\t<div class=\"search__cancel\" (click)=\"resetSearch()\" (keydown)=\"resetSearch()\" matTooltip=\"Clear Search\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\">\n\t\t<mat-icon class=\"search__cancel__icon\">close</mat-icon>\n\t</div>\n\t<div class=\"search__refresh\" (click)=\"refreshSearch()\" (keydown)=\"refreshSearch()\" matTooltip=\"Refresh Search\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\">\n\t\t<mat-icon class=\"search__refresh__icon\">refresh</mat-icon>\n\t</div>\n\t<div class=\"search__clear-filters\" (click)=\"clearFilters()\" (keydown)=\"clearFilters()\" matTooltip=\"Clear Filters\" [matTooltipShowDelay]=\"TOOLTIP_DELAY\">\n\t\t<wf1-application-icon iconType=\"filter-cancel\" [colourCode]=\"clearFilterIconType\"></wf1-application-icon>\n\t</div>\n</div>\n"
            },] }
];
SearchBarComponent.ctorParameters = () => [
    { type: Store }
];
SearchBarComponent.propDecorators = {
    count: [{ type: Input }],
    componentId: [{ type: Input }],
    sortModal: [{ type: ContentChild, args: [SortComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlLXVpL3NyYy9saWIvc2VhcmNoL2NvbXBvbmVudHMvc2VhcmNoLWJhci9zZWFyY2gtYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLGFBQWE7QUFDYixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsV0FBVztBQUNYLE9BQU8sRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzFDLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBR3BELE9BQU8sS0FBSyxhQUFhLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGtEQUFrRCxDQUFDO0FBQzlFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBT3hELE1BQU0sT0FBTyxrQkFBa0I7SUFlM0IsWUFDWSxLQUF5QjtRQUF6QixVQUFLLEdBQUwsS0FBSyxDQUFvQjtRQWY5QixrQkFBYSxHQUFHLEdBQUcsQ0FBQztRQUVsQixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBR25CLG1CQUFjLEdBQVksS0FBSyxDQUFDO1FBS2hDLGtCQUFhLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7UUFDL0Msd0JBQW1CLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUMzQyxrQkFBYSxHQUFZLEtBQUssQ0FBQztJQUk1QixDQUFDO0lBVkosSUFBaUMsU0FBUyxDQUFDLEtBQW9CO1FBQzNELElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMvQyxDQUFDO0lBVUQsUUFBUTtRQUNKLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksYUFBYSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCxtQkFBbUI7UUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUVsRixDQUFDLFVBQWtCLEVBQUUsRUFBRTtZQUNuQixtRUFBbUU7WUFDbkUsbUZBQW1GO1lBQ25GLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssSUFBSSxVQUFVLEVBQUU7Z0JBQzlELGlIQUFpSDtnQkFDakgsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7YUFDOUI7WUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRSxDQUFDLENBQ0osQ0FBQztRQUVGLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUNsRSxDQUFDLFVBQWtCLEVBQUUsRUFBRTtZQUNuQix1RkFBdUY7WUFDdkYsMkRBQTJEO1lBQzNELElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDcEIsaUVBQWlFO2dCQUNqRSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQzthQUM5QjtpQkFBTTtnQkFDSCxnRUFBZ0U7Z0JBQ2hFLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDakM7UUFDTCxDQUFDLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxhQUFhO1FBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxhQUFhLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVELFlBQVksQ0FBQyxVQUFrQjtRQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELGVBQWU7UUFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQsWUFBWTtRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksYUFBYSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ25GLENBQUM7OztZQTdFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsaTdDQUEwQzthQUU3Qzs7O1lBWmUsS0FBSzs7O29CQWdCaEIsS0FBSzswQkFDTCxLQUFLO3dCQUdMLFlBQVksU0FBQyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgSW5wdXQsIE9uSW5pdH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7Rm9ybUNvbnRyb2x9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHtTb3J0Q29tcG9uZW50fSBmcm9tIFwiLi4vc29ydC9zb3J0LmNvbXBvbmVudFwiO1xuLy8gRXh0ZXJuYWxcbmltcG9ydCB7c2VsZWN0LCBTdG9yZX0gZnJvbSBcIkBuZ3J4L3N0b3JlXCI7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcbi8vIFJlZHV4XG5pbXBvcnQge1NlYXJjaFN0YXRlfSBmcm9tIFwiLi4vLi4vc3RvcmUvc3RhdGVcIjtcbmltcG9ydCAqIGFzIFNlYXJjaEFjdGlvbnMgZnJvbSBcIi4uLy4uL3N0b3JlL2FjdGlvbnNcIjtcbmltcG9ydCB7SW5jaWRlbnRUeXBlfSBmcm9tIFwiLi4vLi4vLi4vYXBwbGljYXRpb24taWNvbi9hcHBsaWNhdGlvbi1pY29uLm1vZGVsXCI7XG5pbXBvcnQge3NlbGVjdEN1cnJlbnRTZWFyY2hQYXJhbX0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnd2YxLXNlYXJjaC1iYXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zZWFyY2gtYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaEJhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHVibGljIFRPT0xUSVBfREVMQVkgPSA1MDA7XG5cbiAgICBASW5wdXQoKSBjb3VudCA9IDA7XG4gICAgQElucHV0KCkgY29tcG9uZW50SWQ6IHN0cmluZztcblxuICAgIHNob3dTb3J0QnV0dG9uOiBib29sZWFuID0gZmFsc2U7XG4gICAgQENvbnRlbnRDaGlsZChTb3J0Q29tcG9uZW50KSBzZXQgc29ydE1vZGFsKG1vZGFsOiBTb3J0Q29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuc2hvd1NvcnRCdXR0b24gPSBtb2RhbCA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBzZWFyY2hDb250cm9sOiBGb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgpO1xuICAgIGNsZWFyRmlsdGVySWNvblR5cGUgPSBJbmNpZGVudFR5cGUuTk9UX1NFVDtcbiAgICBpc1Jlc2V0U2VhcmNoOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBzdG9yZTogU3RvcmU8U2VhcmNoU3RhdGU+XG4gICAgKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMucmVzZXRTZWFyY2goKTtcbiAgICAgICAgdGhpcy5saXN0ZW5TZWFyY2hDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgcmVzZXRTZWFyY2goKSB7XG4gICAgICAgIHRoaXMuaXNSZXNldFNlYXJjaCA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2gobmV3IFNlYXJjaEFjdGlvbnMuUmVzZXRTZWFyY2hRdWVyeUFjdGlvbih0aGlzLmNvbXBvbmVudElkKSk7XG4gICAgfVxuXG4gICAgbGlzdGVuU2VhcmNoQ2hhbmdlcygpIHtcbiAgICAgICAgdGhpcy5zdG9yZS5waXBlKHNlbGVjdChzZWxlY3RDdXJyZW50U2VhcmNoUGFyYW0odGhpcy5jb21wb25lbnRJZCwgJ3F1ZXJ5JykpKS5zdWJzY3JpYmUoXG5cbiAgICAgICAgICAgIChzZWFyY2hUZXJtOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInRoaXMuc2VhcmNoQ29udHJvbC5zZXRWYWx1ZSBjaGFuZ2U6IFwiLCBzZWFyY2hUZXJtKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInRoaXMuc2VhcmNoQ29udHJvbC5zZXRWYWx1ZSBpc1Jlc2V0U2VhcmNoOiBcIiArIHRoaXMuaXNSZXNldFNlYXJjaCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSZXNldFNlYXJjaCAmJiB0aGlzLnNlYXJjaENvbnRyb2wudmFsdWUgPT0gc2VhcmNoVGVybSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImlzUmVzZXQgdHJ1ZSBhbmQgc2FtZSB2YWx1ZSBzbyB3b24ndCB0cmlnZ2VyIHNlYXJjaENvbnRyb2wgb2JzZXJ2YWJsZS4gIHJlc2V0IGlzUmVzZXQgdG8gZmFsc2U7XCIpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZXNldFNlYXJjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaENvbnRyb2wuc2V0VmFsdWUoc2VhcmNoVGVybSwgeyBlbWl0RXZlbnQ6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5zZWFyY2hDb250cm9sLnZhbHVlQ2hhbmdlcy5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChzZWFyY2hUZXJtOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInRoaXMuc2VhcmNoQ29udHJvbC52YWx1ZUNoYW5nZXMgaXNSZXNldFNlYXJjaDogXCIgKyB0aGlzLmlzUmVzZXRTZWFyY2gpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic2VhcmNoQ29udHJvbCB2YWx1ZSBjaGFuZ2U6IFwiLCBzZWFyY2hUZXJtKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1Jlc2V0U2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidGhpcy5zZWFyY2hDb250cm9sLnZhbHVlQ2hhbmdlcyByZXNldCB0byBmYWxzZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1Jlc2V0U2VhcmNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ0aGlzLnNlYXJjaENvbnRyb2wudmFsdWVDaGFuZ2VzIHVwZGF0ZSBzZWFyY2hcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2VhcmNoKHNlYXJjaFRlcm0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZWZyZXNoU2VhcmNoKCkge1xuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKG5ldyBTZWFyY2hBY3Rpb25zLlJlZnJlc2hTZWFyY2hBY3Rpb24odGhpcy5jb21wb25lbnRJZCkpO1xuICAgIH1cblxuICAgIHVwZGF0ZVNlYXJjaChzZWFyY2hUZXJtOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChuZXcgU2VhcmNoQWN0aW9ucy5VcGRhdGVTZWFyY2hRdWVyeUFjdGlvbihzZWFyY2hUZXJtLCB0aGlzLmNvbXBvbmVudElkKSk7XG4gICAgfVxuXG4gICAgdG9nZ2xlU29ydE1vZGFsKCkge1xuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKG5ldyBTZWFyY2hBY3Rpb25zLlRvZ2dsZVNvcnRNb2RhbEFjdGlvbih0aGlzLmNvbXBvbmVudElkKSk7XG4gICAgfVxuXG4gICAgY2xlYXJGaWx0ZXJzKCkge1xuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKG5ldyBTZWFyY2hBY3Rpb25zLkNsZWFyQWxsRmlsdGVyc0FjdGlvbih0aGlzLmNvbXBvbmVudElkKSk7XG4gICAgfVxufVxuIl19