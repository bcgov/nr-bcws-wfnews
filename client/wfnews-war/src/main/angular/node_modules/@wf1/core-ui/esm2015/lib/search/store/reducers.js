import { __rest } from "tslib";
import * as Search from "./actions";
export function searchReducer(state, action) {
    switch (action.type) {
        case Search.SearchActionTypes.UPDATE_SEARCH_QUERY: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const query = action.query;
            return Object.assign({}, state, { query: query });
        }
        case Search.SearchActionTypes.RESET_SEARCH_QUERY: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            return Object.assign({}, state, { query: null });
        }
        case Search.SearchActionTypes.UPDATE_SORT: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const { param, direction } = action;
            return Object.assign({}, state, { sortParam: param, sortDirection: direction });
        }
        case Search.SearchActionTypes.TOGGLE_SORT_MODAL: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            return Object.assign({}, state, { sortModalVisible: !state.sortModalVisible });
        }
        case Search.SearchActionTypes.UPDATE_ACTIVE_FILTERS: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const activeFilters = action.filters;
            return Object.assign({}, state, { filters: activeFilters });
        }
        case Search.SearchActionTypes.UPDATE_HIDDEN_FILTERS: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const hiddenFilters = action.filters;
            return Object.assign({}, state, { hiddenFilters: hiddenFilters });
        }
        case Search.SearchActionTypes.CLEAR_FILTER: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            const filterName = action.filterToRemove;
            const _a = state.filters, _b = filterName, clearedFilter = _a[_b], remainingFilters = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
            return Object.assign({}, state, { filters: remainingFilters });
        }
        case Search.SearchActionTypes.CLEAR_ALL_FILTERS: {
            if (!isMyComponent(state, action.componentId)) {
                return state;
            }
            return Object.assign({}, state, { filters: {} });
        }
        default: {
            return state;
        }
    }
}
const isMyComponent = (state, componentId) => {
    if (state && state.componentId && componentId) {
        if (state.componentId === componentId) {
            return true;
        }
    }
    return false;
};
const ɵ0 = isMyComponent;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlLXVpL3NyYy9saWIvc2VhcmNoL3N0b3JlL3JlZHVjZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUssTUFBTSxNQUFNLFdBQVcsQ0FBQztBQUdwQyxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQWtCLEVBQUUsTUFBNEI7SUFDNUUsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssTUFBTSxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUM3QyxPQUFPLEtBQUssQ0FBQzthQUNkO1lBRUQsTUFBTSxLQUFLLEdBQW9DLE1BQU8sQ0FBQyxLQUFLLENBQUM7WUFDN0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNuRDtRQUVELEtBQUssTUFBTSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUM3QyxPQUFPLEtBQUssQ0FBQzthQUNkO1lBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNsRDtRQUVELEtBQUssTUFBTSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDN0MsT0FBTyxLQUFLLENBQUM7YUFDZDtZ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QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTZWFyY2ggZnJvbSBcIi4vYWN0aW9uc1wiO1xuaW1wb3J0IHtTZWFyY2hTdGF0ZX0gZnJvbSBcIi4vc3RhdGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaFJlZHVjZXIoc3RhdGU6IFNlYXJjaFN0YXRlLCBhY3Rpb246IFNlYXJjaC5TZWFyY2hBY3Rpb25zKTogU2VhcmNoU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBTZWFyY2guU2VhcmNoQWN0aW9uVHlwZXMuVVBEQVRFX1NFQVJDSF9RVUVSWToge1xuICAgICAgaWYgKCFpc015Q29tcG9uZW50KHN0YXRlLCBhY3Rpb24uY29tcG9uZW50SWQpKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcXVlcnkgPSAoPFNlYXJjaC5VcGRhdGVTZWFyY2hRdWVyeUFjdGlvbj5hY3Rpb24pLnF1ZXJ5O1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IHF1ZXJ5OiBxdWVyeSB9KTtcbiAgICB9XG5cbiAgICBjYXNlIFNlYXJjaC5TZWFyY2hBY3Rpb25UeXBlcy5SRVNFVF9TRUFSQ0hfUVVFUlk6IHtcbiAgICAgIGlmICghaXNNeUNvbXBvbmVudChzdGF0ZSwgYWN0aW9uLmNvbXBvbmVudElkKSkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgcXVlcnk6IG51bGwgfSk7XG4gICAgfVxuXG4gICAgY2FzZSBTZWFyY2guU2VhcmNoQWN0aW9uVHlwZXMuVVBEQVRFX1NPUlQ6IHtcbiAgICAgIGlmICghaXNNeUNvbXBvbmVudChzdGF0ZSwgYWN0aW9uLmNvbXBvbmVudElkKSkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG4gICAgICBjb25zdCB7IHBhcmFtLCBkaXJlY3Rpb24gfSA9ICg8U2VhcmNoLlVwZGF0ZVNvcnRBY3Rpb24+YWN0aW9uKTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBzb3J0UGFyYW06IHBhcmFtLCBzb3J0RGlyZWN0aW9uOiBkaXJlY3Rpb24gfSk7XG4gICAgfVxuXG4gICAgY2FzZSBTZWFyY2guU2VhcmNoQWN0aW9uVHlwZXMuVE9HR0xFX1NPUlRfTU9EQUw6IHtcbiAgICAgIGlmICghaXNNeUNvbXBvbmVudChzdGF0ZSwgYWN0aW9uLmNvbXBvbmVudElkKSkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgc29ydE1vZGFsVmlzaWJsZTogIXN0YXRlLnNvcnRNb2RhbFZpc2libGUgfSk7XG4gICAgfVxuXG4gICAgY2FzZSBTZWFyY2guU2VhcmNoQWN0aW9uVHlwZXMuVVBEQVRFX0FDVElWRV9GSUxURVJTOiB7XG4gICAgICBpZiAoIWlzTXlDb21wb25lbnQoc3RhdGUsIGFjdGlvbi5jb21wb25lbnRJZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgICAgY29uc3QgYWN0aXZlRmlsdGVycyA9ICg8U2VhcmNoLlVwZGF0ZUFjdGl2ZUZpbHRlcnNBY3Rpb24+YWN0aW9uKS5maWx0ZXJzO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IGZpbHRlcnM6IGFjdGl2ZUZpbHRlcnMgfSk7XG4gICAgfVxuXG4gICAgY2FzZSBTZWFyY2guU2VhcmNoQWN0aW9uVHlwZXMuVVBEQVRFX0hJRERFTl9GSUxURVJTOiB7XG4gICAgICBpZiAoIWlzTXlDb21wb25lbnQoc3RhdGUsIGFjdGlvbi5jb21wb25lbnRJZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgICAgY29uc3QgaGlkZGVuRmlsdGVycyA9ICg8U2VhcmNoLlVwZGF0ZUhpZGRlbkZpbHRlcnNBY3Rpb24+YWN0aW9uKS5maWx0ZXJzO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IGhpZGRlbkZpbHRlcnM6IGhpZGRlbkZpbHRlcnMgfSk7XG4gICAgfVxuXG4gICAgY2FzZSBTZWFyY2guU2VhcmNoQWN0aW9uVHlwZXMuQ0xFQVJfRklMVEVSOiB7XG4gICAgICBpZiAoIWlzTXlDb21wb25lbnQoc3RhdGUsIGFjdGlvbi5jb21wb25lbnRJZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgICAgY29uc3QgZmlsdGVyTmFtZSA9ICg8U2VhcmNoLkNsZWFyRmlsdGVyQWN0aW9uPmFjdGlvbikuZmlsdGVyVG9SZW1vdmU7XG4gICAgICBjb25zdCB7IFtmaWx0ZXJOYW1lXTogY2xlYXJlZEZpbHRlciwgLi4ucmVtYWluaW5nRmlsdGVycyB9ID0gc3RhdGUuZmlsdGVycztcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBmaWx0ZXJzOiByZW1haW5pbmdGaWx0ZXJzIH0pO1xuICAgIH1cblxuICAgIGNhc2UgU2VhcmNoLlNlYXJjaEFjdGlvblR5cGVzLkNMRUFSX0FMTF9GSUxURVJTOiB7XG4gICAgICBpZiAoIWlzTXlDb21wb25lbnQoc3RhdGUsIGFjdGlvbi5jb21wb25lbnRJZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IGZpbHRlcnM6IHt9IH0pO1xuICAgIH1cblxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgfVxufVxuXG5jb25zdCBpc015Q29tcG9uZW50ID0gKHN0YXRlOiBhbnksIGNvbXBvbmVudElkOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgaWYgKHN0YXRlICYmIHN0YXRlLmNvbXBvbmVudElkICYmIGNvbXBvbmVudElkKSB7XG4gICAgaWYgKHN0YXRlLmNvbXBvbmVudElkID09PSBjb21wb25lbnRJZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG4iXX0=