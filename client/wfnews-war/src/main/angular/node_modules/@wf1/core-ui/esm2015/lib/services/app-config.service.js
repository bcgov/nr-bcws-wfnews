import { Injectable } from "@angular/core";
import { HttpBackend, HttpClient } from "@angular/common/http";
import { AsyncSubject } from "rxjs";
import { LibraryConfig } from "../config/library-config";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../config/library-config";
export class AppConfigService {
    constructor(httpHandler, libConfig) {
        this.httpHandler = httpHandler;
        this.libConfig = libConfig;
        this.config = new AsyncSubject();
        this.configEmitter = this.config.asObservable();
        // console.log("initing app config service");
    }
    loadAppConfig() {
        // console.log("loading app config");
        let http = new HttpClient(this.httpHandler);
        return http.get(this.libConfig.configurationPath).toPromise().then((data) => {
            this.appConfig = data;
            this.config.next(this.appConfig);
            this.config.complete();
        });
    }
    getConfig() {
        return this.appConfig;
    }
}
AppConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AppConfigService_Factory() { return new AppConfigService(i0.ɵɵinject(i1.HttpBackend), i0.ɵɵinject(i2.LibraryConfig)); }, token: AppConfigService, providedIn: "root" });
AppConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AppConfigService.ctorParameters = () => [
    { type: HttpBackend },
    { type: LibraryConfig }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS11aS9zcmMvbGliL3NlcnZpY2VzL2FwcC1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxXQUFXLEVBQUUsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDN0QsT0FBTyxFQUFDLFlBQVksRUFBYSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFNdkQsTUFBTSxPQUFPLGdCQUFnQjtJQUszQixZQUFvQixXQUF3QixFQUFVLFNBQXdCO1FBQTFELGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBZTtRQUh0RSxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQXFCLENBQUM7UUFDaEQsa0JBQWEsR0FBa0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUdoRiw2Q0FBNkM7SUFDOUMsQ0FBQztJQUVELGFBQWE7UUFDWixxQ0FBcUM7UUFDcEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBdUIsRUFBRSxFQUFFO1lBQzNGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7OztZQXhCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVBPLFdBQVc7WUFFWCxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtIdHRwQmFja2VuZCwgSHR0cENsaWVudH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQge0FzeW5jU3ViamVjdCwgT2JzZXJ2YWJsZX0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7TGlicmFyeUNvbmZpZ30gZnJvbSBcIi4uL2NvbmZpZy9saWJyYXJ5LWNvbmZpZ1wiO1xuaW1wb3J0IHtBcHBsaWNhdGlvbkNvbmZpZ30gZnJvbSBcIi4uL2ludGVyZmFjZXMvYXBwbGljYXRpb24tY29uZmlnXCI7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBcHBDb25maWdTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBhcHBDb25maWc6IEFwcGxpY2F0aW9uQ29uZmlnO1xuICBwcml2YXRlIGNvbmZpZyA9IG5ldyBBc3luY1N1YmplY3Q8QXBwbGljYXRpb25Db25maWc+KCk7XG4gIHB1YmxpYyBjb25maWdFbWl0dGVyOiBPYnNlcnZhYmxlPEFwcGxpY2F0aW9uQ29uZmlnPiA9IHRoaXMuY29uZmlnLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cEhhbmRsZXI6IEh0dHBCYWNrZW5kLCBwcml2YXRlIGxpYkNvbmZpZzogTGlicmFyeUNvbmZpZykge1xuICAgLy8gY29uc29sZS5sb2coXCJpbml0aW5nIGFwcCBjb25maWcgc2VydmljZVwiKTtcbiAgfVxuXG4gIGxvYWRBcHBDb25maWcoKSB7XG4gICAvLyBjb25zb2xlLmxvZyhcImxvYWRpbmcgYXBwIGNvbmZpZ1wiKTtcbiAgICBsZXQgaHR0cCA9IG5ldyBIdHRwQ2xpZW50KHRoaXMuaHR0cEhhbmRsZXIpO1xuICAgIHJldHVybiBodHRwLmdldCh0aGlzLmxpYkNvbmZpZy5jb25maWd1cmF0aW9uUGF0aCkudG9Qcm9taXNlKCkudGhlbigoZGF0YTogQXBwbGljYXRpb25Db25maWcpID0+IHtcbiAgICAgICAgdGhpcy5hcHBDb25maWcgPSBkYXRhO1xuICAgICAgICB0aGlzLmNvbmZpZy5uZXh0KHRoaXMuYXBwQ29uZmlnKTtcbiAgICAgICAgdGhpcy5jb25maWcuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldENvbmZpZygpOiBBcHBsaWNhdGlvbkNvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuYXBwQ29uZmlnO1xuICB9XG59XG4iXX0=