import { HostListener, Injectable } from "@angular/core";
import { Subject } from "rxjs";
import { AppConfigService } from "./app-config.service";
import { DatePipe } from "@angular/common";
import * as i0 from "@angular/core";
import * as i1 from "./app-config.service";
export class MapService {
    constructor(appConfig) {
        this.appConfig = appConfig;
        this.mapInstances = [];
        this.mapInstanceEmitter = new Subject();
        // WFML.BASE_URL = appConfig.getConfig().application.baseUrl + 'assets/js/wfml-v0.3.0/v0.3.0/wfml';
    }
    findMapInstance(mapName) {
        return this.mapInstances.find(instance => instance.name === mapName);
    }
    onResize() {
        // for (const mapInstance of this.mapInstances) {
        //   if (mapInstance.isInitialized && mapInstance.api) {
        //     setTimeout(() => mapInstance.api.map.resize(), 400);
        //   }
        // }
    }
    /**
     * Returns a boolean flag that indicates whether the target map instance has been initialized.
     * @param mapName Id value of the leaflet element on the page.
     */
    isMapInitialized(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        return (targetInstance && targetInstance.isInitialized);
    }
    /**
     * initialize map
     * @param mapName string
     */
    initializeMap(mapName) {
        // let targetInstance = this.findMapInstance(mapName);
        // if (!targetInstance) {
        //   targetInstance = {
        //     name: mapName,
        //     isInitialized: false
        //   };
        //   this.mapInstances.push(targetInstance);
        // }
        // if (!targetInstance.isInitialized) {
        //   const config: ApplicationConfig = this.appConfig.getConfig();
        //   // console.log(`Initializing map: ${targetInstance.name}`);
        //   targetInstance.api = WFML.createMap('map', config.mapServiceConfig.map, config.mapServiceConfig.layerSettings);
        //   targetInstance.isInitialized = true;
        //   this.mapInstanceEmitter.next(mapName);
        // }
    }
    /**
     * get layer tree view
     * @param mapName string
     */
    getLayerTreeView(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        return (targetInstance && targetInstance.isInitialized)
            ? targetInstance.api.layer.treeView()
            : null;
    }
    /**
     * set map layer visibility
     * @param mapName string
     * @param id layer id
     * @param isVisible visibility boolean
     */
    setLayerVisibility(mapName, id, isVisible) {
        const targetInstance = this.findMapInstance(mapName);
        if (targetInstance && targetInstance.isInitialized) {
            targetInstance.api.layer.visible(id, isVisible);
        }
    }
    /**
     * zoomToPoint zooms the map to a specific point.
     * @param mapName string
     * @param coordinates coordinates
     * @param zoomLevel number
     */
    zoomToPoint(mapName, coordinates, zoomLevel) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.navigation.zoom(coordinates, zoomLevel);
    }
    /**
     * stop edit
     * @param mapName string
     */
    stopEdit(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.edit.stop();
    }
    /**
     * hide all map layer objects
     * @param mapName string
     * @param type ued or string
     */
    hideAll(mapName, type) {
        const targetInstance = this.findMapInstance(mapName);
        const data = targetInstance.api.layer.treeView().child.find((e) => e.title === type).child;
        data.map((layer) => {
            layer.lyr.isVisible = false;
        });
    }
    /**
     * redray Layer
     * @param mapName string
     * @param layerName string
     */
    redrawLayer(mapName, layerName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.layer.redraw(layerName);
    }
    /**
     * add Highlight
     * @param mapName string
     * @param lonlat longitude latatude array
     */
    addHighlight(mapName, lonlat) {
        const targetInstance = this.findMapInstance(mapName);
        this.clearHighlight(mapName);
        targetInstance.api.highlight.add(lonlat);
    }
    /**
     * clear all highlights on map.
     * @param mapName string
     */
    clearHighlight(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.highlight.clear();
    }
    /**
     * Load Report of Fires as markers from report of fires resources
     * @param mapName string
     * @param reportOfFires collection of report of fire resources from WFIM api
     * @param markerClickCallback callback function for markers
     */
    loadRoFMarkers(mapName, reportOfFires, markerClickCallback) {
        const targetInstance = this.findMapInstance(mapName);
        const markers = reportOfFires.map(rof => {
            const date = (rof.messageStatusTimestamp) ? new DatePipe('en-US').transform(new Date(rof.messageStatusTimestamp), 'yyyy-MM-dd HH:mm:ss') : '';
            let phoneNumber = '';
            if (rof.callerTelephone) {
                const numberSegments = rof.callerTelephone.replace(/\D/g, '').match(/(\d{3})(\d{3})(\d{4})/);
                if (numberSegments && numberSegments.length === 4) {
                    phoneNumber = `(${numberSegments[1]}) ${numberSegments[2]}-${numberSegments[3]}`;
                }
                else {
                    console.error(`RoF ${rof.wildfireYear}-${rof.reportOfFireNumber} phone number value '${rof.callerTelephone}' is not valid.`);
                }
            }
            return {
                "messageTypeCode": "Public Report of Fire",
                "messageStatusCode": rof.messageStatusCode,
                "reportOfFireNumber": rof.reportOfFireNumber,
                "reportOfFireLabel": rof.reportOfFireLabel,
                "wildfireYear": rof.wildfireYear,
                "hoverTitle": rof.publicReportTypeCode,
                "publicReportTypeCode": rof.publicReportTypeCode,
                "latitude": rof.latitude,
                "longitude": rof.longitude,
                "yearNumber": rof.reportOfFireLabel,
                "latLon": this.formatCoordinates([rof.longitude, rof.latitude]),
                "lastUpdated": date,
                "updatedBy": rof.messageStatusUserId,
                "valuesBeingThreatenedNote": rof.valuesBeingThreatenedNote,
                "fireSizeComparisonCode": rof.fireSizeComparisionCode,
                "callerName": rof.callerName,
                "callerTelephone": phoneNumber
            };
        });
        targetInstance.api.layer.visible(WFML.RoF.LAYER_ID, true);
        WFML.RoF.Util.clear(targetInstance.api);
        WFML.RoF.Util.addClusteredMarkers(targetInstance.api, markers, markerClickCallback);
    }
    /**
     * Load Incidents as markers from incident resources
     * @param mapName string
     * @param optionsCodeTables Code[]
     * @param orgOptionsCodeTables Code[]
     * @param incidents collection of report of fire resources from WFIM api
     * @param markerClickCallback callback function for markers
     */
    loadIncidentMarkers(mapName, incidents, optionsCodeTables, orgOptionsCodeTables, markerClickCallback) {
        const targetInstance = this.findMapInstance(mapName);
        const markers = incidents.map(incident => {
            const interfaceFireInd = (incident.incidentSituation) ? incident.incidentSituation.interfaceFireInd : false;
            const interfaceText = (interfaceFireInd) ? 'Interface' : 'Non Interface';
            const markerLabel = (incident.incidentLabel === `${incident.wildfireYear}-${incident.incidentNumberSequence}`) ? `${incident.incidentNumberSequence}` : incident.incidentLabel;
            const incidentTypeCode = optionsCodeTables['INCIDENT_TYPE_CODE'].find(option => option.code === incident.incidentTypeCode);
            const stageOfControlCode = (incident.incidentSituation) ? optionsCodeTables['STAGE_OF_CONTROL_CODE'].find(option => option.code === incident.incidentSituation.stageOfControlCode) : undefined;
            const fireCentreOrgUnitIdentifier = orgOptionsCodeTables['FIRE_CENTRE_CODE'].find(option => option.code === incident.fireCentreOrgUnitIdentifier);
            const zoneOrgUnitIdentifier = orgOptionsCodeTables['ZONE_CODE'].find(option => option.code === incident.zoneOrgUnitIdentifier);
            return {
                "wildfireYear": incident.wildfireYear,
                "incidentNumberSequence": incident.incidentNumberSequence,
                "hoverTitle": interfaceText,
                "incidentId": incident.incidentId,
                "incidentName": incident.incidentName,
                "incidentLocation": {
                    "latitude": incident.incidentLocation ? incident.incidentLocation.latitude : '',
                    "longitude": incident.incidentLocation ? incident.incidentLocation.longitude : ''
                },
                "incidentSituation": {
                    "interfaceFireInd": interfaceFireInd
                },
                "incidentStatusCode": incident.incidentStatusCode,
                "markerLabel": markerLabel,
                "incidentLabel": incident.incidentLabel,
                "probabilityOfInitialAttackSuccessCode": incident.probabilityOfInitialAttackSuccessCode,
                "suspectedCauseCategoryCode": incident.suspectedCauseCategoryCode,
                "incidentCategoryCode": incident.incidentCategoryCode,
                "incidentTypeCode": incidentTypeCode ? incidentTypeCode.description : '',
                "stageOfControlCode": stageOfControlCode ? stageOfControlCode.description : '',
                "fireCentreOrgUnitIdentifier": fireCentreOrgUnitIdentifier ? fireCentreOrgUnitIdentifier.description : '',
                "zoneOrgUnitIdentifier": zoneOrgUnitIdentifier ? zoneOrgUnitIdentifier.description : '',
                "latLon": incident.incidentLocation ? WFML.Location.format([incident.incidentLocation.longitude, incident.incidentLocation.latitude]) : [],
                "geographicDescription": incident.incidentLocation ? incident.incidentLocation.geographicDescription : '',
                "fireSizeHectares": incident.incidentSituation ? incident.incidentSituation.fireSizeHectares : ''
            };
        });
        targetInstance.api.layer.visible(WFML.Incident.LAYER_ID, true);
        WFML.Incident.Util.clear(targetInstance.api);
        WFML.Incident.Util.addClusteredMarkers(targetInstance.api, markers, markerClickCallback);
    }
    /**
     * Clear markers from the specified mapName and markerLayerId
     * @param mapName string
     * @param markerLayerId identifier for the marker layer tracked by the marker manager
     */
    clearMarkers(mapName, markerLayerId) {
        const targetInstance = this.findMapInstance(mapName);
        return targetInstance.api.marker.removeMarkers(markerLayerId);
    }
    /**
     * Set markers layer visibility from the specified mapName and markerLayerId
     * @param mapName string
     * @param markerLayerId identifier for the marker layer tracked by the marker manager
     * @param visible boolean for setting the visibility of the marker layer
     */
    showMarkers(mapName, markerLayerId, visible) {
        const targetInstance = this.findMapInstance(mapName);
        return targetInstance.api.marker.showMarkers(markerLayerId, visible);
    }
    /**
    * Add legend layers
    * @param mapName name of the map instance
    * @param layerId id of the target map layer the legend attaches to
    * @param legend structure based on WFML api for legends - refer to WFML test bed for examples
    */
    addLegend(mapName, layerId, legend) {
        const targetInstance = this.findMapInstance(mapName);
        if (targetInstance) {
            targetInstance.api.layer.legend(layerId, legend);
        }
    }
    /**
     * Clear selected point (pin) from the specified map instance
     */
    clearSelectPoint(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        if (targetInstance) {
            targetInstance.api.selectPoint.clear();
        }
    }
    setMaxSearchDistance(mapName, withinDistance) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.setMaximumDistance(withinDistance);
    }
    findPlace(mapName, searchText) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.findPlace(searchText);
    }
    findRoad(mapName, searchText) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.findRoad(searchText);
    }
    findIntersection(mapName, roadName, intersectingRoadName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.findIntersection(roadName, intersectingRoadName);
    }
    clearPlaceNameSearch(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.clear();
    }
    panToPlaceNameSearchLocation(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.panToAnchor();
    }
    zoomToPlaceNameSearchLocation(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.zoomToAnchor();
    }
    showCandidate(mapName, location) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.showCandidate(location);
    }
    clearCandidate(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        // showCandidate() with empty params clears the candidate selection.
        targetInstance.api.search.showCandidate();
    }
    setAnchor(mapName, point) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.setAnchor(point);
    }
    setAnchorFromMap(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        const point = targetInstance.api.selectPoint.get();
        if (point) {
            targetInstance.api.search.setAnchor(point);
        }
        return point;
    }
    getBasemaps(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        return targetInstance.api.basemap.all();
    }
    setBasemap(mapName, baseMapIndex) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.basemap.switch(baseMapIndex);
    }
    registerPlaceNameSearchListener(mapName, callback) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.setResultHandler(callback);
    }
    registerMapClickListener(mapName, callback) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.click(callback);
    }
    registerMapHoverListener(mapName, callback, hoverDelay) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.hover(callback, hoverDelay);
    }
    registerMapSelectPointListener(mapName, callback) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.selectPoint(callback);
    }
    clearPlaceNameSearchListener(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.search.setResultHandler();
    }
    clearMapClickListener(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.click();
    }
    clearMapHoverListener(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.hover();
    }
    clearMapSelectPointListener(mapName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.callback.selectPoint();
    }
    formatCoordinates(coordinates) {
        return WFML.Location.format(coordinates);
    }
    parseCoordinates(url) {
        return WFML.Location.parse(url);
    }
    activateTool(mapName, toolName) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.tool.activate(toolName);
    }
    persistState(mapName, key, opt) {
        const targetInstance = this.findMapInstance(mapName);
        targetInstance.api.state.persist(key, opt);
    }
}
MapService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MapService_Factory() { return new MapService(i0.ɵɵinject(i1.AppConfigService)); }, token: MapService, providedIn: "root" });
MapService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
MapService.ctorParameters = () => [
    { type: AppConfigService }
];
MapService.propDecorators = {
    onResize: [{ type: HostListener, args: ['resize',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlLXVpL3NyYy9saWIvc2VydmljZXMvbWFwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUU3QixPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUd0RCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7OztBQXVCekMsTUFBTSxPQUFPLFVBQVU7SUFJckIsWUFDVSxTQUEyQjtRQUEzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUo3QixpQkFBWSxHQUFrQixFQUFFLENBQUM7UUFDbEMsdUJBQWtCLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUs3QyxtR0FBbUc7SUFDckcsQ0FBQztJQUVPLGVBQWUsQ0FBQyxPQUFPO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFHTSxRQUFRO1FBQ2IsaURBQWlEO1FBQ2pELHdEQUF3RDtRQUN4RCwyREFBMkQ7UUFDM0QsTUFBTTtRQUNOLElBQUk7SUFDTixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksZ0JBQWdCLENBQUMsT0FBTztRQUM3QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELE9BQU8sQ0FBQyxjQUFjLElBQUksY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7O09BR0c7SUFDSSxhQUFhLENBQUMsT0FBTztRQUMxQixzREFBc0Q7UUFDdEQs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QyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxZQUFZLENBQUMsT0FBZSxFQUFFLEdBQVcsRUFBRSxHQUFRO1FBQ3hELE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7O1lBaGFGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBekJPLGdCQUFnQjs7O3VCQXdDckIsWUFBWSxTQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0hvc3RMaXN0ZW5lciwgSW5qZWN0YWJsZX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7U3ViamVjdH0gZnJvbSBcInJ4anNcIjtcblxuaW1wb3J0IHtBcHBDb25maWdTZXJ2aWNlfSBmcm9tIFwiLi9hcHAtY29uZmlnLnNlcnZpY2VcIjtcbmltcG9ydCB7QXBwbGljYXRpb25Db25maWd9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2FwcGxpY2F0aW9uLWNvbmZpZ1wiO1xuaW1wb3J0IHtNYXBJbnN0YW5jZX0gZnJvbSBcIi4uL2ludGVyZmFjZXMvbWFwLXNlcnZpY2VcIjtcbmltcG9ydCB7RGF0ZVBpcGV9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuZGVjbGFyZSB2YXIgV0ZNTDogYW55OyAvLyBMb2FkZWQgYnkgYWJvdmUgV0ZNTCBKUyBmaWxlc1xuXG5leHBvcnQgaW50ZXJmYWNlIFdGTUxMb2NhdGlvbiB7XG4gIG5hbWU6IHN0cmluZztcbiAgdHlwZT86IHN0cmluZztcbiAgZGlzdD86IG51bWJlcjtcbiAgbG9jOiBbbnVtYmVyLCBudW1iZXJdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvZGUge1xuICBjb2RlPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb2RlVGFibGVzIHtcbiAgW3Byb3A6IHN0cmluZ106IENvZGVbXTtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTWFwU2VydmljZSB7XG4gIHByaXZhdGUgbWFwSW5zdGFuY2VzOiBNYXBJbnN0YW5jZVtdID0gW107XG4gIHB1YmxpYyBtYXBJbnN0YW5jZUVtaXR0ZXIgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhcHBDb25maWc6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICkge1xuICAgIC8vIFdGTUwuQkFTRV9VUkwgPSBhcHBDb25maWcuZ2V0Q29uZmlnKCkuYXBwbGljYXRpb24uYmFzZVVybCArICdhc3NldHMvanMvd2ZtbC12MC4zLjAvdjAuMy4wL3dmbWwnO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kTWFwSW5zdGFuY2UobWFwTmFtZSk6IE1hcEluc3RhbmNlIHtcbiAgICByZXR1cm4gdGhpcy5tYXBJbnN0YW5jZXMuZmluZChpbnN0YW5jZSA9PiBpbnN0YW5jZS5uYW1lID09PSBtYXBOYW1lKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3Jlc2l6ZScpXG4gIHB1YmxpYyBvblJlc2l6ZSgpIHtcbiAgICAvLyBmb3IgKGNvbnN0IG1hcEluc3RhbmNlIG9mIHRoaXMubWFwSW5zdGFuY2VzKSB7XG4gICAgLy8gICBpZiAobWFwSW5zdGFuY2UuaXNJbml0aWFsaXplZCAmJiBtYXBJbnN0YW5jZS5hcGkpIHtcbiAgICAvLyAgICAgc2V0VGltZW91dCgoKSA9PiBtYXBJbnN0YW5jZS5hcGkubWFwLnJlc2l6ZSgpLCA0MDApO1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBmbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHRhcmdldCBtYXAgaW5zdGFuY2UgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG4gICAqIEBwYXJhbSBtYXBOYW1lIElkIHZhbHVlIG9mIHRoZSBsZWFmbGV0IGVsZW1lbnQgb24gdGhlIHBhZ2UuXG4gICAqL1xuICBwdWJsaWMgaXNNYXBJbml0aWFsaXplZChtYXBOYW1lKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICByZXR1cm4gKHRhcmdldEluc3RhbmNlICYmIHRhcmdldEluc3RhbmNlLmlzSW5pdGlhbGl6ZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIGluaXRpYWxpemUgbWFwXG4gICAqIEBwYXJhbSBtYXBOYW1lIHN0cmluZ1xuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemVNYXAobWFwTmFtZSkge1xuICAgIC8vIGxldCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIC8vIGlmICghdGFyZ2V0SW5zdGFuY2UpIHtcbiAgICAvLyAgIHRhcmdldEluc3RhbmNlID0ge1xuICAgIC8vICAgICBuYW1lOiBtYXBOYW1lLFxuICAgIC8vICAgICBpc0luaXRpYWxpemVkOiBmYWxzZVxuICAgIC8vICAgfTtcbiAgICAvLyAgIHRoaXMubWFwSW5zdGFuY2VzLnB1c2godGFyZ2V0SW5zdGFuY2UpO1xuICAgIC8vIH1cbiAgICAvLyBpZiAoIXRhcmdldEluc3RhbmNlLmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAvLyAgIGNvbnN0IGNvbmZpZzogQXBwbGljYXRpb25Db25maWcgPSB0aGlzLmFwcENvbmZpZy5nZXRDb25maWcoKTtcbiAgICAvLyAgIC8vIGNvbnNvbGUubG9nKGBJbml0aWFsaXppbmcgbWFwOiAke3RhcmdldEluc3RhbmNlLm5hbWV9YCk7XG4gICAgLy8gICB0YXJnZXRJbnN0YW5jZS5hcGkgPSBXRk1MLmNyZWF0ZU1hcCgnbWFwJywgY29uZmlnLm1hcFNlcnZpY2VDb25maWcubWFwLCBjb25maWcubWFwU2VydmljZUNvbmZpZy5sYXllclNldHRpbmdzKTtcblxuICAgIC8vICAgdGFyZ2V0SW5zdGFuY2UuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgLy8gICB0aGlzLm1hcEluc3RhbmNlRW1pdHRlci5uZXh0KG1hcE5hbWUpO1xuICAgIC8vIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgbGF5ZXIgdHJlZSB2aWV3XG4gICAqIEBwYXJhbSBtYXBOYW1lIHN0cmluZ1xuICAgKi9cbiAgcHVibGljIGdldExheWVyVHJlZVZpZXcobWFwTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICByZXR1cm4gKHRhcmdldEluc3RhbmNlICYmIHRhcmdldEluc3RhbmNlLmlzSW5pdGlhbGl6ZWQpXG4gICAgICA/IHRhcmdldEluc3RhbmNlLmFwaS5sYXllci50cmVlVmlldygpXG4gICAgICA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogc2V0IG1hcCBsYXllciB2aXNpYmlsaXR5XG4gICAqIEBwYXJhbSBtYXBOYW1lIHN0cmluZ1xuICAgKiBAcGFyYW0gaWQgbGF5ZXIgaWRcbiAgICogQHBhcmFtIGlzVmlzaWJsZSB2aXNpYmlsaXR5IGJvb2xlYW5cbiAgICovXG4gIHB1YmxpYyBzZXRMYXllclZpc2liaWxpdHkobWFwTmFtZTogc3RyaW5nLCBpZDogc3RyaW5nLCBpc1Zpc2libGU6IGJvb2xlYW4pIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIGlmICh0YXJnZXRJbnN0YW5jZSAmJiB0YXJnZXRJbnN0YW5jZS5pc0luaXRpYWxpemVkKSB7XG4gICAgICB0YXJnZXRJbnN0YW5jZS5hcGkubGF5ZXIudmlzaWJsZShpZCwgaXNWaXNpYmxlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogem9vbVRvUG9pbnQgem9vbXMgdGhlIG1hcCB0byBhIHNwZWNpZmljIHBvaW50LlxuICAgKiBAcGFyYW0gbWFwTmFtZSBzdHJpbmdcbiAgICogQHBhcmFtIGNvb3JkaW5hdGVzIGNvb3JkaW5hdGVzXG4gICAqIEBwYXJhbSB6b29tTGV2ZWwgbnVtYmVyXG4gICAqL1xuICBwdWJsaWMgem9vbVRvUG9pbnQobWFwTmFtZTogc3RyaW5nLCBjb29yZGluYXRlczogbnVtYmVyW10sIHpvb21MZXZlbD86IG51bWJlcikge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLm5hdmlnYXRpb24uem9vbShjb29yZGluYXRlcywgem9vbUxldmVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzdG9wIGVkaXRcbiAgICogQHBhcmFtIG1hcE5hbWUgc3RyaW5nXG4gICAqL1xuICBwdWJsaWMgc3RvcEVkaXQobWFwTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICB0YXJnZXRJbnN0YW5jZS5hcGkuZWRpdC5zdG9wKCk7XG4gIH1cblxuICAvKipcbiAgICogaGlkZSBhbGwgbWFwIGxheWVyIG9iamVjdHNcbiAgICogQHBhcmFtIG1hcE5hbWUgc3RyaW5nXG4gICAqIEBwYXJhbSB0eXBlIHVlZCBvciBzdHJpbmdcbiAgICovXG4gIHB1YmxpYyBoaWRlQWxsKG1hcE5hbWU6IHN0cmluZywgdHlwZTogJ1VFRCcgfCBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIGNvbnN0IGRhdGEgPSB0YXJnZXRJbnN0YW5jZS5hcGkubGF5ZXIudHJlZVZpZXcoKS5jaGlsZC5maW5kKChlKSA9PiBlLnRpdGxlID09PSB0eXBlICkuY2hpbGQ7XG4gICAgZGF0YS5tYXAoIChsYXllcikgPT4ge1xuICAgICAgbGF5ZXIubHlyLmlzVmlzaWJsZSA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlZHJheSBMYXllclxuICAgKiBAcGFyYW0gbWFwTmFtZSBzdHJpbmdcbiAgICogQHBhcmFtIGxheWVyTmFtZSBzdHJpbmdcbiAgICovXG4gIHB1YmxpYyByZWRyYXdMYXllcihtYXBOYW1lOiBzdHJpbmcsIGxheWVyTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICB0YXJnZXRJbnN0YW5jZS5hcGkubGF5ZXIucmVkcmF3KGxheWVyTmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogYWRkIEhpZ2hsaWdodFxuICAgKiBAcGFyYW0gbWFwTmFtZSBzdHJpbmdcbiAgICogQHBhcmFtIGxvbmxhdCBsb25naXR1ZGUgbGF0YXR1ZGUgYXJyYXlcbiAgICovXG4gIHB1YmxpYyBhZGRIaWdobGlnaHQobWFwTmFtZTogc3RyaW5nLCBsb25sYXQ6IG51bWJlcltdKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICB0aGlzLmNsZWFySGlnaGxpZ2h0KG1hcE5hbWUpO1xuICAgIHRhcmdldEluc3RhbmNlLmFwaS5oaWdobGlnaHQuYWRkKGxvbmxhdCk7XG4gIH1cblxuICAvKipcbiAgICogY2xlYXIgYWxsIGhpZ2hsaWdodHMgb24gbWFwLlxuICAgKiBAcGFyYW0gbWFwTmFtZSBzdHJpbmdcbiAgICovXG4gIHB1YmxpYyBjbGVhckhpZ2hsaWdodChtYXBOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIHRhcmdldEluc3RhbmNlLmFwaS5oaWdobGlnaHQuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIFJlcG9ydCBvZiBGaXJlcyBhcyBtYXJrZXJzIGZyb20gcmVwb3J0IG9mIGZpcmVzIHJlc291cmNlc1xuICAgKiBAcGFyYW0gbWFwTmFtZSBzdHJpbmdcbiAgICogQHBhcmFtIHJlcG9ydE9mRmlyZXMgY29sbGVjdGlvbiBvZiByZXBvcnQgb2YgZmlyZSByZXNvdXJjZXMgZnJvbSBXRklNIGFwaVxuICAgKiBAcGFyYW0gbWFya2VyQ2xpY2tDYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbiBmb3IgbWFya2Vyc1xuICAgKi9cbiAgcHVibGljIGxvYWRSb0ZNYXJrZXJzKG1hcE5hbWU6IHN0cmluZywgcmVwb3J0T2ZGaXJlcywgbWFya2VyQ2xpY2tDYWxsYmFjaz8pOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuXG4gICAgY29uc3QgbWFya2VycyA9IHJlcG9ydE9mRmlyZXMubWFwKHJvZiA9PiB7XG4gICAgICBjb25zdCBkYXRlID0gKHJvZi5tZXNzYWdlU3RhdHVzVGltZXN0YW1wKSA/IG5ldyBEYXRlUGlwZSgnZW4tVVMnKS50cmFuc2Zvcm0obmV3IERhdGUocm9mLm1lc3NhZ2VTdGF0dXNUaW1lc3RhbXApLCAneXl5eS1NTS1kZCBISDptbTpzcycpIDogJyc7XG5cbiAgICAgIGxldCBwaG9uZU51bWJlciA9ICcnO1xuICAgICAgaWYgKHJvZi5jYWxsZXJUZWxlcGhvbmUpIHtcbiAgICAgICAgY29uc3QgbnVtYmVyU2VnbWVudHMgPSByb2YuY2FsbGVyVGVsZXBob25lLnJlcGxhY2UoL1xcRC9nLCAnJykubWF0Y2goLyhcXGR7M30pKFxcZHszfSkoXFxkezR9KS8pO1xuICAgICAgICBpZiAobnVtYmVyU2VnbWVudHMgJiYgbnVtYmVyU2VnbWVudHMubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgcGhvbmVOdW1iZXIgPSBgKCR7bnVtYmVyU2VnbWVudHNbMV19KSAke251bWJlclNlZ21lbnRzWzJdfS0ke251bWJlclNlZ21lbnRzWzNdfWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgUm9GICR7cm9mLndpbGRmaXJlWWVhcn0tJHtyb2YucmVwb3J0T2ZGaXJlTnVtYmVyfSBwaG9uZSBudW1iZXIgdmFsdWUgJyR7cm9mLmNhbGxlclRlbGVwaG9uZX0nIGlzIG5vdCB2YWxpZC5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgXCJtZXNzYWdlVHlwZUNvZGVcIjogXCJQdWJsaWMgUmVwb3J0IG9mIEZpcmVcIixcbiAgICAgICAgXCJtZXNzYWdlU3RhdHVzQ29kZVwiOiByb2YubWVzc2FnZVN0YXR1c0NvZGUsXG4gICAgICAgIFwicmVwb3J0T2ZGaXJlTnVtYmVyXCI6IHJvZi5yZXBvcnRPZkZpcmVOdW1iZXIsXG4gICAgICAgIFwicmVwb3J0T2ZGaXJlTGFiZWxcIjogcm9mLnJlcG9ydE9mRmlyZUxhYmVsLFxuICAgICAgICBcIndpbGRmaXJlWWVhclwiOiByb2Yud2lsZGZpcmVZZWFyLFxuICAgICAgICBcImhvdmVyVGl0bGVcIjogcm9mLnB1YmxpY1JlcG9ydFR5cGVDb2RlLFxuICAgICAgICBcInB1YmxpY1JlcG9ydFR5cGVDb2RlXCI6IHJvZi5wdWJsaWNSZXBvcnRUeXBlQ29kZSxcbiAgICAgICAgXCJsYXRpdHVkZVwiOiByb2YubGF0aXR1ZGUsXG4gICAgICAgIFwibG9uZ2l0dWRlXCI6IHJvZi5sb25naXR1ZGUsXG4gICAgICAgIFwieWVhck51bWJlclwiOiByb2YucmVwb3J0T2ZGaXJlTGFiZWwsXG4gICAgICAgIFwibGF0TG9uXCI6IHRoaXMuZm9ybWF0Q29vcmRpbmF0ZXMoWyByb2YubG9uZ2l0dWRlLCByb2YubGF0aXR1ZGUgXSksXG4gICAgICAgIFwibGFzdFVwZGF0ZWRcIjogZGF0ZSxcbiAgICAgICAgXCJ1cGRhdGVkQnlcIjogcm9mLm1lc3NhZ2VTdGF0dXNVc2VySWQsXG4gICAgICAgIFwidmFsdWVzQmVpbmdUaHJlYXRlbmVkTm90ZVwiOiByb2YudmFsdWVzQmVpbmdUaHJlYXRlbmVkTm90ZSxcbiAgICAgICAgXCJmaXJlU2l6ZUNvbXBhcmlzb25Db2RlXCI6IHJvZi5maXJlU2l6ZUNvbXBhcmlzaW9uQ29kZSxcbiAgICAgICAgXCJjYWxsZXJOYW1lXCI6IHJvZi5jYWxsZXJOYW1lLFxuICAgICAgICBcImNhbGxlclRlbGVwaG9uZVwiOiBwaG9uZU51bWJlclxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHRhcmdldEluc3RhbmNlLmFwaS5sYXllci52aXNpYmxlKFdGTUwuUm9GLkxBWUVSX0lELCB0cnVlKTtcbiAgICBXRk1MLlJvRi5VdGlsLmNsZWFyKHRhcmdldEluc3RhbmNlLmFwaSk7XG4gICAgV0ZNTC5Sb0YuVXRpbC5hZGRDbHVzdGVyZWRNYXJrZXJzKHRhcmdldEluc3RhbmNlLmFwaSwgbWFya2VycywgbWFya2VyQ2xpY2tDYWxsYmFjayk7XG4gIH1cblxuICAgIC8qKlxuICAgICAqIExvYWQgSW5jaWRlbnRzIGFzIG1hcmtlcnMgZnJvbSBpbmNpZGVudCByZXNvdXJjZXNcbiAgICAgKiBAcGFyYW0gbWFwTmFtZSBzdHJpbmdcbiAgICAgKiBAcGFyYW0gb3B0aW9uc0NvZGVUYWJsZXMgQ29kZVtdXG4gICAgICogQHBhcmFtIG9yZ09wdGlvbnNDb2RlVGFibGVzIENvZGVbXVxuICAgICAqIEBwYXJhbSBpbmNpZGVudHMgY29sbGVjdGlvbiBvZiByZXBvcnQgb2YgZmlyZSByZXNvdXJjZXMgZnJvbSBXRklNIGFwaVxuICAgICAqIEBwYXJhbSBtYXJrZXJDbGlja0NhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBtYXJrZXJzXG4gICAgICovXG4gICAgcHVibGljIGxvYWRJbmNpZGVudE1hcmtlcnMobWFwTmFtZTogc3RyaW5nLCBpbmNpZGVudHMsIG9wdGlvbnNDb2RlVGFibGVzOiBDb2RlVGFibGVzLCBvcmdPcHRpb25zQ29kZVRhYmxlczogQ29kZVRhYmxlcywgbWFya2VyQ2xpY2tDYWxsYmFjaz8pOiB2b2lkIHtcbiAgICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG5cbiAgICAgIGNvbnN0IG1hcmtlcnMgPSBpbmNpZGVudHMubWFwKGluY2lkZW50ID0+IHtcbiAgICAgICAgY29uc3QgaW50ZXJmYWNlRmlyZUluZCA9IChpbmNpZGVudC5pbmNpZGVudFNpdHVhdGlvbikgPyBpbmNpZGVudC5pbmNpZGVudFNpdHVhdGlvbi5pbnRlcmZhY2VGaXJlSW5kIDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGludGVyZmFjZVRleHQgPSAoaW50ZXJmYWNlRmlyZUluZCkgPyAnSW50ZXJmYWNlJyA6ICdOb24gSW50ZXJmYWNlJztcbiAgICAgICAgY29uc3QgbWFya2VyTGFiZWwgPSAoaW5jaWRlbnQuaW5jaWRlbnRMYWJlbCA9PT0gYCR7aW5jaWRlbnQud2lsZGZpcmVZZWFyfS0ke2luY2lkZW50LmluY2lkZW50TnVtYmVyU2VxdWVuY2V9YCkgPyBgJHtpbmNpZGVudC5pbmNpZGVudE51bWJlclNlcXVlbmNlfWAgOiBpbmNpZGVudC5pbmNpZGVudExhYmVsO1xuICAgICAgICBjb25zdCBpbmNpZGVudFR5cGVDb2RlID0gb3B0aW9uc0NvZGVUYWJsZXNbJ0lOQ0lERU5UX1RZUEVfQ09ERSddLmZpbmQob3B0aW9uID0+IG9wdGlvbi5jb2RlID09PSBpbmNpZGVudC5pbmNpZGVudFR5cGVDb2RlKTtcbiAgICAgICAgY29uc3Qgc3RhZ2VPZkNvbnRyb2xDb2RlID0gKGluY2lkZW50LmluY2lkZW50U2l0dWF0aW9uKSA/IG9wdGlvbnNDb2RlVGFibGVzWydTVEFHRV9PRl9DT05UUk9MX0NPREUnXS5maW5kKG9wdGlvbiA9PiBvcHRpb24uY29kZSA9PT0gaW5jaWRlbnQuaW5jaWRlbnRTaXR1YXRpb24uc3RhZ2VPZkNvbnRyb2xDb2RlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyID0gb3JnT3B0aW9uc0NvZGVUYWJsZXNbJ0ZJUkVfQ0VOVFJFX0NPREUnXS5maW5kKG9wdGlvbiA9PiBvcHRpb24uY29kZSA9PT0gaW5jaWRlbnQuZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyKTtcbiAgICAgICAgY29uc3Qgem9uZU9yZ1VuaXRJZGVudGlmaWVyID0gb3JnT3B0aW9uc0NvZGVUYWJsZXNbJ1pPTkVfQ09ERSddLmZpbmQob3B0aW9uID0+IG9wdGlvbi5jb2RlID09PSBpbmNpZGVudC56b25lT3JnVW5pdElkZW50aWZpZXIpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgXCJ3aWxkZmlyZVllYXJcIjogaW5jaWRlbnQud2lsZGZpcmVZZWFyLFxuICAgICAgICAgIFwiaW5jaWRlbnROdW1iZXJTZXF1ZW5jZVwiOiBpbmNpZGVudC5pbmNpZGVudE51bWJlclNlcXVlbmNlLFxuICAgICAgICAgIFwiaG92ZXJUaXRsZVwiOiBpbnRlcmZhY2VUZXh0LFxuICAgICAgICAgIFwiaW5jaWRlbnRJZFwiOiBpbmNpZGVudC5pbmNpZGVudElkLFxuICAgICAgICAgIFwiaW5jaWRlbnROYW1lXCI6IGluY2lkZW50LmluY2lkZW50TmFtZSxcbiAgICAgICAgICBcImluY2lkZW50TG9jYXRpb25cIjoge1xuICAgICAgICAgICAgXCJsYXRpdHVkZVwiOiBpbmNpZGVudC5pbmNpZGVudExvY2F0aW9uID8gaW5jaWRlbnQuaW5jaWRlbnRMb2NhdGlvbi5sYXRpdHVkZSA6ICcnLFxuICAgICAgICAgICAgXCJsb25naXR1ZGVcIjogaW5jaWRlbnQuaW5jaWRlbnRMb2NhdGlvbiA/IGluY2lkZW50LmluY2lkZW50TG9jYXRpb24ubG9uZ2l0dWRlIDogJydcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW5jaWRlbnRTaXR1YXRpb25cIjoge1xuICAgICAgICAgICAgXCJpbnRlcmZhY2VGaXJlSW5kXCI6IGludGVyZmFjZUZpcmVJbmRcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW5jaWRlbnRTdGF0dXNDb2RlXCI6IGluY2lkZW50LmluY2lkZW50U3RhdHVzQ29kZSxcbiAgICAgICAgICBcIm1hcmtlckxhYmVsXCI6IG1hcmtlckxhYmVsLFxuICAgICAgICAgIFwiaW5jaWRlbnRMYWJlbFwiOiBpbmNpZGVudC5pbmNpZGVudExhYmVsLFxuICAgICAgICAgIFwicHJvYmFiaWxpdHlPZkluaXRpYWxBdHRhY2tTdWNjZXNzQ29kZVwiOiBpbmNpZGVudC5wcm9iYWJpbGl0eU9mSW5pdGlhbEF0dGFja1N1Y2Nlc3NDb2RlLFxuICAgICAgICAgIFwic3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGVcIjogaW5jaWRlbnQuc3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGUsXG4gICAgICAgICAgXCJpbmNpZGVudENhdGVnb3J5Q29kZVwiOiBpbmNpZGVudC5pbmNpZGVudENhdGVnb3J5Q29kZSxcbiAgICAgICAgICBcImluY2lkZW50VHlwZUNvZGVcIjogaW5jaWRlbnRUeXBlQ29kZSA/IGluY2lkZW50VHlwZUNvZGUuZGVzY3JpcHRpb24gOiAnJyxcblxuICAgICAgICAgIFwic3RhZ2VPZkNvbnRyb2xDb2RlXCI6IHN0YWdlT2ZDb250cm9sQ29kZSA/IHN0YWdlT2ZDb250cm9sQ29kZS5kZXNjcmlwdGlvbiA6ICcnLFxuICAgICAgICAgIFwiZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyXCI6IGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllciA/IGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllci5kZXNjcmlwdGlvbiA6ICcnLFxuICAgICAgICAgIFwiem9uZU9yZ1VuaXRJZGVudGlmaWVyXCI6IHpvbmVPcmdVbml0SWRlbnRpZmllciA/IHpvbmVPcmdVbml0SWRlbnRpZmllci5kZXNjcmlwdGlvbiA6ICcnLFxuICAgICAgICAgIFwibGF0TG9uXCI6IGluY2lkZW50LmluY2lkZW50TG9jYXRpb24gPyBXRk1MLkxvY2F0aW9uLmZvcm1hdChbIGluY2lkZW50LmluY2lkZW50TG9jYXRpb24ubG9uZ2l0dWRlLCBpbmNpZGVudC5pbmNpZGVudExvY2F0aW9uLmxhdGl0dWRlIF0pIDogW10sXG4gICAgICAgICAgXCJnZW9ncmFwaGljRGVzY3JpcHRpb25cIjogaW5jaWRlbnQuaW5jaWRlbnRMb2NhdGlvbiA/IGluY2lkZW50LmluY2lkZW50TG9jYXRpb24uZ2VvZ3JhcGhpY0Rlc2NyaXB0aW9uIDogJycsXG4gICAgICAgICAgXCJmaXJlU2l6ZUhlY3RhcmVzXCI6IGluY2lkZW50LmluY2lkZW50U2l0dWF0aW9uID8gaW5jaWRlbnQuaW5jaWRlbnRTaXR1YXRpb24uZmlyZVNpemVIZWN0YXJlcyA6ICcnXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgdGFyZ2V0SW5zdGFuY2UuYXBpLmxheWVyLnZpc2libGUoV0ZNTC5JbmNpZGVudC5MQVlFUl9JRCwgdHJ1ZSk7XG4gICAgICBXRk1MLkluY2lkZW50LlV0aWwuY2xlYXIodGFyZ2V0SW5zdGFuY2UuYXBpKTtcbiAgICAgIFdGTUwuSW5jaWRlbnQuVXRpbC5hZGRDbHVzdGVyZWRNYXJrZXJzKHRhcmdldEluc3RhbmNlLmFwaSwgbWFya2VycywgbWFya2VyQ2xpY2tDYWxsYmFjayk7XG4gICAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBtYXJrZXJzIGZyb20gdGhlIHNwZWNpZmllZCBtYXBOYW1lIGFuZCBtYXJrZXJMYXllcklkXG4gICAqIEBwYXJhbSBtYXBOYW1lIHN0cmluZ1xuICAgKiBAcGFyYW0gbWFya2VyTGF5ZXJJZCBpZGVudGlmaWVyIGZvciB0aGUgbWFya2VyIGxheWVyIHRyYWNrZWQgYnkgdGhlIG1hcmtlciBtYW5hZ2VyXG4gICAqL1xuICBwdWJsaWMgY2xlYXJNYXJrZXJzKG1hcE5hbWU6IHN0cmluZywgbWFya2VyTGF5ZXJJZDogc3RyaW5nKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICByZXR1cm4gdGFyZ2V0SW5zdGFuY2UuYXBpLm1hcmtlci5yZW1vdmVNYXJrZXJzKCBtYXJrZXJMYXllcklkICk7XG4gIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBtYXJrZXJzIGxheWVyIHZpc2liaWxpdHkgZnJvbSB0aGUgc3BlY2lmaWVkIG1hcE5hbWUgYW5kIG1hcmtlckxheWVySWRcbiAgICAgKiBAcGFyYW0gbWFwTmFtZSBzdHJpbmdcbiAgICAgKiBAcGFyYW0gbWFya2VyTGF5ZXJJZCBpZGVudGlmaWVyIGZvciB0aGUgbWFya2VyIGxheWVyIHRyYWNrZWQgYnkgdGhlIG1hcmtlciBtYW5hZ2VyXG4gICAgICogQHBhcmFtIHZpc2libGUgYm9vbGVhbiBmb3Igc2V0dGluZyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgbWFya2VyIGxheWVyXG4gICAgICovXG4gICAgcHVibGljIHNob3dNYXJrZXJzKG1hcE5hbWU6IHN0cmluZywgbWFya2VyTGF5ZXJJZDogc3RyaW5nLCB2aXNpYmxlOiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgICAgIHJldHVybiB0YXJnZXRJbnN0YW5jZS5hcGkubWFya2VyLnNob3dNYXJrZXJzKCBtYXJrZXJMYXllcklkLCB2aXNpYmxlICk7XG4gICAgfVxuXG4gICAvKipcbiAgICogQWRkIGxlZ2VuZCBsYXllcnNcbiAgICogQHBhcmFtIG1hcE5hbWUgbmFtZSBvZiB0aGUgbWFwIGluc3RhbmNlXG4gICAqIEBwYXJhbSBsYXllcklkIGlkIG9mIHRoZSB0YXJnZXQgbWFwIGxheWVyIHRoZSBsZWdlbmQgYXR0YWNoZXMgdG9cbiAgICogQHBhcmFtIGxlZ2VuZCBzdHJ1Y3R1cmUgYmFzZWQgb24gV0ZNTCBhcGkgZm9yIGxlZ2VuZHMgLSByZWZlciB0byBXRk1MIHRlc3QgYmVkIGZvciBleGFtcGxlc1xuICAgKi9cbiAgcHVibGljIGFkZExlZ2VuZChtYXBOYW1lOiBzdHJpbmcsIGxheWVySWQ6IHN0cmluZywgbGVnZW5kOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIGlmICh0YXJnZXRJbnN0YW5jZSkge1xuICAgICAgdGFyZ2V0SW5zdGFuY2UuYXBpLmxheWVyLmxlZ2VuZChsYXllcklkLCBsZWdlbmQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBzZWxlY3RlZCBwb2ludCAocGluKSBmcm9tIHRoZSBzcGVjaWZpZWQgbWFwIGluc3RhbmNlXG4gICAqL1xuICBwdWJsaWMgY2xlYXJTZWxlY3RQb2ludChtYXBOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgICBpZiAodGFyZ2V0SW5zdGFuY2UpIHtcbiAgICAgICAgdGFyZ2V0SW5zdGFuY2UuYXBpLnNlbGVjdFBvaW50LmNsZWFyKCk7XG4gICAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0TWF4U2VhcmNoRGlzdGFuY2UobWFwTmFtZTogc3RyaW5nLCB3aXRoaW5EaXN0YW5jZTogbnVtYmVyKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICB0YXJnZXRJbnN0YW5jZS5hcGkuc2VhcmNoLnNldE1heGltdW1EaXN0YW5jZSh3aXRoaW5EaXN0YW5jZSk7XG4gIH1cblxuICBwdWJsaWMgZmluZFBsYWNlKG1hcE5hbWU6IHN0cmluZywgc2VhcmNoVGV4dDogc3RyaW5nKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICB0YXJnZXRJbnN0YW5jZS5hcGkuc2VhcmNoLmZpbmRQbGFjZShzZWFyY2hUZXh0KTtcbiAgfVxuXG4gIHB1YmxpYyBmaW5kUm9hZChtYXBOYW1lOiBzdHJpbmcsIHNlYXJjaFRleHQ6IHN0cmluZykge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLnNlYXJjaC5maW5kUm9hZChzZWFyY2hUZXh0KTtcbiAgfVxuXG4gIHB1YmxpYyBmaW5kSW50ZXJzZWN0aW9uKG1hcE5hbWU6IHN0cmluZywgcm9hZE5hbWU6IHN0cmluZywgaW50ZXJzZWN0aW5nUm9hZE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLnNlYXJjaC5maW5kSW50ZXJzZWN0aW9uKHJvYWROYW1lLCBpbnRlcnNlY3RpbmdSb2FkTmFtZSk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJQbGFjZU5hbWVTZWFyY2gobWFwTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICB0YXJnZXRJbnN0YW5jZS5hcGkuc2VhcmNoLmNsZWFyKCk7XG4gIH1cblxuICBwdWJsaWMgcGFuVG9QbGFjZU5hbWVTZWFyY2hMb2NhdGlvbihtYXBOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIHRhcmdldEluc3RhbmNlLmFwaS5zZWFyY2gucGFuVG9BbmNob3IoKTtcbiAgfVxuXG4gIHB1YmxpYyB6b29tVG9QbGFjZU5hbWVTZWFyY2hMb2NhdGlvbihtYXBOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIHRhcmdldEluc3RhbmNlLmFwaS5zZWFyY2guem9vbVRvQW5jaG9yKCk7XG4gIH1cblxuICBwdWJsaWMgc2hvd0NhbmRpZGF0ZShtYXBOYW1lOiBzdHJpbmcsIGxvY2F0aW9uOiBXRk1MTG9jYXRpb24pIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIHRhcmdldEluc3RhbmNlLmFwaS5zZWFyY2guc2hvd0NhbmRpZGF0ZShsb2NhdGlvbik7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJDYW5kaWRhdGUobWFwTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICAvLyBzaG93Q2FuZGlkYXRlKCkgd2l0aCBlbXB0eSBwYXJhbXMgY2xlYXJzIHRoZSBjYW5kaWRhdGUgc2VsZWN0aW9uLlxuICAgIHRhcmdldEluc3RhbmNlLmFwaS5zZWFyY2guc2hvd0NhbmRpZGF0ZSgpO1xuICB9XG5cbiAgcHVibGljIHNldEFuY2hvcihtYXBOYW1lOiBzdHJpbmcsIHBvaW50OiBudW1iZXJbXSkge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLnNlYXJjaC5zZXRBbmNob3IocG9pbnQpO1xuICB9XG5cbiAgcHVibGljIHNldEFuY2hvckZyb21NYXAobWFwTmFtZTogc3RyaW5nKTogW251bWJlciwgbnVtYmVyXSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICBjb25zdCBwb2ludCA9IHRhcmdldEluc3RhbmNlLmFwaS5zZWxlY3RQb2ludC5nZXQoKTtcbiAgICBpZiAocG9pbnQpIHtcbiAgICAgIHRhcmdldEluc3RhbmNlLmFwaS5zZWFyY2guc2V0QW5jaG9yKHBvaW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgcHVibGljIGdldEJhc2VtYXBzKG1hcE5hbWU6IHN0cmluZyk6IGFueSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICByZXR1cm4gdGFyZ2V0SW5zdGFuY2UuYXBpLmJhc2VtYXAuYWxsKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0QmFzZW1hcChtYXBOYW1lOiBzdHJpbmcsIGJhc2VNYXBJbmRleDogbnVtYmVyKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5zdGFuY2UgPSB0aGlzLmZpbmRNYXBJbnN0YW5jZShtYXBOYW1lKTtcbiAgICB0YXJnZXRJbnN0YW5jZS5hcGkuYmFzZW1hcC5zd2l0Y2goYmFzZU1hcEluZGV4KTtcbiAgfVxuICBwdWJsaWMgcmVnaXN0ZXJQbGFjZU5hbWVTZWFyY2hMaXN0ZW5lcihtYXBOYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBhbnkpIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIHRhcmdldEluc3RhbmNlLmFwaS5zZWFyY2guc2V0UmVzdWx0SGFuZGxlcihjYWxsYmFjayk7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJNYXBDbGlja0xpc3RlbmVyKG1hcE5hbWU6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLmNhbGxiYWNrLmNsaWNrKGNhbGxiYWNrKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3Rlck1hcEhvdmVyTGlzdGVuZXIobWFwTmFtZTogc3RyaW5nLCBjYWxsYmFjazogYW55LCBob3ZlckRlbGF5OiBudW1iZXIpIHtcbiAgICBjb25zdCB0YXJnZXRJbnN0YW5jZSA9IHRoaXMuZmluZE1hcEluc3RhbmNlKG1hcE5hbWUpO1xuICAgIHRhcmdldEluc3RhbmNlLmFwaS5jYWxsYmFjay5ob3ZlcihjYWxsYmFjaywgaG92ZXJEZWxheSk7XG4gIH1cblxuICBwdWJsaWMgcmVnaXN0ZXJNYXBTZWxlY3RQb2ludExpc3RlbmVyKG1hcE5hbWU6IHN0cmluZywgY2FsbGJhY2s6IGFueSkge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLmNhbGxiYWNrLnNlbGVjdFBvaW50KGNhbGxiYWNrKTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhclBsYWNlTmFtZVNlYXJjaExpc3RlbmVyKG1hcE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLnNlYXJjaC5zZXRSZXN1bHRIYW5kbGVyKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJNYXBDbGlja0xpc3RlbmVyKG1hcE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLmNhbGxiYWNrLmNsaWNrKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJNYXBIb3Zlckxpc3RlbmVyKG1hcE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLmNhbGxiYWNrLmhvdmVyKCk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJNYXBTZWxlY3RQb2ludExpc3RlbmVyKG1hcE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLmNhbGxiYWNrLnNlbGVjdFBvaW50KCk7XG4gIH1cblxuICBwdWJsaWMgZm9ybWF0Q29vcmRpbmF0ZXMoY29vcmRpbmF0ZXM6IFtudW1iZXIsIG51bWJlcl0pOiBzdHJpbmcge1xuICAgIHJldHVybiBXRk1MLkxvY2F0aW9uLmZvcm1hdChjb29yZGluYXRlcyk7XG4gIH1cblxuICBwdWJsaWMgcGFyc2VDb29yZGluYXRlcyh1cmw6IHN0cmluZyk6IFtudW1iZXIsIG51bWJlcl0ge1xuICAgIHJldHVybiBXRk1MLkxvY2F0aW9uLnBhcnNlKHVybCk7XG4gIH1cblxuICBwdWJsaWMgYWN0aXZhdGVUb29sKG1hcE5hbWU6IHN0cmluZywgdG9vbE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLnRvb2wuYWN0aXZhdGUodG9vbE5hbWUpO1xuICB9XG5cbiAgcHVibGljIHBlcnNpc3RTdGF0ZShtYXBOYW1lOiBzdHJpbmcsIGtleTogc3RyaW5nLCBvcHQ6IGFueSkge1xuICAgIGNvbnN0IHRhcmdldEluc3RhbmNlID0gdGhpcy5maW5kTWFwSW5zdGFuY2UobWFwTmFtZSk7XG4gICAgdGFyZ2V0SW5zdGFuY2UuYXBpLnN0YXRlLnBlcnNpc3Qoa2V5LCBvcHQpO1xuICB9XG59XG4iXX0=