import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export const PRECISION_SECONDS = 3;
export const PRECISION_DECIMAL_DEGREES_FRACTION = 8;
export const RE_ATOM = {
    start: '^\\s*',
    separator: '[ \\t,\\|]+',
    zone: '([zZ]([oO][nN][eE])?[ ])?',
    end: '\\s*$',
    numDec: '(\\d+(?:\\.\\d+)?)',
    numUTM: '(\\d+)'
};
export const REGEXP_UTM = new RegExp(RE_ATOM.start +
    RE_ATOM.numDec +
    RE_ATOM.separator +
    RE_ATOM.numDec +
    RE_ATOM.separator + RE_ATOM.zone +
    RE_ATOM.numUTM +
    RE_ATOM.end);
export const EPSG_GEOGRAPHIC = "EPSG:4326";
export const SCALE = {
    '°': 'deg',
    '\'': 'min',
    '"': 'sec',
    '’': 'min',
    '”': 'sec',
};
export const SCALE_FACTOR = {
    deg: 1, min: 60, sec: 3600
};
export const LONG_MIN = -200;
export const LONG_MAX = -100;
export const LAT_MIN = 0;
export const LAT_MAX = 90;
export class SpatialUtilsService {
    constructor() {
    }
    convertPointCoordinatesToGeoJSON(coordinates) {
        return coordinates ? {
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates
            }
        } : undefined;
    }
    formatCoordinates(coordinates) {
        return this.formatDM(coordinates);
    }
    parseCoordinates(coordinatesText) {
        let longLat = this.parseLocation(coordinatesText);
        if (!longLat)
            return;
        let long = parseFloat(longLat[0].toFixed(PRECISION_DECIMAL_DEGREES_FRACTION));
        let lat = parseFloat(longLat[1].toFixed(PRECISION_DECIMAL_DEGREES_FRACTION));
        return [long, lat];
    }
    formatDM(lonlat) {
        if (!lonlat)
            return "";
        return toDM(lonlat[1]) + ', ' + toDM(lonlat[0]);
        function int(value) {
            if (value < 0) {
                return Math.ceil(value);
            }
            else {
                return Math.floor(value);
            }
        }
        function fraction(value) {
            var absValue = Math.abs(value);
            return absValue - Math.floor(absValue);
        }
        function toDM(value) {
            var degrees = int(value), minutes = fraction(value) * 60;
            return `${degrees} ${minutes.toFixed(PRECISION_SECONDS)}'`;
            0;
        }
    }
    // will be needed once more coordinate systems are handled - e.g. UTM
    parseLocation(s) {
        var lonlat = this.parseGeo(s);
        if (lonlat)
            return lonlat;
        return this.parseUTM(s);
    }
    getUTMCoordinate(s) {
        var match = REGEXP_UTM.exec(s);
        if (match) {
            var num = [
                parseInt(match[1]),
                parseInt(match[2]),
                parseInt(match[5])
            ];
            return num;
        }
        return null;
    }
    parseUTM(s) {
        var utm = this.getUTMCoordinate(s);
        if (!utm)
            return null;
        return this.convertUTM(utm);
    }
    convertUTM(num) {
        var easting = num[0];
        var northing = num[1];
        var zone = num[2];
        return this.transformUTMtoGeo([easting, northing, zone]);
    }
    transformUTMtoGeo(pt) {
        var utmZone = pt[2];
        Proj4js.defs['UTM'] = '+proj=utm +zone=' + utmZone;
        var source = new Proj4js.Proj('UTM');
        var dest = new Proj4js.Proj(EPSG_GEOGRAPHIC);
        var p = new Proj4js.Point(pt[0], pt[1]);
        Proj4js.transform(source, dest, p);
        return [p.x, p.y];
    }
    parseGeo(s) {
        // associate comma with following component, so it can be used to indicate deg
        var normalizedComma = (new String(s)).replace(/\s*,\s*/g, ' ,');
        // remove hemisphere indicators
        // TODO: use this information
        var noHemisphere = normalizedComma.replace(/[news]/ig, '').trim();
        try {
            var split = noHemisphere.split(/\s+/);
            var comps = split.map(function (c, i) {
                var m = c.match(/^([,]?)([-]?\d+[.]?\d*)([Â°'"â€™â€]?)$/);
                if (!m)
                    throw new Error('component not valid: ' + c);
                // scale specifier, if any
                var scale = SCALE[m[3]];
                // the first component, or one after a comma is assumed to be deg
                if (i == 0 || m[1])
                    if (scale && scale != 'deg')
                        throw new Error('component scale should be degrees: ' + c);
                    else
                        scale = 'deg';
                // only deg scale is allowed to be negative
                var val = parseFloat(m[2]);
                if (scale && scale != 'deg' && val < 0)
                    throw new Error('component should not be negative: ' + c);
                return {
                    val: val,
                    scale: scale
                };
            });
        }
        catch (e) {
            return;
        }
        if (comps.length < 2 || comps.length > 6)
            return;
        // prefer a parse that splits the components evenly into 2 halves
        // failing that, use longest possible set of components for the first ordinate
        switch (comps.length) {
            case 2:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 1), comps.slice(1, 2))); // 1 2
            case 3:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 2), comps.slice(2, 3))) // 12 3
                    ||
                        this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 1), comps.slice(1, 3))); // 1 23
            case 4:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 2), comps.slice(2, 4))) // 12 34
                    ||
                        this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 3), comps.slice(3, 4))) // 123 4
                    ||
                        this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 1), comps.slice(1, 4))); // 1 234
            case 5:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 3), comps.slice(3, 5))) // 123 45
                    ||
                        this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 2), comps.slice(2, 5))); // 12 345
            case 6:
                return this.checkRangeFixOrderSign(this.resolveDMSpair(comps.slice(0, 3), comps.slice(3, 6))); // 123 456
        }
        return;
    }
    checkRangeFixOrderSign(p) {
        if (!p)
            return;
        var x = p[0], y = p[1];
        return this.checkRangeFixOrder(x, y) ||
            this.checkRangeFixOrder(-x, y) ||
            this.checkRangeFixOrder(x, -y) ||
            this.checkRangeFixOrder(-x, -y);
    }
    checkRangeFixOrder(x, y) {
        return this.checkRange(y, x) ||
            this.checkRange(x, y);
    }
    checkRange(long, lat) {
        if (lat > LAT_MAX || lat < LAT_MIN)
            return;
        if (long > LONG_MAX || long < LONG_MIN)
            return;
        return [long, lat];
    }
    resolveDMSpair(compsA, compsB) {
        var dmsA = this.resolveDMS.apply(this, compsA);
        if (dmsA === false)
            return false;
        var dmsB = this.resolveDMS.apply(this, compsB);
        if (dmsB === false)
            return false;
        return [dmsA, dmsB];
    }
    resolveDMS(deg, min, sec) {
        if (deg == null)
            return false;
        if (deg.scale && deg.scale != 'deg')
            return false;
        if (min != null && min.scale && min.scale == 'deg')
            return false;
        if (sec != null && sec.scale && (sec.scale == 'deg' || sec.scale == 'min' || min.scale == 'sec'))
            return false;
        var val = deg.val;
        if (min == null)
            return val;
        // minutes not allowed to be negative
        if (min.val < 0)
            return false;
        val += this.sameSign(min.val, deg.val) / SCALE_FACTOR[min.scale || 'min'];
        if (sec == null)
            return val;
        // seconds not allowed to be negative
        if (sec.val < 0)
            return false;
        val += this.sameSign(sec.val, deg.val) / SCALE_FACTOR['sec'];
        return val;
    }
    sameSign(val, proto) {
        if (proto >= 0)
            return Math.abs(val);
        return -Math.abs(val);
    }
}
SpatialUtilsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SpatialUtilsService_Factory() { return new SpatialUtilsService(); }, token: SpatialUtilsService, providedIn: "root" });
SpatialUtilsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SpatialUtilsService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhdGlhbC11dGlscy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS11aS9zcmMvbGliL3NlcnZpY2VzL3NwYXRpYWwtdXRpbHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDbkMsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQUcsQ0FBQyxDQUFDO0FBRXBELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNuQixLQUFLLEVBQUUsT0FBTztJQUNkLFNBQVMsRUFBRSxhQUFhO0lBQ3hCLElBQUksRUFBRSwyQkFBMkI7SUFDakMsR0FBRyxFQUFFLE9BQU87SUFDWixNQUFNLEVBQUUsb0JBQW9CO0lBQzVCLE1BQU0sRUFBRSxRQUFRO0NBQ25CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQ2hDLE9BQU8sQ0FBQyxLQUFLO0lBQ2IsT0FBTyxDQUFDLE1BQU07SUFDZCxPQUFPLENBQUMsU0FBUztJQUNqQixPQUFPLENBQUMsTUFBTTtJQUNkLE9BQU8sQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUk7SUFDaEMsT0FBTyxDQUFDLE1BQU07SUFDZCxPQUFPLENBQUMsR0FBRyxDQUNkLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDO0FBRTNDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRztJQUNqQixHQUFHLEVBQUUsS0FBSztJQUNWLElBQUksRUFBRSxLQUFLO0lBQ1gsR0FBRyxFQUFFLEtBQUs7SUFDVixHQUFHLEVBQUUsS0FBSztJQUNWLEdBQUcsRUFBRSxLQUFLO0NBQ2IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRztJQUN4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R0FBRyxDQUFDO1FBQ2xCLElBQUksR0FBRyxJQUFJLElBQUk7WUFBRSxPQUFPLEdBQUcsQ0FBQztRQUU1QixxQ0FBcUM7UUFDckMsSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUU5QixHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQztRQUMxRSxJQUFJLEdBQUcsSUFBSSxJQUFJO1lBQUUsT0FBTyxHQUFHLENBQUM7UUFFNUIscUNBQXFDO1FBQ3JDLElBQUksR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFOUIsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVPLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSztRQUN2QixJQUFJLEtBQUssSUFBSSxDQUFDO1lBQ1YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3pCLENBQUM7Ozs7WUE3T0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5kZWNsYXJlIHZhciBQcm9qNGpzOiBhbnk7IC8vIExvYWRlZCBieSBhbmd1bGFyLmpzIHNjcmlwdHMgaW1wb3J0IGZpbGVzXG5cbmV4cG9ydCBjb25zdCBQUkVDSVNJT05fU0VDT05EUyA9IDM7XG5leHBvcnQgY29uc3QgUFJFQ0lTSU9OX0RFQ0lNQUxfREVHUkVFU19GUkFDVElPTiA9IDg7XG5cbmV4cG9ydCBjb25zdCBSRV9BVE9NID0ge1xuICAgIHN0YXJ0OiAnXlxcXFxzKicsXG4gICAgc2VwYXJhdG9yOiAnWyBcXFxcdCxcXFxcfF0rJyxcbiAgICB6b25lOiAnKFt6Wl0oW29PXVtuTl1bZUVdKT9bIF0pPycsXG4gICAgZW5kOiAnXFxcXHMqJCcsXG4gICAgbnVtRGVjOiAnKFxcXFxkKyg/OlxcXFwuXFxcXGQrKT8pJyxcbiAgICBudW1VVE06ICcoXFxcXGQrKSdcbn07XG5cbmV4cG9ydCBjb25zdCBSRUdFWFBfVVRNID0gbmV3IFJlZ0V4cChcbiAgICBSRV9BVE9NLnN0YXJ0ICtcbiAgICBSRV9BVE9NLm51bURlYyArXG4gICAgUkVfQVRPTS5zZXBhcmF0b3IgK1xuICAgIFJFX0FUT00ubnVtRGVjICtcbiAgICBSRV9BVE9NLnNlcGFyYXRvciArIFJFX0FUT00uem9uZSArXG4gICAgUkVfQVRPTS5udW1VVE0gK1xuICAgIFJFX0FUT00uZW5kXG4pO1xuXG5leHBvcnQgY29uc3QgRVBTR19HRU9HUkFQSElDID0gXCJFUFNHOjQzMjZcIjtcblxuZXhwb3J0IGNvbnN0IFNDQUxFID0ge1xuICAgICfCsCc6ICdkZWcnLFxuICAgICdcXCcnOiAnbWluJyxcbiAgICAnXCInOiAnc2VjJyxcbiAgICAn4oCZJzogJ21pbicsXG4gICAgJ+KAnSc6ICdzZWMnLFxufTtcblxuZXhwb3J0IGNvbnN0IFNDQUxFX0ZBQ1RPUiA9IHtcbiAgICBkZWc6IDEsIG1pbjogNjAsIHNlYzogMzYwMFxufTtcblxuZXhwb3J0IGNvbnN0IExPTkdfTUlOID0gLTIwMDtcbmV4cG9ydCBjb25zdCBMT05HX01BWCA9IC0xMDA7XG5leHBvcnQgY29uc3QgTEFUX01JTiA9IDA7XG5leHBvcnQgY29uc3QgTEFUX01BWCA9IDkwO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNwYXRpYWxVdGlsc1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbnZlcnRQb2ludENvb3JkaW5hdGVzVG9HZW9KU09OKGNvb3JkaW5hdGVzOiBudW1iZXJbXSkge1xuICAgICAgICByZXR1cm4gY29vcmRpbmF0ZXMgPyB7XG4gICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgICAgICBnZW9tZXRyeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgICAgICAgICAgY29vcmRpbmF0ZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZm9ybWF0Q29vcmRpbmF0ZXMoY29vcmRpbmF0ZXM6IG51bWJlcltdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdERNKGNvb3JkaW5hdGVzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGFyc2VDb29yZGluYXRlcyhjb29yZGluYXRlc1RleHQ6IHN0cmluZykge1xuICAgICAgICBsZXQgbG9uZ0xhdCA9IHRoaXMucGFyc2VMb2NhdGlvbihjb29yZGluYXRlc1RleHQpO1xuICAgICAgICBpZiAoIWxvbmdMYXQpIHJldHVyblxuXG4gICAgICAgIGxldCBsb25nID0gcGFyc2VGbG9hdCggbG9uZ0xhdFsgMCBdLnRvRml4ZWQoIFBSRUNJU0lPTl9ERUNJTUFMX0RFR1JFRVNfRlJBQ1RJT04gKSApO1xuICAgICAgICBsZXQgbGF0ID0gcGFyc2VGbG9hdCggbG9uZ0xhdFsgMSBdLnRvRml4ZWQoIFBSRUNJU0lPTl9ERUNJTUFMX0RFR1JFRVNfRlJBQ1RJT04gKSApO1xuXG4gICAgICAgIHJldHVybiBbIGxvbmcsIGxhdCBdXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JtYXRETShsb25sYXQpIHtcbiAgICAgICAgaWYgKCFsb25sYXQpIHJldHVybiBcIlwiO1xuXG4gICAgICAgIHJldHVybiB0b0RNKGxvbmxhdFsxXSkgKyAnLCAnICsgdG9ETShsb25sYXRbMF0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGludCh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmcmFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGFic1ZhbHVlID0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGFic1ZhbHVlIC0gTWF0aC5mbG9vcihhYnNWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0b0RNKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGVncmVlcyA9IGludCh2YWx1ZSksXG4gICAgICAgICAgICAgICAgbWludXRlcyA9IGZyYWN0aW9uKHZhbHVlKSAqIDYwXG5cbiAgICAgICAgICAgIHJldHVybiBgJHsgZGVncmVlcyB9ICR7IG1pbnV0ZXMudG9GaXhlZCggUFJFQ0lTSU9OX1NFQ09ORFMgKSB9J2A7MFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gd2lsbCBiZSBuZWVkZWQgb25jZSBtb3JlIGNvb3JkaW5hdGUgc3lzdGVtcyBhcmUgaGFuZGxlZCAtIGUuZy4gVVRNXG4gICAgcHJpdmF0ZSBwYXJzZUxvY2F0aW9uKHMpIHtcbiAgICAgICAgdmFyIGxvbmxhdCA9IHRoaXMucGFyc2VHZW8ocyk7XG4gICAgICAgIGlmIChsb25sYXQpIHJldHVybiBsb25sYXQ7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVVRNKHMpO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBnZXRVVE1Db29yZGluYXRlKHMpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gUkVHRVhQX1VUTS5leGVjKHMpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHZhciBudW0gPSBbXG4gICAgICAgICAgICAgICAgcGFyc2VJbnQobWF0Y2hbMV0pLFxuICAgICAgICAgICAgICAgIHBhcnNlSW50KG1hdGNoWzJdKSxcbiAgICAgICAgICAgICAgICBwYXJzZUludChtYXRjaFs1XSlcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICByZXR1cm4gbnVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VVVE0ocykge1xuICAgICAgICB2YXIgdXRtID0gdGhpcy5nZXRVVE1Db29yZGluYXRlKHMpO1xuICAgICAgICBpZiAoIXV0bSkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRVVE0odXRtKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbnZlcnRVVE0obnVtKSB7XG4gICAgICAgIHZhciBlYXN0aW5nID0gbnVtWzBdO1xuICAgICAgICB2YXIgbm9ydGhpbmcgPSBudW1bMV07XG4gICAgICAgIHZhciB6b25lID0gbnVtWzJdO1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1VVE10b0dlbyhbZWFzdGluZywgbm9ydGhpbmcsIHpvbmVdKTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgdHJhbnNmb3JtVVRNdG9HZW8ocHQpIHtcbiAgICAgICAgdmFyIHV0bVpvbmUgPSBwdFsyXTtcbiAgICAgICAgUHJvajRqcy5kZWZzWydVVE0nXSA9ICcrcHJvaj11dG0gK3pvbmU9JyArIHV0bVpvbmU7XG5cbiAgICAgICAgdmFyIHNvdXJjZSA9IG5ldyBQcm9qNGpzLlByb2ooJ1VUTScpO1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBQcm9qNGpzLlByb2ooRVBTR19HRU9HUkFQSElDKTtcbiAgICAgICAgdmFyIHAgPSBuZXcgUHJvajRqcy5Qb2ludChwdFswXSwgcHRbMV0pO1xuICAgICAgICBQcm9qNGpzLnRyYW5zZm9ybShzb3VyY2UsIGRlc3QsIHApO1xuICAgICAgICByZXR1cm4gW3AueCwgcC55XTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlR2VvKHMpIHtcbiAgICAgICAgLy8gYXNzb2NpYXRlIGNvbW1hIHdpdGggZm9sbG93aW5nIGNvbXBvbmVudCwgc28gaXQgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgZGVnXG4gICAgICAgIHZhciBub3JtYWxpemVkQ29tbWEgPSAobmV3IFN0cmluZyhzKSkucmVwbGFjZSgvXFxzKixcXHMqL2csICcgLCcpXG5cbiAgICAgICAgLy8gcmVtb3ZlIGhlbWlzcGhlcmUgaW5kaWNhdG9yc1xuICAgICAgICAvLyBUT0RPOiB1c2UgdGhpcyBpbmZvcm1hdGlvblxuICAgICAgICB2YXIgbm9IZW1pc3BoZXJlID0gbm9ybWFsaXplZENvbW1hLnJlcGxhY2UoL1tuZXdzXS9pZywgJycpLnRyaW0oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHNwbGl0ID0gbm9IZW1pc3BoZXJlLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgICAgICB2YXIgY29tcHMgPSBzcGxpdC5tYXAoZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IGMubWF0Y2goL14oWyxdPykoWy1dP1xcZCtbLl0/XFxkKikoW8OCwrAnXCLDouKCrOKEosOi4oKswp1dPykkLylcbiAgICAgICAgICAgICAgICBpZiAoIW0pIHRocm93IG5ldyBFcnJvcignY29tcG9uZW50IG5vdCB2YWxpZDogJyArIGMpXG5cbiAgICAgICAgICAgICAgICAvLyBzY2FsZSBzcGVjaWZpZXIsIGlmIGFueVxuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IFNDQUxFW21bM11dO1xuXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IGNvbXBvbmVudCwgb3Igb25lIGFmdGVyIGEgY29tbWEgaXMgYXNzdW1lZCB0byBiZSBkZWdcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSAwIHx8IG1bMV0pXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZSAmJiBzY2FsZSAhPSAnZGVnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY29tcG9uZW50IHNjYWxlIHNob3VsZCBiZSBkZWdyZWVzOiAnICsgYylcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSAnZGVnJ1xuXG4gICAgICAgICAgICAgICAgLy8gb25seSBkZWcgc2NhbGUgaXMgYWxsb3dlZCB0byBiZSBuZWdhdGl2ZVxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBwYXJzZUZsb2F0KG1bMl0pO1xuICAgICAgICAgICAgICAgIGlmIChzY2FsZSAmJiBzY2FsZSAhPSAnZGVnJyAmJiB2YWwgPCAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbXBvbmVudCBzaG91bGQgbm90IGJlIG5lZ2F0aXZlOiAnICsgYylcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbDogdmFsLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogc2NhbGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29tcHMubGVuZ3RoIDwgMiB8fCBjb21wcy5sZW5ndGggPiA2KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIC8vIHByZWZlciBhIHBhcnNlIHRoYXQgc3BsaXRzIHRoZSBjb21wb25lbnRzIGV2ZW5seSBpbnRvIDIgaGFsdmVzXG4gICAgICAgIC8vIGZhaWxpbmcgdGhhdCwgdXNlIGxvbmdlc3QgcG9zc2libGUgc2V0IG9mIGNvbXBvbmVudHMgZm9yIHRoZSBmaXJzdCBvcmRpbmF0ZVxuICAgICAgICBzd2l0Y2ggKGNvbXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrUmFuZ2VGaXhPcmRlclNpZ24odGhpcy5yZXNvbHZlRE1TcGFpcihjb21wcy5zbGljZSgwLCAxKSwgY29tcHMuc2xpY2UoMSwgMikpKSAvLyAxIDJcblxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrUmFuZ2VGaXhPcmRlclNpZ24odGhpcy5yZXNvbHZlRE1TcGFpcihjb21wcy5zbGljZSgwLCAyKSwgY29tcHMuc2xpY2UoMiwgMykpKSAvLyAxMiAzXG4gICAgICAgICAgICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tSYW5nZUZpeE9yZGVyU2lnbih0aGlzLnJlc29sdmVETVNwYWlyKGNvbXBzLnNsaWNlKDAsIDEpLCBjb21wcy5zbGljZSgxLCAzKSkpIC8vIDEgMjNcblxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrUmFuZ2VGaXhPcmRlclNpZ24odGhpcy5yZXNvbHZlRE1TcGFpcihjb21wcy5zbGljZSgwLCAyKSwgY29tcHMuc2xpY2UoMiwgNCkpKSAvLyAxMiAzNFxuICAgICAgICAgICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUmFuZ2VGaXhPcmRlclNpZ24odGhpcy5yZXNvbHZlRE1TcGFpcihjb21wcy5zbGljZSgwLCAzKSwgY29tcHMuc2xpY2UoMywgNCkpKSAvLyAxMjMgNFxuICAgICAgICAgICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUmFuZ2VGaXhPcmRlclNpZ24odGhpcy5yZXNvbHZlRE1TcGFpcihjb21wcy5zbGljZSgwLCAxKSwgY29tcHMuc2xpY2UoMSwgNCkpKSAvLyAxIDIzNFxuXG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tSYW5nZUZpeE9yZGVyU2lnbih0aGlzLnJlc29sdmVETVNwYWlyKGNvbXBzLnNsaWNlKDAsIDMpLCBjb21wcy5zbGljZSgzLCA1KSkpIC8vIDEyMyA0NVxuICAgICAgICAgICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUmFuZ2VGaXhPcmRlclNpZ24odGhpcy5yZXNvbHZlRE1TcGFpcihjb21wcy5zbGljZSgwLCAyKSwgY29tcHMuc2xpY2UoMiwgNSkpKSAvLyAxMiAzNDVcblxuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrUmFuZ2VGaXhPcmRlclNpZ24odGhpcy5yZXNvbHZlRE1TcGFpcihjb21wcy5zbGljZSgwLCAzKSwgY29tcHMuc2xpY2UoMywgNikpKSAvLyAxMjMgNDU2XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjaGVja1JhbmdlRml4T3JkZXJTaWduKHApIHtcbiAgICAgICAgaWYgKCFwKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHggPSBwWzBdLFxuICAgICAgICAgICAgeSA9IHBbMV07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tSYW5nZUZpeE9yZGVyKHgsIHkpIHx8XG4gICAgICAgICAgICB0aGlzLmNoZWNrUmFuZ2VGaXhPcmRlcigteCwgeSkgfHxcbiAgICAgICAgICAgIHRoaXMuY2hlY2tSYW5nZUZpeE9yZGVyKHgsIC15KSB8fFxuICAgICAgICAgICAgdGhpcy5jaGVja1JhbmdlRml4T3JkZXIoLXgsIC15KVxuICAgIH1cblxuICAgIHByaXZhdGUgY2hlY2tSYW5nZUZpeE9yZGVyKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tSYW5nZSh5LCB4KSB8fFxuICAgICAgICAgICAgdGhpcy5jaGVja1JhbmdlKHgsIHkpXG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGNoZWNrUmFuZ2UobG9uZywgbGF0KSB7XG4gICAgICAgIGlmIChsYXQgPiBMQVRfTUFYIHx8IGxhdCA8IExBVF9NSU4pIHJldHVybjtcbiAgICAgICAgaWYgKGxvbmcgPiBMT05HX01BWCB8fCBsb25nIDwgTE9OR19NSU4pIHJldHVybjtcblxuICAgICAgICByZXR1cm4gW2xvbmcsIGxhdF1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc29sdmVETVNwYWlyKGNvbXBzQSwgY29tcHNCKSB7XG4gICAgICAgIHZhciBkbXNBID0gdGhpcy5yZXNvbHZlRE1TLmFwcGx5KHRoaXMsIGNvbXBzQSlcbiAgICAgICAgaWYgKGRtc0EgPT09IGZhbHNlKSByZXR1cm4gZmFsc2VcblxuICAgICAgICB2YXIgZG1zQiA9IHRoaXMucmVzb2x2ZURNUy5hcHBseSh0aGlzLCBjb21wc0IpXG4gICAgICAgIGlmIChkbXNCID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgcmV0dXJuIFtkbXNBLCBkbXNCXVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVzb2x2ZURNUyhkZWcsIG1pbiwgc2VjKSB7XG4gICAgICAgIGlmIChkZWcgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZGVnLnNjYWxlICYmIGRlZy5zY2FsZSAhPSAnZGVnJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAobWluICE9IG51bGwgJiYgbWluLnNjYWxlICYmIG1pbi5zY2FsZSA9PSAnZGVnJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoc2VjICE9IG51bGwgJiYgc2VjLnNjYWxlICYmIChzZWMuc2NhbGUgPT0gJ2RlZycgfHwgc2VjLnNjYWxlID09ICdtaW4nIHx8IG1pbi5zY2FsZSA9PSAnc2VjJykpIHJldHVybiBmYWxzZTtcblxuICAgICAgICB2YXIgdmFsID0gZGVnLnZhbDtcbiAgICAgICAgaWYgKG1pbiA9PSBudWxsKSByZXR1cm4gdmFsO1xuXG4gICAgICAgIC8vIG1pbnV0ZXMgbm90IGFsbG93ZWQgdG8gYmUgbmVnYXRpdmVcbiAgICAgICAgaWYgKG1pbi52YWwgPCAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFsICs9IHRoaXMuc2FtZVNpZ24obWluLnZhbCwgZGVnLnZhbCkgLyBTQ0FMRV9GQUNUT1JbbWluLnNjYWxlIHx8ICdtaW4nXTtcbiAgICAgICAgaWYgKHNlYyA9PSBudWxsKSByZXR1cm4gdmFsO1xuXG4gICAgICAgIC8vIHNlY29uZHMgbm90IGFsbG93ZWQgdG8gYmUgbmVnYXRpdmVcbiAgICAgICAgaWYgKHNlYy52YWwgPCAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgdmFsICs9IHRoaXMuc2FtZVNpZ24oc2VjLnZhbCwgZGVnLnZhbCkgLyBTQ0FMRV9GQUNUT1JbJ3NlYyddO1xuXG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzYW1lU2lnbih2YWwsIHByb3RvKSB7XG4gICAgICAgIGlmIChwcm90byA+PSAwKVxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHZhbClcbiAgICAgICAgcmV0dXJuIC1NYXRoLmFicyh2YWwpXG4gICAgfVxufVxuIl19