import { Injectable } from "@angular/core";
import { UUID } from "angular2-uuid";
import { Subject } from "rxjs";
import { MAPTOOL_WINDOW_NAME, MessageType } from "./window-messaging.state";
import * as i0 from "@angular/core";
export class WindowMessagingService {
    constructor() {
        this.children = [];
        if (window.opener) {
            this.parentWindow = {
                id: UUID.UUID(),
                isParent: true,
                window: window.opener,
                messageQueue: []
            };
            window.addEventListener('onbeforeunload', () => this.broadcastMessage(this.getParentWindowId(), { type: MessageType.WINDOW_CLOSING }));
        }
        else {
            window.name = MAPTOOL_WINDOW_NAME;
        }
        this.stream = new Subject();
        window.addEventListener('message', (message) => this.receiveMessage(message.data));
        // setInterval( () => {
        //   if (this.parentWindow) {
        //
        //   } else {
        //     for (let currentChild of this.children) {
        //
        //     }
        //   }
        // }, 1000);
    }
    getParentWindowId() {
        return this.parentWindow ? this.parentWindow.id : null;
    }
    getWindowId(windowName) {
        const targetWindowIndex = this.children.findIndex(currentChild => currentChild.windowName === windowName);
        let targetWindow = (targetWindowIndex > -1) ? this.children[targetWindowIndex] : null;
        if (targetWindow && targetWindow.window && targetWindow.window.closed) {
            // If the window was closed, remove the object from the list of child windows.
            this.children.splice(targetWindowIndex, 1);
            targetWindow = null;
        }
        return (targetWindow) ? targetWindow.id : null;
    }
    broadcastAction(windowId, action) {
        this.broadcastMessage(windowId, {
            type: MessageType.ACTION,
            action
        });
    }
    openWindow(url, windowName = 'default', windowConfig = {
        fullscreen: true,
        rememberWindowSize: true
    }) {
        const windowFeatures = this.getWindowFeaturesSettings(windowConfig);
        const newWindow = {
            id: UUID.UUID(),
            isParent: false,
            url,
            windowName,
            windowConfig,
            window: window.open(url, windowName, windowFeatures),
            messageQueue: []
        };
        this.children.push(newWindow);
        return newWindow.id;
    }
    subscribeToMessageStream(listenerFunction) {
        this.stream.subscribe(message => listenerFunction(message));
        if (this.getParentWindowId() !== null) {
            // Once a listener has been registered, tell the parent to send along any queued messages
            this.broadcastMessage(this.getParentWindowId(), { type: MessageType.READY });
        }
    }
    focusWindow(windowId) {
        let targetWindow;
        if (windowId === this.getParentWindowId()) { // Children will only message their parent
            // This window.open call doesn't actually open a window, but is necessary for window.focus() to work on the parent window
            targetWindow = window.open('', MAPTOOL_WINDOW_NAME);
        }
        else {
            const target = this.getWindow(windowId);
            if (target && target.window) {
                targetWindow = target.window;
            }
        }
        targetWindow.focus();
    }
    broadcastAcknowledge(packet) {
        let target;
        if (this.getParentWindowId()) { // Children will only message their parent
            target = this.parentWindow;
        }
        else {
            target = this.children.find(child => child.windowName === packet.originWindowName);
        }
        if (target) {
            const messagePacket = {
                id: packet.id,
                originWindowName: window.name,
                date: new Date(),
                message: { type: MessageType.ACKNOWLEDGE }
            };
            target.window.postMessage(messagePacket, '*');
        }
    }
    broadcastMessage(windowId, message) {
        let target;
        if (this.getParentWindowId() === windowId) {
            target = this.parentWindow;
        }
        else {
            target = this.getWindow(windowId);
        }
        if (target) {
            const messagePacket = {
                id: UUID.UUID(),
                originWindowName: window.name,
                date: new Date(),
                message: message
            };
            target.messageQueue.push(messagePacket);
            target.window.postMessage(messagePacket, '*');
        }
    }
    receiveMessage(packet) {
        if (!packet || !packet.message) {
            return;
        } // Ignore other window messages.
        let sendAcknowledge = false;
        switch (packet.message.type) {
            case MessageType.READY: {
                const targetWindow = this.children.find(child => child.windowName === packet.originWindowName);
                // If messages were sent before the window was ready, resend them again.
                if (targetWindow && targetWindow.messageQueue.length > 0) {
                    for (let messagePacket of targetWindow.messageQueue) {
                        messagePacket.date = new Date();
                        targetWindow.window.postMessage(messagePacket, '*');
                    }
                }
                sendAcknowledge = true;
                break;
            }
            case MessageType.WINDOW_CLOSING: {
                const closingWindowIndex = this.children.findIndex(child => child.windowName === packet.originWindowName);
                if (closingWindowIndex > -1) {
                    this.children.splice(closingWindowIndex, 1);
                }
                console.log('Child is closing');
                break;
            }
            case MessageType.ACTION: {
                sendAcknowledge = true;
                this.stream.next(packet.message);
                break;
            }
            case MessageType.ACKNOWLEDGE: {
                let targetWindow;
                if (packet.originWindowName === MAPTOOL_WINDOW_NAME) {
                    targetWindow = this.parentWindow;
                }
                else {
                    targetWindow = this.children.find(child => child.windowName === packet.originWindowName);
                }
                if (targetWindow) {
                    const messageIndex = targetWindow.messageQueue.findIndex(message => message.id === packet.id);
                    if (messageIndex > -1) {
                        targetWindow.messageQueue.splice(messageIndex, 1);
                    }
                }
                break;
            }
            default: {
                console.error(`Received message of unknown type ${packet.message.type}: ${JSON.stringify(packet)}`);
            }
        }
        if (sendAcknowledge) {
            this.broadcastAcknowledge(packet);
        }
    }
    getWindow(id) {
        return this.children.find(child => child.id === id);
    }
    getWindowFeaturesSettings(windowConfig) {
        const left = 0;
        const top = 0;
        const { innerWidth, innerHeight, outerWidth, outerHeight } = window;
        const { availWidth: availScreenWidth, availHeight: availScreenHeight } = window.screen;
        const width = availScreenWidth;
        const height = availScreenHeight - (outerHeight - innerHeight);
        const positionSettings = windowConfig.fullscreen ? `,left=${left},top=${top},width=${width},height=${height}` : '';
        return `resizable=yes,scrollbars=yes,status=yes,location=no${positionSettings}`;
    }
}
WindowMessagingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function WindowMessagingService_Factory() { return new WindowMessagingService(); }, token: WindowMessagingService, providedIn: "root" });
WindowMessagingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
WindowMessagingService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LW1lc3NhZ2luZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS11aS9zcmMvbGliL3NlcnZpY2VzL3dpbmRvdy1tZXNzYWdpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBRUwsbUJBQW1CLEVBR25CLFdBQVcsRUFFWixNQUFNLDBCQUEwQixDQUFDOztBQU1sQyxNQUFNLE9BQU8sc0JBQXNCO0lBS2pDO1FBSFEsYUFBUSxHQUF3QixFQUFFLENBQUM7UUFJekMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUc7Z0JBQ2xCLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNmLFFBQVEsRUFBRSxJQUFJO2dCQUNkLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtnQkFDckIsWUFBWSxFQUFFLEVBQUU7YUFDakIsQ0FBQztZQUNGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN4STthQUFNO1lBQ0wsTUFBTSxDQUFDLElBQUksR0FBRyxtQkFBbUIsQ0FBQztTQUNuQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM1QixNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxFQUFFLEVB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Qy9ELE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLFFBQVEsR0FBRyxVQUFVLEtBQUssV0FBVyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRW5ILE9BQU8sc0RBQXNELGdCQUFnQixFQUFFLENBQUM7SUFDbEYsQ0FBQzs7OztZQXJNRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge1VVSUR9IGZyb20gXCJhbmd1bGFyMi11dWlkXCI7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQge1xuICBBcHBsaWNhdGlvbldpbmRvdyxcbiAgTUFQVE9PTF9XSU5ET1dfTkFNRSxcbiAgTWVzc2FnZSxcbiAgTWVzc2FnZVBhY2tldCxcbiAgTWVzc2FnZVR5cGUsXG4gIFdpbmRvd0NvbmZpZ1xufSBmcm9tIFwiLi93aW5kb3ctbWVzc2FnaW5nLnN0YXRlXCI7XG5pbXBvcnQge0FjdGlvbn0gZnJvbSBcIkBuZ3J4L3N0b3JlXCI7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBXaW5kb3dNZXNzYWdpbmdTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdHJlYW06IFN1YmplY3Q8TWVzc2FnZT47XG4gIHByaXZhdGUgY2hpbGRyZW46IEFwcGxpY2F0aW9uV2luZG93W10gPSBbXTtcbiAgcHJpdmF0ZSByZWFkb25seSBwYXJlbnRXaW5kb3c6IEFwcGxpY2F0aW9uV2luZG93O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICh3aW5kb3cub3BlbmVyKSB7XG4gICAgICB0aGlzLnBhcmVudFdpbmRvdyA9IHtcbiAgICAgICAgaWQ6IFVVSUQuVVVJRCgpLFxuICAgICAgICBpc1BhcmVudDogdHJ1ZSxcbiAgICAgICAgd2luZG93OiB3aW5kb3cub3BlbmVyLFxuICAgICAgICBtZXNzYWdlUXVldWU6IFtdXG4gICAgICB9O1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uYmVmb3JldW5sb2FkJywgKCkgPT4gdGhpcy5icm9hZGNhc3RNZXNzYWdlKHRoaXMuZ2V0UGFyZW50V2luZG93SWQoKSwgeyB0eXBlOiBNZXNzYWdlVHlwZS5XSU5ET1dfQ0xPU0lORyB9KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5uYW1lID0gTUFQVE9PTF9XSU5ET1dfTkFNRTtcbiAgICB9XG4gICAgdGhpcy5zdHJlYW0gPSBuZXcgU3ViamVjdCgpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKG1lc3NhZ2UpID0+IHRoaXMucmVjZWl2ZU1lc3NhZ2UobWVzc2FnZS5kYXRhKSk7XG5cbiAgICAvLyBzZXRJbnRlcnZhbCggKCkgPT4ge1xuICAgIC8vICAgaWYgKHRoaXMucGFyZW50V2luZG93KSB7XG4gICAgLy9cbiAgICAvLyAgIH0gZWxzZSB7XG4gICAgLy8gICAgIGZvciAobGV0IGN1cnJlbnRDaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgLy9cbiAgICAvLyAgICAgfVxuICAgIC8vICAgfVxuICAgIC8vIH0sIDEwMDApO1xuICB9XG5cbiAgcHVibGljIGdldFBhcmVudFdpbmRvd0lkKCk6IFVVSUQge1xuICAgIHJldHVybiB0aGlzLnBhcmVudFdpbmRvdyA/IHRoaXMucGFyZW50V2luZG93LmlkIDogbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRXaW5kb3dJZCh3aW5kb3dOYW1lOiBzdHJpbmcpOiBVVUlEIHtcbiAgICBjb25zdCB0YXJnZXRXaW5kb3dJbmRleCA9IHRoaXMuY2hpbGRyZW4uZmluZEluZGV4KGN1cnJlbnRDaGlsZCA9PiBjdXJyZW50Q2hpbGQud2luZG93TmFtZSA9PT0gd2luZG93TmFtZSk7XG4gICAgbGV0IHRhcmdldFdpbmRvdyA9ICh0YXJnZXRXaW5kb3dJbmRleCA+IC0xKSA/IHRoaXMuY2hpbGRyZW5bdGFyZ2V0V2luZG93SW5kZXhdIDogbnVsbDtcbiAgICBpZiAodGFyZ2V0V2luZG93ICYmIHRhcmdldFdpbmRvdy53aW5kb3cgJiYgdGFyZ2V0V2luZG93LndpbmRvdy5jbG9zZWQpIHtcbiAgICAgIC8vIElmIHRoZSB3aW5kb3cgd2FzIGNsb3NlZCwgcmVtb3ZlIHRoZSBvYmplY3QgZnJvbSB0aGUgbGlzdCBvZiBjaGlsZCB3aW5kb3dzLlxuICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UodGFyZ2V0V2luZG93SW5kZXgsIDEpO1xuICAgICAgdGFyZ2V0V2luZG93ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuICh0YXJnZXRXaW5kb3cpID8gdGFyZ2V0V2luZG93LmlkIDogbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBicm9hZGNhc3RBY3Rpb24od2luZG93SWQ6IFVVSUQsIGFjdGlvbjogQWN0aW9uKSB7XG4gICAgdGhpcy5icm9hZGNhc3RNZXNzYWdlKHdpbmRvd0lkLCB7XG4gICAgICB0eXBlOiBNZXNzYWdlVHlwZS5BQ1RJT04sXG4gICAgICBhY3Rpb25cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBvcGVuV2luZG93KHVybDogc3RyaW5nLCB3aW5kb3dOYW1lID0gJ2RlZmF1bHQnLCB3aW5kb3dDb25maWc6IFdpbmRvd0NvbmZpZyA9IHtcbiAgICBmdWxsc2NyZWVuOiB0cnVlLFxuICAgIHJlbWVtYmVyV2luZG93U2l6ZTogdHJ1ZVxuICB9KTogVVVJRCB7XG4gICAgY29uc3Qgd2luZG93RmVhdHVyZXMgPSB0aGlzLmdldFdpbmRvd0ZlYXR1cmVzU2V0dGluZ3Mod2luZG93Q29uZmlnKTtcbiAgICBjb25zdCBuZXdXaW5kb3c6IEFwcGxpY2F0aW9uV2luZG93ID0ge1xuICAgICAgaWQ6IFVVSUQuVVVJRCgpLFxuICAgICAgaXNQYXJlbnQ6IGZhbHNlLFxuICAgICAgdXJsLFxuICAgICAgd2luZG93TmFtZSxcbiAgICAgIHdpbmRvd0NvbmZpZyxcbiAgICAgIHdpbmRvdzogd2luZG93Lm9wZW4odXJsLCB3aW5kb3dOYW1lLCB3aW5kb3dGZWF0dXJlcyksXG4gICAgICBtZXNzYWdlUXVldWU6IFtdXG4gICAgfTtcblxuICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuZXdXaW5kb3cpO1xuICAgIHJldHVybiBuZXdXaW5kb3cuaWQ7XG4gIH1cblxuICBwdWJsaWMgc3Vic2NyaWJlVG9NZXNzYWdlU3RyZWFtKGxpc3RlbmVyRnVuY3Rpb246IChtZXNzYWdlOiBNZXNzYWdlKSA9PiBhbnkpIHtcbiAgICB0aGlzLnN0cmVhbS5zdWJzY3JpYmUobWVzc2FnZSA9PiBsaXN0ZW5lckZ1bmN0aW9uKG1lc3NhZ2UpKTtcbiAgICBpZiAodGhpcy5nZXRQYXJlbnRXaW5kb3dJZCgpICE9PSBudWxsKSB7XG4gICAgICAvLyBPbmNlIGEgbGlzdGVuZXIgaGFzIGJlZW4gcmVnaXN0ZXJlZCwgdGVsbCB0aGUgcGFyZW50IHRvIHNlbmQgYWxvbmcgYW55IHF1ZXVlZCBtZXNzYWdlc1xuICAgICAgdGhpcy5icm9hZGNhc3RNZXNzYWdlKHRoaXMuZ2V0UGFyZW50V2luZG93SWQoKSwgeyB0eXBlOiBNZXNzYWdlVHlwZS5SRUFEWSB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZm9jdXNXaW5kb3cod2luZG93SWQ6IFVVSUQpIHtcbiAgICBsZXQgdGFyZ2V0V2luZG93O1xuICAgIGlmICh3aW5kb3dJZCA9PT0gdGhpcy5nZXRQYXJlbnRXaW5kb3dJZCgpKSB7IC8vIENoaWxkcmVuIHdpbGwgb25seSBtZXNzYWdlIHRoZWlyIHBhcmVudFxuICAgICAgLy8gVGhpcyB3aW5kb3cub3BlbiBjYWxsIGRvZXNuJ3QgYWN0dWFsbHkgb3BlbiBhIHdpbmRvdywgYnV0IGlzIG5lY2Vzc2FyeSBmb3Igd2luZG93LmZvY3VzKCkgdG8gd29yayBvbiB0aGUgcGFyZW50IHdpbmRvd1xuICAgICAgdGFyZ2V0V2luZG93ID0gd2luZG93Lm9wZW4oJycsIE1BUFRPT0xfV0lORE9XX05BTUUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmdldFdpbmRvdyh3aW5kb3dJZCk7XG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC53aW5kb3cpIHtcbiAgICAgICAgdGFyZ2V0V2luZG93ID0gdGFyZ2V0LndpbmRvdztcbiAgICAgIH1cbiAgICB9XG4gICAgdGFyZ2V0V2luZG93LmZvY3VzKCk7XG4gIH1cblxuICBwcml2YXRlIGJyb2FkY2FzdEFja25vd2xlZGdlKHBhY2tldDogTWVzc2FnZVBhY2tldCkge1xuICAgIGxldCB0YXJnZXQ7XG4gICAgaWYgKHRoaXMuZ2V0UGFyZW50V2luZG93SWQoKSkgeyAvLyBDaGlsZHJlbiB3aWxsIG9ubHkgbWVzc2FnZSB0aGVpciBwYXJlbnRcbiAgICAgIHRhcmdldCA9IHRoaXMucGFyZW50V2luZG93O1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQgPSB0aGlzLmNoaWxkcmVuLmZpbmQoY2hpbGQgPT4gY2hpbGQud2luZG93TmFtZSA9PT0gcGFja2V0Lm9yaWdpbldpbmRvd05hbWUpO1xuICAgIH1cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICBjb25zdCBtZXNzYWdlUGFja2V0OiBNZXNzYWdlUGFja2V0ID0ge1xuICAgICAgICBpZDogcGFja2V0LmlkLFxuICAgICAgICBvcmlnaW5XaW5kb3dOYW1lOiB3aW5kb3cubmFtZSxcbiAgICAgICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgbWVzc2FnZTogeyB0eXBlOiBNZXNzYWdlVHlwZS5BQ0tOT1dMRURHRSB9XG4gICAgICB9O1xuICAgICAgdGFyZ2V0LndpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlUGFja2V0LCAnKicpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYnJvYWRjYXN0TWVzc2FnZSh3aW5kb3dJZDogVVVJRCwgbWVzc2FnZTogTWVzc2FnZSkge1xuICAgIGxldCB0YXJnZXQ7XG4gICAgaWYgKHRoaXMuZ2V0UGFyZW50V2luZG93SWQoKSA9PT0gd2luZG93SWQpIHtcbiAgICAgIHRhcmdldCA9IHRoaXMucGFyZW50V2luZG93O1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQgPSB0aGlzLmdldFdpbmRvdyh3aW5kb3dJZCk7XG4gICAgfVxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VQYWNrZXQ6IE1lc3NhZ2VQYWNrZXQgPSB7XG4gICAgICAgIGlkOiBVVUlELlVVSUQoKSxcbiAgICAgICAgb3JpZ2luV2luZG93TmFtZTogd2luZG93Lm5hbWUsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgIH07XG4gICAgICB0YXJnZXQubWVzc2FnZVF1ZXVlLnB1c2gobWVzc2FnZVBhY2tldCk7XG4gICAgICB0YXJnZXQud2luZG93LnBvc3RNZXNzYWdlKG1lc3NhZ2VQYWNrZXQsICcqJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWNlaXZlTWVzc2FnZShwYWNrZXQ6IE1lc3NhZ2VQYWNrZXQpIHtcbiAgICBpZiAoIXBhY2tldCB8fCAhcGFja2V0Lm1lc3NhZ2UpIHsgcmV0dXJuOyB9IC8vIElnbm9yZSBvdGhlciB3aW5kb3cgbWVzc2FnZXMuXG4gICAgbGV0IHNlbmRBY2tub3dsZWRnZSA9IGZhbHNlO1xuICAgIHN3aXRjaCAocGFja2V0Lm1lc3NhZ2UudHlwZSkge1xuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5SRUFEWToge1xuICAgICAgICBjb25zdCB0YXJnZXRXaW5kb3cgPSB0aGlzLmNoaWxkcmVuLmZpbmQoY2hpbGQgPT4gY2hpbGQud2luZG93TmFtZSA9PT0gcGFja2V0Lm9yaWdpbldpbmRvd05hbWUpO1xuICAgICAgICAvLyBJZiBtZXNzYWdlcyB3ZXJlIHNlbnQgYmVmb3JlIHRoZSB3aW5kb3cgd2FzIHJlYWR5LCByZXNlbmQgdGhlbSBhZ2Fpbi5cbiAgICAgICAgaWYgKHRhcmdldFdpbmRvdyAmJiB0YXJnZXRXaW5kb3cubWVzc2FnZVF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb3IgKGxldCBtZXNzYWdlUGFja2V0IG9mIHRhcmdldFdpbmRvdy5tZXNzYWdlUXVldWUpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VQYWNrZXQuZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0YXJnZXRXaW5kb3cud2luZG93LnBvc3RNZXNzYWdlKG1lc3NhZ2VQYWNrZXQsICcqJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNlbmRBY2tub3dsZWRnZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5XSU5ET1dfQ0xPU0lORzoge1xuICAgICAgICBjb25zdCBjbG9zaW5nV2luZG93SW5kZXggPSB0aGlzLmNoaWxkcmVuLmZpbmRJbmRleChjaGlsZCA9PiBjaGlsZC53aW5kb3dOYW1lID09PSBwYWNrZXQub3JpZ2luV2luZG93TmFtZSk7XG4gICAgICAgIGlmIChjbG9zaW5nV2luZG93SW5kZXggPiAtMSkge1xuICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGNsb3NpbmdXaW5kb3dJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ0NoaWxkIGlzIGNsb3NpbmcnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIE1lc3NhZ2VUeXBlLkFDVElPTjoge1xuICAgICAgICBzZW5kQWNrbm93bGVkZ2UgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0cmVhbS5uZXh0KHBhY2tldC5tZXNzYWdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIE1lc3NhZ2VUeXBlLkFDS05PV0xFREdFOiB7XG4gICAgICAgIGxldCB0YXJnZXRXaW5kb3c7XG4gICAgICAgIGlmIChwYWNrZXQub3JpZ2luV2luZG93TmFtZSA9PT0gTUFQVE9PTF9XSU5ET1dfTkFNRSkge1xuICAgICAgICAgIHRhcmdldFdpbmRvdyA9IHRoaXMucGFyZW50V2luZG93O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFdpbmRvdyA9IHRoaXMuY2hpbGRyZW4uZmluZChjaGlsZCA9PiBjaGlsZC53aW5kb3dOYW1lID09PSBwYWNrZXQub3JpZ2luV2luZG93TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldFdpbmRvdykge1xuICAgICAgICAgIGNvbnN0IG1lc3NhZ2VJbmRleCA9IHRhcmdldFdpbmRvdy5tZXNzYWdlUXVldWUuZmluZEluZGV4KG1lc3NhZ2UgPT4gbWVzc2FnZS5pZCA9PT0gcGFja2V0LmlkKTtcbiAgICAgICAgICBpZiAobWVzc2FnZUluZGV4ID4gLTEpIHsgdGFyZ2V0V2luZG93Lm1lc3NhZ2VRdWV1ZS5zcGxpY2UobWVzc2FnZUluZGV4LCAxKTsgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBSZWNlaXZlZCBtZXNzYWdlIG9mIHVua25vd24gdHlwZSAke3BhY2tldC5tZXNzYWdlLnR5cGV9OiAke0pTT04uc3RyaW5naWZ5KHBhY2tldCl9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzZW5kQWNrbm93bGVkZ2UpIHsgdGhpcy5icm9hZGNhc3RBY2tub3dsZWRnZShwYWNrZXQpOyB9XG4gIH1cblxuICBwcml2YXRlIGdldFdpbmRvdyhpZDogVVVJRCk6IEFwcGxpY2F0aW9uV2luZG93IHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5maW5kKGNoaWxkID0+IGNoaWxkLmlkID09PSBpZCk7XG4gIH1cblxuICBwcml2YXRlIGdldFdpbmRvd0ZlYXR1cmVzU2V0dGluZ3Mod2luZG93Q29uZmlnOiBXaW5kb3dDb25maWcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxlZnQgPSAwO1xuICAgIGNvbnN0IHRvcCA9IDA7XG4gICAgY29uc3QgeyBpbm5lcldpZHRoLCBpbm5lckhlaWdodCwgb3V0ZXJXaWR0aCwgb3V0ZXJIZWlnaHQgfSA9IHdpbmRvdztcbiAgICBjb25zdCB7IGF2YWlsV2lkdGg6IGF2YWlsU2NyZWVuV2lkdGgsIGF2YWlsSGVpZ2h0OiBhdmFpbFNjcmVlbkhlaWdodCB9ID0gd2luZG93LnNjcmVlbjtcbiAgICBjb25zdCB3aWR0aCA9IGF2YWlsU2NyZWVuV2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gYXZhaWxTY3JlZW5IZWlnaHQgLSAob3V0ZXJIZWlnaHQgLSBpbm5lckhlaWdodCk7XG4gICAgY29uc3QgcG9zaXRpb25TZXR0aW5ncyA9IHdpbmRvd0NvbmZpZy5mdWxsc2NyZWVuID8gYCxsZWZ0PSR7bGVmdH0sdG9wPSR7dG9wfSx3aWR0aD0ke3dpZHRofSxoZWlnaHQ9JHtoZWlnaHR9YCA6ICcnO1xuXG4gICAgcmV0dXJuIGByZXNpemFibGU9eWVzLHNjcm9sbGJhcnM9eWVzLHN0YXR1cz15ZXMsbG9jYXRpb249bm8ke3Bvc2l0aW9uU2V0dGluZ3N9YDtcbiAgfVxufVxuXG4iXX0=