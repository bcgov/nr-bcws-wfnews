import { Component, Input } from "@angular/core";
import { AppConfigService } from "../services/app-config.service";
export class VisualizeJSComponent {
    constructor(appConfig) {
        this.appConfig = appConfig;
        this.currentPage = 1;
    }
    static handleError(err) {
        console.error(err.message);
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
        const config = this.appConfig.getConfig();
        if (!config || !config.externalAppConfig || !config.externalAppConfig.jasper) {
            throw new Error('Could not find Jasper configuration settings in application configuration');
        }
        let themeHref = `${config.externalAppConfig.jasper.url}/_themes/${config.externalAppConfig.jasper.themeHash}/theme.css`.split("/").slice(0, -1).join("/");
        visualize.config({
            server: config.externalAppConfig.jasper.url,
            scripts: `runtime/${config.externalAppConfig.jasper.scriptsHash}/optimized-scripts`,
            logEnabled: true,
            logLevel: "error",
            _showInputControls: "true" === "true",
            theme: {
                href: themeHref
            }
        });
        // new Promise((resolve, reject) => {
        visualize({
            server: config.externalAppConfig.jasper.url
        }, (vis) => {
            let reportConfig = {
                resource: this.reportPath,
                container: `#${this.elementId}`,
                error: VisualizeJSComponent.handleError,
            };
            if (this.reportParams) {
                reportConfig.params = this.reportParams;
            }
            this.report = vis.report(reportConfig);
        });
        // }).then(result => this.report = result)
        //   .catch(error => console.error(error));
    }
    isExportFormatSupported(format) {
        if (format) {
            if (this.supportedExportFormats && this.supportedExportFormats.length > 0) {
                return this.supportedExportFormats.includes(format);
            }
        }
        return false;
    }
    exportToPDF() {
        this.export('pdf');
    }
    exportToExcel() {
        this.export('csv');
    }
    previousPage() {
        if (this.currentPage !== 1) {
            this.currentPage -= 1;
            this.report.pages(this.currentPage).run().fail((err) => console.error(err));
        }
    }
    nextPage() {
        this.currentPage += 1;
        this.report.pages(this.currentPage).run().fail((err) => {
            if (err.errorCode === 'page.number.out.of.range') {
                this.currentPage -= 1;
            }
            else {
                console.error(err);
            }
        });
    }
    export(outputFormat) {
        let params = { outputFormat: outputFormat,
            ignorePagination: outputFormat === 'csv' ? true : false
        };
        this.report.export(params)
            .done(function (link) {
            window.open(link.href); // open new window to download report
        })
            .fail(function (err) {
            alert(err.message);
        });
    }
}
VisualizeJSComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf1-visualize-js',
                template: "<div class=\"wf1-jaspersoft-report\">\n  <div class=\"wf1-jaspersoft-report-toolbar\">\n    <button matTooltip=\"Export to PDF\" (click)=\"exportToPDF()\" [hidden]=\"!isExportFormatSupported('pdf')\"><mat-icon>picture_as_pdf</mat-icon></button>\n    <button matTooltip=\"Export to Excel\" (click)=\"exportToExcel()\" [hidden]=\"!isExportFormatSupported('csv')\"><mat-icon>table_chart</mat-icon></button>\n    <button matTooltip=\"Previous Page\" (click)=\"previousPage()\"><mat-icon>navigate_before</mat-icon></button>\n    <button matTooltip=\"Next Page\" (click)=\"nextPage()\"><mat-icon>navigate_next</mat-icon></button>\n  </div>\n  <div [id]=\"elementId\" class=\"wf1-jaspersoft-report-content\"></div>\n</div>\n",
                styles: [""]
            },] }
];
VisualizeJSComponent.ctorParameters = () => [
    { type: AppConfigService }
];
VisualizeJSComponent.propDecorators = {
    elementId: [{ type: Input }],
    reportPath: [{ type: Input }],
    reportParams: [{ type: Input }],
    supportedExportFormats: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,