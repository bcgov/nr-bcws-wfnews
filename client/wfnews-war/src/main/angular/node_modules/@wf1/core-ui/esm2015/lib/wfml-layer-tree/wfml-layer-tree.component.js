import { ChangeDetectorRef, Component } from "@angular/core";
import { MapService } from "../services/map.service";
import { NestedTreeControl } from "@angular/cdk/tree";
import { MatTreeNestedDataSource } from "@angular/material/tree";
import { SelectionModel } from "@angular/cdk/collections";
export class WFMLLayerTreeComponent {
    constructor(mapService, changeDetectorRef) {
        this.mapService = mapService;
        this.changeDetectorRef = changeDetectorRef;
        /** The selection for checklist */
        this.checklistSelection = new SelectionModel(true /* multiple */);
        this.hasChildren = (_, node) => !!node.child;
        this.treeControl = new NestedTreeControl((node) => node.child);
        this.dataSource = new MatTreeNestedDataSource();
    }
    ngOnInit() {
        if (this.mapService.isMapInitialized('map')) {
            this.initializeTreeLayer();
        }
        else {
            this.mapService.mapInstanceEmitter.asObservable().subscribe(data => {
                this.initializeTreeLayer();
            });
        }
    }
    initializeTreeLayer() {
        const layerTreeView = this.mapService.getLayerTreeView('map');
        if (layerTreeView) {
            this.dataSource.data = layerTreeView.child;
            this.checklistSelection.select(...this.findSelectedElements(layerTreeView));
        }
    }
    findSelectedElements(node) {
        const results = [];
        if (node.isVisible || (node.lyr && node.lyr.isVisible)) {
            results.push(node);
        }
        if (node.child) {
            for (const childNode of node.child) {
                results.push(...this.findSelectedElements(childNode));
            }
        }
        return results;
    }
    /** Whether all the descendants of the node are selected */
    descendantsAllSelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        if (!descendants.length) {
            return this.checklistSelection.isSelected(node);
        }
        const selected = this.checklistSelection.isSelected(node);
        const allSelected = descendants.every(child => this.checklistSelection.isSelected(child));
        if (!selected && allSelected) {
            this.checklistSelection.select(node);
            this.changeDetectorRef.markForCheck();
        }
        return allSelected;
    }
    /** Whether part of the descendants are selected */
    descendantsPartiallySelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        if (!descendants.length) {
            return false;
        }
        const result = descendants.some(child => this.checklistSelection.isSelected(child));
        return result && !this.descendantsAllSelected(node);
    }
    /** Toggle the game selection. Select/deselect all the descendants node */
    nodeSelectionToggle(node) {
        this.checklistSelection.toggle(node);
        if (node.lyr) {
            this.mapService.setLayerVisibility('map', node.lyr.id, this.checklistSelection.isSelected(node));
        }
        const descendants = this.treeControl.getDescendants(node);
        if (this.checklistSelection.isSelected(node)) {
            this.checklistSelection.select(...descendants, node);
        }
        else {
            this.checklistSelection.deselect(...descendants, node);
        }
        for (const childNode of descendants) {
            if (childNode.lyr) {
                this.mapService.setLayerVisibility('map', childNode.lyr.id, this.checklistSelection.isSelected(childNode));
            }
        }
        this.changeDetectorRef.markForCheck();
    }
}
WFMLLayerTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf1-wfml-layer-tree',
                template: "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" class=\"wf1-layer-tree\">\n    <mat-nested-tree-node *matTreeNodeDef=\"let node\">\n      <li>\n        <div class=\"mat-tree-node\">\n<!--          <button mat-icon-button disabled></button>-->\n          <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                        [indeterminate]=\"descendantsPartiallySelected(node)\"\n                        (change)=\"nodeSelectionToggle(node)\"\n                        labelPosition=\"before\">\n            {{node.title}}\n          </mat-checkbox>\n        </div>\n      </li>\n    </mat-nested-tree-node>\n\n    <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChildren\">\n      <li>\n        <div class=\"mat-tree-node\">\n          <button mat-icon-button matTreeNodeToggle\n                  [attr.aria-label]=\"'toggle ' + node.title\">\n            <mat-icon>\n              {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n            </mat-icon>\n          </button>\n          <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\n                        [indeterminate]=\"descendantsPartiallySelected(node)\"\n                        (change)=\"nodeSelectionToggle(node)\"\n                        labelPosition=\"before\">\n            {{node.title}}\n          </mat-checkbox>\n        </div>\n        <ul>\n          <div *ngIf=\"treeControl.isExpanded(node)\">\n            <ng-container matTreeNodeOutlet></ng-container>\n          </div>\n        </ul>\n      </li>\n    </mat-nested-tree-node>\n  </mat-tree>\n"
            },] }
];
WFMLLayerTreeComponent.ctorParameters = () => [
    { type: MapService },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,