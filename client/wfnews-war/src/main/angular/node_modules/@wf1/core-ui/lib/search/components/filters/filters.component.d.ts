import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from "@angular/core";
import { FormBuilder, FormGroup } from "@angular/forms";
import { Store } from "@ngrx/store";
import { IncidentType } from "../../../application-icon/application-icon.model";
import { FilterConfig } from "../../models/filter/filter-config";
import { SearchState } from "../../store/state";
import * as ɵngcc0 from '@angular/core';
export declare class FiltersComponent implements OnInit, AfterViewInit, OnChanges {
    private formBuilder;
    private store;
    filters: FilterConfig[];
    constructor(formBuilder: FormBuilder, store: Store<SearchState>);
    ngOnChanges(changes: SimpleChanges): void;
    TOOLTIP_DELAY: number;
    fromDateMin: any[];
    toDateMax: any[];
    DATE_FORMATS: {
        fullPickerInput: string;
        datePickerInput: string;
        timePickerInput: string;
        monthYearLabel: string;
        dateA11yLabel: string;
        monthYearA11yLabel: string;
    };
    private _filters;
    componentId: string;
    isShowingFilterOptions: EventEmitter<boolean>;
    filterForm: FormGroup;
    activeFilters: {
        [param: string]: any[];
    };
    showBody: boolean;
    lastTabPosition: number;
    clearFilterIconType: IncidentType;
    filterTabBodyEl: ElementRef;
    validateDate: (m: any) => boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    createForm(): void;
    checkboxUpdated(event: any): void;
    dateUpdated(event: any, param: any, fromTo: any): void;
    getActiveFilters(): void;
    selectTab(tab: any): void;
    toggleActiveTabContent(isActiveTab: any, showBody: any): void;
    clearFilter(param: string): void;
    updateFormValues(): void;
    extractValuesFromForm(filterValues: {
        [prop: string]: any;
    }): void;
    getFormArrayNames(group: FormGroup): string[];
    getFormControlsFromArray(group: FormGroup, prop: string): FormGroup[];
    getSelectedFilterValues(param: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<FiltersComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<FiltersComponent, "wf1-filters", never, { "filters": "filters"; "componentId": "componentId"; }, { "isShowingFilterOptions": "isShowingFilterOptions"; }, never, never, false, never>;
}

//# sourceMappingURL=filters.component.d.ts.map