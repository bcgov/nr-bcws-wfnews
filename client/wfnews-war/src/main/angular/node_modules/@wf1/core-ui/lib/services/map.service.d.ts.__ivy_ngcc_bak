import { Subject } from "rxjs";
import { AppConfigService } from "./app-config.service";
export interface WFMLLocation {
    name: string;
    type?: string;
    dist?: number;
    loc: [number, number];
}
export interface Code {
    code?: string;
    description?: string;
}
export interface CodeTables {
    [prop: string]: Code[];
}
export declare class MapService {
    private appConfig;
    private mapInstances;
    mapInstanceEmitter: Subject<any>;
    constructor(appConfig: AppConfigService);
    private findMapInstance;
    onResize(): void;
    /**
     * Returns a boolean flag that indicates whether the target map instance has been initialized.
     * @param mapName Id value of the leaflet element on the page.
     */
    isMapInitialized(mapName: any): boolean;
    /**
     * initialize map
     * @param mapName string
     */
    initializeMap(mapName: any): void;
    /**
     * get layer tree view
     * @param mapName string
     */
    getLayerTreeView(mapName: string): any;
    /**
     * set map layer visibility
     * @param mapName string
     * @param id layer id
     * @param isVisible visibility boolean
     */
    setLayerVisibility(mapName: string, id: string, isVisible: boolean): void;
    /**
     * zoomToPoint zooms the map to a specific point.
     * @param mapName string
     * @param coordinates coordinates
     * @param zoomLevel number
     */
    zoomToPoint(mapName: string, coordinates: number[], zoomLevel?: number): void;
    /**
     * stop edit
     * @param mapName string
     */
    stopEdit(mapName: string): void;
    /**
     * hide all map layer objects
     * @param mapName string
     * @param type ued or string
     */
    hideAll(mapName: string, type: 'UED' | string): void;
    /**
     * redray Layer
     * @param mapName string
     * @param layerName string
     */
    redrawLayer(mapName: string, layerName: string): void;
    /**
     * add Highlight
     * @param mapName string
     * @param lonlat longitude latatude array
     */
    addHighlight(mapName: string, lonlat: number[]): void;
    /**
     * clear all highlights on map.
     * @param mapName string
     */
    clearHighlight(mapName: string): void;
    /**
     * Load Report of Fires as markers from report of fires resources
     * @param mapName string
     * @param reportOfFires collection of report of fire resources from WFIM api
     * @param markerClickCallback callback function for markers
     */
    loadRoFMarkers(mapName: string, reportOfFires: any, markerClickCallback?: any): void;
    /**
     * Load Incidents as markers from incident resources
     * @param mapName string
     * @param optionsCodeTables Code[]
     * @param orgOptionsCodeTables Code[]
     * @param incidents collection of report of fire resources from WFIM api
     * @param markerClickCallback callback function for markers
     */
    loadIncidentMarkers(mapName: string, incidents: any, optionsCodeTables: CodeTables, orgOptionsCodeTables: CodeTables, markerClickCallback?: any): void;
    /**
     * Clear markers from the specified mapName and markerLayerId
     * @param mapName string
     * @param markerLayerId identifier for the marker layer tracked by the marker manager
     */
    clearMarkers(mapName: string, markerLayerId: string): any;
    /**
     * Set markers layer visibility from the specified mapName and markerLayerId
     * @param mapName string
     * @param markerLayerId identifier for the marker layer tracked by the marker manager
     * @param visible boolean for setting the visibility of the marker layer
     */
    showMarkers(mapName: string, markerLayerId: string, visible: boolean): any;
    /**
    * Add legend layers
    * @param mapName name of the map instance
    * @param layerId id of the target map layer the legend attaches to
    * @param legend structure based on WFML api for legends - refer to WFML test bed for examples
    */
    addLegend(mapName: string, layerId: string, legend: any): void;
    /**
     * Clear selected point (pin) from the specified map instance
     */
    clearSelectPoint(mapName: string): void;
    setMaxSearchDistance(mapName: string, withinDistance: number): void;
    findPlace(mapName: string, searchText: string): void;
    findRoad(mapName: string, searchText: string): void;
    findIntersection(mapName: string, roadName: string, intersectingRoadName: string): void;
    clearPlaceNameSearch(mapName: string): void;
    panToPlaceNameSearchLocation(mapName: string): void;
    zoomToPlaceNameSearchLocation(mapName: string): void;
    showCandidate(mapName: string, location: WFMLLocation): void;
    clearCandidate(mapName: string): void;
    setAnchor(mapName: string, point: number[]): void;
    setAnchorFromMap(mapName: string): [number, number];
    getBasemaps(mapName: string): any;
    setBasemap(mapName: string, baseMapIndex: number): void;
    registerPlaceNameSearchListener(mapName: string, callback: any): void;
    registerMapClickListener(mapName: string, callback: any): void;
    registerMapHoverListener(mapName: string, callback: any, hoverDelay: number): void;
    registerMapSelectPointListener(mapName: string, callback: any): void;
    clearPlaceNameSearchListener(mapName: string): void;
    clearMapClickListener(mapName: string): void;
    clearMapHoverListener(mapName: string): void;
    clearMapSelectPointListener(mapName: string): void;
    formatCoordinates(coordinates: [number, number]): string;
    parseCoordinates(url: string): [number, number];
    activateTool(mapName: string, toolName: string): void;
    persistState(mapName: string, key: string, opt: any): void;
}
