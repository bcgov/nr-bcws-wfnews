{"version":3,"file":"map.service.d.ts","sources":["map.service.d.ts"],"names":[],"mappingssourcesContent":["import { Subject } from \"rxjs\";\nimport { AppConfigService } from \"./app-config.service\";\nexport interface WFMLLocation {\n    name: string;\n    type?: string;\n    dist?: number;\n    loc: [number, number];\n}\nexport interface Code {\n    code?: string;\n    description?: string;\n}\nexport interface CodeTables {\n    [prop: string]: Code[];\n}\nexport declare class MapService {\n    private appConfig;\n    private mapInstances;\n    mapInstanceEmitter: Subject<any>;\n    constructor(appConfig: AppConfigService);\n    private findMapInstance;\n    onResize(): void;\n    /**\n     * Returns a boolean flag that indicates whether the target map instance has been initialized.\n     * @param mapName Id value of the leaflet element on the page.\n     */\n    isMapInitialized(mapName: any): boolean;\n    /**\n     * initialize map\n     * @param mapName string\n     */\n    initializeMap(mapName: any): void;\n    /**\n     * get layer tree view\n     * @param mapName string\n     */\n    getLayerTreeView(mapName: string): any;\n    /**\n     * set map layer visibility\n     * @param mapName string\n     * @param id layer id\n     * @param isVisible visibility boolean\n     */\n    setLayerVisibility(mapName: string, id: string, isVisible: boolean): void;\n    /**\n     * zoomToPoint zooms the map to a specific point.\n     * @param mapName string\n     * @param coordinates coordinates\n     * @param zoomLevel number\n     */\n    zoomToPoint(mapName: string, coordinates: number[], zoomLevel?: number): void;\n    /**\n     * stop edit\n     * @param mapName string\n     */\n    stopEdit(mapName: string): void;\n    /**\n     * hide all map layer objects\n     * @param mapName string\n     * @param type ued or string\n     */\n    hideAll(mapName: string, type: 'UED' | string): void;\n    /**\n     * redray Layer\n     * @param mapName string\n     * @param layerName string\n     */\n    redrawLayer(mapName: string, layerName: string): void;\n    /**\n     * add Highlight\n     * @param mapName string\n     * @param lonlat longitude latatude array\n     */\n    addHighlight(mapName: string, lonlat: number[]): void;\n    /**\n     * clear all highlights on map.\n     * @param mapName string\n     */\n    clearHighlight(mapName: string): void;\n    /**\n     * Load Report of Fires as markers from report of fires resources\n     * @param mapName string\n     * @param reportOfFires collection of report of fire resources from WFIM api\n     * @param markerClickCallback callback function for markers\n     */\n    loadRoFMarkers(mapName: string, reportOfFires: any, markerClickCallback?: any): void;\n    /**\n     * Load Incidents as markers from incident resources\n     * @param mapName string\n     * @param optionsCodeTables Code[]\n     * @param orgOptionsCodeTables Code[]\n     * @param incidents collection of report of fire resources from WFIM api\n     * @param markerClickCallback callback function for markers\n     */\n    loadIncidentMarkers(mapName: string, incidents: any, optionsCodeTables: CodeTables, orgOptionsCodeTables: CodeTables, markerClickCallback?: any): void;\n    /**\n     * Clear markers from the specified mapName and markerLayerId\n     * @param mapName string\n     * @param markerLayerId identifier for the marker layer tracked by the marker manager\n     */\n    clearMarkers(mapName: string, markerLayerId: string): any;\n    /**\n     * Set markers layer visibility from the specified mapName and markerLayerId\n     * @param mapName string\n     * @param markerLayerId identifier for the marker layer tracked by the marker manager\n     * @param visible boolean for setting the visibility of the marker layer\n     */\n    showMarkers(mapName: string, markerLayerId: string, visible: boolean): any;\n    /**\n    * Add legend layers\n    * @param mapName name of the map instance\n    * @param layerId id of the target map layer the legend attaches to\n    * @param legend structure based on WFML api for legends - refer to WFML test bed for examples\n    */\n    addLegend(mapName: string, layerId: string, legend: any): void;\n    /**\n     * Clear selected point (pin) from the specified map instance\n     */\n    clearSelectPoint(mapName: string): void;\n    setMaxSearchDistance(mapName: string, withinDistance: number): void;\n    findPlace(mapName: string, searchText: string): void;\n    findRoad(mapName: string, searchText: string): void;\n    findIntersection(mapName: string, roadName: string, intersectingRoadName: string): void;\n    clearPlaceNameSearch(mapName: string): void;\n    panToPlaceNameSearchLocation(mapName: string): void;\n    zoomToPlaceNameSearchLocation(mapName: string): void;\n    showCandidate(mapName: string, location: WFMLLocation): void;\n    clearCandidate(mapName: string): void;\n    setAnchor(mapName: string, point: number[]): void;\n    setAnchorFromMap(mapName: string): [number, number];\n    getBasemaps(mapName: string): any;\n    setBasemap(mapName: string, baseMapIndex: number): void;\n    registerPlaceNameSearchListener(mapName: string, callback: any): void;\n    registerMapClickListener(mapName: string, callback: any): void;\n    registerMapHoverListener(mapName: string, callback: any, hoverDelay: number): void;\n    registerMapSelectPointListener(mapName: string, callback: any): void;\n    clearPlaceNameSearchListener(mapName: string): void;\n    clearMapClickListener(mapName: string): void;\n    clearMapHoverListener(mapName: string): void;\n    clearMapSelectPointListener(mapName: string): void;\n    formatCoordinates(coordinates: [number, number]): string;\n    parseCoordinates(url: string): [number, number];\n    activateTool(mapName: string, toolName: string): void;\n    persistState(mapName: string, key: string, opt: any): void;\n}\n"]}