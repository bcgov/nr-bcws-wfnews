{"version":3,"file":"token.service.d.ts","sources":["token.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Injector } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { AppConfigService } from \"./app-config.service\";\nexport declare class TokenService {\n    private injector;\n    protected appConfigService: AppConfigService;\n    private LOCAL_STORAGE_KEY;\n    private useLocalStore;\n    private oauth;\n    private tokenDetails;\n    private credentials;\n    private authToken;\n    credentialsEmitter: Observable<any>;\n    authTokenEmitter: Observable<string>;\n    constructor(injector: Injector, appConfigService: AppConfigService);\n    checkForToken(redirectUri?: string, lazyAuth?: boolean, allowLocalExpiredToken?: boolean): void;\n    isTokenExpired(token: any): boolean;\n    private parseToken;\n    private initImplicitFlow;\n    initRefreshTokenImplicitFlow(authorizeURL: string, storageKey: string, errorCallback: any): Observable<any>;\n    private initAuthFromSession;\n    initAuth(response: any): void;\n    private initAndEmit;\n    updateToken(oauthToken: any): void;\n    getOauthToken(): any;\n    getTokenDetails(): any;\n    doesUserHaveApplicationPermissions(scopes?: string[]): boolean;\n    clearLocalStorageToken(): void;\n    private handleError;\n}\n"]}