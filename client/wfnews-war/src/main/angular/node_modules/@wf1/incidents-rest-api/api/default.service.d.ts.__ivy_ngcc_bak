import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AttachmentListResource } from '../model/models';
import { AttachmentResource } from '../model/models';
import { CodeHierarchyListRsrc } from '../model/models';
import { CodeHierarchyRsrc } from '../model/models';
import { CodeTableListRsrc } from '../model/models';
import { CodeTableRsrc } from '../model/models';
import { ComplianceAndEnforcementInvestigationResource } from '../model/models';
import { EndpointsResource } from '../model/models';
import { ExternalUriResource } from '../model/models';
import { HealthCheckResponseRsrc } from '../model/models';
import { IncidentApprovalResource } from '../model/models';
import { IncidentCauseResource } from '../model/models';
import { IncidentCommentListResource } from '../model/models';
import { IncidentCommentResource } from '../model/models';
import { IncidentLandAuthorityResource } from '../model/models';
import { IncidentVerificationResource } from '../model/models';
import { InitialFireReportListResource } from '../model/models';
import { InitialFireReportResource } from '../model/models';
import { OnBehalfOfResource } from '../model/models';
import { OriginAndCauseInvestigationResource } from '../model/models';
import { ProvisionalZoneListResource } from '../model/models';
import { ProvisionalZoneResource } from '../model/models';
import { PublicReportOfFireCommentListResource } from '../model/models';
import { PublicReportOfFireCommentResource } from '../model/models';
import { PublicReportOfFireListResource } from '../model/models';
import { PublicReportOfFireResource } from '../model/models';
import { PublishedIncidentResource } from '../model/models';
import { ResourceAllocationAssessmentResource } from '../model/models';
import { SimpleReportOfFireListResource } from '../model/models';
import { SimpleWildfireIncidentListResource } from '../model/models';
import { StatusChangeListResource } from '../model/models';
import { WildfireIncidentListResource } from '../model/models';
import { WildfireIncidentResource } from '../model/models';
import { WildfirePartyListResource } from '../model/models';
import { WildfirePartyResource } from '../model/models';
import { WildfirePerimeterResource } from '../model/models';
import { Configuration } from '../configuration';
export declare class DefaultService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams(httpParams, value, key?);
    private addToHttpParamsRecursive(httpParams, value?, key?);
    /**
     * Acknowledge a Public Report Of Fire
     * Acknowledge a Public Report Of Fire
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Add an ReportOfFireRelayMessage to PublicReportOfFire.
     * Add an ReportOfFireRelayMessage to PublicReportOfFire.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param publicReportOfFireRelayMessage The Public Report Of Fire Relay Message.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Assign a Public Report Of Fire
     * Assign a Public Report Of Fire
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param incidentWildfireYear The wildfireYear of the Wildfire Incident resource to be linked to the Report of Fire
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource to be linked to the Report of Fire
     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Cancel a Public Report Of Fire
     * Cancel a Public Report Of Fire
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * @param externalUriResource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createExternalUri(externalUriResource?: ExternalUriResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    createExternalUri(externalUriResource?: ExternalUriResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    createExternalUri(externalUriResource?: ExternalUriResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * Add Incident Attachment
     * Add a Incident attachment resource to the List of Incident attachment resources
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param attachmentResource The Attachment resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentResource>;
    createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentResource>>;
    createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentResource>>;
    /**
     * Add an Incident Comment Resource to the List of Incident Comments resources
     * Add an Incident Comment Resource to the List of Incident Comments resources
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param incidentCommentResource The IncidentComment resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<IncidentCommentResource>;
    createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<IncidentCommentResource>>;
    createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<IncidentCommentResource>>;
    /**
     * Add an Initial Fire Report Resource to the List of Initial Fire Reports resources
     * Add an Initial Fire Report Resource to the List of Initial Fire Reports resources
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param initialFireReportResource The InitialFireReport resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<InitialFireReportResource>;
    createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<InitialFireReportResource>>;
    createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<InitialFireReportResource>>;
    /**
     * Add an Provisional Zone  Resource to the List of Provisional Zones resources
     * Add an Provisional Zone  Resource to the List of Provisional Zones resources
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param provisionalZoneResource The provisionalZone resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<ProvisionalZoneResource>;
    createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<ProvisionalZoneResource>>;
    createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<ProvisionalZoneResource>>;
    /**
     * Add an Public Report of Fire Resource to the List of Public Report of Fires resources
     * Add an Public Report of Fire Resource to the List of Public Report of Fires resources
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param publicReportOfFireResource The PublicReportOfFire resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Add an ReportOfFireComment Resource to the List of PublicReportOfFire Comments
     * Add an ReportOfFireComment Resource to the List of PublicReportOfFire Comments
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param publicReportOfFireCommentResource The ReportOfFireComment resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireCommentResource>;
    createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireCommentResource>>;
    createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireCommentResource>>;
    /**
     * @param publishedIncidentResource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * Add Report of Fire Attachment
     * Add a Report of Fire attachment resource to the List of Report of Fire attachment resources
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param attachmentResource The Attachment resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentResource>;
    createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentResource>>;
    createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentResource>>;
    /**
     * Add an Wildfire Incident Resource to the List of Wildfire Incidents resources
     * Add an Wildfire Incident Resource to the List of Wildfire Incidents resources
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param wildfireIncidentResource The WildfireIncident resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentResource>;
    createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentResource>>;
    createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentResource>>;
    /**
     * Add an Wildfire Party Resource to the List of Wildfire Partys resources
     * Add an Wildfire Party Resource to the List of Wildfire Partys resources
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param wildfirePartyResource The WildfireParty resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfirePartyResource>;
    createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfirePartyResource>>;
    createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfirePartyResource>>;
    /**
     * @param externalUriGuid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteExternalUri(externalUriGuid: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteExternalUri(externalUriGuid: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteExternalUri(externalUriGuid: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete Incident Attachment by ID
     * Delete Incident Attachment by ID
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param attachmentGuid The attachmentGuid of the Attachment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete IncidentComment resource by ID
     * Delete IncidentComment by ID
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param incidentCommentGuid The identifier of the IncidentComment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete InitialFireReport resource by ID
     * Delete InitialFireReport by ID
     * @param initialFireReportId The initialFireReportId of the Initial Fire Report resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete ProvisionalZone resource by ID
     * Delete ProvisionalZone by ID
     * @param provisionalZoneGuid The identifier of the ProvisionalZone resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete PublicReportOfFire resource by ID
     * Delete PublicReportOfFire by ID
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete ReportOfFireComment resource by ID
     * Delete ReportOfFireComment by ID
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param commentGuid The identifier of the PublicReportOfFire Comment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete ReportOfFireRelayMessage from PublicReportOfFire.
     * Delete ReportOfFireRelayMessage from PublicReportOfFire.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * @param publishedIncidentDetailGuid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePublishedIncident(publishedIncidentDetailGuid: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    deletePublishedIncident(publishedIncidentDetailGuid: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    deletePublishedIncident(publishedIncidentDetailGuid: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete Report of Fire Attachment by ID
     * Delete Report of Fire Attachment by ID
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param attachmentGuid The attachmentGuid of the Attachment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete WildfireIncident resource by ID
     * Delete WildfireIncident by ID
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete WildfireParty resource by ID
     * Delete WildfireParty by ID
     * @param wildfirePartyGuid The identifier of the WildfireParty resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Get Code Hierarchy List Resource
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param codeHierarchyName Filter the results by the codeHierarchyName.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeHierarchyListRsrc>;
    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeHierarchyListRsrc>>;
    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeHierarchyListRsrc>>;
    /**
     * Get CodeHierarchy resource by code table name.
     * @param codeHierarchyName The identifier of the CodeHierarchy resource.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeHierarchyRsrc>;
    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeHierarchyRsrc>>;
    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeHierarchyRsrc>>;
    /**
     * Get Code Table List Resource
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param codeTableName Filter the results by the codeTableName.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeTableListRsrc>;
    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeTableListRsrc>>;
    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeTableListRsrc>>;
    /**
     * Get CodeTable resource by code table name.
     * @param codeTableName The identifier of the CodeTable resource.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeTableRsrc>;
    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeTableRsrc>>;
    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeTableRsrc>>;
    /**
     * Get an Incidents Compliance And Enforcement Investigation.
     * Get an Incidents Compliance And Enforcement Investigation.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<ComplianceAndEnforcementInvestigationResource>;
    getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<ComplianceAndEnforcementInvestigationResource>>;
    getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<ComplianceAndEnforcementInvestigationResource>>;
    /**
     * @param externalUriGuid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getExternalUri(externalUriGuid: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    getExternalUri(externalUriGuid: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    getExternalUri(externalUriGuid: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * @param sourceObjectUniqueId
     * @param pageNumber
     * @param pageRowCount
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * Get the Approval Results for an Incident by ID.
     * Get the Approval Results for an Incident by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<IncidentApprovalResource>;
    getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<IncidentApprovalResource>>;
    getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<IncidentApprovalResource>>;
    /**
     * Get Incident Attachment by ID.
     * Get the Incident Attachment by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param attachmentGuid The attachmentGuid of the Attachment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentResource>;
    getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentResource>>;
    getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentResource>>;
    /**
     * Get Incident Attachments.
     * Get list of Incident Attachments.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param archived List archived attachments
     * @param privateIndicator List private attachments
     * @param sourceObjectNameCode The sourceObjectNameCode the results to be returned.
     * @param attachmentTypeCode The attachmentTypeCode the results to be returned.
     * @param uploadedByUserId The uploadedByUserId the results to be returned.
     * @param uploadedByByUserType The uploadedByByUserType the results to be returned.
     * @param uploadedByUserGuid The uploadedByUserGuid the results to be returned.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentListResource>;
    getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentListResource>>;
    getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentListResource>>;
    /**
     * Get an Incidents Cause.
     * Get an Incidents Cause.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<IncidentCauseResource>;
    getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<IncidentCauseResource>>;
    getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<IncidentCauseResource>>;
    /**
     * Get the Incident Comment by External ID.
     * Get the Incident Comment by External ID.
     * @param externalId The externalId of the Public Report of Fire Comment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getIncidentComment(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<IncidentCommentResource>;
    getIncidentComment(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<IncidentCommentResource>>;
    getIncidentComment(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<IncidentCommentResource>>;
    /**
     * Get the Incident Comment by ID.
     * Get the Incident Comment by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param incidentCommentGuid The identifier of the Incident Comment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<IncidentCommentResource>;
    getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<IncidentCommentResource>>;
    getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<IncidentCommentResource>>;
    /**
     * Get list of Incident Comments.
     * Get list of Incident Comments.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<IncidentCommentListResource>;
    getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<IncidentCommentListResource>>;
    getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<IncidentCommentListResource>>;
    /**
     * Get the Verification Results for an Incident by ID.
     * Get the Verification Results for an Incident by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<IncidentVerificationResource>;
    getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<IncidentVerificationResource>>;
    getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<IncidentVerificationResource>>;
    /**
     * Get the Initial Fire Report by ID.
     * Get the Initial Fire Report by ID.
     * @param initialFireReportId The initialFireReportId of the Initial Fire Report resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getInitialFireReport(initialFireReportId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<InitialFireReportResource>;
    getInitialFireReport(initialFireReportId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<InitialFireReportResource>>;
    getInitialFireReport(initialFireReportId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<InitialFireReportResource>>;
    /**
     * Get list of Initial Fire Reports.
     * Get list of Initial Fire Reports.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param searchText Filter the results by the searchText.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<InitialFireReportListResource>;
    getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<InitialFireReportListResource>>;
    getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<InitialFireReportListResource>>;
    /**
     * Get an Incidents Managing Land Authority.
     * Get an Incidents Managing Land Authority.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<IncidentLandAuthorityResource>;
    getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<IncidentLandAuthorityResource>>;
    getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<IncidentLandAuthorityResource>>;
    /**
     * Get an Incidents Compliance And Enforcement Investigation.
     * Get an Incidents Compliance And Enforcement Investigation.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<OriginAndCauseInvestigationResource>;
    getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<OriginAndCauseInvestigationResource>>;
    getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<OriginAndCauseInvestigationResource>>;
    /**
     * Get the Provisional Zone by ID.
     * Get the Provisional Zone by ID.
     * @param provisionalZoneGuid The identifier of the Provisional Zone resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<ProvisionalZoneResource>;
    getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<ProvisionalZoneResource>>;
    getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<ProvisionalZoneResource>>;
    /**
     * Get list of Provisional Zones.
     * Get list of Provisional Zones.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param provisionalZoneGuid Filter the results by the provisionalZoneGuid.
     * @param provisionalZoneIdentifier Filter the results by the provisionalZoneIdentifier.
     * @param provisionalZoneTypeCode Filter the results by the provisionalZoneTypeCode.
     * @param fireCentreOrgUnitIdent Filter the results by the fireCentreOrgUnitIdent.
     * @param provisionalZonePolygonSpecifiedInd Filter the results by the provisionalZonePolygonSpecifiedInd.
     * @param dismissedInd Filter the results by the dismissedInd.
     * @param effectiveTimeStamp Filter the results by the effectiveTimeStamp.
     * @param expiryTimestamp Filter the results by the expiryTimestamp.
     * @param effectiveAsOfTimestamp Filter the results by the effectiveAsOfTimesatmp.
     * @param textSearch Filter the results by the text.
     * @param provisionedByUserName Filter the results by the provisionedByUserName.
     * @param provisionedByUserId Filter the results by the provisionedByUserId.
     * @param lastStateChangeAsOfTimestamp Filter the results by the lastStateChangeAsOfTimestamp.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<ProvisionalZoneListResource>;
    getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<ProvisionalZoneListResource>>;
    getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<ProvisionalZoneListResource>>;
    /**
     * Get the Public Report of Fire by External ID.
     * Get the Public Report of Fire by External ID.
     * @param externalId The externalId of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublicReportOfFire(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    getPublicReportOfFire(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    getPublicReportOfFire(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Get the Public Report of Fire by ID.
     * Get the Public Report of Fire by ID.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Get the Public Report of Fire Comment by External ID.
     * Get the Public Report of Fire Comment by External ID.
     * @param externalId The externalId of the Public Report of Fire Comment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublicReportOfFireComment(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireCommentResource>;
    getPublicReportOfFireComment(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireCommentResource>>;
    getPublicReportOfFireComment(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireCommentResource>>;
    /**
     * Get the PublicReportOfFire Comment by ID.
     * Get the PublicReportOfFire Comment by ID.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param commentGuid The identifier of the PublicReportOfFire Comment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireCommentResource>;
    getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireCommentResource>>;
    getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireCommentResource>>;
    /**
     * Get list of PublicReportOfFire Comments.
     * Get list of PublicReportOfFire Comments.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param searchText Filter the results by the searchText.
     * @param systemGeneratedCommentInd Filter the results by the systemGeneratedCommentInd.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireCommentListResource>;
    getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireCommentListResource>>;
    getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireCommentListResource>>;
    /**
     * Get list of Public Report of Fires.
     * Get list of Public Report of Fires.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param searchText Filter the results by the searchText.
     * @param messageStatusCode Filter the results by the messageStatusCode.
     * @param reportOfFireNumber Filter the results by the reportOfFireNumber.
     * @param wildfireYear Filter the results by the wildfireYear.
     * @param interfaceFireInd Filter the results by the interfaceFireInd.
     * @param minimumReportedDate Filter the results by the minimumReportedDate.
     * @param reportedByName Filter the results by the reportedByName.
     * @param receivedByUserId Filter the results by the receivedByUserId.
     * @param receivedByUserGuid Filter the results by the receivedByUserGuid.
     * @param acknowledgedByUserId Filter the results by the acknowledgedByUserId.
     * @param acknowledgedByUserGuid Filter the results by the acknowledgedByUserGuid.
     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.
     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.
     * @param reportedByPartyName Filter the results by the reportedByPartyName.
     * @param callerName Filter the results by the callerName.
     * @param lostCallInd Filter the results by the lostCallInd.
     * @param availableForCallbackInd Filter the results by the availableForCallbackInd.
     * @param publicReportTypeCode Filter the results by the publicReportTypeCode.
     * @param fireSizeComparisionCode Filter the results by the fireSizeComparisionCode.
     * @param rateOfSpreadCode Filter the results by the rateOfSpreadCode.
     * @param smokeColourCode Filter the results by the smokeColourCode.
     * @param messageReceivedSource Filter the results by the messageReceivedSource.
     * @param submittedAsOfTimestamp Filter the results by the submittedTimestamp.
     * @param receievedAsOfTimestamp Filter the results by the receievedTimestamp.
     * @param submittedOrReceivedAsOfTimestamp Filter the results by the submittedTimestamp or for RoFs that have not been submitted, by receievedTimestamp.
     * @param incidentWildfireYear Filter the results by the incidentWildfireYear.
     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.
     * @param relayedInd Filter the results by the relayedInd.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireListResource>;
    getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireListResource>>;
    getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireListResource>>;
    /**
     * Get list of Public Report of Fire Status Changes.
     * Get list of Public Report of Fire Status Changes.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<StatusChangeListResource>;
    getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<StatusChangeListResource>>;
    getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<StatusChangeListResource>>;
    /**
     * @param publishedIncidentDetailGuid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublishedIncident(publishedIncidentDetailGuid: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    getPublishedIncident(publishedIncidentDetailGuid: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    getPublishedIncident(publishedIncidentDetailGuid: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * @param incidentGuid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublishedIncidentByIncidentGuid(incidentGuid: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    getPublishedIncidentByIncidentGuid(incidentGuid: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    getPublishedIncidentByIncidentGuid(incidentGuid: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * @param pageNumber
     * @param pageRowCount
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * Get Report of Fire Attachment by ID.
     * Get the Report of Fire Attachment by ID.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param attachmentGuid The attachmentGuid of the Attachment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentResource>;
    getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentResource>>;
    getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentResource>>;
    /**
     * Get Report of Fire Attachments.
     * Get list of Report of Fire Attachments.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param archived List archived attachments
     * @param privateIndicator List private attachments
     * @param sourceObjectNameCode The sourceObjectNameCode the results to be returned.
     * @param attachmentTypeCode The attachmentTypeCode the results to be returned.
     * @param uploadedByUserId The uploadedByUserId the results to be returned.
     * @param uploadedByByUserType The uploadedByByUserType the results to be returned.
     * @param uploadedByUserGuid The uploadedByUserGuid the results to be returned.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentListResource>;
    getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentListResource>>;
    getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentListResource>>;
    /**
     * Get the Resource Allocation Assessment for an Incident by ID.
     * Get the Resource Allocation Assessment for an Incident by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<ResourceAllocationAssessmentResource>;
    getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<ResourceAllocationAssessmentResource>>;
    getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<ResourceAllocationAssessmentResource>>;
    /**
     * Get list of Simple Report of Fires.
     * Get list of Simple Report of Fires.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param searchText Filter the results by the searchText.
     * @param messageStatusCode Filter the results by the messageStatusCode.
     * @param reportOfFireNumber Filter the results by the reportOfFireNumber.
     * @param wildfireYear Filter the results by the wildfireYear.
     * @param interfaceFireInd Filter the results by the interfaceFireInd.
     * @param minimumReportedDate Filter the results by the minimumReportedDate.
     * @param reportedByName Filter the results by the reportedByName.
     * @param receivedByUserId Filter the results by the receivedByUserId.
     * @param receivedByUserGuid Filter the results by the receivedByUserGuid.
     * @param acknowledgedByUserId Filter the results by the acknowledgedByUserId.
     * @param acknowledgedByUserGuid Filter the results by the acknowledgedByUserGuid.
     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.
     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.
     * @param reportedByPartyName Filter the results by the reportedByPartyName.
     * @param callerName Filter the results by the callerName.
     * @param lostCallInd Filter the results by the lostCallInd.
     * @param availableForCallbackInd Filter the results by the availableForCallbackInd.
     * @param publicReportTypeCode Filter the results by the publicReportTypeCode.
     * @param fireSizeComparisionCode Filter the results by the fireSizeComparisionCode.
     * @param rateOfSpreadCode Filter the results by the rateOfSpreadCode.
     * @param smokeColourCode Filter the results by the smokeColourCode.
     * @param submittedAsOfTimestamp Filter the results by the submittedAsOfTimestamp.
     * @param incidentWildfireYear Filter the results by the incidentWildfireYear.
     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.
     * @param relayedInd Filter the results by the relayedInd.
     * @param lastStateChangeAsOfTimestamp Filter the results by the lastStateChangeAsOfTimestamp.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<SimpleReportOfFireListResource>;
    getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<SimpleReportOfFireListResource>>;
    getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<SimpleReportOfFireListResource>>;
    /**
     * Get list of Simple Wildfire Incidents.
     * Get list of Simple Wildfire Incidents.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param searchText Filter the results by the searchText.
     * @param wildfireYear Filter the results by the wildfireYear.
     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.
     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.
     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.
     * @param incidentStatusCode Filter the results by the incidentStatusCode.
     * @param incidentTypeCode Filter the results by the incidentTypeCode.
     * @param stageOfControlCode Filter the results by the stageOfControlCode.
     * @param responseTypeCode Filter the results by the responseTypeCode.
     * @param suspectedCauseCategoryCode Filter the results by the suspectedCauseCategoryCode.
     * @param lastUpdatedAsOfTimestamp Filter the results by the lastUpdatedAsOfTimestamp.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<SimpleWildfireIncidentListResource>;
    getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<SimpleWildfireIncidentListResource>>;
    getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<SimpleWildfireIncidentListResource>>;
    /**
     * Get Top Level Resources.
     * Get Top Level Resources
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getTopLevel(restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<EndpointsResource>;
    getTopLevel(restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<EndpointsResource>>;
    getTopLevel(restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<EndpointsResource>>;
    /**
     * Get the Wildfire Incident by External ID.
     * Get the Wildfire Incident by External ID.
     * @param externalId The externalId of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getWildfireIncident(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentResource>;
    getWildfireIncident(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentResource>>;
    getWildfireIncident(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentResource>>;
    /**
     * Get the Wildfire Incident by ID.
     * Get the Wildfire Incident by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentResource>;
    getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentResource>>;
    getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentResource>>;
    /**
     * Get the Wildfire Incident by Incident GUID.
     * Get the Wildfire Incident by Incident GUID.
     * @param incidentGuid The incidentGuid of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentResource>;
    getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentResource>>;
    getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentResource>>;
    /**
     * Get list of Wildfire Incidents.
     * Get list of Wildfire Incidents.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param searchText Filter the results by the searchText.
     * @param wildfireYear Filter the results by the wildfireYear.
     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.
     * @param incidentId Filter the results by the incidentId.
     * @param incidentName Filter the results by the incidentName.
     * @param claimExpectedInd Filter the results by the claimExpectedInd.
     * @param rehabilitationPlanRequiredInd Filter the results by the rehabilitationPlanRequiredInd.
     * @param paperTrailedInd Filter the results by the paperTrailedInd.
     * @param fieldPhotoInd Filter the results by the fieldPhotoInd.
     * @param finalReportCompleteInd Filter the results by the finalReportCompleteInd.
     * @param incidentCommanderName Filter the results by the incidentCommanderName.
     * @param signoffSignatureInd Filter the results by the signoffSignatureInd.
     * @param agencyAssistanceTaskIdentifier Filter the results by the agencyAssistanceTaskIdentifier.
     * @param approvalSignatureName Filter the results by the approvalSignatureName.
     * @param approvalSignatureInd Filter the results by the approvalSignatureInd.
     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.
     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.
     * @param detectionSourceCode Filter the results by the detectionSourceCode.
     * @param fireClassificationCode Filter the results by the fireClassificationCode.
     * @param agencyAssistTypeCode Filter the results by the agencyAssistTypeCode.
     * @param responseTypeCode Filter the results by the responseTypeCode.
     * @param assistingPartyName Filter the results by the assistingPartyName.
     * @param discoveredByPartyName Filter the results by the discoveredByPartyName.
     * @param firstActionedByPartyName Filter the results by the firstActionedByPartyName.
     * @param leadByPartyName Filter the results by the leadByPartyName.
     * @param incidentStatusCode Filter the results by the incidentStatusCode.
     * @param incidentNumberLabel Filter the results by the incidentNumberLabel.
     * @param probabilityOfInitialAttackSuccessCode Filter the results by the probabilityOfInitialAttackSuccessCode.
     * @param suspectedCauseCategoryCode Filter the results by the suspectedCauseCategoryCode.
     * @param incidentCategoryCode Filter the results by the incidentCategoryCode.
     * @param incidentTypeCode Filter the results by the incidentTypeCode.
     * @param fireOfNotePublishedInd Filter the results by the fireOfNotePublishedInd.
     * @param wasFireOfNotePublishedInd Filter the results by the wasFireOfNotePublishedInd.
     * @param stageOfControlCode Filter the results by the stageOfControlCode.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentListResource>;
    getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentListResource>>;
    getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentListResource>>;
    /**
     * Get list of Wildfire Incident Status Changes.
     * Get list of Wildfire Incident Status Changes.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<StatusChangeListResource>;
    getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<StatusChangeListResource>>;
    getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<StatusChangeListResource>>;
    /**
     * Get the Wildfire Party by ID.
     * Get the Wildfire Party by ID.
     * @param wildfirePartyGuid The identifier of the Wildfire Party resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfirePartyResource>;
    getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfirePartyResource>>;
    getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfirePartyResource>>;
    /**
     * Get list of Wildfire Partys.
     * Get list of Wildfire Partys.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param partyName Filter the results by the partyName.
     * @param partyTypeCode Filter the results by the partyTypeCode.
     * @param partyUsageTypeCode Filter the results by the partyUsageTypeCode.
     * @param effectiveAsOfDate Filter the results by the effectiveAsOfDate.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param expand The level of child resources to load. Zero for no child resources.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfirePartyListResource>;
    getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfirePartyListResource>>;
    getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfirePartyListResource>>;
    /**
     * Get the Wildfire Perimeter.
     * Get the Wildfire Perimeter.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfirePerimeterResource>;
    getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfirePerimeterResource>>;
    getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfirePerimeterResource>>;
    /**
     * Query the health of the service.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param callstack A comm separated list of the identifier of the calling components.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HealthCheckResponseRsrc>;
    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<HealthCheckResponseRsrc>>;
    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<HealthCheckResponseRsrc>>;
    /**
     * Redact Incident Attachment by ID
     * Redact Incident Attachment by ID
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param attachmentGuid The attachmentGuid of the Attachment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param attachmentResource The Incident Attachment resource containing the new file id and path.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentResource>;
    redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentResource>>;
    redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentResource>>;
    /**
     * Redact Report of Fire Attachment by ID
     * Redact Report of Fire Attachment by ID
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param attachmentGuid The attachmentGuid of the Attachment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param attachmentResource The ReportOfFire Attachment resource containing the new file id and path.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentResource>;
    redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentResource>>;
    redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentResource>>;
    /**
     * Review a Received Public Report Of Fire
     * Review a Received Public Report Of Fire
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Signoff the Approval Results for an Incident by ID.
     * Signoff the Approval Results for an Incident by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentResource>;
    signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentResource>>;
    signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentResource>>;
    /**
     * Signoff the Verification Results for an Incident by ID.
     * Signoff the Verification Results for an Incident by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentResource>;
    signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentResource>>;
    signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentResource>>;
    /**
     * Submit a Public Report Of Fire
     * Submit a Public Report Of Fire
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Unacknowledge a Public Report Of Fire
     * Unacknowledge a Public Report Of Fire
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Unassign a Public Report Of Fire
     * Unassign a Public Report Of Fire
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Uncancel a Public Report Of Fire
     * Uncancel a Public Report Of Fire
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * Unsign the Approval Results for an Incident by ID.
     * Unsign the Approval Results for an Incident by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentResource>;
    unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentResource>>;
    unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentResource>>;
    /**
     * Unsign the Verification Results for an Incident by ID.
     * Unsign the Verification Results for an Incident by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentResource>;
    unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentResource>>;
    unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentResource>>;
    /**
     * Update CodeHierarchy by code table name.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param codeHierarchyName The identifier of the CodeHierarchy resource.
     * @param codeHierarchyRsrc The CodeHierarchy resource containing the new values.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeHierarchyRsrc>;
    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeHierarchyRsrc>>;
    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeHierarchyRsrc>>;
    /**
     * Update CodeTable by code table name.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param codeTableName The identifier of the CodeTable resource.
     * @param codeTableRsrc The CodeTable resource containing the new values.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeTableRsrc>;
    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeTableRsrc>>;
    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeTableRsrc>>;
    /**
     * Update an Incidents Compliance And Enforcement Investigation
     * Update an Incidents Compliance And Enforcement Investigation
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param complianceAndEnforcementInvestigationResource The IncidentInvestigation resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<ComplianceAndEnforcementInvestigationResource>;
    updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<ComplianceAndEnforcementInvestigationResource>>;
    updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<ComplianceAndEnforcementInvestigationResource>>;
    /**
     * @param externalUriGuid
     * @param externalUriResource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * Update Incident Attachment by ID
     * Update Incident Attachment by ID
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param attachmentGuid The attachmentGuid of the Attachment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param attachmentResource The Incident Attachment resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentResource>;
    updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentResource>>;
    updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentResource>>;
    /**
     * Update InitialFireReport resource by ID
     * Update InitialFireReport by ID
     * @param initialFireReportId The initialFireReportId of the Initial Fire Report resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param initialFireReportResource The InitialFireReport resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<InitialFireReportResource>;
    updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<InitialFireReportResource>>;
    updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<InitialFireReportResource>>;
    /**
     * Update an Incidents Managing Land Authority
     * Update an Incidents Managing Land Authority
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param incidentLandAuthorityResource The IncidentLandAuthority resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<IncidentLandAuthorityResource>;
    updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<IncidentLandAuthorityResource>>;
    updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<IncidentLandAuthorityResource>>;
    /**
     * Update an Incidents Compliance And Enforcement Investigation
     * Update an Incidents Compliance And Enforcement Investigation
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param originAndCauseInvestigationResource The IncidentInvestigation resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<OriginAndCauseInvestigationResource>;
    updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<OriginAndCauseInvestigationResource>>;
    updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<OriginAndCauseInvestigationResource>>;
    /**
     * Update Provisional Zone resource by ID
     * Update ProvisionalZone by ID
     * @param provisionalZoneGuid The identifier of the ProvisionalZone resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param provisionalZoneResource The ProvisionalZone resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<ProvisionalZoneResource>;
    updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<ProvisionalZoneResource>>;
    updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<ProvisionalZoneResource>>;
    /**
     * Update PublicReportOfFire resource by ID
     * Update PublicReportOfFire by ID
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param publicReportOfFireResource The PublicReportOfFire resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<PublicReportOfFireResource>;
    updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<PublicReportOfFireResource>>;
    updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<PublicReportOfFireResource>>;
    /**
     * @param publishedIncidentDetailGuid
     * @param publishedIncidentResource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<any>;
    updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<any>>;
    updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<any>>;
    /**
     * Update Report of Fire Attachment by ID
     * Update Report of Fire Attachment by ID
     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.
     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.
     * @param attachmentGuid The attachmentGuid of the Attachment resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param attachmentResource The ReportOfFire Attachment resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<AttachmentResource>;
    updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<AttachmentResource>>;
    updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<AttachmentResource>>;
    /**
     * Update the Resource Allocation Assessment for an Incident by ID.
     * Update the Resource Allocation Assessment for an Incident by ID.
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param resourceAllocationAssessmentResource The ResourceAllocationAssessment resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<ResourceAllocationAssessmentResource>;
    updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<ResourceAllocationAssessmentResource>>;
    updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<ResourceAllocationAssessmentResource>>;
    /**
     * Update WildfireIncident resource by ID
     * Update WildfireIncident by ID
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param wildfireIncidentResource The WildfireIncident resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfireIncidentResource>;
    updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfireIncidentResource>>;
    updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfireIncidentResource>>;
    /**
     * Update WildfireParty resource by ID
     * Update WildfireParty by ID
     * @param wildfirePartyGuid The identifier of the WildfireParty resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param wildfirePartyResource The WildfireParty resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfirePartyResource>;
    updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfirePartyResource>>;
    updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfirePartyResource>>;
    /**
     * Update WildfirePerimeter resource
     * Update WildfirePerimeter
     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.
     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param wildfirePerimeterResource The WildfirePerimeter resource containing the new values.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<WildfirePerimeterResource>;
    updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<WildfirePerimeterResource>>;
    updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<WildfirePerimeterResource>>;
}
