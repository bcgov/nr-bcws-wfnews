{"version":3,"file":"default.service.d.ts","sources":["default.service.d.ts"],"names":[],"mappingssourcesContent":["import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AttachmentListResource } from '../model/models';\nimport { AttachmentResource } from '../model/models';\nimport { CodeHierarchyListRsrc } from '../model/models';\nimport { CodeHierarchyRsrc } from '../model/models';\nimport { CodeTableListRsrc } from '../model/models';\nimport { CodeTableRsrc } from '../model/models';\nimport { ComplianceAndEnforcementInvestigationResource } from '../model/models';\nimport { EndpointsResource } from '../model/models';\nimport { ExternalUriResource } from '../model/models';\nimport { HealthCheckResponseRsrc } from '../model/models';\nimport { IncidentApprovalResource } from '../model/models';\nimport { IncidentCauseResource } from '../model/models';\nimport { IncidentCommentListResource } from '../model/models';\nimport { IncidentCommentResource } from '../model/models';\nimport { IncidentLandAuthorityResource } from '../model/models';\nimport { IncidentVerificationResource } from '../model/models';\nimport { InitialFireReportListResource } from '../model/models';\nimport { InitialFireReportResource } from '../model/models';\nimport { OnBehalfOfResource } from '../model/models';\nimport { OriginAndCauseInvestigationResource } from '../model/models';\nimport { ProvisionalZoneListResource } from '../model/models';\nimport { ProvisionalZoneResource } from '../model/models';\nimport { PublicReportOfFireCommentListResource } from '../model/models';\nimport { PublicReportOfFireCommentResource } from '../model/models';\nimport { PublicReportOfFireListResource } from '../model/models';\nimport { PublicReportOfFireResource } from '../model/models';\nimport { PublishedIncidentResource } from '../model/models';\nimport { ResourceAllocationAssessmentResource } from '../model/models';\nimport { SimpleReportOfFireListResource } from '../model/models';\nimport { SimpleWildfireIncidentListResource } from '../model/models';\nimport { StatusChangeListResource } from '../model/models';\nimport { WildfireIncidentListResource } from '../model/models';\nimport { WildfireIncidentResource } from '../model/models';\nimport { WildfirePartyListResource } from '../model/models';\nimport { WildfirePartyResource } from '../model/models';\nimport { WildfirePerimeterResource } from '../model/models';\nimport { Configuration } from '../configuration';\nexport declare class DefaultService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: Configuration;\n    encoder: HttpParameterCodec;\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\n    private addToHttpParams(httpParams, value, key?);\n    private addToHttpParamsRecursive(httpParams, value?, key?);\n    /**\n     * Acknowledge a Public Report Of Fire\n     * Acknowledge a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Add an ReportOfFireRelayMessage to PublicReportOfFire.\n     * Add an ReportOfFireRelayMessage to PublicReportOfFire.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param publicReportOfFireRelayMessage The Public Report Of Fire Relay Message.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Assign a Public Report Of Fire\n     * Assign a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param incidentWildfireYear The wildfireYear of the Wildfire Incident resource to be linked to the Report of Fire\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource to be linked to the Report of Fire\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Cancel a Public Report Of Fire\n     * Cancel a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * @param externalUriResource\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createExternalUri(externalUriResource?: ExternalUriResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    createExternalUri(externalUriResource?: ExternalUriResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    createExternalUri(externalUriResource?: ExternalUriResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Add Incident Attachment\n     * Add a Incident attachment resource to the List of Incident attachment resources\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The Attachment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentResource>;\n    createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentResource>>;\n    createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentResource>>;\n    /**\n     * Add an Incident Comment Resource to the List of Incident Comments resources\n     * Add an Incident Comment Resource to the List of Incident Comments resources\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param incidentCommentResource The IncidentComment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<IncidentCommentResource>;\n    createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<IncidentCommentResource>>;\n    createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<IncidentCommentResource>>;\n    /**\n     * Add an Initial Fire Report Resource to the List of Initial Fire Reports resources\n     * Add an Initial Fire Report Resource to the List of Initial Fire Reports resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param initialFireReportResource The InitialFireReport resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<InitialFireReportResource>;\n    createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<InitialFireReportResource>>;\n    createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<InitialFireReportResource>>;\n    /**\n     * Add an Provisional Zone  Resource to the List of Provisional Zones resources\n     * Add an Provisional Zone  Resource to the List of Provisional Zones resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param provisionalZoneResource The provisionalZone resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<ProvisionalZoneResource>;\n    createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<ProvisionalZoneResource>>;\n    createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<ProvisionalZoneResource>>;\n    /**\n     * Add an Public Report of Fire Resource to the List of Public Report of Fires resources\n     * Add an Public Report of Fire Resource to the List of Public Report of Fires resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param publicReportOfFireResource The PublicReportOfFire resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Add an ReportOfFireComment Resource to the List of PublicReportOfFire Comments\n     * Add an ReportOfFireComment Resource to the List of PublicReportOfFire Comments\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param publicReportOfFireCommentResource The ReportOfFireComment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireCommentResource>;\n    createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireCommentResource>>;\n    createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireCommentResource>>;\n    /**\n     * @param publishedIncidentResource\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Add Report of Fire Attachment\n     * Add a Report of Fire attachment resource to the List of Report of Fire attachment resources\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The Attachment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentResource>;\n    createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentResource>>;\n    createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentResource>>;\n    /**\n     * Add an Wildfire Incident Resource to the List of Wildfire Incidents resources\n     * Add an Wildfire Incident Resource to the List of Wildfire Incidents resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param wildfireIncidentResource The WildfireIncident resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentResource>;\n    createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentResource>>;\n    createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentResource>>;\n    /**\n     * Add an Wildfire Party Resource to the List of Wildfire Partys resources\n     * Add an Wildfire Party Resource to the List of Wildfire Partys resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param wildfirePartyResource The WildfireParty resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfirePartyResource>;\n    createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfirePartyResource>>;\n    createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfirePartyResource>>;\n    /**\n     * @param externalUriGuid\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteExternalUri(externalUriGuid: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteExternalUri(externalUriGuid: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteExternalUri(externalUriGuid: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete Incident Attachment by ID\n     * Delete Incident Attachment by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete IncidentComment resource by ID\n     * Delete IncidentComment by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param incidentCommentGuid The identifier of the IncidentComment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete InitialFireReport resource by ID\n     * Delete InitialFireReport by ID\n     * @param initialFireReportId The initialFireReportId of the Initial Fire Report resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete ProvisionalZone resource by ID\n     * Delete ProvisionalZone by ID\n     * @param provisionalZoneGuid The identifier of the ProvisionalZone resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete PublicReportOfFire resource by ID\n     * Delete PublicReportOfFire by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete ReportOfFireComment resource by ID\n     * Delete ReportOfFireComment by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param commentGuid The identifier of the PublicReportOfFire Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete ReportOfFireRelayMessage from PublicReportOfFire.\n     * Delete ReportOfFireRelayMessage from PublicReportOfFire.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param publishedIncidentDetailGuid\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deletePublishedIncident(publishedIncidentDetailGuid: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    deletePublishedIncident(publishedIncidentDetailGuid: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    deletePublishedIncident(publishedIncidentDetailGuid: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete Report of Fire Attachment by ID\n     * Delete Report of Fire Attachment by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete WildfireIncident resource by ID\n     * Delete WildfireIncident by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete WildfireParty resource by ID\n     * Delete WildfireParty by ID\n     * @param wildfirePartyGuid The identifier of the WildfireParty resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Get Code Hierarchy List Resource\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeHierarchyName Filter the results by the codeHierarchyName.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeHierarchyListRsrc>;\n    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeHierarchyListRsrc>>;\n    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeHierarchyListRsrc>>;\n    /**\n     * Get CodeHierarchy resource by code table name.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeHierarchyRsrc>;\n    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeHierarchyRsrc>>;\n    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeHierarchyRsrc>>;\n    /**\n     * Get Code Table List Resource\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeTableName Filter the results by the codeTableName.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeTableListRsrc>;\n    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeTableListRsrc>>;\n    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeTableListRsrc>>;\n    /**\n     * Get CodeTable resource by code table name.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeTableRsrc>;\n    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeTableRsrc>>;\n    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeTableRsrc>>;\n    /**\n     * Get an Incidents Compliance And Enforcement Investigation.\n     * Get an Incidents Compliance And Enforcement Investigation.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<ComplianceAndEnforcementInvestigationResource>;\n    getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<ComplianceAndEnforcementInvestigationResource>>;\n    getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<ComplianceAndEnforcementInvestigationResource>>;\n    /**\n     * @param externalUriGuid\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getExternalUri(externalUriGuid: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    getExternalUri(externalUriGuid: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    getExternalUri(externalUriGuid: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param sourceObjectUniqueId\n     * @param pageNumber\n     * @param pageRowCount\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Get the Approval Results for an Incident by ID.\n     * Get the Approval Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<IncidentApprovalResource>;\n    getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<IncidentApprovalResource>>;\n    getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<IncidentApprovalResource>>;\n    /**\n     * Get Incident Attachment by ID.\n     * Get the Incident Attachment by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentResource>;\n    getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentResource>>;\n    getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentResource>>;\n    /**\n     * Get Incident Attachments.\n     * Get list of Incident Attachments.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param archived List archived attachments\n     * @param privateIndicator List private attachments\n     * @param sourceObjectNameCode The sourceObjectNameCode the results to be returned.\n     * @param attachmentTypeCode The attachmentTypeCode the results to be returned.\n     * @param uploadedByUserId The uploadedByUserId the results to be returned.\n     * @param uploadedByByUserType The uploadedByByUserType the results to be returned.\n     * @param uploadedByUserGuid The uploadedByUserGuid the results to be returned.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentListResource>;\n    getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentListResource>>;\n    getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentListResource>>;\n    /**\n     * Get an Incidents Cause.\n     * Get an Incidents Cause.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<IncidentCauseResource>;\n    getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<IncidentCauseResource>>;\n    getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<IncidentCauseResource>>;\n    /**\n     * Get the Incident Comment by External ID.\n     * Get the Incident Comment by External ID.\n     * @param externalId The externalId of the Public Report of Fire Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getIncidentComment(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<IncidentCommentResource>;\n    getIncidentComment(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<IncidentCommentResource>>;\n    getIncidentComment(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<IncidentCommentResource>>;\n    /**\n     * Get the Incident Comment by ID.\n     * Get the Incident Comment by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param incidentCommentGuid The identifier of the Incident Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<IncidentCommentResource>;\n    getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<IncidentCommentResource>>;\n    getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<IncidentCommentResource>>;\n    /**\n     * Get list of Incident Comments.\n     * Get list of Incident Comments.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<IncidentCommentListResource>;\n    getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<IncidentCommentListResource>>;\n    getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<IncidentCommentListResource>>;\n    /**\n     * Get the Verification Results for an Incident by ID.\n     * Get the Verification Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<IncidentVerificationResource>;\n    getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<IncidentVerificationResource>>;\n    getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<IncidentVerificationResource>>;\n    /**\n     * Get the Initial Fire Report by ID.\n     * Get the Initial Fire Report by ID.\n     * @param initialFireReportId The initialFireReportId of the Initial Fire Report resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getInitialFireReport(initialFireReportId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<InitialFireReportResource>;\n    getInitialFireReport(initialFireReportId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<InitialFireReportResource>>;\n    getInitialFireReport(initialFireReportId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<InitialFireReportResource>>;\n    /**\n     * Get list of Initial Fire Reports.\n     * Get list of Initial Fire Reports.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<InitialFireReportListResource>;\n    getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<InitialFireReportListResource>>;\n    getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<InitialFireReportListResource>>;\n    /**\n     * Get an Incidents Managing Land Authority.\n     * Get an Incidents Managing Land Authority.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<IncidentLandAuthorityResource>;\n    getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<IncidentLandAuthorityResource>>;\n    getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<IncidentLandAuthorityResource>>;\n    /**\n     * Get an Incidents Compliance And Enforcement Investigation.\n     * Get an Incidents Compliance And Enforcement Investigation.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<OriginAndCauseInvestigationResource>;\n    getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<OriginAndCauseInvestigationResource>>;\n    getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<OriginAndCauseInvestigationResource>>;\n    /**\n     * Get the Provisional Zone by ID.\n     * Get the Provisional Zone by ID.\n     * @param provisionalZoneGuid The identifier of the Provisional Zone resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<ProvisionalZoneResource>;\n    getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<ProvisionalZoneResource>>;\n    getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<ProvisionalZoneResource>>;\n    /**\n     * Get list of Provisional Zones.\n     * Get list of Provisional Zones.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param provisionalZoneGuid Filter the results by the provisionalZoneGuid.\n     * @param provisionalZoneIdentifier Filter the results by the provisionalZoneIdentifier.\n     * @param provisionalZoneTypeCode Filter the results by the provisionalZoneTypeCode.\n     * @param fireCentreOrgUnitIdent Filter the results by the fireCentreOrgUnitIdent.\n     * @param provisionalZonePolygonSpecifiedInd Filter the results by the provisionalZonePolygonSpecifiedInd.\n     * @param dismissedInd Filter the results by the dismissedInd.\n     * @param effectiveTimeStamp Filter the results by the effectiveTimeStamp.\n     * @param expiryTimestamp Filter the results by the expiryTimestamp.\n     * @param effectiveAsOfTimestamp Filter the results by the effectiveAsOfTimesatmp.\n     * @param textSearch Filter the results by the text.\n     * @param provisionedByUserName Filter the results by the provisionedByUserName.\n     * @param provisionedByUserId Filter the results by the provisionedByUserId.\n     * @param lastStateChangeAsOfTimestamp Filter the results by the lastStateChangeAsOfTimestamp.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<ProvisionalZoneListResource>;\n    getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<ProvisionalZoneListResource>>;\n    getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<ProvisionalZoneListResource>>;\n    /**\n     * Get the Public Report of Fire by External ID.\n     * Get the Public Report of Fire by External ID.\n     * @param externalId The externalId of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublicReportOfFire(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    getPublicReportOfFire(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    getPublicReportOfFire(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Get the Public Report of Fire by ID.\n     * Get the Public Report of Fire by ID.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Get the Public Report of Fire Comment by External ID.\n     * Get the Public Report of Fire Comment by External ID.\n     * @param externalId The externalId of the Public Report of Fire Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublicReportOfFireComment(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireCommentResource>;\n    getPublicReportOfFireComment(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireCommentResource>>;\n    getPublicReportOfFireComment(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireCommentResource>>;\n    /**\n     * Get the PublicReportOfFire Comment by ID.\n     * Get the PublicReportOfFire Comment by ID.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param commentGuid The identifier of the PublicReportOfFire Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireCommentResource>;\n    getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireCommentResource>>;\n    getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireCommentResource>>;\n    /**\n     * Get list of PublicReportOfFire Comments.\n     * Get list of PublicReportOfFire Comments.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param systemGeneratedCommentInd Filter the results by the systemGeneratedCommentInd.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireCommentListResource>;\n    getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireCommentListResource>>;\n    getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireCommentListResource>>;\n    /**\n     * Get list of Public Report of Fires.\n     * Get list of Public Report of Fires.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param messageStatusCode Filter the results by the messageStatusCode.\n     * @param reportOfFireNumber Filter the results by the reportOfFireNumber.\n     * @param wildfireYear Filter the results by the wildfireYear.\n     * @param interfaceFireInd Filter the results by the interfaceFireInd.\n     * @param minimumReportedDate Filter the results by the minimumReportedDate.\n     * @param reportedByName Filter the results by the reportedByName.\n     * @param receivedByUserId Filter the results by the receivedByUserId.\n     * @param receivedByUserGuid Filter the results by the receivedByUserGuid.\n     * @param acknowledgedByUserId Filter the results by the acknowledgedByUserId.\n     * @param acknowledgedByUserGuid Filter the results by the acknowledgedByUserGuid.\n     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.\n     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.\n     * @param reportedByPartyName Filter the results by the reportedByPartyName.\n     * @param callerName Filter the results by the callerName.\n     * @param lostCallInd Filter the results by the lostCallInd.\n     * @param availableForCallbackInd Filter the results by the availableForCallbackInd.\n     * @param publicReportTypeCode Filter the results by the publicReportTypeCode.\n     * @param fireSizeComparisionCode Filter the results by the fireSizeComparisionCode.\n     * @param rateOfSpreadCode Filter the results by the rateOfSpreadCode.\n     * @param smokeColourCode Filter the results by the smokeColourCode.\n     * @param messageReceivedSource Filter the results by the messageReceivedSource.\n     * @param submittedAsOfTimestamp Filter the results by the submittedTimestamp.\n     * @param receievedAsOfTimestamp Filter the results by the receievedTimestamp.\n     * @param submittedOrReceivedAsOfTimestamp Filter the results by the submittedTimestamp or for RoFs that have not been submitted, by receievedTimestamp.\n     * @param incidentWildfireYear Filter the results by the incidentWildfireYear.\n     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.\n     * @param relayedInd Filter the results by the relayedInd.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireListResource>;\n    getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireListResource>>;\n    getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireListResource>>;\n    /**\n     * Get list of Public Report of Fire Status Changes.\n     * Get list of Public Report of Fire Status Changes.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<StatusChangeListResource>;\n    getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<StatusChangeListResource>>;\n    getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<StatusChangeListResource>>;\n    /**\n     * @param publishedIncidentDetailGuid\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublishedIncident(publishedIncidentDetailGuid: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    getPublishedIncident(publishedIncidentDetailGuid: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    getPublishedIncident(publishedIncidentDetailGuid: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param incidentGuid\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublishedIncidentByIncidentGuid(incidentGuid: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    getPublishedIncidentByIncidentGuid(incidentGuid: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    getPublishedIncidentByIncidentGuid(incidentGuid: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * @param pageNumber\n     * @param pageRowCount\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Get Report of Fire Attachment by ID.\n     * Get the Report of Fire Attachment by ID.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentResource>;\n    getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentResource>>;\n    getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentResource>>;\n    /**\n     * Get Report of Fire Attachments.\n     * Get list of Report of Fire Attachments.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param archived List archived attachments\n     * @param privateIndicator List private attachments\n     * @param sourceObjectNameCode The sourceObjectNameCode the results to be returned.\n     * @param attachmentTypeCode The attachmentTypeCode the results to be returned.\n     * @param uploadedByUserId The uploadedByUserId the results to be returned.\n     * @param uploadedByByUserType The uploadedByByUserType the results to be returned.\n     * @param uploadedByUserGuid The uploadedByUserGuid the results to be returned.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentListResource>;\n    getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentListResource>>;\n    getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentListResource>>;\n    /**\n     * Get the Resource Allocation Assessment for an Incident by ID.\n     * Get the Resource Allocation Assessment for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<ResourceAllocationAssessmentResource>;\n    getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<ResourceAllocationAssessmentResource>>;\n    getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<ResourceAllocationAssessmentResource>>;\n    /**\n     * Get list of Simple Report of Fires.\n     * Get list of Simple Report of Fires.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param messageStatusCode Filter the results by the messageStatusCode.\n     * @param reportOfFireNumber Filter the results by the reportOfFireNumber.\n     * @param wildfireYear Filter the results by the wildfireYear.\n     * @param interfaceFireInd Filter the results by the interfaceFireInd.\n     * @param minimumReportedDate Filter the results by the minimumReportedDate.\n     * @param reportedByName Filter the results by the reportedByName.\n     * @param receivedByUserId Filter the results by the receivedByUserId.\n     * @param receivedByUserGuid Filter the results by the receivedByUserGuid.\n     * @param acknowledgedByUserId Filter the results by the acknowledgedByUserId.\n     * @param acknowledgedByUserGuid Filter the results by the acknowledgedByUserGuid.\n     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.\n     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.\n     * @param reportedByPartyName Filter the results by the reportedByPartyName.\n     * @param callerName Filter the results by the callerName.\n     * @param lostCallInd Filter the results by the lostCallInd.\n     * @param availableForCallbackInd Filter the results by the availableForCallbackInd.\n     * @param publicReportTypeCode Filter the results by the publicReportTypeCode.\n     * @param fireSizeComparisionCode Filter the results by the fireSizeComparisionCode.\n     * @param rateOfSpreadCode Filter the results by the rateOfSpreadCode.\n     * @param smokeColourCode Filter the results by the smokeColourCode.\n     * @param submittedAsOfTimestamp Filter the results by the submittedAsOfTimestamp.\n     * @param incidentWildfireYear Filter the results by the incidentWildfireYear.\n     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.\n     * @param relayedInd Filter the results by the relayedInd.\n     * @param lastStateChangeAsOfTimestamp Filter the results by the lastStateChangeAsOfTimestamp.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<SimpleReportOfFireListResource>;\n    getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<SimpleReportOfFireListResource>>;\n    getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<SimpleReportOfFireListResource>>;\n    /**\n     * Get list of Simple Wildfire Incidents.\n     * Get list of Simple Wildfire Incidents.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param wildfireYear Filter the results by the wildfireYear.\n     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.\n     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.\n     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.\n     * @param incidentStatusCode Filter the results by the incidentStatusCode.\n     * @param incidentTypeCode Filter the results by the incidentTypeCode.\n     * @param stageOfControlCode Filter the results by the stageOfControlCode.\n     * @param responseTypeCode Filter the results by the responseTypeCode.\n     * @param suspectedCauseCategoryCode Filter the results by the suspectedCauseCategoryCode.\n     * @param lastUpdatedAsOfTimestamp Filter the results by the lastUpdatedAsOfTimestamp.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<SimpleWildfireIncidentListResource>;\n    getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<SimpleWildfireIncidentListResource>>;\n    getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<SimpleWildfireIncidentListResource>>;\n    /**\n     * Get Top Level Resources.\n     * Get Top Level Resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getTopLevel(restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<EndpointsResource>;\n    getTopLevel(restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<EndpointsResource>>;\n    getTopLevel(restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<EndpointsResource>>;\n    /**\n     * Get the Wildfire Incident by External ID.\n     * Get the Wildfire Incident by External ID.\n     * @param externalId The externalId of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getWildfireIncident(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentResource>;\n    getWildfireIncident(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentResource>>;\n    getWildfireIncident(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentResource>>;\n    /**\n     * Get the Wildfire Incident by ID.\n     * Get the Wildfire Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentResource>;\n    getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentResource>>;\n    getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentResource>>;\n    /**\n     * Get the Wildfire Incident by Incident GUID.\n     * Get the Wildfire Incident by Incident GUID.\n     * @param incidentGuid The incidentGuid of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentResource>;\n    getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentResource>>;\n    getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentResource>>;\n    /**\n     * Get list of Wildfire Incidents.\n     * Get list of Wildfire Incidents.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param wildfireYear Filter the results by the wildfireYear.\n     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.\n     * @param incidentId Filter the results by the incidentId.\n     * @param incidentName Filter the results by the incidentName.\n     * @param claimExpectedInd Filter the results by the claimExpectedInd.\n     * @param rehabilitationPlanRequiredInd Filter the results by the rehabilitationPlanRequiredInd.\n     * @param paperTrailedInd Filter the results by the paperTrailedInd.\n     * @param fieldPhotoInd Filter the results by the fieldPhotoInd.\n     * @param finalReportCompleteInd Filter the results by the finalReportCompleteInd.\n     * @param incidentCommanderName Filter the results by the incidentCommanderName.\n     * @param signoffSignatureInd Filter the results by the signoffSignatureInd.\n     * @param agencyAssistanceTaskIdentifier Filter the results by the agencyAssistanceTaskIdentifier.\n     * @param approvalSignatureName Filter the results by the approvalSignatureName.\n     * @param approvalSignatureInd Filter the results by the approvalSignatureInd.\n     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.\n     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.\n     * @param detectionSourceCode Filter the results by the detectionSourceCode.\n     * @param fireClassificationCode Filter the results by the fireClassificationCode.\n     * @param agencyAssistTypeCode Filter the results by the agencyAssistTypeCode.\n     * @param responseTypeCode Filter the results by the responseTypeCode.\n     * @param assistingPartyName Filter the results by the assistingPartyName.\n     * @param discoveredByPartyName Filter the results by the discoveredByPartyName.\n     * @param firstActionedByPartyName Filter the results by the firstActionedByPartyName.\n     * @param leadByPartyName Filter the results by the leadByPartyName.\n     * @param incidentStatusCode Filter the results by the incidentStatusCode.\n     * @param incidentNumberLabel Filter the results by the incidentNumberLabel.\n     * @param probabilityOfInitialAttackSuccessCode Filter the results by the probabilityOfInitialAttackSuccessCode.\n     * @param suspectedCauseCategoryCode Filter the results by the suspectedCauseCategoryCode.\n     * @param incidentCategoryCode Filter the results by the incidentCategoryCode.\n     * @param incidentTypeCode Filter the results by the incidentTypeCode.\n     * @param fireOfNotePublishedInd Filter the results by the fireOfNotePublishedInd.\n     * @param wasFireOfNotePublishedInd Filter the results by the wasFireOfNotePublishedInd.\n     * @param stageOfControlCode Filter the results by the stageOfControlCode.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentListResource>;\n    getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentListResource>>;\n    getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentListResource>>;\n    /**\n     * Get list of Wildfire Incident Status Changes.\n     * Get list of Wildfire Incident Status Changes.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<StatusChangeListResource>;\n    getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<StatusChangeListResource>>;\n    getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<StatusChangeListResource>>;\n    /**\n     * Get the Wildfire Party by ID.\n     * Get the Wildfire Party by ID.\n     * @param wildfirePartyGuid The identifier of the Wildfire Party resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfirePartyResource>;\n    getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfirePartyResource>>;\n    getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfirePartyResource>>;\n    /**\n     * Get list of Wildfire Partys.\n     * Get list of Wildfire Partys.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param partyName Filter the results by the partyName.\n     * @param partyTypeCode Filter the results by the partyTypeCode.\n     * @param partyUsageTypeCode Filter the results by the partyUsageTypeCode.\n     * @param effectiveAsOfDate Filter the results by the effectiveAsOfDate.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfirePartyListResource>;\n    getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfirePartyListResource>>;\n    getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfirePartyListResource>>;\n    /**\n     * Get the Wildfire Perimeter.\n     * Get the Wildfire Perimeter.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfirePerimeterResource>;\n    getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfirePerimeterResource>>;\n    getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfirePerimeterResource>>;\n    /**\n     * Query the health of the service.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param callstack A comm separated list of the identifier of the calling components.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HealthCheckResponseRsrc>;\n    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<HealthCheckResponseRsrc>>;\n    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<HealthCheckResponseRsrc>>;\n    /**\n     * Redact Incident Attachment by ID\n     * Redact Incident Attachment by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The Incident Attachment resource containing the new file id and path.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentResource>;\n    redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentResource>>;\n    redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentResource>>;\n    /**\n     * Redact Report of Fire Attachment by ID\n     * Redact Report of Fire Attachment by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The ReportOfFire Attachment resource containing the new file id and path.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentResource>;\n    redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentResource>>;\n    redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentResource>>;\n    /**\n     * Review a Received Public Report Of Fire\n     * Review a Received Public Report Of Fire\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Signoff the Approval Results for an Incident by ID.\n     * Signoff the Approval Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentResource>;\n    signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentResource>>;\n    signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentResource>>;\n    /**\n     * Signoff the Verification Results for an Incident by ID.\n     * Signoff the Verification Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentResource>;\n    signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentResource>>;\n    signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentResource>>;\n    /**\n     * Submit a Public Report Of Fire\n     * Submit a Public Report Of Fire\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Unacknowledge a Public Report Of Fire\n     * Unacknowledge a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Unassign a Public Report Of Fire\n     * Unassign a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Uncancel a Public Report Of Fire\n     * Uncancel a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * Unsign the Approval Results for an Incident by ID.\n     * Unsign the Approval Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentResource>;\n    unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentResource>>;\n    unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentResource>>;\n    /**\n     * Unsign the Verification Results for an Incident by ID.\n     * Unsign the Verification Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentResource>;\n    unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentResource>>;\n    unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentResource>>;\n    /**\n     * Update CodeHierarchy by code table name.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param codeHierarchyRsrc The CodeHierarchy resource containing the new values.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeHierarchyRsrc>;\n    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeHierarchyRsrc>>;\n    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeHierarchyRsrc>>;\n    /**\n     * Update CodeTable by code table name.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param codeTableRsrc The CodeTable resource containing the new values.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeTableRsrc>;\n    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeTableRsrc>>;\n    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeTableRsrc>>;\n    /**\n     * Update an Incidents Compliance And Enforcement Investigation\n     * Update an Incidents Compliance And Enforcement Investigation\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param complianceAndEnforcementInvestigationResource The IncidentInvestigation resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<ComplianceAndEnforcementInvestigationResource>;\n    updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<ComplianceAndEnforcementInvestigationResource>>;\n    updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<ComplianceAndEnforcementInvestigationResource>>;\n    /**\n     * @param externalUriGuid\n     * @param externalUriResource\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Update Incident Attachment by ID\n     * Update Incident Attachment by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The Incident Attachment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentResource>;\n    updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentResource>>;\n    updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentResource>>;\n    /**\n     * Update InitialFireReport resource by ID\n     * Update InitialFireReport by ID\n     * @param initialFireReportId The initialFireReportId of the Initial Fire Report resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param initialFireReportResource The InitialFireReport resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<InitialFireReportResource>;\n    updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<InitialFireReportResource>>;\n    updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<InitialFireReportResource>>;\n    /**\n     * Update an Incidents Managing Land Authority\n     * Update an Incidents Managing Land Authority\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param incidentLandAuthorityResource The IncidentLandAuthority resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<IncidentLandAuthorityResource>;\n    updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<IncidentLandAuthorityResource>>;\n    updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<IncidentLandAuthorityResource>>;\n    /**\n     * Update an Incidents Compliance And Enforcement Investigation\n     * Update an Incidents Compliance And Enforcement Investigation\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param originAndCauseInvestigationResource The IncidentInvestigation resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<OriginAndCauseInvestigationResource>;\n    updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<OriginAndCauseInvestigationResource>>;\n    updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<OriginAndCauseInvestigationResource>>;\n    /**\n     * Update Provisional Zone resource by ID\n     * Update ProvisionalZone by ID\n     * @param provisionalZoneGuid The identifier of the ProvisionalZone resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param provisionalZoneResource The ProvisionalZone resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<ProvisionalZoneResource>;\n    updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<ProvisionalZoneResource>>;\n    updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<ProvisionalZoneResource>>;\n    /**\n     * Update PublicReportOfFire resource by ID\n     * Update PublicReportOfFire by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param publicReportOfFireResource The PublicReportOfFire resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<PublicReportOfFireResource>;\n    updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<PublicReportOfFireResource>>;\n    updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<PublicReportOfFireResource>>;\n    /**\n     * @param publishedIncidentDetailGuid\n     * @param publishedIncidentResource\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<any>;\n    updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<any>>;\n    updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Update Report of Fire Attachment by ID\n     * Update Report of Fire Attachment by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The ReportOfFire Attachment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<AttachmentResource>;\n    updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<AttachmentResource>>;\n    updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<AttachmentResource>>;\n    /**\n     * Update the Resource Allocation Assessment for an Incident by ID.\n     * Update the Resource Allocation Assessment for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param resourceAllocationAssessmentResource The ResourceAllocationAssessment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<ResourceAllocationAssessmentResource>;\n    updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<ResourceAllocationAssessmentResource>>;\n    updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<ResourceAllocationAssessmentResource>>;\n    /**\n     * Update WildfireIncident resource by ID\n     * Update WildfireIncident by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireIncidentResource The WildfireIncident resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfireIncidentResource>;\n    updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfireIncidentResource>>;\n    updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfireIncidentResource>>;\n    /**\n     * Update WildfireParty resource by ID\n     * Update WildfireParty by ID\n     * @param wildfirePartyGuid The identifier of the WildfireParty resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfirePartyResource The WildfireParty resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfirePartyResource>;\n    updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfirePartyResource>>;\n    updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfirePartyResource>>;\n    /**\n     * Update WildfirePerimeter resource\n     * Update WildfirePerimeter\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfirePerimeterResource The WildfirePerimeter resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<WildfirePerimeterResource>;\n    updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<WildfirePerimeterResource>>;\n    updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<WildfirePerimeterResource>>;\n}\n"]}