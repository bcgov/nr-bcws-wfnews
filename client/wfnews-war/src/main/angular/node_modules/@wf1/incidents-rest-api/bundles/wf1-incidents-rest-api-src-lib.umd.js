(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@wf1/incidents-rest-api/src/lib', ['exports', '@angular/core', '@angular/common/http'], factory) :
    (factory((global.wf1 = global.wf1 || {}, global.wf1['incidents-rest-api'] = global.wf1['incidents-rest-api'] || {}, global.wf1['incidents-rest-api'].src = global.wf1['incidents-rest-api'].src || {}, global.wf1['incidents-rest-api'].src.lib = {}),global.ng.core,global.ng.common.http));
}(this, (function (exports,i0,i1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Custom HttpParameterCodec
     * Workaround for https://github.com/angular/angular/issues/18261
     */
    var /**
     * Custom HttpParameterCodec
     * Workaround for https://github.com/angular/angular/issues/18261
     */ CustomHttpParameterCodec = (function () {
        function CustomHttpParameterCodec() {
        }
        /**
         * @param {?} k
         * @return {?}
         */
        CustomHttpParameterCodec.prototype.encodeKey = /**
         * @param {?} k
         * @return {?}
         */
            function (k) {
                return encodeURIComponent(k);
            };
        /**
         * @param {?} v
         * @return {?}
         */
        CustomHttpParameterCodec.prototype.encodeValue = /**
         * @param {?} v
         * @return {?}
         */
            function (v) {
                return encodeURIComponent(v);
            };
        /**
         * @param {?} k
         * @return {?}
         */
        CustomHttpParameterCodec.prototype.decodeKey = /**
         * @param {?} k
         * @return {?}
         */
            function (k) {
                return decodeURIComponent(k);
            };
        /**
         * @param {?} v
         * @return {?}
         */
        CustomHttpParameterCodec.prototype.decodeValue = /**
         * @param {?} v
         * @return {?}
         */
            function (v) {
                return decodeURIComponent(v);
            };
        return CustomHttpParameterCodec;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var BASE_PATH = new i0.InjectionToken('basePath');
    /** @type {?} */
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Configuration = (function () {
        function Configuration(configurationParameters) {
            if (configurationParameters === void 0) {
                configurationParameters = {};
            }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
        }
        /**
         * Select the correct content-type to use for a request.
         * Uses {\@link Configuration#isJsonMime} to determine the correct content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param {?} contentTypes - the array of content types that are available for selection
         * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
         */
        Configuration.prototype.selectHeaderContentType = /**
         * Select the correct content-type to use for a request.
         * Uses {\@link Configuration#isJsonMime} to determine the correct content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param {?} contentTypes - the array of content types that are available for selection
         * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
         */
            function (contentTypes) {
                var _this = this;
                if (contentTypes.length === 0) {
                    return undefined;
                }
                /** @type {?} */
                var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
                if (type === undefined) {
                    return contentTypes[0];
                }
                return type;
            };
        /**
         * Select the correct accept content-type to use for a request.
         * Uses {\@link Configuration#isJsonMime} to determine the correct accept content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param {?} accepts - the array of content types that are available for selection.
         * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
         */
        Configuration.prototype.selectHeaderAccept = /**
         * Select the correct accept content-type to use for a request.
         * Uses {\@link Configuration#isJsonMime} to determine the correct accept content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param {?} accepts - the array of content types that are available for selection.
         * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
         */
            function (accepts) {
                var _this = this;
                if (accepts.length === 0) {
                    return undefined;
                }
                /** @type {?} */
                var type = accepts.find(function (x) { return _this.isJsonMime(x); });
                if (type === undefined) {
                    return accepts[0];
                }
                return type;
            };
        /**
         * Check if the given MIME is a JSON MIME.
         * JSON MIME examples:
         *   application/json
         *   application/json; charset=UTF8
         *   APPLICATION/JSON
         *   application/vnd.company+json
         * @param {?} mime - MIME (Multipurpose Internet Mail Extensions)
         * @return {?} True if the given MIME is JSON, false otherwise.
         */
        Configuration.prototype.isJsonMime = /**
         * Check if the given MIME is a JSON MIME.
         * JSON MIME examples:
         *   application/json
         *   application/json; charset=UTF8
         *   APPLICATION/JSON
         *   application/vnd.company+json
         * @param {?} mime - MIME (Multipurpose Internet Mail Extensions)
         * @return {?} True if the given MIME is JSON, false otherwise.
         */
            function (mime) {
                /** @type {?} */
                var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
                return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
            };
        return Configuration;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DefaultService = (function () {
        function DefaultService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'http://localhost';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new Configuration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        /**
         * @param {?} httpParams
         * @param {?} value
         * @param {?=} key
         * @return {?}
         */
        DefaultService.prototype.addToHttpParams = /**
         * @param {?} httpParams
         * @param {?} value
         * @param {?=} key
         * @return {?}
         */
            function (httpParams, value, key) {
                if (typeof value === "object" && value instanceof Date === false) {
                    httpParams = this.addToHttpParamsRecursive(httpParams, value);
                }
                else {
                    httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
                }
                return httpParams;
            };
        /**
         * @param {?} httpParams
         * @param {?=} value
         * @param {?=} key
         * @return {?}
         */
        DefaultService.prototype.addToHttpParamsRecursive = /**
         * @param {?} httpParams
         * @param {?=} value
         * @param {?=} key
         * @return {?}
         */
            function (httpParams, value, key) {
                var _this = this;
                if (value == null) {
                    return httpParams;
                }
                if (typeof value === "object") {
                    if (Array.isArray(value)) {
                        ((value)).forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                    }
                    else if (value instanceof Date) {
                        if (key != null) {
                            httpParams = httpParams.append(key, ((value)).toISOString().substr(0, 10));
                        }
                        else {
                            throw Error("key may not be null if value is Date");
                        }
                    }
                    else {
                        Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                    }
                }
                else if (key != null) {
                    httpParams = httpParams.append(key, value);
                }
                else {
                    throw Error("key may not be null if value is not object or array");
                }
                return httpParams;
            };
        /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.acknowledgePublicReportOfFire = /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling acknowledgePublicReportOfFire.');
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling acknowledgePublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling acknowledgePublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/acknowledge", onBehalfOfResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} publicReportOfFireRelayMessage
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.addPublicReportOfFireRelayMessage = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} publicReportOfFireRelayMessage
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, publicReportOfFireRelayMessage, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling addPublicReportOfFireRelayMessage.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling addPublicReportOfFireRelayMessage.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (publicReportOfFireRelayMessage !== undefined && publicReportOfFireRelayMessage !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (publicReportOfFireRelayMessage), 'publicReportOfFireRelayMessage');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/relaymessage", null, {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} incidentWildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.assignPublicReportOfFire = /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} incidentWildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (ifMatch, wildfireYear, reportOfFireNumber, restVersion, incidentWildfireYear, incidentNumberSequence, onBehalfOfResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling assignPublicReportOfFire.');
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling assignPublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling assignPublicReportOfFire.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (incidentWildfireYear !== undefined && incidentWildfireYear !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (incidentWildfireYear), 'incidentWildfireYear');
                }
                if (incidentNumberSequence !== undefined && incidentNumberSequence !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (incidentNumberSequence), 'incidentNumberSequence');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/assign", onBehalfOfResource, {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.cancelPublicReportOfFire = /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling cancelPublicReportOfFire.');
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling cancelPublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling cancelPublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/cancel", onBehalfOfResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} externalUriResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createExternalUri = /**
         * @param {?=} externalUriResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (externalUriResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/externalUri", externalUriResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createIncidentAttachment = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, attachmentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling createIncidentAttachment.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling createIncidentAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/attachments", attachmentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} incidentCommentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createIncidentComment = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} incidentCommentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, incidentCommentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling createIncidentComment.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling createIncidentComment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/incidentComments", incidentCommentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} initialFireReportResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createInitialFireReport = /**
         * @param {?=} restVersion
         * @param {?=} initialFireReportResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, initialFireReportResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/initialFireReports", initialFireReportResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} provisionalZoneResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createProvisionalZone = /**
         * @param {?=} restVersion
         * @param {?=} provisionalZoneResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, provisionalZoneResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/provisionalZones", provisionalZoneResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} publicReportOfFireResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createPublicReportOfFire = /**
         * @param {?=} restVersion
         * @param {?=} publicReportOfFireResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, publicReportOfFireResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires", publicReportOfFireResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} publicReportOfFireCommentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createPublicReportOfFireComment = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} publicReportOfFireCommentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, publicReportOfFireCommentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling createPublicReportOfFireComment.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling createPublicReportOfFireComment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/comments", publicReportOfFireCommentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} publishedIncidentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createPublishedIncident = /**
         * @param {?=} publishedIncidentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (publishedIncidentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publishedIncidents", publishedIncidentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createReportOfFireAttachment = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, attachmentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling createReportOfFireAttachment.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling createReportOfFireAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/attachments", attachmentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} wildfireIncidentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createWildfireIncident = /**
         * @param {?=} restVersion
         * @param {?=} wildfireIncidentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, wildfireIncidentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/incidents", wildfireIncidentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} wildfirePartyResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.createWildfireParty = /**
         * @param {?=} restVersion
         * @param {?=} wildfirePartyResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, wildfirePartyResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/wildfirePartys", wildfirePartyResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} externalUriGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deleteExternalUri = /**
         * @param {?} externalUriGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (externalUriGuid, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (externalUriGuid === null || externalUriGuid === undefined) {
                    throw new Error('Required parameter externalUriGuid was null or undefined when calling deleteExternalUri.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/externalUri/" + encodeURIComponent(String(externalUriGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deleteIncidentAttachment = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, attachmentGuid, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling deleteIncidentAttachment.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling deleteIncidentAttachment.');
                }
                if (attachmentGuid === null || attachmentGuid === undefined) {
                    throw new Error('Required parameter attachmentGuid was null or undefined when calling deleteIncidentAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/attachments/" + encodeURIComponent(String(attachmentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} incidentCommentGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deleteIncidentComment = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} incidentCommentGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, incidentCommentGuid, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling deleteIncidentComment.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling deleteIncidentComment.');
                }
                if (incidentCommentGuid === null || incidentCommentGuid === undefined) {
                    throw new Error('Required parameter incidentCommentGuid was null or undefined when calling deleteIncidentComment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/incidentComments/" + encodeURIComponent(String(incidentCommentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} initialFireReportId
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deleteInitialFireReport = /**
         * @param {?} initialFireReportId
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (initialFireReportId, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (initialFireReportId === null || initialFireReportId === undefined) {
                    throw new Error('Required parameter initialFireReportId was null or undefined when calling deleteInitialFireReport.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/initialFireReports/" + encodeURIComponent(String(initialFireReportId)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} provisionalZoneGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deleteProvisionalZone = /**
         * @param {?} provisionalZoneGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (provisionalZoneGuid, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (provisionalZoneGuid === null || provisionalZoneGuid === undefined) {
                    throw new Error('Required parameter provisionalZoneGuid was null or undefined when calling deleteProvisionalZone.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/provisionalZones/" + encodeURIComponent(String(provisionalZoneGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deletePublicReportOfFire = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling deletePublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deletePublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} commentGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deletePublicReportOfFireComment = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} commentGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, commentGuid, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling deletePublicReportOfFireComment.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deletePublicReportOfFireComment.');
                }
                if (commentGuid === null || commentGuid === undefined) {
                    throw new Error('Required parameter commentGuid was null or undefined when calling deletePublicReportOfFireComment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/comments/" + encodeURIComponent(String(commentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deletePublicReportOfFireRelayMessage = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling deletePublicReportOfFireRelayMessage.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deletePublicReportOfFireRelayMessage.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/relaymessage", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} publishedIncidentDetailGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deletePublishedIncident = /**
         * @param {?} publishedIncidentDetailGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (publishedIncidentDetailGuid, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (publishedIncidentDetailGuid === null || publishedIncidentDetailGuid === undefined) {
                    throw new Error('Required parameter publishedIncidentDetailGuid was null or undefined when calling deletePublishedIncident.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/publishedIncidents/" + encodeURIComponent(String(publishedIncidentDetailGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deleteReportOfFireAttachment = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, attachmentGuid, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling deleteReportOfFireAttachment.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deleteReportOfFireAttachment.');
                }
                if (attachmentGuid === null || attachmentGuid === undefined) {
                    throw new Error('Required parameter attachmentGuid was null or undefined when calling deleteReportOfFireAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/attachments/" + encodeURIComponent(String(attachmentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deleteWildfireIncident = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling deleteWildfireIncident.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling deleteWildfireIncident.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfirePartyGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.deleteWildfireParty = /**
         * @param {?} wildfirePartyGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfirePartyGuid, restVersion, ifMatch, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfirePartyGuid === null || wildfirePartyGuid === undefined) {
                    throw new Error('Required parameter wildfirePartyGuid was null or undefined when calling deleteWildfireParty.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        '*/*'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/wildfirePartys/" + encodeURIComponent(String(wildfirePartyGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} effectiveAsOfDate
         * @param {?=} codeHierarchyName
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getCodeHierarchyListResource = /**
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} effectiveAsOfDate
         * @param {?=} codeHierarchyName
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (requestId, restVersion, cacheControl, pragma, authorization, effectiveAsOfDate, codeHierarchyName, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
                }
                if (codeHierarchyName !== undefined && codeHierarchyName !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (codeHierarchyName), 'codeHierarchyName');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (requestId !== undefined && requestId !== null) {
                    headers = headers.set('RequestId', String(requestId));
                }
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (cacheControl !== undefined && cacheControl !== null) {
                    headers = headers.set('Cache-Control', String(cacheControl));
                }
                if (pragma !== undefined && pragma !== null) {
                    headers = headers.set('Pragma', String(pragma));
                }
                if (authorization !== undefined && authorization !== null) {
                    headers = headers.set('Authorization', String(authorization));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/codeHierarchies", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} codeHierarchyName
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} effectiveAsOfDate
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getCodeHierarchyResourceByCodeTableName = /**
         * @param {?} codeHierarchyName
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} effectiveAsOfDate
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (codeHierarchyName, requestId, restVersion, cacheControl, pragma, authorization, effectiveAsOfDate, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (codeHierarchyName === null || codeHierarchyName === undefined) {
                    throw new Error('Required parameter codeHierarchyName was null or undefined when calling getCodeHierarchyResourceByCodeTableName.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (requestId !== undefined && requestId !== null) {
                    headers = headers.set('RequestId', String(requestId));
                }
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (cacheControl !== undefined && cacheControl !== null) {
                    headers = headers.set('Cache-Control', String(cacheControl));
                }
                if (pragma !== undefined && pragma !== null) {
                    headers = headers.set('Pragma', String(pragma));
                }
                if (authorization !== undefined && authorization !== null) {
                    headers = headers.set('Authorization', String(authorization));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/codeHierarchies/" + encodeURIComponent(String(codeHierarchyName)), {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} effectiveAsOfDate
         * @param {?=} codeTableName
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getCodeTableListResource = /**
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} effectiveAsOfDate
         * @param {?=} codeTableName
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (requestId, restVersion, cacheControl, pragma, authorization, effectiveAsOfDate, codeTableName, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
                }
                if (codeTableName !== undefined && codeTableName !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (codeTableName), 'codeTableName');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (requestId !== undefined && requestId !== null) {
                    headers = headers.set('RequestId', String(requestId));
                }
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (cacheControl !== undefined && cacheControl !== null) {
                    headers = headers.set('Cache-Control', String(cacheControl));
                }
                if (pragma !== undefined && pragma !== null) {
                    headers = headers.set('Pragma', String(pragma));
                }
                if (authorization !== undefined && authorization !== null) {
                    headers = headers.set('Authorization', String(authorization));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/codeTables", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} codeTableName
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} effectiveAsOfDate
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getCodeTableResourceByCodeTableName = /**
         * @param {?} codeTableName
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} effectiveAsOfDate
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (codeTableName, requestId, restVersion, cacheControl, pragma, authorization, effectiveAsOfDate, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (codeTableName === null || codeTableName === undefined) {
                    throw new Error('Required parameter codeTableName was null or undefined when calling getCodeTableResourceByCodeTableName.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (requestId !== undefined && requestId !== null) {
                    headers = headers.set('RequestId', String(requestId));
                }
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (cacheControl !== undefined && cacheControl !== null) {
                    headers = headers.set('Cache-Control', String(cacheControl));
                }
                if (pragma !== undefined && pragma !== null) {
                    headers = headers.set('Pragma', String(pragma));
                }
                if (authorization !== undefined && authorization !== null) {
                    headers = headers.set('Authorization', String(authorization));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/codeTables/" + encodeURIComponent(String(codeTableName)), {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getComplianceAndEnforcementInvestigation = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getComplianceAndEnforcementInvestigation.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getComplianceAndEnforcementInvestigation.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/complianceAndEnforcementInvestigation", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} externalUriGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getExternalUri = /**
         * @param {?} externalUriGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (externalUriGuid, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (externalUriGuid === null || externalUriGuid === undefined) {
                    throw new Error('Required parameter externalUriGuid was null or undefined when calling getExternalUri.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/externalUri/" + encodeURIComponent(String(externalUriGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} sourceObjectUniqueId
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getExternalUriList = /**
         * @param {?=} sourceObjectUniqueId
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (sourceObjectUniqueId, pageNumber, pageRowCount, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (sourceObjectUniqueId !== undefined && sourceObjectUniqueId !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (sourceObjectUniqueId), 'sourceObjectUniqueId');
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/externalUri", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getIncidentApproval = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentApproval.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentApproval.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/approval", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getIncidentAttachment = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, attachmentGuid, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentAttachment.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentAttachment.');
                }
                if (attachmentGuid === null || attachmentGuid === undefined) {
                    throw new Error('Required parameter attachmentGuid was null or undefined when calling getIncidentAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/attachments/" + encodeURIComponent(String(attachmentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} archived
         * @param {?=} privateIndicator
         * @param {?=} sourceObjectNameCode
         * @param {?=} attachmentTypeCode
         * @param {?=} uploadedByUserId
         * @param {?=} uploadedByByUserType
         * @param {?=} uploadedByUserGuid
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getIncidentAttachmentList = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} archived
         * @param {?=} privateIndicator
         * @param {?=} sourceObjectNameCode
         * @param {?=} attachmentTypeCode
         * @param {?=} uploadedByUserId
         * @param {?=} uploadedByByUserType
         * @param {?=} uploadedByUserGuid
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, archived, privateIndicator, sourceObjectNameCode, attachmentTypeCode, uploadedByUserId, uploadedByByUserType, uploadedByUserGuid, pageNumber, pageRowCount, orderBy, observe, reportProgress, options) {
                var _this = this;
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentAttachmentList.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentAttachmentList.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (archived !== undefined && archived !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (archived), 'archived');
                }
                if (privateIndicator !== undefined && privateIndicator !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (privateIndicator), 'privateIndicator');
                }
                if (sourceObjectNameCode) {
                    sourceObjectNameCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'sourceObjectNameCode');
                    });
                }
                if (attachmentTypeCode) {
                    attachmentTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'attachmentTypeCode');
                    });
                }
                if (uploadedByUserId) {
                    uploadedByUserId.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByUserId');
                    });
                }
                if (uploadedByByUserType) {
                    uploadedByByUserType.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByByUserType');
                    });
                }
                if (uploadedByUserGuid) {
                    uploadedByUserGuid.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByUserGuid');
                    });
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/attachments", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getIncidentCause = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentCause.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentCause.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/incidentCause", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} externalId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getIncidentComment = /**
         * @param {?} externalId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (externalId, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (externalId === null || externalId === undefined) {
                    throw new Error('Required parameter externalId was null or undefined when calling getIncidentComment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidentComments/externalId/" + encodeURIComponent(String(externalId)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} incidentCommentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getIncidentComment1 = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} incidentCommentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, incidentCommentGuid, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentComment1.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentComment1.');
                }
                if (incidentCommentGuid === null || incidentCommentGuid === undefined) {
                    throw new Error('Required parameter incidentCommentGuid was null or undefined when calling getIncidentComment1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/incidentComments/" + encodeURIComponent(String(incidentCommentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getIncidentCommentList = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentCommentList.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentCommentList.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/incidentComments", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getIncidentVerification = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentVerification.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentVerification.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/verification", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} initialFireReportId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getInitialFireReport = /**
         * @param {?} initialFireReportId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (initialFireReportId, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (initialFireReportId === null || initialFireReportId === undefined) {
                    throw new Error('Required parameter initialFireReportId was null or undefined when calling getInitialFireReport.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/initialFireReports/" + encodeURIComponent(String(initialFireReportId)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getInitialFireReportList = /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, searchText, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                var _this = this;
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (searchText) {
                    searchText.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
                    });
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/initialFireReports", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getManagingLandAuthority = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getManagingLandAuthority.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getManagingLandAuthority.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/managingLandAuthority", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getOriginAndCauseInvestigation = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getOriginAndCauseInvestigation.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getOriginAndCauseInvestigation.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/originAndCauseInvestigation", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} provisionalZoneGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getProvisionalZone = /**
         * @param {?} provisionalZoneGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (provisionalZoneGuid, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (provisionalZoneGuid === null || provisionalZoneGuid === undefined) {
                    throw new Error('Required parameter provisionalZoneGuid was null or undefined when calling getProvisionalZone.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/provisionalZones/" + encodeURIComponent(String(provisionalZoneGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} provisionalZoneGuid
         * @param {?=} provisionalZoneIdentifier
         * @param {?=} provisionalZoneTypeCode
         * @param {?=} fireCentreOrgUnitIdent
         * @param {?=} provisionalZonePolygonSpecifiedInd
         * @param {?=} dismissedInd
         * @param {?=} effectiveTimeStamp
         * @param {?=} expiryTimestamp
         * @param {?=} effectiveAsOfTimestamp
         * @param {?=} textSearch
         * @param {?=} provisionedByUserName
         * @param {?=} provisionedByUserId
         * @param {?=} lastStateChangeAsOfTimestamp
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getProvisionalZoneList = /**
         * @param {?=} restVersion
         * @param {?=} provisionalZoneGuid
         * @param {?=} provisionalZoneIdentifier
         * @param {?=} provisionalZoneTypeCode
         * @param {?=} fireCentreOrgUnitIdent
         * @param {?=} provisionalZonePolygonSpecifiedInd
         * @param {?=} dismissedInd
         * @param {?=} effectiveTimeStamp
         * @param {?=} expiryTimestamp
         * @param {?=} effectiveAsOfTimestamp
         * @param {?=} textSearch
         * @param {?=} provisionedByUserName
         * @param {?=} provisionedByUserId
         * @param {?=} lastStateChangeAsOfTimestamp
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, provisionalZoneGuid, provisionalZoneIdentifier, provisionalZoneTypeCode, fireCentreOrgUnitIdent, provisionalZonePolygonSpecifiedInd, dismissedInd, effectiveTimeStamp, expiryTimestamp, effectiveAsOfTimestamp, textSearch, provisionedByUserName, provisionedByUserId, lastStateChangeAsOfTimestamp, pageNumber, pageRowCount, orderBy, observe, reportProgress, options) {
                var _this = this;
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (provisionalZoneGuid) {
                    provisionalZoneGuid.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionalZoneGuid');
                    });
                }
                if (provisionalZoneIdentifier) {
                    provisionalZoneIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionalZoneIdentifier');
                    });
                }
                if (provisionalZoneTypeCode) {
                    provisionalZoneTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionalZoneTypeCode');
                    });
                }
                if (fireCentreOrgUnitIdent) {
                    fireCentreOrgUnitIdent.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdent');
                    });
                }
                if (provisionalZonePolygonSpecifiedInd !== undefined && provisionalZonePolygonSpecifiedInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (provisionalZonePolygonSpecifiedInd), 'provisionalZonePolygonSpecifiedInd');
                }
                if (dismissedInd !== undefined && dismissedInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (dismissedInd), 'dismissedInd');
                }
                if (effectiveTimeStamp !== undefined && effectiveTimeStamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveTimeStamp), 'effectiveTimeStamp');
                }
                if (expiryTimestamp !== undefined && expiryTimestamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expiryTimestamp), 'expiryTimestamp');
                }
                if (effectiveAsOfTimestamp !== undefined && effectiveAsOfTimestamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfTimestamp), 'effectiveAsOfTimestamp');
                }
                if (textSearch) {
                    textSearch.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'textSearch');
                    });
                }
                if (provisionedByUserName) {
                    provisionedByUserName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionedByUserName');
                    });
                }
                if (provisionedByUserId) {
                    provisionedByUserId.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionedByUserId');
                    });
                }
                if (lastStateChangeAsOfTimestamp !== undefined && lastStateChangeAsOfTimestamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lastStateChangeAsOfTimestamp), 'lastStateChangeAsOfTimestamp');
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/provisionalZones", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} externalId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublicReportOfFire = /**
         * @param {?} externalId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (externalId, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (externalId === null || externalId === undefined) {
                    throw new Error('Required parameter externalId was null or undefined when calling getPublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publicReportOfFires/externalId/" + encodeURIComponent(String(externalId)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublicReportOfFire1 = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFire1.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFire1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} externalId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublicReportOfFireComment = /**
         * @param {?} externalId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (externalId, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (externalId === null || externalId === undefined) {
                    throw new Error('Required parameter externalId was null or undefined when calling getPublicReportOfFireComment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publicReportOfFireComments/externalId/" + encodeURIComponent(String(externalId)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} commentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublicReportOfFireComment1 = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} commentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, commentGuid, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFireComment1.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFireComment1.');
                }
                if (commentGuid === null || commentGuid === undefined) {
                    throw new Error('Required parameter commentGuid was null or undefined when calling getPublicReportOfFireComment1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/comments/" + encodeURIComponent(String(commentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} systemGeneratedCommentInd
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublicReportOfFireCommentList = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} systemGeneratedCommentInd
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, searchText, systemGeneratedCommentInd, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFireCommentList.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFireCommentList.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (searchText !== undefined && searchText !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (searchText), 'searchText');
                }
                if (systemGeneratedCommentInd !== undefined && systemGeneratedCommentInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (systemGeneratedCommentInd), 'systemGeneratedCommentInd');
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/comments", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} messageStatusCode
         * @param {?=} reportOfFireNumber
         * @param {?=} wildfireYear
         * @param {?=} interfaceFireInd
         * @param {?=} minimumReportedDate
         * @param {?=} reportedByName
         * @param {?=} receivedByUserId
         * @param {?=} receivedByUserGuid
         * @param {?=} acknowledgedByUserId
         * @param {?=} acknowledgedByUserGuid
         * @param {?=} fireCentreOrgUnitIdentifier
         * @param {?=} zoneOrgUnitIdentifier
         * @param {?=} reportedByPartyName
         * @param {?=} callerName
         * @param {?=} lostCallInd
         * @param {?=} availableForCallbackInd
         * @param {?=} publicReportTypeCode
         * @param {?=} fireSizeComparisionCode
         * @param {?=} rateOfSpreadCode
         * @param {?=} smokeColourCode
         * @param {?=} messageReceivedSource
         * @param {?=} submittedAsOfTimestamp
         * @param {?=} receievedAsOfTimestamp
         * @param {?=} submittedOrReceivedAsOfTimestamp
         * @param {?=} incidentWildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} relayedInd
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublicReportOfFireList = /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} messageStatusCode
         * @param {?=} reportOfFireNumber
         * @param {?=} wildfireYear
         * @param {?=} interfaceFireInd
         * @param {?=} minimumReportedDate
         * @param {?=} reportedByName
         * @param {?=} receivedByUserId
         * @param {?=} receivedByUserGuid
         * @param {?=} acknowledgedByUserId
         * @param {?=} acknowledgedByUserGuid
         * @param {?=} fireCentreOrgUnitIdentifier
         * @param {?=} zoneOrgUnitIdentifier
         * @param {?=} reportedByPartyName
         * @param {?=} callerName
         * @param {?=} lostCallInd
         * @param {?=} availableForCallbackInd
         * @param {?=} publicReportTypeCode
         * @param {?=} fireSizeComparisionCode
         * @param {?=} rateOfSpreadCode
         * @param {?=} smokeColourCode
         * @param {?=} messageReceivedSource
         * @param {?=} submittedAsOfTimestamp
         * @param {?=} receievedAsOfTimestamp
         * @param {?=} submittedOrReceivedAsOfTimestamp
         * @param {?=} incidentWildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} relayedInd
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, searchText, messageStatusCode, reportOfFireNumber, wildfireYear, interfaceFireInd, minimumReportedDate, reportedByName, receivedByUserId, receivedByUserGuid, acknowledgedByUserId, acknowledgedByUserGuid, fireCentreOrgUnitIdentifier, zoneOrgUnitIdentifier, reportedByPartyName, callerName, lostCallInd, availableForCallbackInd, publicReportTypeCode, fireSizeComparisionCode, rateOfSpreadCode, smokeColourCode, messageReceivedSource, submittedAsOfTimestamp, receievedAsOfTimestamp, submittedOrReceivedAsOfTimestamp, incidentWildfireYear, incidentNumberSequence, relayedInd, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                var _this = this;
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (searchText) {
                    searchText.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
                    });
                }
                if (messageStatusCode) {
                    messageStatusCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'messageStatusCode');
                    });
                }
                if (reportOfFireNumber) {
                    reportOfFireNumber.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportOfFireNumber');
                    });
                }
                if (wildfireYear) {
                    wildfireYear.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'wildfireYear');
                    });
                }
                if (interfaceFireInd !== undefined && interfaceFireInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (interfaceFireInd), 'interfaceFireInd');
                }
                if (minimumReportedDate !== undefined && minimumReportedDate !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (minimumReportedDate), 'minimumReportedDate');
                }
                if (reportedByName) {
                    reportedByName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportedByName');
                    });
                }
                if (receivedByUserId) {
                    receivedByUserId.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'receivedByUserId');
                    });
                }
                if (receivedByUserGuid) {
                    receivedByUserGuid.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'receivedByUserGuid');
                    });
                }
                if (acknowledgedByUserId) {
                    acknowledgedByUserId.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'acknowledgedByUserId');
                    });
                }
                if (acknowledgedByUserGuid) {
                    acknowledgedByUserGuid.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'acknowledgedByUserGuid');
                    });
                }
                if (fireCentreOrgUnitIdentifier) {
                    fireCentreOrgUnitIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdentifier');
                    });
                }
                if (zoneOrgUnitIdentifier) {
                    zoneOrgUnitIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'zoneOrgUnitIdentifier');
                    });
                }
                if (reportedByPartyName) {
                    reportedByPartyName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportedByPartyName');
                    });
                }
                if (callerName) {
                    callerName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'callerName');
                    });
                }
                if (lostCallInd !== undefined && lostCallInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lostCallInd), 'lostCallInd');
                }
                if (availableForCallbackInd !== undefined && availableForCallbackInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (availableForCallbackInd), 'availableForCallbackInd');
                }
                if (publicReportTypeCode) {
                    publicReportTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'publicReportTypeCode');
                    });
                }
                if (fireSizeComparisionCode) {
                    fireSizeComparisionCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireSizeComparisionCode');
                    });
                }
                if (rateOfSpreadCode) {
                    rateOfSpreadCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'rateOfSpreadCode');
                    });
                }
                if (smokeColourCode) {
                    smokeColourCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'smokeColourCode');
                    });
                }
                if (messageReceivedSource) {
                    messageReceivedSource.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'messageReceivedSource');
                    });
                }
                if (submittedAsOfTimestamp !== undefined && submittedAsOfTimestamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (submittedAsOfTimestamp), 'submittedAsOfTimestamp');
                }
                if (receievedAsOfTimestamp !== undefined && receievedAsOfTimestamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (receievedAsOfTimestamp), 'receievedAsOfTimestamp');
                }
                if (submittedOrReceivedAsOfTimestamp !== undefined && submittedOrReceivedAsOfTimestamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (submittedOrReceivedAsOfTimestamp), 'submittedOrReceivedAsOfTimestamp');
                }
                if (incidentWildfireYear) {
                    incidentWildfireYear.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentWildfireYear');
                    });
                }
                if (incidentNumberSequence) {
                    incidentNumberSequence.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberSequence');
                    });
                }
                if (relayedInd !== undefined && relayedInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (relayedInd), 'relayedInd');
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publicReportOfFires", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublicReportOfFireStatusChangeList = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFireStatusChangeList.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFireStatusChangeList.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/statusChanges", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} publishedIncidentDetailGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublishedIncident = /**
         * @param {?} publishedIncidentDetailGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (publishedIncidentDetailGuid, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (publishedIncidentDetailGuid === null || publishedIncidentDetailGuid === undefined) {
                    throw new Error('Required parameter publishedIncidentDetailGuid was null or undefined when calling getPublishedIncident.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publishedIncidents/" + encodeURIComponent(String(publishedIncidentDetailGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} incidentGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublishedIncidentByIncidentGuid = /**
         * @param {?} incidentGuid
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (incidentGuid, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (incidentGuid === null || incidentGuid === undefined) {
                    throw new Error('Required parameter incidentGuid was null or undefined when calling getPublishedIncidentByIncidentGuid.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publishedIncidents/byIncident/" + encodeURIComponent(String(incidentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getPublishedIncidentList = /**
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (pageNumber, pageRowCount, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publishedIncidents", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getReportOfFireAttachment = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, attachmentGuid, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getReportOfFireAttachment.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getReportOfFireAttachment.');
                }
                if (attachmentGuid === null || attachmentGuid === undefined) {
                    throw new Error('Required parameter attachmentGuid was null or undefined when calling getReportOfFireAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/attachments/" + encodeURIComponent(String(attachmentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} archived
         * @param {?=} privateIndicator
         * @param {?=} sourceObjectNameCode
         * @param {?=} attachmentTypeCode
         * @param {?=} uploadedByUserId
         * @param {?=} uploadedByByUserType
         * @param {?=} uploadedByUserGuid
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getReportOfFireAttachmentList = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} archived
         * @param {?=} privateIndicator
         * @param {?=} sourceObjectNameCode
         * @param {?=} attachmentTypeCode
         * @param {?=} uploadedByUserId
         * @param {?=} uploadedByByUserType
         * @param {?=} uploadedByUserGuid
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, archived, privateIndicator, sourceObjectNameCode, attachmentTypeCode, uploadedByUserId, uploadedByByUserType, uploadedByUserGuid, pageNumber, pageRowCount, orderBy, observe, reportProgress, options) {
                var _this = this;
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getReportOfFireAttachmentList.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getReportOfFireAttachmentList.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (archived !== undefined && archived !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (archived), 'archived');
                }
                if (privateIndicator !== undefined && privateIndicator !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (privateIndicator), 'privateIndicator');
                }
                if (sourceObjectNameCode) {
                    sourceObjectNameCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'sourceObjectNameCode');
                    });
                }
                if (attachmentTypeCode) {
                    attachmentTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'attachmentTypeCode');
                    });
                }
                if (uploadedByUserId) {
                    uploadedByUserId.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByUserId');
                    });
                }
                if (uploadedByByUserType) {
                    uploadedByByUserType.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByByUserType');
                    });
                }
                if (uploadedByUserGuid) {
                    uploadedByUserGuid.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByUserGuid');
                    });
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/attachments", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getResourceAllocationAssessment = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getResourceAllocationAssessment.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getResourceAllocationAssessment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/resourceAllocationAssessment", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} messageStatusCode
         * @param {?=} reportOfFireNumber
         * @param {?=} wildfireYear
         * @param {?=} interfaceFireInd
         * @param {?=} minimumReportedDate
         * @param {?=} reportedByName
         * @param {?=} receivedByUserId
         * @param {?=} receivedByUserGuid
         * @param {?=} acknowledgedByUserId
         * @param {?=} acknowledgedByUserGuid
         * @param {?=} fireCentreOrgUnitIdentifier
         * @param {?=} zoneOrgUnitIdentifier
         * @param {?=} reportedByPartyName
         * @param {?=} callerName
         * @param {?=} lostCallInd
         * @param {?=} availableForCallbackInd
         * @param {?=} publicReportTypeCode
         * @param {?=} fireSizeComparisionCode
         * @param {?=} rateOfSpreadCode
         * @param {?=} smokeColourCode
         * @param {?=} submittedAsOfTimestamp
         * @param {?=} incidentWildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} relayedInd
         * @param {?=} lastStateChangeAsOfTimestamp
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getSimpleReportOfFireList = /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} messageStatusCode
         * @param {?=} reportOfFireNumber
         * @param {?=} wildfireYear
         * @param {?=} interfaceFireInd
         * @param {?=} minimumReportedDate
         * @param {?=} reportedByName
         * @param {?=} receivedByUserId
         * @param {?=} receivedByUserGuid
         * @param {?=} acknowledgedByUserId
         * @param {?=} acknowledgedByUserGuid
         * @param {?=} fireCentreOrgUnitIdentifier
         * @param {?=} zoneOrgUnitIdentifier
         * @param {?=} reportedByPartyName
         * @param {?=} callerName
         * @param {?=} lostCallInd
         * @param {?=} availableForCallbackInd
         * @param {?=} publicReportTypeCode
         * @param {?=} fireSizeComparisionCode
         * @param {?=} rateOfSpreadCode
         * @param {?=} smokeColourCode
         * @param {?=} submittedAsOfTimestamp
         * @param {?=} incidentWildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} relayedInd
         * @param {?=} lastStateChangeAsOfTimestamp
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, searchText, messageStatusCode, reportOfFireNumber, wildfireYear, interfaceFireInd, minimumReportedDate, reportedByName, receivedByUserId, receivedByUserGuid, acknowledgedByUserId, acknowledgedByUserGuid, fireCentreOrgUnitIdentifier, zoneOrgUnitIdentifier, reportedByPartyName, callerName, lostCallInd, availableForCallbackInd, publicReportTypeCode, fireSizeComparisionCode, rateOfSpreadCode, smokeColourCode, submittedAsOfTimestamp, incidentWildfireYear, incidentNumberSequence, relayedInd, lastStateChangeAsOfTimestamp, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                var _this = this;
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (searchText) {
                    searchText.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
                    });
                }
                if (messageStatusCode) {
                    messageStatusCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'messageStatusCode');
                    });
                }
                if (reportOfFireNumber) {
                    reportOfFireNumber.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportOfFireNumber');
                    });
                }
                if (wildfireYear) {
                    wildfireYear.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'wildfireYear');
                    });
                }
                if (interfaceFireInd !== undefined && interfaceFireInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (interfaceFireInd), 'interfaceFireInd');
                }
                if (minimumReportedDate !== undefined && minimumReportedDate !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (minimumReportedDate), 'minimumReportedDate');
                }
                if (reportedByName) {
                    reportedByName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportedByName');
                    });
                }
                if (receivedByUserId) {
                    receivedByUserId.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'receivedByUserId');
                    });
                }
                if (receivedByUserGuid) {
                    receivedByUserGuid.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'receivedByUserGuid');
                    });
                }
                if (acknowledgedByUserId) {
                    acknowledgedByUserId.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'acknowledgedByUserId');
                    });
                }
                if (acknowledgedByUserGuid) {
                    acknowledgedByUserGuid.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'acknowledgedByUserGuid');
                    });
                }
                if (fireCentreOrgUnitIdentifier) {
                    fireCentreOrgUnitIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdentifier');
                    });
                }
                if (zoneOrgUnitIdentifier) {
                    zoneOrgUnitIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'zoneOrgUnitIdentifier');
                    });
                }
                if (reportedByPartyName) {
                    reportedByPartyName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportedByPartyName');
                    });
                }
                if (callerName) {
                    callerName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'callerName');
                    });
                }
                if (lostCallInd !== undefined && lostCallInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lostCallInd), 'lostCallInd');
                }
                if (availableForCallbackInd !== undefined && availableForCallbackInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (availableForCallbackInd), 'availableForCallbackInd');
                }
                if (publicReportTypeCode) {
                    publicReportTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'publicReportTypeCode');
                    });
                }
                if (fireSizeComparisionCode) {
                    fireSizeComparisionCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireSizeComparisionCode');
                    });
                }
                if (rateOfSpreadCode) {
                    rateOfSpreadCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'rateOfSpreadCode');
                    });
                }
                if (smokeColourCode) {
                    smokeColourCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'smokeColourCode');
                    });
                }
                if (submittedAsOfTimestamp !== undefined && submittedAsOfTimestamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (submittedAsOfTimestamp), 'submittedAsOfTimestamp');
                }
                if (incidentWildfireYear) {
                    incidentWildfireYear.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentWildfireYear');
                    });
                }
                if (incidentNumberSequence) {
                    incidentNumberSequence.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberSequence');
                    });
                }
                if (relayedInd !== undefined && relayedInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (relayedInd), 'relayedInd');
                }
                if (lastStateChangeAsOfTimestamp !== undefined && lastStateChangeAsOfTimestamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lastStateChangeAsOfTimestamp), 'lastStateChangeAsOfTimestamp');
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/simpleReportOfFires", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} wildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} fireCentreOrgUnitIdentifier
         * @param {?=} zoneOrgUnitIdentifier
         * @param {?=} incidentStatusCode
         * @param {?=} incidentTypeCode
         * @param {?=} stageOfControlCode
         * @param {?=} responseTypeCode
         * @param {?=} suspectedCauseCategoryCode
         * @param {?=} lastUpdatedAsOfTimestamp
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getSimpleWildfireIncidentList = /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} wildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} fireCentreOrgUnitIdentifier
         * @param {?=} zoneOrgUnitIdentifier
         * @param {?=} incidentStatusCode
         * @param {?=} incidentTypeCode
         * @param {?=} stageOfControlCode
         * @param {?=} responseTypeCode
         * @param {?=} suspectedCauseCategoryCode
         * @param {?=} lastUpdatedAsOfTimestamp
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, searchText, wildfireYear, incidentNumberSequence, fireCentreOrgUnitIdentifier, zoneOrgUnitIdentifier, incidentStatusCode, incidentTypeCode, stageOfControlCode, responseTypeCode, suspectedCauseCategoryCode, lastUpdatedAsOfTimestamp, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                var _this = this;
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (searchText) {
                    searchText.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
                    });
                }
                if (wildfireYear) {
                    wildfireYear.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'wildfireYear');
                    });
                }
                if (incidentNumberSequence) {
                    incidentNumberSequence.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberSequence');
                    });
                }
                if (fireCentreOrgUnitIdentifier) {
                    fireCentreOrgUnitIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdentifier');
                    });
                }
                if (zoneOrgUnitIdentifier) {
                    zoneOrgUnitIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'zoneOrgUnitIdentifier');
                    });
                }
                if (incidentStatusCode) {
                    incidentStatusCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentStatusCode');
                    });
                }
                if (incidentTypeCode) {
                    incidentTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentTypeCode');
                    });
                }
                if (stageOfControlCode) {
                    stageOfControlCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'stageOfControlCode');
                    });
                }
                if (responseTypeCode) {
                    responseTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'responseTypeCode');
                    });
                }
                if (suspectedCauseCategoryCode) {
                    suspectedCauseCategoryCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'suspectedCauseCategoryCode');
                    });
                }
                if (lastUpdatedAsOfTimestamp !== undefined && lastUpdatedAsOfTimestamp !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lastUpdatedAsOfTimestamp), 'lastUpdatedAsOfTimestamp');
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/simpleWildfireIncidents", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getTopLevel = /**
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} externalId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getWildfireIncident = /**
         * @param {?} externalId
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (externalId, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (externalId === null || externalId === undefined) {
                    throw new Error('Required parameter externalId was null or undefined when calling getWildfireIncident.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/externalId/" + encodeURIComponent(String(externalId)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getWildfireIncident1 = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getWildfireIncident1.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getWildfireIncident1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} incidentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getWildfireIncidentByIncidentGuid = /**
         * @param {?} incidentGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (incidentGuid, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (incidentGuid === null || incidentGuid === undefined) {
                    throw new Error('Required parameter incidentGuid was null or undefined when calling getWildfireIncidentByIncidentGuid.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(incidentGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} wildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} incidentId
         * @param {?=} incidentName
         * @param {?=} claimExpectedInd
         * @param {?=} rehabilitationPlanRequiredInd
         * @param {?=} paperTrailedInd
         * @param {?=} fieldPhotoInd
         * @param {?=} finalReportCompleteInd
         * @param {?=} incidentCommanderName
         * @param {?=} signoffSignatureInd
         * @param {?=} agencyAssistanceTaskIdentifier
         * @param {?=} approvalSignatureName
         * @param {?=} approvalSignatureInd
         * @param {?=} fireCentreOrgUnitIdentifier
         * @param {?=} zoneOrgUnitIdentifier
         * @param {?=} detectionSourceCode
         * @param {?=} fireClassificationCode
         * @param {?=} agencyAssistTypeCode
         * @param {?=} responseTypeCode
         * @param {?=} assistingPartyName
         * @param {?=} discoveredByPartyName
         * @param {?=} firstActionedByPartyName
         * @param {?=} leadByPartyName
         * @param {?=} incidentStatusCode
         * @param {?=} incidentNumberLabel
         * @param {?=} probabilityOfInitialAttackSuccessCode
         * @param {?=} suspectedCauseCategoryCode
         * @param {?=} incidentCategoryCode
         * @param {?=} incidentTypeCode
         * @param {?=} fireOfNotePublishedInd
         * @param {?=} wasFireOfNotePublishedInd
         * @param {?=} stageOfControlCode
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getWildfireIncidentList = /**
         * @param {?=} restVersion
         * @param {?=} searchText
         * @param {?=} wildfireYear
         * @param {?=} incidentNumberSequence
         * @param {?=} incidentId
         * @param {?=} incidentName
         * @param {?=} claimExpectedInd
         * @param {?=} rehabilitationPlanRequiredInd
         * @param {?=} paperTrailedInd
         * @param {?=} fieldPhotoInd
         * @param {?=} finalReportCompleteInd
         * @param {?=} incidentCommanderName
         * @param {?=} signoffSignatureInd
         * @param {?=} agencyAssistanceTaskIdentifier
         * @param {?=} approvalSignatureName
         * @param {?=} approvalSignatureInd
         * @param {?=} fireCentreOrgUnitIdentifier
         * @param {?=} zoneOrgUnitIdentifier
         * @param {?=} detectionSourceCode
         * @param {?=} fireClassificationCode
         * @param {?=} agencyAssistTypeCode
         * @param {?=} responseTypeCode
         * @param {?=} assistingPartyName
         * @param {?=} discoveredByPartyName
         * @param {?=} firstActionedByPartyName
         * @param {?=} leadByPartyName
         * @param {?=} incidentStatusCode
         * @param {?=} incidentNumberLabel
         * @param {?=} probabilityOfInitialAttackSuccessCode
         * @param {?=} suspectedCauseCategoryCode
         * @param {?=} incidentCategoryCode
         * @param {?=} incidentTypeCode
         * @param {?=} fireOfNotePublishedInd
         * @param {?=} wasFireOfNotePublishedInd
         * @param {?=} stageOfControlCode
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, searchText, wildfireYear, incidentNumberSequence, incidentId, incidentName, claimExpectedInd, rehabilitationPlanRequiredInd, paperTrailedInd, fieldPhotoInd, finalReportCompleteInd, incidentCommanderName, signoffSignatureInd, agencyAssistanceTaskIdentifier, approvalSignatureName, approvalSignatureInd, fireCentreOrgUnitIdentifier, zoneOrgUnitIdentifier, detectionSourceCode, fireClassificationCode, agencyAssistTypeCode, responseTypeCode, assistingPartyName, discoveredByPartyName, firstActionedByPartyName, leadByPartyName, incidentStatusCode, incidentNumberLabel, probabilityOfInitialAttackSuccessCode, suspectedCauseCategoryCode, incidentCategoryCode, incidentTypeCode, fireOfNotePublishedInd, wasFireOfNotePublishedInd, stageOfControlCode, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                var _this = this;
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (searchText) {
                    searchText.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
                    });
                }
                if (wildfireYear) {
                    wildfireYear.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'wildfireYear');
                    });
                }
                if (incidentNumberSequence) {
                    incidentNumberSequence.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberSequence');
                    });
                }
                if (incidentId) {
                    incidentId.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentId');
                    });
                }
                if (incidentName) {
                    incidentName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentName');
                    });
                }
                if (claimExpectedInd !== undefined && claimExpectedInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (claimExpectedInd), 'claimExpectedInd');
                }
                if (rehabilitationPlanRequiredInd !== undefined && rehabilitationPlanRequiredInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (rehabilitationPlanRequiredInd), 'rehabilitationPlanRequiredInd');
                }
                if (paperTrailedInd !== undefined && paperTrailedInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (paperTrailedInd), 'paperTrailedInd');
                }
                if (fieldPhotoInd !== undefined && fieldPhotoInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (fieldPhotoInd), 'fieldPhotoInd');
                }
                if (finalReportCompleteInd !== undefined && finalReportCompleteInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (finalReportCompleteInd), 'finalReportCompleteInd');
                }
                if (incidentCommanderName) {
                    incidentCommanderName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentCommanderName');
                    });
                }
                if (signoffSignatureInd !== undefined && signoffSignatureInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (signoffSignatureInd), 'signoffSignatureInd');
                }
                if (agencyAssistanceTaskIdentifier) {
                    agencyAssistanceTaskIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'agencyAssistanceTaskIdentifier');
                    });
                }
                if (approvalSignatureName) {
                    approvalSignatureName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'approvalSignatureName');
                    });
                }
                if (approvalSignatureInd !== undefined && approvalSignatureInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (approvalSignatureInd), 'approvalSignatureInd');
                }
                if (fireCentreOrgUnitIdentifier) {
                    fireCentreOrgUnitIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdentifier');
                    });
                }
                if (zoneOrgUnitIdentifier) {
                    zoneOrgUnitIdentifier.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'zoneOrgUnitIdentifier');
                    });
                }
                if (detectionSourceCode) {
                    detectionSourceCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'detectionSourceCode');
                    });
                }
                if (fireClassificationCode) {
                    fireClassificationCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireClassificationCode');
                    });
                }
                if (agencyAssistTypeCode) {
                    agencyAssistTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'agencyAssistTypeCode');
                    });
                }
                if (responseTypeCode) {
                    responseTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'responseTypeCode');
                    });
                }
                if (assistingPartyName) {
                    assistingPartyName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'assistingPartyName');
                    });
                }
                if (discoveredByPartyName) {
                    discoveredByPartyName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'discoveredByPartyName');
                    });
                }
                if (firstActionedByPartyName) {
                    firstActionedByPartyName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'firstActionedByPartyName');
                    });
                }
                if (leadByPartyName) {
                    leadByPartyName.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'leadByPartyName');
                    });
                }
                if (incidentStatusCode) {
                    incidentStatusCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentStatusCode');
                    });
                }
                if (incidentNumberLabel) {
                    incidentNumberLabel.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberLabel');
                    });
                }
                if (probabilityOfInitialAttackSuccessCode) {
                    probabilityOfInitialAttackSuccessCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'probabilityOfInitialAttackSuccessCode');
                    });
                }
                if (suspectedCauseCategoryCode) {
                    suspectedCauseCategoryCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'suspectedCauseCategoryCode');
                    });
                }
                if (incidentCategoryCode) {
                    incidentCategoryCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentCategoryCode');
                    });
                }
                if (incidentTypeCode) {
                    incidentTypeCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentTypeCode');
                    });
                }
                if (fireOfNotePublishedInd !== undefined && fireOfNotePublishedInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (fireOfNotePublishedInd), 'fireOfNotePublishedInd');
                }
                if (wasFireOfNotePublishedInd !== undefined && wasFireOfNotePublishedInd !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (wasFireOfNotePublishedInd), 'wasFireOfNotePublishedInd');
                }
                if (stageOfControlCode) {
                    stageOfControlCode.forEach(function (element) {
                        queryParameters = _this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'stageOfControlCode');
                    });
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getWildfireIncidentStatusChangeList = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getWildfireIncidentStatusChangeList.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getWildfireIncidentStatusChangeList.');
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/statusChanges", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfirePartyGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getWildfireParty = /**
         * @param {?} wildfirePartyGuid
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfirePartyGuid, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfirePartyGuid === null || wildfirePartyGuid === undefined) {
                    throw new Error('Required parameter wildfirePartyGuid was null or undefined when calling getWildfireParty.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/wildfirePartys/" + encodeURIComponent(String(wildfirePartyGuid)), {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} restVersion
         * @param {?=} partyName
         * @param {?=} partyTypeCode
         * @param {?=} partyUsageTypeCode
         * @param {?=} effectiveAsOfDate
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getWildfirePartyList = /**
         * @param {?=} restVersion
         * @param {?=} partyName
         * @param {?=} partyTypeCode
         * @param {?=} partyUsageTypeCode
         * @param {?=} effectiveAsOfDate
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} expand
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (restVersion, partyName, partyTypeCode, partyUsageTypeCode, effectiveAsOfDate, pageNumber, pageRowCount, orderBy, expand, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (partyName !== undefined && partyName !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (partyName), 'partyName');
                }
                if (partyTypeCode !== undefined && partyTypeCode !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (partyTypeCode), 'partyTypeCode');
                }
                if (partyUsageTypeCode !== undefined && partyUsageTypeCode !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (partyUsageTypeCode), 'partyUsageTypeCode');
                }
                if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
                }
                if (pageNumber !== undefined && pageNumber !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
                }
                if (pageRowCount !== undefined && pageRowCount !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
                }
                if (orderBy !== undefined && orderBy !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
                }
                if (expand !== undefined && expand !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/wildfirePartys", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.getWildfirePerimeter = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling getWildfirePerimeter.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getWildfirePerimeter.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/wildfirePerimeter", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} callstack
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.queryTheHealthOfTheService = /**
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} callstack
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (requestId, restVersion, cacheControl, pragma, authorization, callstack, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new i1.HttpParams({ encoder: this.encoder });
                if (callstack !== undefined && callstack !== null) {
                    queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (callstack), 'callstack');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (requestId !== undefined && requestId !== null) {
                    headers = headers.set('RequestId', String(requestId));
                }
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (cacheControl !== undefined && cacheControl !== null) {
                    headers = headers.set('Cache-Control', String(cacheControl));
                }
                if (pragma !== undefined && pragma !== null) {
                    headers = headers.set('Pragma', String(pragma));
                }
                if (authorization !== undefined && authorization !== null) {
                    headers = headers.set('Authorization', String(authorization));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.get(this.configuration.basePath + "/checkHealth", {
                    params: queryParameters,
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.redactIncidentAttachment = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, attachmentGuid, restVersion, attachmentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling redactIncidentAttachment.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling redactIncidentAttachment.');
                }
                if (attachmentGuid === null || attachmentGuid === undefined) {
                    throw new Error('Required parameter attachmentGuid was null or undefined when calling redactIncidentAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/attachments/" + encodeURIComponent(String(attachmentGuid)) + "/redact", attachmentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.redactReportOfFireAttachment = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, attachmentGuid, restVersion, attachmentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling redactReportOfFireAttachment.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling redactReportOfFireAttachment.');
                }
                if (attachmentGuid === null || attachmentGuid === undefined) {
                    throw new Error('Required parameter attachmentGuid was null or undefined when calling redactReportOfFireAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/attachments/" + encodeURIComponent(String(attachmentGuid)) + "/redact", attachmentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.reviewPublicReportOfFire = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, ifMatch, onBehalfOfResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling reviewPublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling reviewPublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/review", onBehalfOfResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.signoffIncidentApproval = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling signoffIncidentApproval.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling signoffIncidentApproval.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/approval", null, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.signoffIncidentVerification = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling signoffIncidentVerification.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling signoffIncidentVerification.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/verification", null, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.submitPublicReportOfFire = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, ifMatch, onBehalfOfResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling submitPublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling submitPublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/submit", onBehalfOfResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.unacknowledgePublicReportOfFire = /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling unacknowledgePublicReportOfFire.');
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling unacknowledgePublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling unacknowledgePublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/unacknowledge", onBehalfOfResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.unassignPublicReportOfFire = /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling unassignPublicReportOfFire.');
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling unassignPublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling unassignPublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/unassign", onBehalfOfResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.uncancelPublicReportOfFire = /**
         * @param {?} ifMatch
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} onBehalfOfResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling uncancelPublicReportOfFire.');
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling uncancelPublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling uncancelPublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.post(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/uncancel", onBehalfOfResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.unsignIncidentApproval = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling unsignIncidentApproval.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling unsignIncidentApproval.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/approval", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.unsignIncidentVerification = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling unsignIncidentVerification.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling unsignIncidentVerification.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.delete(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/verification", {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} ifMatch
         * @param {?} codeHierarchyName
         * @param {?} codeHierarchyRsrc
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateCodeHierarchyResourceByCodeTableName = /**
         * @param {?} ifMatch
         * @param {?} codeHierarchyName
         * @param {?} codeHierarchyRsrc
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (ifMatch, codeHierarchyName, codeHierarchyRsrc, requestId, restVersion, cacheControl, pragma, authorization, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeHierarchyResourceByCodeTableName.');
                }
                if (codeHierarchyName === null || codeHierarchyName === undefined) {
                    throw new Error('Required parameter codeHierarchyName was null or undefined when calling updateCodeHierarchyResourceByCodeTableName.');
                }
                if (codeHierarchyRsrc === null || codeHierarchyRsrc === undefined) {
                    throw new Error('Required parameter codeHierarchyRsrc was null or undefined when calling updateCodeHierarchyResourceByCodeTableName.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (requestId !== undefined && requestId !== null) {
                    headers = headers.set('RequestId', String(requestId));
                }
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (cacheControl !== undefined && cacheControl !== null) {
                    headers = headers.set('Cache-Control', String(cacheControl));
                }
                if (pragma !== undefined && pragma !== null) {
                    headers = headers.set('Pragma', String(pragma));
                }
                if (authorization !== undefined && authorization !== null) {
                    headers = headers.set('Authorization', String(authorization));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/codeHierarchies/" + encodeURIComponent(String(codeHierarchyName)), codeHierarchyRsrc, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} ifMatch
         * @param {?} codeTableName
         * @param {?} codeTableRsrc
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateCodeTableResourceByCodeTableName = /**
         * @param {?} ifMatch
         * @param {?} codeTableName
         * @param {?} codeTableRsrc
         * @param {?=} requestId
         * @param {?=} restVersion
         * @param {?=} cacheControl
         * @param {?=} pragma
         * @param {?=} authorization
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (ifMatch, codeTableName, codeTableRsrc, requestId, restVersion, cacheControl, pragma, authorization, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeTableResourceByCodeTableName.');
                }
                if (codeTableName === null || codeTableName === undefined) {
                    throw new Error('Required parameter codeTableName was null or undefined when calling updateCodeTableResourceByCodeTableName.');
                }
                if (codeTableRsrc === null || codeTableRsrc === undefined) {
                    throw new Error('Required parameter codeTableRsrc was null or undefined when calling updateCodeTableResourceByCodeTableName.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (requestId !== undefined && requestId !== null) {
                    headers = headers.set('RequestId', String(requestId));
                }
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (cacheControl !== undefined && cacheControl !== null) {
                    headers = headers.set('Cache-Control', String(cacheControl));
                }
                if (pragma !== undefined && pragma !== null) {
                    headers = headers.set('Pragma', String(pragma));
                }
                if (authorization !== undefined && authorization !== null) {
                    headers = headers.set('Authorization', String(authorization));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/codeTables/" + encodeURIComponent(String(codeTableName)), codeTableRsrc, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} complianceAndEnforcementInvestigationResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateComplianceAndEnforcementInvestigation = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} complianceAndEnforcementInvestigationResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, ifMatch, complianceAndEnforcementInvestigationResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling updateComplianceAndEnforcementInvestigation.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateComplianceAndEnforcementInvestigation.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/complianceAndEnforcementInvestigation", complianceAndEnforcementInvestigationResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} externalUriGuid
         * @param {?=} externalUriResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateExternalUri = /**
         * @param {?} externalUriGuid
         * @param {?=} externalUriResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (externalUriGuid, externalUriResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (externalUriGuid === null || externalUriGuid === undefined) {
                    throw new Error('Required parameter externalUriGuid was null or undefined when calling updateExternalUri.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/externalUri/" + encodeURIComponent(String(externalUriGuid)), externalUriResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateIncidentAttachment = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, attachmentGuid, restVersion, attachmentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling updateIncidentAttachment.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateIncidentAttachment.');
                }
                if (attachmentGuid === null || attachmentGuid === undefined) {
                    throw new Error('Required parameter attachmentGuid was null or undefined when calling updateIncidentAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/attachments/" + encodeURIComponent(String(attachmentGuid)), attachmentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} initialFireReportId
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} initialFireReportResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateInitialFireReport = /**
         * @param {?} initialFireReportId
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} initialFireReportResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (initialFireReportId, restVersion, ifMatch, initialFireReportResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (initialFireReportId === null || initialFireReportId === undefined) {
                    throw new Error('Required parameter initialFireReportId was null or undefined when calling updateInitialFireReport.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/initialFireReports/" + encodeURIComponent(String(initialFireReportId)), initialFireReportResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} incidentLandAuthorityResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateManagingLandAuthority = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} incidentLandAuthorityResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, ifMatch, incidentLandAuthorityResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling updateManagingLandAuthority.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateManagingLandAuthority.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/managingLandAuthority", incidentLandAuthorityResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} originAndCauseInvestigationResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateOriginAndCauseInvestigation = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} originAndCauseInvestigationResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, ifMatch, originAndCauseInvestigationResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling updateOriginAndCauseInvestigation.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateOriginAndCauseInvestigation.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/originAndCauseInvestigation", originAndCauseInvestigationResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} provisionalZoneGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} provisionalZoneResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateProvisionalZone = /**
         * @param {?} provisionalZoneGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} provisionalZoneResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (provisionalZoneGuid, restVersion, ifMatch, provisionalZoneResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (provisionalZoneGuid === null || provisionalZoneGuid === undefined) {
                    throw new Error('Required parameter provisionalZoneGuid was null or undefined when calling updateProvisionalZone.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/provisionalZones/" + encodeURIComponent(String(provisionalZoneGuid)), provisionalZoneResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} publicReportOfFireResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updatePublicReportOfFire = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} publicReportOfFireResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, restVersion, ifMatch, publicReportOfFireResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling updatePublicReportOfFire.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling updatePublicReportOfFire.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)), publicReportOfFireResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} publishedIncidentDetailGuid
         * @param {?=} publishedIncidentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updatePublishedIncident = /**
         * @param {?} publishedIncidentDetailGuid
         * @param {?=} publishedIncidentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (publishedIncidentDetailGuid, publishedIncidentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (publishedIncidentDetailGuid === null || publishedIncidentDetailGuid === undefined) {
                    throw new Error('Required parameter publishedIncidentDetailGuid was null or undefined when calling updatePublishedIncident.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/publishedIncidents/" + encodeURIComponent(String(publishedIncidentDetailGuid)), publishedIncidentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateReportOfFireAttachment = /**
         * @param {?} wildfireYear
         * @param {?} reportOfFireNumber
         * @param {?} attachmentGuid
         * @param {?=} restVersion
         * @param {?=} attachmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, reportOfFireNumber, attachmentGuid, restVersion, attachmentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling updateReportOfFireAttachment.');
                }
                if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
                    throw new Error('Required parameter reportOfFireNumber was null or undefined when calling updateReportOfFireAttachment.');
                }
                if (attachmentGuid === null || attachmentGuid === undefined) {
                    throw new Error('Required parameter attachmentGuid was null or undefined when calling updateReportOfFireAttachment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/publicReportOfFires/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(reportOfFireNumber)) + "/attachments/" + encodeURIComponent(String(attachmentGuid)), attachmentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} resourceAllocationAssessmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateResourceAllocationAssessment = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} resourceAllocationAssessmentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, ifMatch, resourceAllocationAssessmentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling updateResourceAllocationAssessment.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateResourceAllocationAssessment.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/resourceAllocationAssessment", resourceAllocationAssessmentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} wildfireIncidentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateWildfireIncident = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} wildfireIncidentResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, ifMatch, wildfireIncidentResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling updateWildfireIncident.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateWildfireIncident.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)), wildfireIncidentResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfirePartyGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} wildfirePartyResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateWildfireParty = /**
         * @param {?} wildfirePartyGuid
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} wildfirePartyResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfirePartyGuid, restVersion, ifMatch, wildfirePartyResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfirePartyGuid === null || wildfirePartyGuid === undefined) {
                    throw new Error('Required parameter wildfirePartyGuid was null or undefined when calling updateWildfireParty.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/wildfirePartys/" + encodeURIComponent(String(wildfirePartyGuid)), wildfirePartyResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} wildfirePerimeterResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
        DefaultService.prototype.updateWildfirePerimeter = /**
         * @param {?} wildfireYear
         * @param {?} incidentNumberSequence
         * @param {?=} restVersion
         * @param {?=} ifMatch
         * @param {?=} wildfirePerimeterResource
         * @param {?=} observe
         * @param {?=} reportProgress
         * @param {?=} options
         * @return {?}
         */
            function (wildfireYear, incidentNumberSequence, restVersion, ifMatch, wildfirePerimeterResource, observe, reportProgress, options) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (wildfireYear === null || wildfireYear === undefined) {
                    throw new Error('Required parameter wildfireYear was null or undefined when calling updateWildfirePerimeter.');
                }
                if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
                    throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateWildfirePerimeter.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
                if (httpHeaderAcceptSelected === undefined) {
                    /** @type {?} */
                    var httpHeaderAccepts = [
                        'application/json',
                        'application/xml'
                    ];
                    httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                }
                if (httpHeaderAcceptSelected !== undefined) {
                    headers = headers.set('Accept', httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected !== undefined) {
                    headers = headers.set('Content-Type', httpContentTypeSelected);
                }
                /** @type {?} */
                var responseType = 'json';
                if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                    responseType = 'text';
                }
                return this.httpClient.put(this.configuration.basePath + "/incidents/" + encodeURIComponent(String(wildfireYear)) + "/" + encodeURIComponent(String(incidentNumberSequence)) + "/wildfirePerimeter", wildfirePerimeterResource, {
                    responseType: /** @type {?} */ (responseType),
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        DefaultService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        DefaultService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [BASE_PATH,] }] },
                { type: Configuration, decorators: [{ type: i0.Optional }] }
            ];
        };
        /** @nocollapse */ DefaultService.ngInjectableDef = i0.defineInjectable({ factory: function DefaultService_Factory() { return new DefaultService(i0.inject(i1.HttpClient), i0.inject(BASE_PATH, 8), i0.inject(Configuration, 8)); }, token: DefaultService, providedIn: "root" });
        return DefaultService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var APIS = [DefaultService];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    (function (HealthCheckResponseRsrc) {
        HealthCheckResponseRsrc.ValidationStatusEnum = {
            RED: /** @type {?} */ ('RED'),
            YELLOW: /** @type {?} */ ('YELLOW'),
            GREEN: /** @type {?} */ ('GREEN')
        };
    })(exports.HealthCheckResponseRsrc || (exports.HealthCheckResponseRsrc = {}));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ApiModule = (function () {
        function ApiModule(parentModule, http) {
            if (parentModule) {
                throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
        }
        /**
         * @param {?} configurationFactory
         * @return {?}
         */
        ApiModule.forRoot = /**
         * @param {?} configurationFactory
         * @return {?}
         */
            function (configurationFactory) {
                return {
                    ngModule: ApiModule,
                    providers: [{ provide: Configuration, useFactory: configurationFactory }]
                };
            };
        ApiModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    },] },
        ];
        /** @nocollapse */
        ApiModule.ctorParameters = function () {
            return [
                { type: ApiModule, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] },
                { type: i1.HttpClient, decorators: [{ type: i0.Optional }] }
            ];
        };
        return ApiModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.APIS = APIS;
    exports.DefaultService = DefaultService;
    exports.BASE_PATH = BASE_PATH;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.Configuration = Configuration;
    exports.ApiModule = ApiModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YxLWluY2lkZW50cy1yZXN0LWFwaS1zcmMtbGliLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQHdmMS9pbmNpZGVudHMtcmVzdC1hcGkvc3JjL2xpYi9lbmNvZGVyLnRzIiwibmc6Ly9Ad2YxL2luY2lkZW50cy1yZXN0LWFwaS9zcmMvbGliL3ZhcmlhYmxlcy50cyIsIm5nOi8vQHdmMS9pbmNpZGVudHMtcmVzdC1hcGkvc3JjL2xpYi9jb25maWd1cmF0aW9uLnRzIiwibmc6Ly9Ad2YxL2luY2lkZW50cy1yZXN0LWFwaS9zcmMvbGliL2FwaS9kZWZhdWx0LnNlcnZpY2UudHMiLCJuZzovL0B3ZjEvaW5jaWRlbnRzLXJlc3QtYXBpL3NyYy9saWIvYXBpL2FwaS50cyIsIm5nOi8vQHdmMS9pbmNpZGVudHMtcmVzdC1hcGkvc3JjL2xpYi9tb2RlbC9oZWFsdGhDaGVja1Jlc3BvbnNlUnNyYy50cyIsIm5nOi8vQHdmMS9pbmNpZGVudHMtcmVzdC1hcGkvc3JjL2xpYi9hcGkubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBQYXJhbWV0ZXJDb2RlYyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuLyoqXG4gKiBDdXN0b20gSHR0cFBhcmFtZXRlckNvZGVjXG4gKiBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xODI2MVxuICovXG5leHBvcnQgY2xhc3MgQ3VzdG9tSHR0cFBhcmFtZXRlckNvZGVjIGltcGxlbWVudHMgSHR0cFBhcmFtZXRlckNvZGVjIHtcbiAgICBlbmNvZGVLZXkoazogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChrKTtcbiAgICB9XG4gICAgZW5jb2RlVmFsdWUodjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2KTtcbiAgICB9XG4gICAgZGVjb2RlS2V5KGs6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoayk7XG4gICAgfVxuICAgIGRlY29kZVZhbHVlKHY6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodik7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY29uc3QgQkFTRV9QQVRIID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ2Jhc2VQYXRoJyk7XG5leHBvcnQgY29uc3QgQ09MTEVDVElPTl9GT1JNQVRTID0ge1xuICAgICdjc3YnOiAnLCcsXG4gICAgJ3Rzdic6ICcgICAnLFxuICAgICdzc3YnOiAnICcsXG4gICAgJ3BpcGVzJzogJ3wnXG59XG4iLCJpbXBvcnQgeyBIdHRwUGFyYW1ldGVyQ29kZWMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvblBhcmFtZXRlcnMge1xuICAgIGFwaUtleXM/OiB7WyBrZXk6IHN0cmluZyBdOiBzdHJpbmd9O1xuICAgIHVzZXJuYW1lPzogc3RyaW5nO1xuICAgIHBhc3N3b3JkPzogc3RyaW5nO1xuICAgIGFjY2Vzc1Rva2VuPzogc3RyaW5nIHwgKCgpID0+IHN0cmluZyk7XG4gICAgYmFzZVBhdGg/OiBzdHJpbmc7XG4gICAgd2l0aENyZWRlbnRpYWxzPzogYm9vbGVhbjtcbiAgICBlbmNvZGVyPzogSHR0cFBhcmFtZXRlckNvZGVjO1xufVxuXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvbiB7XG4gICAgYXBpS2V5cz86IHtbIGtleTogc3RyaW5nIF06IHN0cmluZ307XG4gICAgdXNlcm5hbWU/OiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ/OiBzdHJpbmc7XG4gICAgYWNjZXNzVG9rZW4/OiBzdHJpbmcgfCAoKCkgPT4gc3RyaW5nKTtcbiAgICBiYXNlUGF0aD86IHN0cmluZztcbiAgICB3aXRoQ3JlZGVudGlhbHM/OiBib29sZWFuO1xuICAgIGVuY29kZXI/OiBIdHRwUGFyYW1ldGVyQ29kZWM7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uUGFyYW1ldGVyczogQ29uZmlndXJhdGlvblBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICB0aGlzLmFwaUtleXMgPSBjb25maWd1cmF0aW9uUGFyYW1ldGVycy5hcGlLZXlzO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gY29uZmlndXJhdGlvblBhcmFtZXRlcnMudXNlcm5hbWU7XG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSBjb25maWd1cmF0aW9uUGFyYW1ldGVycy5wYXNzd29yZDtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IGNvbmZpZ3VyYXRpb25QYXJhbWV0ZXJzLmFjY2Vzc1Rva2VuO1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gY29uZmlndXJhdGlvblBhcmFtZXRlcnMuYmFzZVBhdGg7XG4gICAgICAgIHRoaXMud2l0aENyZWRlbnRpYWxzID0gY29uZmlndXJhdGlvblBhcmFtZXRlcnMud2l0aENyZWRlbnRpYWxzO1xuICAgICAgICB0aGlzLmVuY29kZXIgPSBjb25maWd1cmF0aW9uUGFyYW1ldGVycy5lbmNvZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdCB0aGUgY29ycmVjdCBjb250ZW50LXR5cGUgdG8gdXNlIGZvciBhIHJlcXVlc3QuXG4gICAgICogVXNlcyB7QGxpbmsgQ29uZmlndXJhdGlvbiNpc0pzb25NaW1lfSB0byBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgY29udGVudC10eXBlLlxuICAgICAqIElmIG5vIGNvbnRlbnQgdHlwZSBpcyBmb3VuZCByZXR1cm4gdGhlIGZpcnN0IGZvdW5kIHR5cGUgaWYgdGhlIGNvbnRlbnRUeXBlcyBpcyBub3QgZW1wdHlcbiAgICAgKiBAcGFyYW0gY29udGVudFR5cGVzIC0gdGhlIGFycmF5IG9mIGNvbnRlbnQgdHlwZXMgdGhhdCBhcmUgYXZhaWxhYmxlIGZvciBzZWxlY3Rpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgc2VsZWN0ZWQgY29udGVudC10eXBlIG9yIDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gaWYgbm8gc2VsZWN0aW9uIGNvdWxkIGJlIG1hZGUuXG4gICAgICovXG4gICAgcHVibGljIHNlbGVjdEhlYWRlckNvbnRlbnRUeXBlIChjb250ZW50VHlwZXM6IHN0cmluZ1tdKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKGNvbnRlbnRUeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0eXBlID0gY29udGVudFR5cGVzLmZpbmQoKHg6IHN0cmluZykgPT4gdGhpcy5pc0pzb25NaW1lKHgpKTtcbiAgICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRUeXBlc1swXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgdGhlIGNvcnJlY3QgYWNjZXB0IGNvbnRlbnQtdHlwZSB0byB1c2UgZm9yIGEgcmVxdWVzdC5cbiAgICAgKiBVc2VzIHtAbGluayBDb25maWd1cmF0aW9uI2lzSnNvbk1pbWV9IHRvIGRldGVybWluZSB0aGUgY29ycmVjdCBhY2NlcHQgY29udGVudC10eXBlLlxuICAgICAqIElmIG5vIGNvbnRlbnQgdHlwZSBpcyBmb3VuZCByZXR1cm4gdGhlIGZpcnN0IGZvdW5kIHR5cGUgaWYgdGhlIGNvbnRlbnRUeXBlcyBpcyBub3QgZW1wdHlcbiAgICAgKiBAcGFyYW0gYWNjZXB0cyAtIHRoZSBhcnJheSBvZiBjb250ZW50IHR5cGVzIHRoYXQgYXJlIGF2YWlsYWJsZSBmb3Igc2VsZWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHRoZSBzZWxlY3RlZCBjb250ZW50LXR5cGUgb3IgPGNvZGU+dW5kZWZpbmVkPC9jb2RlPiBpZiBubyBzZWxlY3Rpb24gY291bGQgYmUgbWFkZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VsZWN0SGVhZGVyQWNjZXB0KGFjY2VwdHM6IHN0cmluZ1tdKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKGFjY2VwdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHlwZSA9IGFjY2VwdHMuZmluZCgoeDogc3RyaW5nKSA9PiB0aGlzLmlzSnNvbk1pbWUoeCkpO1xuICAgICAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjZXB0c1swXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gTUlNRSBpcyBhIEpTT04gTUlNRS5cbiAgICAgKiBKU09OIE1JTUUgZXhhbXBsZXM6XG4gICAgICogICBhcHBsaWNhdGlvbi9qc29uXG4gICAgICogICBhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURjhcbiAgICAgKiAgIEFQUExJQ0FUSU9OL0pTT05cbiAgICAgKiAgIGFwcGxpY2F0aW9uL3ZuZC5jb21wYW55K2pzb25cbiAgICAgKiBAcGFyYW0gbWltZSAtIE1JTUUgKE11bHRpcHVycG9zZSBJbnRlcm5ldCBNYWlsIEV4dGVuc2lvbnMpXG4gICAgICogQHJldHVybiBUcnVlIGlmIHRoZSBnaXZlbiBNSU1FIGlzIEpTT04sIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgaXNKc29uTWltZShtaW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QganNvbk1pbWU6IFJlZ0V4cCA9IG5ldyBSZWdFeHAoJ14oYXBwbGljYXRpb25cXC9qc29ufFteOy8gXFx0XStcXC9bXjsvIFxcdF0rWytdanNvbilbIFxcdF0qKDsuKik/JCcsICdpJyk7XG4gICAgICAgIHJldHVybiBtaW1lICE9PSBudWxsICYmIChqc29uTWltZS50ZXN0KG1pbWUpIHx8IG1pbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24tcGF0Y2granNvbicpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogV0ZJTSBJbmNpZGVudCBNYW5hZ2VyIEFQSVxuICogTm8gZGVzY3JpcHRpb24gcHJvdmlkZWQgKGdlbmVyYXRlZCBieSBPcGVuYXBpIEdlbmVyYXRvciBodHRwczovL2dpdGh1Yi5jb20vb3BlbmFwaXRvb2xzL29wZW5hcGktZ2VuZXJhdG9yKVxuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAxLjguMC1TTkFQU0hPVFxuICogXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgbWVtYmVyLW9yZGVyaW5nICovXG5cbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSAgICAgICAgICAgICAgICAgICAgICBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzLCBIdHRwUGFyYW1zLFxuICAgICAgICAgSHR0cFJlc3BvbnNlLCBIdHRwRXZlbnQsIEh0dHBQYXJhbWV0ZXJDb2RlYyB9ICAgICAgIGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEN1c3RvbUh0dHBQYXJhbWV0ZXJDb2RlYyB9ICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICcuLi9lbmNvZGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQXR0YWNobWVudExpc3RSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBBdHRhY2htZW50UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQ29kZUhpZXJhcmNoeUxpc3RSc3JjIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IENvZGVIaWVyYXJjaHlSc3JjIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IENvZGVUYWJsZUxpc3RSc3JjIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IENvZGVUYWJsZVJzcmMgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgQ29tcGxpYW5jZUFuZEVuZm9yY2VtZW50SW52ZXN0aWdhdGlvblJlc291cmNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEVuZHBvaW50c1Jlc291cmNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEV4dGVybmFsVXJpUmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgSGVhbHRoQ2hlY2tSZXNwb25zZVJzcmMgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgSW5jaWRlbnRBcHByb3ZhbFJlc291cmNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEluY2lkZW50Q2F1c2VSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBJbmNpZGVudENvbW1lbnRMaXN0UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgSW5jaWRlbnRDb21tZW50UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgSW5jaWRlbnRMYW5kQXV0aG9yaXR5UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgSW5jaWRlbnRWZXJpZmljYXRpb25SZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBJbml0aWFsRmlyZVJlcG9ydExpc3RSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBJbml0aWFsRmlyZVJlcG9ydFJlc291cmNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IE1lc3NhZ2VMaXN0UnNyYyB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBPbkJlaGFsZk9mUmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgT3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uUmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgUHJvdmlzaW9uYWxab25lTGlzdFJlc291cmNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IFByb3Zpc2lvbmFsWm9uZVJlc291cmNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRMaXN0UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgUHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudFJlc291cmNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IFB1YmxpY1JlcG9ydE9mRmlyZUxpc3RSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBQdWJsaXNoZWRJbmNpZGVudFJlc291cmNlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IFJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnRSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBTaW1wbGVSZXBvcnRPZkZpcmVMaXN0UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgU2ltcGxlV2lsZGZpcmVJbmNpZGVudExpc3RSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBTdGF0dXNDaGFuZ2VMaXN0UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgV2lsZGZpcmVJbmNpZGVudExpc3RSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBXaWxkZmlyZUluY2lkZW50UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgV2lsZGZpcmVQYXJ0eUxpc3RSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBXaWxkZmlyZVBhcnR5UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgV2lsZGZpcmVQZXJpbWV0ZXJSZXNvdXJjZSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5cbmltcG9ydCB7IEJBU0VfUEFUSCwgQ09MTEVDVElPTl9GT1JNQVRTIH0gICAgICAgICAgICAgICAgICAgICBmcm9tICcuLi92YXJpYWJsZXMnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gJy4uL2NvbmZpZ3VyYXRpb24nO1xuXG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGVmYXVsdFNlcnZpY2Uge1xuXG4gICAgcHJvdGVjdGVkIGJhc2VQYXRoID0gJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuICAgIHB1YmxpYyBkZWZhdWx0SGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xuICAgIHB1YmxpYyBjb25maWd1cmF0aW9uID0gbmV3IENvbmZpZ3VyYXRpb24oKTtcbiAgICBwdWJsaWMgZW5jb2RlcjogSHR0cFBhcmFtZXRlckNvZGVjO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIEBPcHRpb25hbCgpQEluamVjdChCQVNFX1BBVEgpIGJhc2VQYXRoOiBzdHJpbmcsIEBPcHRpb25hbCgpIGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJhc2VQYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGJhc2VQYXRoID0gdGhpcy5iYXNlUGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5jb2RlciA9IHRoaXMuY29uZmlndXJhdGlvbi5lbmNvZGVyIHx8IG5ldyBDdXN0b21IdHRwUGFyYW1ldGVyQ29kZWMoKTtcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBhZGRUb0h0dHBQYXJhbXMoaHR0cFBhcmFtczogSHR0cFBhcmFtcywgdmFsdWU6IGFueSwga2V5Pzogc3RyaW5nKTogSHR0cFBhcmFtcyB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgaW5zdGFuY2VvZiBEYXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaHR0cFBhcmFtcyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zUmVjdXJzaXZlKGh0dHBQYXJhbXMsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGh0dHBQYXJhbXMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZShodHRwUGFyYW1zLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHR0cFBhcmFtcztcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZShodHRwUGFyYW1zOiBIdHRwUGFyYW1zLCB2YWx1ZT86IGFueSwga2V5Pzogc3RyaW5nKTogSHR0cFBhcmFtcyB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gaHR0cFBhcmFtcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICh2YWx1ZSBhcyBhbnlbXSkuZm9yRWFjaCggZWxlbSA9PiBodHRwUGFyYW1zID0gdGhpcy5hZGRUb0h0dHBQYXJhbXNSZWN1cnNpdmUoaHR0cFBhcmFtcywgZWxlbSwga2V5KSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5hcHBlbmQoa2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgKHZhbHVlIGFzIERhdGUpLnRvSVNPU3RyaW5nKCkuc3Vic3RyKDAsIDEwKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcImtleSBtYXkgbm90IGJlIG51bGwgaWYgdmFsdWUgaXMgRGF0ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKCBrID0+IGh0dHBQYXJhbXMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZShcbiAgICAgICAgICAgICAgICAgICAgaHR0cFBhcmFtcywgdmFsdWVba10sIGtleSAhPSBudWxsID8gYCR7a2V5fS4ke2t9YCA6IGspKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaHR0cFBhcmFtcyA9IGh0dHBQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJrZXkgbWF5IG5vdCBiZSBudWxsIGlmIHZhbHVlIGlzIG5vdCBvYmplY3Qgb3IgYXJyYXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0dHBQYXJhbXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWNrbm93bGVkZ2UgYSBQdWJsaWMgUmVwb3J0IE9mIEZpcmVcbiAgICAgKiBBY2tub3dsZWRnZSBhIFB1YmxpYyBSZXBvcnQgT2YgRmlyZVxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0T2ZGaXJlTnVtYmVyIFRoZSByZXBvcnRPZkZpcmVOdW1iZXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIG9uQmVoYWxmT2ZSZXNvdXJjZSBUaGUgT25CZWhhbGZPZiByZXNvdXJjZSBjb250YWluaW5nIHRoZSBhdWRpdCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGFja25vd2xlZGdlUHVibGljUmVwb3J0T2ZGaXJlKGlmTWF0Y2g6IHN0cmluZywgd2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb25CZWhhbGZPZlJlc291cmNlPzogT25CZWhhbGZPZlJlc291cmNlLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+O1xuICAgIHB1YmxpYyBhY2tub3dsZWRnZVB1YmxpY1JlcG9ydE9mRmlyZShpZk1hdGNoOiBzdHJpbmcsIHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9uQmVoYWxmT2ZSZXNvdXJjZT86IE9uQmVoYWxmT2ZSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgYWNrbm93bGVkZ2VQdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBhY2tub3dsZWRnZVB1YmxpY1JlcG9ydE9mRmlyZShpZk1hdGNoOiBzdHJpbmcsIHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9uQmVoYWxmT2ZSZXNvdXJjZT86IE9uQmVoYWxmT2ZSZXNvdXJjZSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoaWZNYXRjaCA9PT0gbnVsbCB8fCBpZk1hdGNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGlmTWF0Y2ggd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhY2tub3dsZWRnZVB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhY2tub3dsZWRnZVB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0T2ZGaXJlTnVtYmVyID09PSBudWxsIHx8IHJlcG9ydE9mRmlyZU51bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciByZXBvcnRPZkZpcmVOdW1iZXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhY2tub3dsZWRnZVB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3B1YmxpY1JlcG9ydE9mRmlyZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocmVwb3J0T2ZGaXJlTnVtYmVyKSl9L2Fja25vd2xlZGdlYCxcbiAgICAgICAgICAgIG9uQmVoYWxmT2ZSZXNvdXJjZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIFJlcG9ydE9mRmlyZVJlbGF5TWVzc2FnZSB0byBQdWJsaWNSZXBvcnRPZkZpcmUuXG4gICAgICogQWRkIGFuIFJlcG9ydE9mRmlyZVJlbGF5TWVzc2FnZSB0byBQdWJsaWNSZXBvcnRPZkZpcmUuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcG9ydE9mRmlyZU51bWJlciBUaGUgcmVwb3J0T2ZGaXJlTnVtYmVyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBwdWJsaWNSZXBvcnRPZkZpcmVSZWxheU1lc3NhZ2UgVGhlIFB1YmxpYyBSZXBvcnQgT2YgRmlyZSBSZWxheSBNZXNzYWdlLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBhZGRQdWJsaWNSZXBvcnRPZkZpcmVSZWxheU1lc3NhZ2Uod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgcHVibGljUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlPzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+O1xuICAgIHB1YmxpYyBhZGRQdWJsaWNSZXBvcnRPZkZpcmVSZWxheU1lc3NhZ2Uod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgcHVibGljUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlPzogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBhZGRQdWJsaWNSZXBvcnRPZkZpcmVSZWxheU1lc3NhZ2Uod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgcHVibGljUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgYWRkUHVibGljUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIHB1YmxpY1JlcG9ydE9mRmlyZVJlbGF5TWVzc2FnZT86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhZGRQdWJsaWNSZXBvcnRPZkZpcmVSZWxheU1lc3NhZ2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYWRkUHVibGljUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKHB1YmxpY1JlcG9ydE9mRmlyZVJlbGF5TWVzc2FnZSAhPT0gdW5kZWZpbmVkICYmIHB1YmxpY1JlcG9ydE9mRmlyZVJlbGF5TWVzc2FnZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cHVibGljUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlLCAncHVibGljUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS9yZWxheW1lc3NhZ2VgLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWduIGEgUHVibGljIFJlcG9ydCBPZiBGaXJlXG4gICAgICogQXNzaWduIGEgUHVibGljIFJlcG9ydCBPZiBGaXJlXG4gICAgICogQHBhcmFtIGlmTWF0Y2ggVGhlIElmLU1hdGNoIHJlcXVlc3QtaGVhZGVyIG11c3QgbWF0Y2ggdGhlIGN1cnJlbnQgZVRhZyBvZiB0aGUgcmVzb3VyY2Ugb3IgdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXBvcnRPZkZpcmVOdW1iZXIgVGhlIHJlcG9ydE9mRmlyZU51bWJlciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnRXaWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UgdG8gYmUgbGlua2VkIHRvIHRoZSBSZXBvcnQgb2YgRmlyZVxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIFRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZSB0byBiZSBsaW5rZWQgdG8gdGhlIFJlcG9ydCBvZiBGaXJlXG4gICAgICogQHBhcmFtIG9uQmVoYWxmT2ZSZXNvdXJjZSBUaGUgT25CZWhhbGZPZiByZXNvdXJjZSBjb250YWluaW5nIHRoZSBhdWRpdCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGFzc2lnblB1YmxpY1JlcG9ydE9mRmlyZShpZk1hdGNoOiBzdHJpbmcsIHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGluY2lkZW50V2lsZGZpcmVZZWFyPzogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlPzogc3RyaW5nLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT47XG4gICAgcHVibGljIGFzc2lnblB1YmxpY1JlcG9ydE9mRmlyZShpZk1hdGNoOiBzdHJpbmcsIHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGluY2lkZW50V2lsZGZpcmVZZWFyPzogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlPzogc3RyaW5nLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPj47XG4gICAgcHVibGljIGFzc2lnblB1YmxpY1JlcG9ydE9mRmlyZShpZk1hdGNoOiBzdHJpbmcsIHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGluY2lkZW50V2lsZGZpcmVZZWFyPzogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlPzogc3RyaW5nLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBhc3NpZ25QdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpbmNpZGVudFdpbGRmaXJlWWVhcj86IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZT86IHN0cmluZywgb25CZWhhbGZPZlJlc291cmNlPzogT25CZWhhbGZPZlJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChpZk1hdGNoID09PSBudWxsIHx8IGlmTWF0Y2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWZNYXRjaCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFzc2lnblB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhc3NpZ25QdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYXNzaWduUHVibGljUmVwb3J0T2ZGaXJlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKGluY2lkZW50V2lsZGZpcmVZZWFyICE9PSB1bmRlZmluZWQgJiYgaW5jaWRlbnRXaWxkZmlyZVllYXIgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmluY2lkZW50V2lsZGZpcmVZZWFyLCAnaW5jaWRlbnRXaWxkZmlyZVllYXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSAhPT0gdW5kZWZpbmVkICYmIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmluY2lkZW50TnVtYmVyU2VxdWVuY2UsICdpbmNpZGVudE51bWJlclNlcXVlbmNlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZk1hdGNoICE9PSB1bmRlZmluZWQgJiYgaWZNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdJZi1NYXRjaCcsIFN0cmluZyhpZk1hdGNoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS9hc3NpZ25gLFxuICAgICAgICAgICAgb25CZWhhbGZPZlJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWwgYSBQdWJsaWMgUmVwb3J0IE9mIEZpcmVcbiAgICAgKiBDYW5jZWwgYSBQdWJsaWMgUmVwb3J0IE9mIEZpcmVcbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcG9ydE9mRmlyZU51bWJlciBUaGUgcmVwb3J0T2ZGaXJlTnVtYmVyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvbkJlaGFsZk9mUmVzb3VyY2UgVGhlIE9uQmVoYWxmT2YgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgYXVkaXQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBjYW5jZWxQdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT47XG4gICAgcHVibGljIGNhbmNlbFB1YmxpY1JlcG9ydE9mRmlyZShpZk1hdGNoOiBzdHJpbmcsIHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9uQmVoYWxmT2ZSZXNvdXJjZT86IE9uQmVoYWxmT2ZSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgY2FuY2VsUHVibGljUmVwb3J0T2ZGaXJlKGlmTWF0Y2g6IHN0cmluZywgd2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb25CZWhhbGZPZlJlc291cmNlPzogT25CZWhhbGZPZlJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgY2FuY2VsUHVibGljUmVwb3J0T2ZGaXJlKGlmTWF0Y2g6IHN0cmluZywgd2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb25CZWhhbGZPZlJlc291cmNlPzogT25CZWhhbGZPZlJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChpZk1hdGNoID09PSBudWxsIHx8IGlmTWF0Y2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWZNYXRjaCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGNhbmNlbFB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBjYW5jZWxQdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgY2FuY2VsUHVibGljUmVwb3J0T2ZGaXJlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIGlmTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnSWYtTWF0Y2gnLCBTdHJpbmcoaWZNYXRjaCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhyZXBvcnRPZkZpcmVOdW1iZXIpKX0vY2FuY2VsYCxcbiAgICAgICAgICAgIG9uQmVoYWxmT2ZSZXNvdXJjZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGV4dGVybmFsVXJpUmVzb3VyY2UgXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZUV4dGVybmFsVXJpKGV4dGVybmFsVXJpUmVzb3VyY2U/OiBFeHRlcm5hbFVyaVJlc291cmNlLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgY3JlYXRlRXh0ZXJuYWxVcmkoZXh0ZXJuYWxVcmlSZXNvdXJjZT86IEV4dGVybmFsVXJpUmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xuICAgIHB1YmxpYyBjcmVhdGVFeHRlcm5hbFVyaShleHRlcm5hbFVyaVJlc291cmNlPzogRXh0ZXJuYWxVcmlSZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuICAgIHB1YmxpYyBjcmVhdGVFeHRlcm5hbFVyaShleHRlcm5hbFVyaVJlc291cmNlPzogRXh0ZXJuYWxVcmlSZXNvdXJjZSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8YW55PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2V4dGVybmFsVXJpYCxcbiAgICAgICAgICAgIGV4dGVybmFsVXJpUmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBJbmNpZGVudCBBdHRhY2htZW50XG4gICAgICogQWRkIGEgSW5jaWRlbnQgYXR0YWNobWVudCByZXNvdXJjZSB0byB0aGUgTGlzdCBvZiBJbmNpZGVudCBhdHRhY2htZW50IHJlc291cmNlc1xuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gYXR0YWNobWVudFJlc291cmNlIFRoZSBBdHRhY2htZW50IHJlc291cmNlIGNvbnRhaW5pbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZUluY2lkZW50QXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8QXR0YWNobWVudFJlc291cmNlPjtcbiAgICBwdWJsaWMgY3JlYXRlSW5jaWRlbnRBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBhdHRhY2htZW50UmVzb3VyY2U/OiBBdHRhY2htZW50UmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEF0dGFjaG1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVJbmNpZGVudEF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGF0dGFjaG1lbnRSZXNvdXJjZT86IEF0dGFjaG1lbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEF0dGFjaG1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVJbmNpZGVudEF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGF0dGFjaG1lbnRSZXNvdXJjZT86IEF0dGFjaG1lbnRSZXNvdXJjZSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBjcmVhdGVJbmNpZGVudEF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgY3JlYXRlSW5jaWRlbnRBdHRhY2htZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxBdHRhY2htZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpKX0vYXR0YWNobWVudHNgLFxuICAgICAgICAgICAgYXR0YWNobWVudFJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gSW5jaWRlbnQgQ29tbWVudCBSZXNvdXJjZSB0byB0aGUgTGlzdCBvZiBJbmNpZGVudCBDb21tZW50cyByZXNvdXJjZXNcbiAgICAgKiBBZGQgYW4gSW5jaWRlbnQgQ29tbWVudCBSZXNvdXJjZSB0byB0aGUgTGlzdCBvZiBJbmNpZGVudCBDb21tZW50cyByZXNvdXJjZXNcbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIFRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGluY2lkZW50Q29tbWVudFJlc291cmNlIFRoZSBJbmNpZGVudENvbW1lbnQgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgbmV3IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlSW5jaWRlbnRDb21tZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpbmNpZGVudENvbW1lbnRSZXNvdXJjZT86IEluY2lkZW50Q29tbWVudFJlc291cmNlLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SW5jaWRlbnRDb21tZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyBjcmVhdGVJbmNpZGVudENvbW1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGluY2lkZW50Q29tbWVudFJlc291cmNlPzogSW5jaWRlbnRDb21tZW50UmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEluY2lkZW50Q29tbWVudFJlc291cmNlPj47XG4gICAgcHVibGljIGNyZWF0ZUluY2lkZW50Q29tbWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaW5jaWRlbnRDb21tZW50UmVzb3VyY2U/OiBJbmNpZGVudENvbW1lbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEluY2lkZW50Q29tbWVudFJlc291cmNlPj47XG4gICAgcHVibGljIGNyZWF0ZUluY2lkZW50Q29tbWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaW5jaWRlbnRDb21tZW50UmVzb3VyY2U/OiBJbmNpZGVudENvbW1lbnRSZXNvdXJjZSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBjcmVhdGVJbmNpZGVudENvbW1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgY3JlYXRlSW5jaWRlbnRDb21tZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxJbmNpZGVudENvbW1lbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfS9pbmNpZGVudENvbW1lbnRzYCxcbiAgICAgICAgICAgIGluY2lkZW50Q29tbWVudFJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gSW5pdGlhbCBGaXJlIFJlcG9ydCBSZXNvdXJjZSB0byB0aGUgTGlzdCBvZiBJbml0aWFsIEZpcmUgUmVwb3J0cyByZXNvdXJjZXNcbiAgICAgKiBBZGQgYW4gSW5pdGlhbCBGaXJlIFJlcG9ydCBSZXNvdXJjZSB0byB0aGUgTGlzdCBvZiBJbml0aWFsIEZpcmUgUmVwb3J0cyByZXNvdXJjZXNcbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2UgVGhlIEluaXRpYWxGaXJlUmVwb3J0IHJlc291cmNlIGNvbnRhaW5pbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZUluaXRpYWxGaXJlUmVwb3J0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpbml0aWFsRmlyZVJlcG9ydFJlc291cmNlPzogSW5pdGlhbEZpcmVSZXBvcnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U+O1xuICAgIHB1YmxpYyBjcmVhdGVJbml0aWFsRmlyZVJlcG9ydChyZXN0VmVyc2lvbj86IG51bWJlciwgaW5pdGlhbEZpcmVSZXBvcnRSZXNvdXJjZT86IEluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgY3JlYXRlSW5pdGlhbEZpcmVSZXBvcnQocmVzdFZlcnNpb24/OiBudW1iZXIsIGluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U/OiBJbml0aWFsRmlyZVJlcG9ydFJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8SW5pdGlhbEZpcmVSZXBvcnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVJbml0aWFsRmlyZVJlcG9ydChyZXN0VmVyc2lvbj86IG51bWJlciwgaW5pdGlhbEZpcmVSZXBvcnRSZXNvdXJjZT86IEluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PEluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5pdGlhbEZpcmVSZXBvcnRzYCxcbiAgICAgICAgICAgIGluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBQcm92aXNpb25hbCBab25lICBSZXNvdXJjZSB0byB0aGUgTGlzdCBvZiBQcm92aXNpb25hbCBab25lcyByZXNvdXJjZXNcbiAgICAgKiBBZGQgYW4gUHJvdmlzaW9uYWwgWm9uZSAgUmVzb3VyY2UgdG8gdGhlIExpc3Qgb2YgUHJvdmlzaW9uYWwgWm9uZXMgcmVzb3VyY2VzXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBwcm92aXNpb25hbFpvbmVSZXNvdXJjZSBUaGUgcHJvdmlzaW9uYWxab25lIHJlc291cmNlIGNvbnRhaW5pbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZVByb3Zpc2lvbmFsWm9uZShyZXN0VmVyc2lvbj86IG51bWJlciwgcHJvdmlzaW9uYWxab25lUmVzb3VyY2U/OiBQcm92aXNpb25hbFpvbmVSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFByb3Zpc2lvbmFsWm9uZVJlc291cmNlPjtcbiAgICBwdWJsaWMgY3JlYXRlUHJvdmlzaW9uYWxab25lKHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwcm92aXNpb25hbFpvbmVSZXNvdXJjZT86IFByb3Zpc2lvbmFsWm9uZVJlc291cmNlLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxQcm92aXNpb25hbFpvbmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVQcm92aXNpb25hbFpvbmUocmVzdFZlcnNpb24/OiBudW1iZXIsIHByb3Zpc2lvbmFsWm9uZVJlc291cmNlPzogUHJvdmlzaW9uYWxab25lUmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxQcm92aXNpb25hbFpvbmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVQcm92aXNpb25hbFpvbmUocmVzdFZlcnNpb24/OiBudW1iZXIsIHByb3Zpc2lvbmFsWm9uZVJlc291cmNlPzogUHJvdmlzaW9uYWxab25lUmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PFByb3Zpc2lvbmFsWm9uZVJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3Byb3Zpc2lvbmFsWm9uZXNgLFxuICAgICAgICAgICAgcHJvdmlzaW9uYWxab25lUmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgUmVzb3VyY2UgdG8gdGhlIExpc3Qgb2YgUHVibGljIFJlcG9ydCBvZiBGaXJlcyByZXNvdXJjZXNcbiAgICAgKiBBZGQgYW4gUHVibGljIFJlcG9ydCBvZiBGaXJlIFJlc291cmNlIHRvIHRoZSBMaXN0IG9mIFB1YmxpYyBSZXBvcnQgb2YgRmlyZXMgcmVzb3VyY2VzXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBwdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZSBUaGUgUHVibGljUmVwb3J0T2ZGaXJlIHJlc291cmNlIGNvbnRhaW5pbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZVB1YmxpY1JlcG9ydE9mRmlyZShyZXN0VmVyc2lvbj86IG51bWJlciwgcHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U/OiBQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPjtcbiAgICBwdWJsaWMgY3JlYXRlUHVibGljUmVwb3J0T2ZGaXJlKHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT86IFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVQdWJsaWNSZXBvcnRPZkZpcmUocmVzdFZlcnNpb24/OiBudW1iZXIsIHB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPzogUHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVQdWJsaWNSZXBvcnRPZkZpcmUocmVzdFZlcnNpb24/OiBudW1iZXIsIHB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPzogUHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3B1YmxpY1JlcG9ydE9mRmlyZXNgLFxuICAgICAgICAgICAgcHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBSZXBvcnRPZkZpcmVDb21tZW50IFJlc291cmNlIHRvIHRoZSBMaXN0IG9mIFB1YmxpY1JlcG9ydE9mRmlyZSBDb21tZW50c1xuICAgICAqIEFkZCBhbiBSZXBvcnRPZkZpcmVDb21tZW50IFJlc291cmNlIHRvIHRoZSBMaXN0IG9mIFB1YmxpY1JlcG9ydE9mRmlyZSBDb21tZW50c1xuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXBvcnRPZkZpcmVOdW1iZXIgVGhlIHJlcG9ydE9mRmlyZU51bWJlciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gcHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudFJlc291cmNlIFRoZSBSZXBvcnRPZkZpcmVDb21tZW50IHJlc291cmNlIGNvbnRhaW5pbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZVB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgcHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudFJlc291cmNlPzogUHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudFJlc291cmNlLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudFJlc291cmNlPjtcbiAgICBwdWJsaWMgY3JlYXRlUHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50UmVzb3VyY2U/OiBQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50UmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIHB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZT86IFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIHB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZT86IFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBjcmVhdGVQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnRPZkZpcmVOdW1iZXIgPT09IG51bGwgfHwgcmVwb3J0T2ZGaXJlTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHJlcG9ydE9mRmlyZU51bWJlciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGNyZWF0ZVB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS9jb21tZW50c2AsXG4gICAgICAgICAgICBwdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50UmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBwdWJsaXNoZWRJbmNpZGVudFJlc291cmNlIFxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVQdWJsaXNoZWRJbmNpZGVudChwdWJsaXNoZWRJbmNpZGVudFJlc291cmNlPzogUHVibGlzaGVkSW5jaWRlbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT47XG4gICAgcHVibGljIGNyZWF0ZVB1Ymxpc2hlZEluY2lkZW50KHB1Ymxpc2hlZEluY2lkZW50UmVzb3VyY2U/OiBQdWJsaXNoZWRJbmNpZGVudFJlc291cmNlLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PjtcbiAgICBwdWJsaWMgY3JlYXRlUHVibGlzaGVkSW5jaWRlbnQocHVibGlzaGVkSW5jaWRlbnRSZXNvdXJjZT86IFB1Ymxpc2hlZEluY2lkZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICBwdWJsaWMgY3JlYXRlUHVibGlzaGVkSW5jaWRlbnQocHVibGlzaGVkSW5jaWRlbnRSZXNvdXJjZT86IFB1Ymxpc2hlZEluY2lkZW50UmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaXNoZWRJbmNpZGVudHNgLFxuICAgICAgICAgICAgcHVibGlzaGVkSW5jaWRlbnRSZXNvdXJjZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIFJlcG9ydCBvZiBGaXJlIEF0dGFjaG1lbnRcbiAgICAgKiBBZGQgYSBSZXBvcnQgb2YgRmlyZSBhdHRhY2htZW50IHJlc291cmNlIHRvIHRoZSBMaXN0IG9mIFJlcG9ydCBvZiBGaXJlIGF0dGFjaG1lbnQgcmVzb3VyY2VzXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcG9ydE9mRmlyZU51bWJlciBUaGUgcmVwb3J0T2ZGaXJlTnVtYmVyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBhdHRhY2htZW50UmVzb3VyY2UgVGhlIEF0dGFjaG1lbnQgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgbmV3IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlUmVwb3J0T2ZGaXJlQXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBhdHRhY2htZW50UmVzb3VyY2U/OiBBdHRhY2htZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxBdHRhY2htZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyBjcmVhdGVSZXBvcnRPZkZpcmVBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGF0dGFjaG1lbnRSZXNvdXJjZT86IEF0dGFjaG1lbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXR0YWNobWVudFJlc291cmNlPj47XG4gICAgcHVibGljIGNyZWF0ZVJlcG9ydE9mRmlyZUF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8QXR0YWNobWVudFJlc291cmNlPj47XG4gICAgcHVibGljIGNyZWF0ZVJlcG9ydE9mRmlyZUF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGNyZWF0ZVJlcG9ydE9mRmlyZUF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgY3JlYXRlUmVwb3J0T2ZGaXJlQXR0YWNobWVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8QXR0YWNobWVudFJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3B1YmxpY1JlcG9ydE9mRmlyZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocmVwb3J0T2ZGaXJlTnVtYmVyKSl9L2F0dGFjaG1lbnRzYCxcbiAgICAgICAgICAgIGF0dGFjaG1lbnRSZXNvdXJjZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIFdpbGRmaXJlIEluY2lkZW50IFJlc291cmNlIHRvIHRoZSBMaXN0IG9mIFdpbGRmaXJlIEluY2lkZW50cyByZXNvdXJjZXNcbiAgICAgKiBBZGQgYW4gV2lsZGZpcmUgSW5jaWRlbnQgUmVzb3VyY2UgdG8gdGhlIExpc3Qgb2YgV2lsZGZpcmUgSW5jaWRlbnRzIHJlc291cmNlc1xuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVJbmNpZGVudFJlc291cmNlIFRoZSBXaWxkZmlyZUluY2lkZW50IHJlc291cmNlIGNvbnRhaW5pbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZVdpbGRmaXJlSW5jaWRlbnQocmVzdFZlcnNpb24/OiBudW1iZXIsIHdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT86IFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT47XG4gICAgcHVibGljIGNyZWF0ZVdpbGRmaXJlSW5jaWRlbnQocmVzdFZlcnNpb24/OiBudW1iZXIsIHdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT86IFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8V2lsZGZpcmVJbmNpZGVudFJlc291cmNlPj47XG4gICAgcHVibGljIGNyZWF0ZVdpbGRmaXJlSW5jaWRlbnQocmVzdFZlcnNpb24/OiBudW1iZXIsIHdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT86IFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBjcmVhdGVXaWxkZmlyZUluY2lkZW50KHJlc3RWZXJzaW9uPzogbnVtYmVyLCB3aWxkZmlyZUluY2lkZW50UmVzb3VyY2U/OiBXaWxkZmlyZUluY2lkZW50UmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHNgLFxuICAgICAgICAgICAgd2lsZGZpcmVJbmNpZGVudFJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gV2lsZGZpcmUgUGFydHkgUmVzb3VyY2UgdG8gdGhlIExpc3Qgb2YgV2lsZGZpcmUgUGFydHlzIHJlc291cmNlc1xuICAgICAqIEFkZCBhbiBXaWxkZmlyZSBQYXJ0eSBSZXNvdXJjZSB0byB0aGUgTGlzdCBvZiBXaWxkZmlyZSBQYXJ0eXMgcmVzb3VyY2VzXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVBhcnR5UmVzb3VyY2UgVGhlIFdpbGRmaXJlUGFydHkgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgbmV3IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlV2lsZGZpcmVQYXJ0eShyZXN0VmVyc2lvbj86IG51bWJlciwgd2lsZGZpcmVQYXJ0eVJlc291cmNlPzogV2lsZGZpcmVQYXJ0eVJlc291cmNlLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8V2lsZGZpcmVQYXJ0eVJlc291cmNlPjtcbiAgICBwdWJsaWMgY3JlYXRlV2lsZGZpcmVQYXJ0eShyZXN0VmVyc2lvbj86IG51bWJlciwgd2lsZGZpcmVQYXJ0eVJlc291cmNlPzogV2lsZGZpcmVQYXJ0eVJlc291cmNlLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxXaWxkZmlyZVBhcnR5UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgY3JlYXRlV2lsZGZpcmVQYXJ0eShyZXN0VmVyc2lvbj86IG51bWJlciwgd2lsZGZpcmVQYXJ0eVJlc291cmNlPzogV2lsZGZpcmVQYXJ0eVJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8V2lsZGZpcmVQYXJ0eVJlc291cmNlPj47XG4gICAgcHVibGljIGNyZWF0ZVdpbGRmaXJlUGFydHkocmVzdFZlcnNpb24/OiBudW1iZXIsIHdpbGRmaXJlUGFydHlSZXNvdXJjZT86IFdpbGRmaXJlUGFydHlSZXNvdXJjZSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8V2lsZGZpcmVQYXJ0eVJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3dpbGRmaXJlUGFydHlzYCxcbiAgICAgICAgICAgIHdpbGRmaXJlUGFydHlSZXNvdXJjZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGV4dGVybmFsVXJpR3VpZCBcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlRXh0ZXJuYWxVcmkoZXh0ZXJuYWxVcmlHdWlkOiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHB1YmxpYyBkZWxldGVFeHRlcm5hbFVyaShleHRlcm5hbFVyaUd1aWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZUV4dGVybmFsVXJpKGV4dGVybmFsVXJpR3VpZDogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZUV4dGVybmFsVXJpKGV4dGVybmFsVXJpR3VpZDogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChleHRlcm5hbFVyaUd1aWQgPT09IG51bGwgfHwgZXh0ZXJuYWxVcmlHdWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGV4dGVybmFsVXJpR3VpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZUV4dGVybmFsVXJpLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICcqLyonXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlPGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9leHRlcm5hbFVyaS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZXh0ZXJuYWxVcmlHdWlkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIEluY2lkZW50IEF0dGFjaG1lbnQgYnkgSURcbiAgICAgKiBEZWxldGUgSW5jaWRlbnQgQXR0YWNobWVudCBieSBJRFxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBhdHRhY2htZW50R3VpZCBUaGUgYXR0YWNobWVudEd1aWQgb2YgdGhlIEF0dGFjaG1lbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlSW5jaWRlbnRBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgZGVsZXRlSW5jaWRlbnRBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PjtcbiAgICBwdWJsaWMgZGVsZXRlSW5jaWRlbnRBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZUluY2lkZW50QXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCBhdHRhY2htZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVJbmNpZGVudEF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlSW5jaWRlbnRBdHRhY2htZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRhY2htZW50R3VpZCA9PT0gbnVsbCB8fCBhdHRhY2htZW50R3VpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBhdHRhY2htZW50R3VpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZUluY2lkZW50QXR0YWNobWVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICcqLyonXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlPGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfS9hdHRhY2htZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYXR0YWNobWVudEd1aWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgSW5jaWRlbnRDb21tZW50IHJlc291cmNlIGJ5IElEXG4gICAgICogRGVsZXRlIEluY2lkZW50Q29tbWVudCBieSBJRFxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudENvbW1lbnRHdWlkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBJbmNpZGVudENvbW1lbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlSW5jaWRlbnRDb21tZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGluY2lkZW50Q29tbWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHB1YmxpYyBkZWxldGVJbmNpZGVudENvbW1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgaW5jaWRlbnRDb21tZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZUluY2lkZW50Q29tbWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCBpbmNpZGVudENvbW1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZUluY2lkZW50Q29tbWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCBpbmNpZGVudENvbW1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZUluY2lkZW50Q29tbWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVJbmNpZGVudENvbW1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50Q29tbWVudEd1aWQgPT09IG51bGwgfHwgaW5jaWRlbnRDb21tZW50R3VpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudENvbW1lbnRHdWlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlSW5jaWRlbnRDb21tZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIGlmTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnSWYtTWF0Y2gnLCBTdHJpbmcoaWZNYXRjaCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJyovKidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5kZWxldGU8YW55PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L2luY2lkZW50Q29tbWVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50Q29tbWVudEd1aWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgSW5pdGlhbEZpcmVSZXBvcnQgcmVzb3VyY2UgYnkgSURcbiAgICAgKiBEZWxldGUgSW5pdGlhbEZpcmVSZXBvcnQgYnkgSURcbiAgICAgKiBAcGFyYW0gaW5pdGlhbEZpcmVSZXBvcnRJZCBUaGUgaW5pdGlhbEZpcmVSZXBvcnRJZCBvZiB0aGUgSW5pdGlhbCBGaXJlIFJlcG9ydCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGlmTWF0Y2ggVGhlIElmLU1hdGNoIHJlcXVlc3QtaGVhZGVyIG11c3QgbWF0Y2ggdGhlIGN1cnJlbnQgZVRhZyBvZiB0aGUgcmVzb3VyY2Ugb3IgdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVJbml0aWFsRmlyZVJlcG9ydChpbml0aWFsRmlyZVJlcG9ydElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgZGVsZXRlSW5pdGlhbEZpcmVSZXBvcnQoaW5pdGlhbEZpcmVSZXBvcnRJZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZUluaXRpYWxGaXJlUmVwb3J0KGluaXRpYWxGaXJlUmVwb3J0SWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICBwdWJsaWMgZGVsZXRlSW5pdGlhbEZpcmVSZXBvcnQoaW5pdGlhbEZpcmVSZXBvcnRJZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoaW5pdGlhbEZpcmVSZXBvcnRJZCA9PT0gbnVsbCB8fCBpbml0aWFsRmlyZVJlcG9ydElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluaXRpYWxGaXJlUmVwb3J0SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVJbml0aWFsRmlyZVJlcG9ydC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICcqLyonXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlPGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbml0aWFsRmlyZVJlcG9ydHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluaXRpYWxGaXJlUmVwb3J0SWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgUHJvdmlzaW9uYWxab25lIHJlc291cmNlIGJ5IElEXG4gICAgICogRGVsZXRlIFByb3Zpc2lvbmFsWm9uZSBieSBJRFxuICAgICAqIEBwYXJhbSBwcm92aXNpb25hbFpvbmVHdWlkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBQcm92aXNpb25hbFpvbmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlUHJvdmlzaW9uYWxab25lKHByb3Zpc2lvbmFsWm9uZUd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHB1YmxpYyBkZWxldGVQcm92aXNpb25hbFpvbmUocHJvdmlzaW9uYWxab25lR3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZVByb3Zpc2lvbmFsWm9uZShwcm92aXNpb25hbFpvbmVHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZVByb3Zpc2lvbmFsWm9uZShwcm92aXNpb25hbFpvbmVHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChwcm92aXNpb25hbFpvbmVHdWlkID09PSBudWxsIHx8IHByb3Zpc2lvbmFsWm9uZUd1aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcHJvdmlzaW9uYWxab25lR3VpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZVByb3Zpc2lvbmFsWm9uZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICcqLyonXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlPGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wcm92aXNpb25hbFpvbmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhwcm92aXNpb25hbFpvbmVHdWlkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIFB1YmxpY1JlcG9ydE9mRmlyZSByZXNvdXJjZSBieSBJRFxuICAgICAqIERlbGV0ZSBQdWJsaWNSZXBvcnRPZkZpcmUgYnkgSURcbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0T2ZGaXJlTnVtYmVyIFRoZSByZXBvcnRPZkZpcmVOdW1iZXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGlmTWF0Y2ggVGhlIElmLU1hdGNoIHJlcXVlc3QtaGVhZGVyIG11c3QgbWF0Y2ggdGhlIGN1cnJlbnQgZVRhZyBvZiB0aGUgcmVzb3VyY2Ugb3IgdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVQdWJsaWNSZXBvcnRPZkZpcmUod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPGFueT47XG4gICAgcHVibGljIGRlbGV0ZVB1YmxpY1JlcG9ydE9mRmlyZSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PjtcbiAgICBwdWJsaWMgZGVsZXRlUHVibGljUmVwb3J0T2ZGaXJlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICBwdWJsaWMgZGVsZXRlUHVibGljUmVwb3J0T2ZGaXJlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlUHVibGljUmVwb3J0T2ZGaXJlLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnRPZkZpcmVOdW1iZXIgPT09IG51bGwgfHwgcmVwb3J0T2ZGaXJlTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHJlcG9ydE9mRmlyZU51bWJlciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZVB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICcqLyonXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlPGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBSZXBvcnRPZkZpcmVDb21tZW50IHJlc291cmNlIGJ5IElEXG4gICAgICogRGVsZXRlIFJlcG9ydE9mRmlyZUNvbW1lbnQgYnkgSURcbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0T2ZGaXJlTnVtYmVyIFRoZSByZXBvcnRPZkZpcmVOdW1iZXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gY29tbWVudEd1aWQgVGhlIGlkZW50aWZpZXIgb2YgdGhlIFB1YmxpY1JlcG9ydE9mRmlyZSBDb21tZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGRlbGV0ZVB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCBjb21tZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPGFueT47XG4gICAgcHVibGljIGRlbGV0ZVB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCBjb21tZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZVB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCBjb21tZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuICAgIHB1YmxpYyBkZWxldGVQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgY29tbWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlUHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0T2ZGaXJlTnVtYmVyID09PSBudWxsIHx8IHJlcG9ydE9mRmlyZU51bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciByZXBvcnRPZkZpcmVOdW1iZXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21tZW50R3VpZCA9PT0gbnVsbCB8fCBjb21tZW50R3VpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBjb21tZW50R3VpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZVB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZk1hdGNoICE9PSB1bmRlZmluZWQgJiYgaWZNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdJZi1NYXRjaCcsIFN0cmluZyhpZk1hdGNoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnKi8qJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmRlbGV0ZTxhbnk+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhyZXBvcnRPZkZpcmVOdW1iZXIpKX0vY29tbWVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvbW1lbnRHdWlkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIFJlcG9ydE9mRmlyZVJlbGF5TWVzc2FnZSBmcm9tIFB1YmxpY1JlcG9ydE9mRmlyZS5cbiAgICAgKiBEZWxldGUgUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlIGZyb20gUHVibGljUmVwb3J0T2ZGaXJlLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXBvcnRPZkZpcmVOdW1iZXIgVGhlIHJlcG9ydE9mRmlyZU51bWJlciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGRlbGV0ZVB1YmxpY1JlcG9ydE9mRmlyZVJlbGF5TWVzc2FnZSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgZGVsZXRlUHVibGljUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xuICAgIHB1YmxpYyBkZWxldGVQdWJsaWNSZXBvcnRPZkZpcmVSZWxheU1lc3NhZ2Uod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuICAgIHB1YmxpYyBkZWxldGVQdWJsaWNSZXBvcnRPZkZpcmVSZWxheU1lc3NhZ2Uod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVQdWJsaWNSZXBvcnRPZkZpcmVSZWxheU1lc3NhZ2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlUHVibGljUmVwb3J0T2ZGaXJlUmVsYXlNZXNzYWdlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIGlmTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnSWYtTWF0Y2gnLCBTdHJpbmcoaWZNYXRjaCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJyovKidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5kZWxldGU8YW55PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3B1YmxpY1JlcG9ydE9mRmlyZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocmVwb3J0T2ZGaXJlTnVtYmVyKSl9L3JlbGF5bWVzc2FnZWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQgXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGRlbGV0ZVB1Ymxpc2hlZEluY2lkZW50KHB1Ymxpc2hlZEluY2lkZW50RGV0YWlsR3VpZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgZGVsZXRlUHVibGlzaGVkSW5jaWRlbnQocHVibGlzaGVkSW5jaWRlbnREZXRhaWxHdWlkOiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xuICAgIHB1YmxpYyBkZWxldGVQdWJsaXNoZWRJbmNpZGVudChwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuICAgIHB1YmxpYyBkZWxldGVQdWJsaXNoZWRJbmNpZGVudChwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAocHVibGlzaGVkSW5jaWRlbnREZXRhaWxHdWlkID09PSBudWxsIHx8IHB1Ymxpc2hlZEluY2lkZW50RGV0YWlsR3VpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVQdWJsaXNoZWRJbmNpZGVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5kZWxldGU8YW55PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3B1Ymxpc2hlZEluY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocHVibGlzaGVkSW5jaWRlbnREZXRhaWxHdWlkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIFJlcG9ydCBvZiBGaXJlIEF0dGFjaG1lbnQgYnkgSURcbiAgICAgKiBEZWxldGUgUmVwb3J0IG9mIEZpcmUgQXR0YWNobWVudCBieSBJRFxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXBvcnRPZkZpcmVOdW1iZXIgVGhlIHJlcG9ydE9mRmlyZU51bWJlciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBhdHRhY2htZW50R3VpZCBUaGUgYXR0YWNobWVudEd1aWQgb2YgdGhlIEF0dGFjaG1lbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlUmVwb3J0T2ZGaXJlQXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgZGVsZXRlUmVwb3J0T2ZGaXJlQXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PjtcbiAgICBwdWJsaWMgZGVsZXRlUmVwb3J0T2ZGaXJlQXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZVJlcG9ydE9mRmlyZUF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCBhdHRhY2htZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVSZXBvcnRPZkZpcmVBdHRhY2htZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnRPZkZpcmVOdW1iZXIgPT09IG51bGwgfHwgcmVwb3J0T2ZGaXJlTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHJlcG9ydE9mRmlyZU51bWJlciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZVJlcG9ydE9mRmlyZUF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dGFjaG1lbnRHdWlkID09PSBudWxsIHx8IGF0dGFjaG1lbnRHdWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGF0dGFjaG1lbnRHdWlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlUmVwb3J0T2ZGaXJlQXR0YWNobWVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICcqLyonXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlPGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS9hdHRhY2htZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYXR0YWNobWVudEd1aWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgV2lsZGZpcmVJbmNpZGVudCByZXNvdXJjZSBieSBJRFxuICAgICAqIERlbGV0ZSBXaWxkZmlyZUluY2lkZW50IGJ5IElEXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBUaGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlV2lsZGZpcmVJbmNpZGVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPGFueT47XG4gICAgcHVibGljIGRlbGV0ZVdpbGRmaXJlSW5jaWRlbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xuICAgIHB1YmxpYyBkZWxldGVXaWxkZmlyZUluY2lkZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZVdpbGRmaXJlSW5jaWRlbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlV2lsZGZpcmVJbmNpZGVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVXaWxkZmlyZUluY2lkZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIGlmTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnSWYtTWF0Y2gnLCBTdHJpbmcoaWZNYXRjaCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJyovKidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5kZWxldGU8YW55PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIFdpbGRmaXJlUGFydHkgcmVzb3VyY2UgYnkgSURcbiAgICAgKiBEZWxldGUgV2lsZGZpcmVQYXJ0eSBieSBJRFxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVBhcnR5R3VpZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgV2lsZGZpcmVQYXJ0eSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGlmTWF0Y2ggVGhlIElmLU1hdGNoIHJlcXVlc3QtaGVhZGVyIG11c3QgbWF0Y2ggdGhlIGN1cnJlbnQgZVRhZyBvZiB0aGUgcmVzb3VyY2Ugb3IgdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVXaWxkZmlyZVBhcnR5KHdpbGRmaXJlUGFydHlHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICcqLyonfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgZGVsZXRlV2lsZGZpcmVQYXJ0eSh3aWxkZmlyZVBhcnR5R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJyovKid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgcHVibGljIGRlbGV0ZVdpbGRmaXJlUGFydHkod2lsZGZpcmVQYXJ0eUd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICBwdWJsaWMgZGVsZXRlV2lsZGZpcmVQYXJ0eSh3aWxkZmlyZVBhcnR5R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnKi8qJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVQYXJ0eUd1aWQgPT09IG51bGwgfHwgd2lsZGZpcmVQYXJ0eUd1aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVQYXJ0eUd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVXaWxkZmlyZVBhcnR5LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIGlmTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnSWYtTWF0Y2gnLCBTdHJpbmcoaWZNYXRjaCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJyovKidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5kZWxldGU8YW55PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3dpbGRmaXJlUGFydHlzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVBhcnR5R3VpZCkpfWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBDb2RlIEhpZXJhcmNoeSBMaXN0IFJlc291cmNlXG4gICAgICogQHBhcmFtIHJlcXVlc3RJZCBUaGUgdW5pcXVlIGlkZW50aXR5IG9mIHRoZSByZXF1ZXN0IGFzc2lnbmVkIGJ5IHRoZSBvcmlnaW5hdG9yIHRvIGhlbHAgdHJhY2UgdGhlIHJlcXVlc3QgdGhyb3VnaCB0aGUgbG9ncy5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGNhY2hlQ29udHJvbCBVc2VkIHRvIHNwZWNpZnkgZGlyZWN0aXZlcyBmb3IgY2FjaGVzIGFsb25nIHRoZSByZXF1ZXN0LXJlc3BvbnNlIGNoYWluXG4gICAgICogQHBhcmFtIHByYWdtYSBBbiBpbXBsZW1lbnRhdGlvbi1zcGVjaWZpYyBoZWFkZXIgdGhhdCBtYXkgaGF2ZSB2YXJpb3VzIGVmZmVjdHMgYWxvbmcgdGhlIHJlcXVlc3QtcmVzcG9uc2UgY2hhaW4uIEl0IGlzIHVzZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggSFRUUC8xLjAgY2FjaGVzIHdoZXJlIHRoZSBDYWNoZS1Db250cm9sIEhUVFAvMS4xIGhlYWRlciBpcyBub3QgeWV0IHByZXNlbnQuXG4gICAgICogQHBhcmFtIGF1dGhvcml6YXRpb24gQ29udGFpbnMgdGhlIGNyZWRlbnRpYWxzIHRvIGF1dGhlbnRpY2F0ZSBhIHVzZXIgYWdlbnQgd2l0aCBhIHNlcnZlci5cbiAgICAgKiBAcGFyYW0gZWZmZWN0aXZlQXNPZkRhdGUgUmV0dXJuIHRoZSByZXN1bHRzIGFzIG9mIHRoZSBlZmZlY3RpdmVBc09mRGF0ZS5cbiAgICAgKiBAcGFyYW0gY29kZUhpZXJhcmNoeU5hbWUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBjb2RlSGllcmFyY2h5TmFtZS5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q29kZUhpZXJhcmNoeUxpc3RSZXNvdXJjZShyZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIGNvZGVIaWVyYXJjaHlOYW1lPzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8Q29kZUhpZXJhcmNoeUxpc3RSc3JjPjtcbiAgICBwdWJsaWMgZ2V0Q29kZUhpZXJhcmNoeUxpc3RSZXNvdXJjZShyZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIGNvZGVIaWVyYXJjaHlOYW1lPzogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxDb2RlSGllcmFyY2h5TGlzdFJzcmM+PjtcbiAgICBwdWJsaWMgZ2V0Q29kZUhpZXJhcmNoeUxpc3RSZXNvdXJjZShyZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIGNvZGVIaWVyYXJjaHlOYW1lPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8Q29kZUhpZXJhcmNoeUxpc3RSc3JjPj47XG4gICAgcHVibGljIGdldENvZGVIaWVyYXJjaHlMaXN0UmVzb3VyY2UocmVxdWVzdElkPzogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgY2FjaGVDb250cm9sPzogc3RyaW5nLCBwcmFnbWE/OiBzdHJpbmcsIGF1dGhvcml6YXRpb24/OiBzdHJpbmcsIGVmZmVjdGl2ZUFzT2ZEYXRlPzogc3RyaW5nLCBjb2RlSGllcmFyY2h5TmFtZT86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChlZmZlY3RpdmVBc09mRGF0ZSAhPT0gdW5kZWZpbmVkICYmIGVmZmVjdGl2ZUFzT2ZEYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5lZmZlY3RpdmVBc09mRGF0ZSwgJ2VmZmVjdGl2ZUFzT2ZEYXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGVIaWVyYXJjaHlOYW1lICE9PSB1bmRlZmluZWQgJiYgY29kZUhpZXJhcmNoeU5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmNvZGVIaWVyYXJjaHlOYW1lLCAnY29kZUhpZXJhcmNoeU5hbWUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlcXVlc3RJZCAhPT0gdW5kZWZpbmVkICYmIHJlcXVlc3RJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXF1ZXN0SWQnLCBTdHJpbmcocmVxdWVzdElkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhY2hlQ29udHJvbCAhPT0gdW5kZWZpbmVkICYmIGNhY2hlQ29udHJvbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDYWNoZS1Db250cm9sJywgU3RyaW5nKGNhY2hlQ29udHJvbCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmFnbWEgIT09IHVuZGVmaW5lZCAmJiBwcmFnbWEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUHJhZ21hJywgU3RyaW5nKHByYWdtYSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhdXRob3JpemF0aW9uICE9PSB1bmRlZmluZWQgJiYgYXV0aG9yaXphdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgU3RyaW5nKGF1dGhvcml6YXRpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxDb2RlSGllcmFyY2h5TGlzdFJzcmM+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY29kZUhpZXJhcmNoaWVzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IENvZGVIaWVyYXJjaHkgcmVzb3VyY2UgYnkgY29kZSB0YWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbSBjb2RlSGllcmFyY2h5TmFtZSBUaGUgaWRlbnRpZmllciBvZiB0aGUgQ29kZUhpZXJhcmNoeSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdElkIFRoZSB1bmlxdWUgaWRlbnRpdHkgb2YgdGhlIHJlcXVlc3QgYXNzaWduZWQgYnkgdGhlIG9yaWdpbmF0b3IgdG8gaGVscCB0cmFjZSB0aGUgcmVxdWVzdCB0aHJvdWdoIHRoZSBsb2dzLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gY2FjaGVDb250cm9sIFVzZWQgdG8gc3BlY2lmeSBkaXJlY3RpdmVzIGZvciBjYWNoZXMgYWxvbmcgdGhlIHJlcXVlc3QtcmVzcG9uc2UgY2hhaW5cbiAgICAgKiBAcGFyYW0gcHJhZ21hIEFuIGltcGxlbWVudGF0aW9uLXNwZWNpZmljIGhlYWRlciB0aGF0IG1heSBoYXZlIHZhcmlvdXMgZWZmZWN0cyBhbG9uZyB0aGUgcmVxdWVzdC1yZXNwb25zZSBjaGFpbi4gSXQgaXMgdXNlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBIVFRQLzEuMCBjYWNoZXMgd2hlcmUgdGhlIENhY2hlLUNvbnRyb2wgSFRUUC8xLjEgaGVhZGVyIGlzIG5vdCB5ZXQgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0gYXV0aG9yaXphdGlvbiBDb250YWlucyB0aGUgY3JlZGVudGlhbHMgdG8gYXV0aGVudGljYXRlIGEgdXNlciBhZ2VudCB3aXRoIGEgc2VydmVyLlxuICAgICAqIEBwYXJhbSBlZmZlY3RpdmVBc09mRGF0ZSBSZXR1cm4gdGhlIHJlc3VsdHMgYXMgb2YgdGhlIGVmZmVjdGl2ZUFzT2ZEYXRlLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDb2RlSGllcmFyY2h5UmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoY29kZUhpZXJhcmNoeU5hbWU6IHN0cmluZywgcmVxdWVzdElkPzogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgY2FjaGVDb250cm9sPzogc3RyaW5nLCBwcmFnbWE/OiBzdHJpbmcsIGF1dGhvcml6YXRpb24/OiBzdHJpbmcsIGVmZmVjdGl2ZUFzT2ZEYXRlPzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8Q29kZUhpZXJhcmNoeVJzcmM+O1xuICAgIHB1YmxpYyBnZXRDb2RlSGllcmFyY2h5UmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoY29kZUhpZXJhcmNoeU5hbWU6IHN0cmluZywgcmVxdWVzdElkPzogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgY2FjaGVDb250cm9sPzogc3RyaW5nLCBwcmFnbWE/OiBzdHJpbmcsIGF1dGhvcml6YXRpb24/OiBzdHJpbmcsIGVmZmVjdGl2ZUFzT2ZEYXRlPzogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxDb2RlSGllcmFyY2h5UnNyYz4+O1xuICAgIHB1YmxpYyBnZXRDb2RlSGllcmFyY2h5UmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoY29kZUhpZXJhcmNoeU5hbWU6IHN0cmluZywgcmVxdWVzdElkPzogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgY2FjaGVDb250cm9sPzogc3RyaW5nLCBwcmFnbWE/OiBzdHJpbmcsIGF1dGhvcml6YXRpb24/OiBzdHJpbmcsIGVmZmVjdGl2ZUFzT2ZEYXRlPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8Q29kZUhpZXJhcmNoeVJzcmM+PjtcbiAgICBwdWJsaWMgZ2V0Q29kZUhpZXJhcmNoeVJlc291cmNlQnlDb2RlVGFibGVOYW1lKGNvZGVIaWVyYXJjaHlOYW1lOiBzdHJpbmcsIHJlcXVlc3RJZD86IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGNhY2hlQ29udHJvbD86IHN0cmluZywgcHJhZ21hPzogc3RyaW5nLCBhdXRob3JpemF0aW9uPzogc3RyaW5nLCBlZmZlY3RpdmVBc09mRGF0ZT86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoY29kZUhpZXJhcmNoeU5hbWUgPT09IG51bGwgfHwgY29kZUhpZXJhcmNoeU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29kZUhpZXJhcmNoeU5hbWUgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRDb2RlSGllcmFyY2h5UmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoZWZmZWN0aXZlQXNPZkRhdGUgIT09IHVuZGVmaW5lZCAmJiBlZmZlY3RpdmVBc09mRGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+ZWZmZWN0aXZlQXNPZkRhdGUsICdlZmZlY3RpdmVBc09mRGF0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVxdWVzdElkICE9PSB1bmRlZmluZWQgJiYgcmVxdWVzdElkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1JlcXVlc3RJZCcsIFN0cmluZyhyZXF1ZXN0SWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FjaGVDb250cm9sICE9PSB1bmRlZmluZWQgJiYgY2FjaGVDb250cm9sICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NhY2hlLUNvbnRyb2wnLCBTdHJpbmcoY2FjaGVDb250cm9sKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByYWdtYSAhPT0gdW5kZWZpbmVkICYmIHByYWdtYSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdQcmFnbWEnLCBTdHJpbmcocHJhZ21hKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF1dGhvcml6YXRpb24gIT09IHVuZGVmaW5lZCAmJiBhdXRob3JpemF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCBTdHJpbmcoYXV0aG9yaXphdGlvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PENvZGVIaWVyYXJjaHlSc3JjPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NvZGVIaWVyYXJjaGllcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29kZUhpZXJhcmNoeU5hbWUpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgQ29kZSBUYWJsZSBMaXN0IFJlc291cmNlXG4gICAgICogQHBhcmFtIHJlcXVlc3RJZCBUaGUgdW5pcXVlIGlkZW50aXR5IG9mIHRoZSByZXF1ZXN0IGFzc2lnbmVkIGJ5IHRoZSBvcmlnaW5hdG9yIHRvIGhlbHAgdHJhY2UgdGhlIHJlcXVlc3QgdGhyb3VnaCB0aGUgbG9ncy5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGNhY2hlQ29udHJvbCBVc2VkIHRvIHNwZWNpZnkgZGlyZWN0aXZlcyBmb3IgY2FjaGVzIGFsb25nIHRoZSByZXF1ZXN0LXJlc3BvbnNlIGNoYWluXG4gICAgICogQHBhcmFtIHByYWdtYSBBbiBpbXBsZW1lbnRhdGlvbi1zcGVjaWZpYyBoZWFkZXIgdGhhdCBtYXkgaGF2ZSB2YXJpb3VzIGVmZmVjdHMgYWxvbmcgdGhlIHJlcXVlc3QtcmVzcG9uc2UgY2hhaW4uIEl0IGlzIHVzZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggSFRUUC8xLjAgY2FjaGVzIHdoZXJlIHRoZSBDYWNoZS1Db250cm9sIEhUVFAvMS4xIGhlYWRlciBpcyBub3QgeWV0IHByZXNlbnQuXG4gICAgICogQHBhcmFtIGF1dGhvcml6YXRpb24gQ29udGFpbnMgdGhlIGNyZWRlbnRpYWxzIHRvIGF1dGhlbnRpY2F0ZSBhIHVzZXIgYWdlbnQgd2l0aCBhIHNlcnZlci5cbiAgICAgKiBAcGFyYW0gZWZmZWN0aXZlQXNPZkRhdGUgUmV0dXJuIHRoZSByZXN1bHRzIGFzIG9mIHRoZSBlZmZlY3RpdmVBc09mRGF0ZS5cbiAgICAgKiBAcGFyYW0gY29kZVRhYmxlTmFtZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGNvZGVUYWJsZU5hbWUuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldENvZGVUYWJsZUxpc3RSZXNvdXJjZShyZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIGNvZGVUYWJsZU5hbWU/OiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxDb2RlVGFibGVMaXN0UnNyYz47XG4gICAgcHVibGljIGdldENvZGVUYWJsZUxpc3RSZXNvdXJjZShyZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIGNvZGVUYWJsZU5hbWU/OiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPENvZGVUYWJsZUxpc3RSc3JjPj47XG4gICAgcHVibGljIGdldENvZGVUYWJsZUxpc3RSZXNvdXJjZShyZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIGNvZGVUYWJsZU5hbWU/OiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxDb2RlVGFibGVMaXN0UnNyYz4+O1xuICAgIHB1YmxpYyBnZXRDb2RlVGFibGVMaXN0UmVzb3VyY2UocmVxdWVzdElkPzogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgY2FjaGVDb250cm9sPzogc3RyaW5nLCBwcmFnbWE/OiBzdHJpbmcsIGF1dGhvcml6YXRpb24/OiBzdHJpbmcsIGVmZmVjdGl2ZUFzT2ZEYXRlPzogc3RyaW5nLCBjb2RlVGFibGVOYW1lPzogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKGVmZmVjdGl2ZUFzT2ZEYXRlICE9PSB1bmRlZmluZWQgJiYgZWZmZWN0aXZlQXNPZkRhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmVmZmVjdGl2ZUFzT2ZEYXRlLCAnZWZmZWN0aXZlQXNPZkRhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZVRhYmxlTmFtZSAhPT0gdW5kZWZpbmVkICYmIGNvZGVUYWJsZU5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmNvZGVUYWJsZU5hbWUsICdjb2RlVGFibGVOYW1lJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXF1ZXN0SWQgIT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVxdWVzdElkJywgU3RyaW5nKHJlcXVlc3RJZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWNoZUNvbnRyb2wgIT09IHVuZGVmaW5lZCAmJiBjYWNoZUNvbnRyb2wgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ2FjaGUtQ29udHJvbCcsIFN0cmluZyhjYWNoZUNvbnRyb2wpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJhZ21hICE9PSB1bmRlZmluZWQgJiYgcHJhZ21hICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1ByYWdtYScsIFN0cmluZyhwcmFnbWEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXV0aG9yaXphdGlvbiAhPT0gdW5kZWZpbmVkICYmIGF1dGhvcml6YXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsIFN0cmluZyhhdXRob3JpemF0aW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8Q29kZVRhYmxlTGlzdFJzcmM+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY29kZVRhYmxlc2AsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBDb2RlVGFibGUgcmVzb3VyY2UgYnkgY29kZSB0YWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbSBjb2RlVGFibGVOYW1lIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBDb2RlVGFibGUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcXVlc3RJZCBUaGUgdW5pcXVlIGlkZW50aXR5IG9mIHRoZSByZXF1ZXN0IGFzc2lnbmVkIGJ5IHRoZSBvcmlnaW5hdG9yIHRvIGhlbHAgdHJhY2UgdGhlIHJlcXVlc3QgdGhyb3VnaCB0aGUgbG9ncy5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGNhY2hlQ29udHJvbCBVc2VkIHRvIHNwZWNpZnkgZGlyZWN0aXZlcyBmb3IgY2FjaGVzIGFsb25nIHRoZSByZXF1ZXN0LXJlc3BvbnNlIGNoYWluXG4gICAgICogQHBhcmFtIHByYWdtYSBBbiBpbXBsZW1lbnRhdGlvbi1zcGVjaWZpYyBoZWFkZXIgdGhhdCBtYXkgaGF2ZSB2YXJpb3VzIGVmZmVjdHMgYWxvbmcgdGhlIHJlcXVlc3QtcmVzcG9uc2UgY2hhaW4uIEl0IGlzIHVzZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggSFRUUC8xLjAgY2FjaGVzIHdoZXJlIHRoZSBDYWNoZS1Db250cm9sIEhUVFAvMS4xIGhlYWRlciBpcyBub3QgeWV0IHByZXNlbnQuXG4gICAgICogQHBhcmFtIGF1dGhvcml6YXRpb24gQ29udGFpbnMgdGhlIGNyZWRlbnRpYWxzIHRvIGF1dGhlbnRpY2F0ZSBhIHVzZXIgYWdlbnQgd2l0aCBhIHNlcnZlci5cbiAgICAgKiBAcGFyYW0gZWZmZWN0aXZlQXNPZkRhdGUgUmV0dXJuIHRoZSByZXN1bHRzIGFzIG9mIHRoZSBlZmZlY3RpdmVBc09mRGF0ZS5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q29kZVRhYmxlUmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoY29kZVRhYmxlTmFtZTogc3RyaW5nLCByZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxDb2RlVGFibGVSc3JjPjtcbiAgICBwdWJsaWMgZ2V0Q29kZVRhYmxlUmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoY29kZVRhYmxlTmFtZTogc3RyaW5nLCByZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPENvZGVUYWJsZVJzcmM+PjtcbiAgICBwdWJsaWMgZ2V0Q29kZVRhYmxlUmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoY29kZVRhYmxlTmFtZTogc3RyaW5nLCByZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxDb2RlVGFibGVSc3JjPj47XG4gICAgcHVibGljIGdldENvZGVUYWJsZVJlc291cmNlQnlDb2RlVGFibGVOYW1lKGNvZGVUYWJsZU5hbWU6IHN0cmluZywgcmVxdWVzdElkPzogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgY2FjaGVDb250cm9sPzogc3RyaW5nLCBwcmFnbWE/OiBzdHJpbmcsIGF1dGhvcml6YXRpb24/OiBzdHJpbmcsIGVmZmVjdGl2ZUFzT2ZEYXRlPzogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChjb2RlVGFibGVOYW1lID09PSBudWxsIHx8IGNvZGVUYWJsZU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29kZVRhYmxlTmFtZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldENvZGVUYWJsZVJlc291cmNlQnlDb2RlVGFibGVOYW1lLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKGVmZmVjdGl2ZUFzT2ZEYXRlICE9PSB1bmRlZmluZWQgJiYgZWZmZWN0aXZlQXNPZkRhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmVmZmVjdGl2ZUFzT2ZEYXRlLCAnZWZmZWN0aXZlQXNPZkRhdGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlcXVlc3RJZCAhPT0gdW5kZWZpbmVkICYmIHJlcXVlc3RJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXF1ZXN0SWQnLCBTdHJpbmcocmVxdWVzdElkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhY2hlQ29udHJvbCAhPT0gdW5kZWZpbmVkICYmIGNhY2hlQ29udHJvbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDYWNoZS1Db250cm9sJywgU3RyaW5nKGNhY2hlQ29udHJvbCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmFnbWEgIT09IHVuZGVmaW5lZCAmJiBwcmFnbWEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUHJhZ21hJywgU3RyaW5nKHByYWdtYSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhdXRob3JpemF0aW9uICE9PSB1bmRlZmluZWQgJiYgYXV0aG9yaXphdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgU3RyaW5nKGF1dGhvcml6YXRpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxDb2RlVGFibGVSc3JjPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NvZGVUYWJsZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvZGVUYWJsZU5hbWUpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gSW5jaWRlbnRzIENvbXBsaWFuY2UgQW5kIEVuZm9yY2VtZW50IEludmVzdGlnYXRpb24uXG4gICAgICogR2V0IGFuIEluY2lkZW50cyBDb21wbGlhbmNlIEFuZCBFbmZvcmNlbWVudCBJbnZlc3RpZ2F0aW9uLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q29tcGxpYW5jZUFuZEVuZm9yY2VtZW50SW52ZXN0aWdhdGlvbih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPENvbXBsaWFuY2VBbmRFbmZvcmNlbWVudEludmVzdGlnYXRpb25SZXNvdXJjZT47XG4gICAgcHVibGljIGdldENvbXBsaWFuY2VBbmRFbmZvcmNlbWVudEludmVzdGlnYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPENvbXBsaWFuY2VBbmRFbmZvcmNlbWVudEludmVzdGlnYXRpb25SZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8Q29tcGxpYW5jZUFuZEVuZm9yY2VtZW50SW52ZXN0aWdhdGlvblJlc291cmNlPj47XG4gICAgcHVibGljIGdldENvbXBsaWFuY2VBbmRFbmZvcmNlbWVudEludmVzdGlnYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0Q29tcGxpYW5jZUFuZEVuZm9yY2VtZW50SW52ZXN0aWdhdGlvbi4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpKX0vY29tcGxpYW5jZUFuZEVuZm9yY2VtZW50SW52ZXN0aWdhdGlvbmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBleHRlcm5hbFVyaUd1aWQgXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEV4dGVybmFsVXJpKGV4dGVybmFsVXJpR3VpZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgZ2V0RXh0ZXJuYWxVcmkoZXh0ZXJuYWxVcmlHdWlkOiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xuICAgIHB1YmxpYyBnZXRFeHRlcm5hbFVyaShleHRlcm5hbFVyaUd1aWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuICAgIHB1YmxpYyBnZXRFeHRlcm5hbFVyaShleHRlcm5hbFVyaUd1aWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoZXh0ZXJuYWxVcmlHdWlkID09PSBudWxsIHx8IGV4dGVybmFsVXJpR3VpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBleHRlcm5hbFVyaUd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRFeHRlcm5hbFVyaS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8YW55PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2V4dGVybmFsVXJpLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhleHRlcm5hbFVyaUd1aWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc291cmNlT2JqZWN0VW5pcXVlSWQgXG4gICAgICogQHBhcmFtIHBhZ2VOdW1iZXIgXG4gICAgICogQHBhcmFtIHBhZ2VSb3dDb3VudCBcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RXh0ZXJuYWxVcmlMaXN0KHNvdXJjZU9iamVjdFVuaXF1ZUlkPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHB1YmxpYyBnZXRFeHRlcm5hbFVyaUxpc3Qoc291cmNlT2JqZWN0VW5pcXVlSWQ/OiBzdHJpbmcsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgcHVibGljIGdldEV4dGVybmFsVXJpTGlzdChzb3VyY2VPYmplY3RVbmlxdWVJZD86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgcHVibGljIGdldEV4dGVybmFsVXJpTGlzdChzb3VyY2VPYmplY3RVbmlxdWVJZD86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKHNvdXJjZU9iamVjdFVuaXF1ZUlkICE9PSB1bmRlZmluZWQgJiYgc291cmNlT2JqZWN0VW5pcXVlSWQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnNvdXJjZU9iamVjdFVuaXF1ZUlkLCAnc291cmNlT2JqZWN0VW5pcXVlSWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZU51bWJlciAhPT0gdW5kZWZpbmVkICYmIHBhZ2VOdW1iZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhZ2VOdW1iZXIsICdwYWdlTnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZ2VSb3dDb3VudCAhPT0gdW5kZWZpbmVkICYmIHBhZ2VSb3dDb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZVJvd0NvdW50LCAncGFnZVJvd0NvdW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9leHRlcm5hbFVyaWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgQXBwcm92YWwgUmVzdWx0cyBmb3IgYW4gSW5jaWRlbnQgYnkgSUQuXG4gICAgICogR2V0IHRoZSBBcHByb3ZhbCBSZXN1bHRzIGZvciBhbiBJbmNpZGVudCBieSBJRC5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIFRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEluY2lkZW50QXBwcm92YWwod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxJbmNpZGVudEFwcHJvdmFsUmVzb3VyY2U+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudEFwcHJvdmFsKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxJbmNpZGVudEFwcHJvdmFsUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRBcHByb3ZhbCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEluY2lkZW50QXBwcm92YWxSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudEFwcHJvdmFsKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEluY2lkZW50QXBwcm92YWwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0SW5jaWRlbnRBcHByb3ZhbC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8SW5jaWRlbnRBcHByb3ZhbFJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L2FwcHJvdmFsYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IEluY2lkZW50IEF0dGFjaG1lbnQgYnkgSUQuXG4gICAgICogR2V0IHRoZSBJbmNpZGVudCBBdHRhY2htZW50IGJ5IElELlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBhdHRhY2htZW50R3VpZCBUaGUgYXR0YWNobWVudEd1aWQgb2YgdGhlIEF0dGFjaG1lbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudEF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxBdHRhY2htZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudEF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEF0dGFjaG1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudEF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBdHRhY2htZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEluY2lkZW50QXR0YWNobWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRJbmNpZGVudEF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dGFjaG1lbnRHdWlkID09PSBudWxsIHx8IGF0dGFjaG1lbnRHdWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGF0dGFjaG1lbnRHdWlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0SW5jaWRlbnRBdHRhY2htZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxBdHRhY2htZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpKX0vYXR0YWNobWVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGF0dGFjaG1lbnRHdWlkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IEluY2lkZW50IEF0dGFjaG1lbnRzLlxuICAgICAqIEdldCBsaXN0IG9mIEluY2lkZW50IEF0dGFjaG1lbnRzLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gYXJjaGl2ZWQgTGlzdCBhcmNoaXZlZCBhdHRhY2htZW50c1xuICAgICAqIEBwYXJhbSBwcml2YXRlSW5kaWNhdG9yIExpc3QgcHJpdmF0ZSBhdHRhY2htZW50c1xuICAgICAqIEBwYXJhbSBzb3VyY2VPYmplY3ROYW1lQ29kZSBUaGUgc291cmNlT2JqZWN0TmFtZUNvZGUgdGhlIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnRUeXBlQ29kZSBUaGUgYXR0YWNobWVudFR5cGVDb2RlIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSB1cGxvYWRlZEJ5VXNlcklkIFRoZSB1cGxvYWRlZEJ5VXNlcklkIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSB1cGxvYWRlZEJ5QnlVc2VyVHlwZSBUaGUgdXBsb2FkZWRCeUJ5VXNlclR5cGUgdGhlIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIHVwbG9hZGVkQnlVc2VyR3VpZCBUaGUgdXBsb2FkZWRCeVVzZXJHdWlkIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBwYWdlTnVtYmVyIFRoZSBwYWdlIG51bWJlciBvZiB0aGUgcmVzdWx0cyB0byBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gcGFnZVJvd0NvdW50IFRoZSBudW1iZXIgb2YgcmVzdWx0cyBwZXIgcGFnZS5cbiAgICAgKiBAcGFyYW0gb3JkZXJCeSBDb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyB0byBvcmRlciB0aGUgcmVzdWx0IHNldCBieS5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRBdHRhY2htZW50TGlzdCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXJjaGl2ZWQ/OiBzdHJpbmcsIHByaXZhdGVJbmRpY2F0b3I/OiBzdHJpbmcsIHNvdXJjZU9iamVjdE5hbWVDb2RlPzogQXJyYXk8c3RyaW5nPiwgYXR0YWNobWVudFR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgdXBsb2FkZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlCeVVzZXJUeXBlPzogQXJyYXk8c3RyaW5nPiwgdXBsb2FkZWRCeVVzZXJHdWlkPzogQXJyYXk8c3RyaW5nPiwgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8QXR0YWNobWVudExpc3RSZXNvdXJjZT47XG4gICAgcHVibGljIGdldEluY2lkZW50QXR0YWNobWVudExpc3Qod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGFyY2hpdmVkPzogc3RyaW5nLCBwcml2YXRlSW5kaWNhdG9yPzogc3RyaW5nLCBzb3VyY2VPYmplY3ROYW1lQ29kZT86IEFycmF5PHN0cmluZz4sIGF0dGFjaG1lbnRUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlVc2VySWQ/OiBBcnJheTxzdHJpbmc+LCB1cGxvYWRlZEJ5QnlVc2VyVHlwZT86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXR0YWNobWVudExpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudEF0dGFjaG1lbnRMaXN0KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBhcmNoaXZlZD86IHN0cmluZywgcHJpdmF0ZUluZGljYXRvcj86IHN0cmluZywgc291cmNlT2JqZWN0TmFtZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBhdHRhY2htZW50VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCB1cGxvYWRlZEJ5VXNlcklkPzogQXJyYXk8c3RyaW5nPiwgdXBsb2FkZWRCeUJ5VXNlclR5cGU/OiBBcnJheTxzdHJpbmc+LCB1cGxvYWRlZEJ5VXNlckd1aWQ/OiBBcnJheTxzdHJpbmc+LCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBdHRhY2htZW50TGlzdFJlc291cmNlPj47XG4gICAgcHVibGljIGdldEluY2lkZW50QXR0YWNobWVudExpc3Qod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGFyY2hpdmVkPzogc3RyaW5nLCBwcml2YXRlSW5kaWNhdG9yPzogc3RyaW5nLCBzb3VyY2VPYmplY3ROYW1lQ29kZT86IEFycmF5PHN0cmluZz4sIGF0dGFjaG1lbnRUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlVc2VySWQ/OiBBcnJheTxzdHJpbmc+LCB1cGxvYWRlZEJ5QnlVc2VyVHlwZT86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRJbmNpZGVudEF0dGFjaG1lbnRMaXN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSBudWxsIHx8IGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEluY2lkZW50QXR0YWNobWVudExpc3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoYXJjaGl2ZWQgIT09IHVuZGVmaW5lZCAmJiBhcmNoaXZlZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+YXJjaGl2ZWQsICdhcmNoaXZlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcml2YXRlSW5kaWNhdG9yICE9PSB1bmRlZmluZWQgJiYgcHJpdmF0ZUluZGljYXRvciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cHJpdmF0ZUluZGljYXRvciwgJ3ByaXZhdGVJbmRpY2F0b3InKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlT2JqZWN0TmFtZUNvZGUpIHtcbiAgICAgICAgICAgIHNvdXJjZU9iamVjdE5hbWVDb2RlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdzb3VyY2VPYmplY3ROYW1lQ29kZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0YWNobWVudFR5cGVDb2RlKSB7XG4gICAgICAgICAgICBhdHRhY2htZW50VHlwZUNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2F0dGFjaG1lbnRUeXBlQ29kZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBsb2FkZWRCeVVzZXJJZCkge1xuICAgICAgICAgICAgdXBsb2FkZWRCeVVzZXJJZC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAndXBsb2FkZWRCeVVzZXJJZCcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBsb2FkZWRCeUJ5VXNlclR5cGUpIHtcbiAgICAgICAgICAgIHVwbG9hZGVkQnlCeVVzZXJUeXBlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICd1cGxvYWRlZEJ5QnlVc2VyVHlwZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBsb2FkZWRCeVVzZXJHdWlkKSB7XG4gICAgICAgICAgICB1cGxvYWRlZEJ5VXNlckd1aWQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3VwbG9hZGVkQnlVc2VyR3VpZCcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZU51bWJlciAhPT0gdW5kZWZpbmVkICYmIHBhZ2VOdW1iZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhZ2VOdW1iZXIsICdwYWdlTnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZ2VSb3dDb3VudCAhPT0gdW5kZWZpbmVkICYmIHBhZ2VSb3dDb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZVJvd0NvdW50LCAncGFnZVJvd0NvdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGVyQnkgIT09IHVuZGVmaW5lZCAmJiBvcmRlckJ5ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5vcmRlckJ5LCAnb3JkZXJCeScpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxBdHRhY2htZW50TGlzdFJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L2F0dGFjaG1lbnRzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFuIEluY2lkZW50cyBDYXVzZS5cbiAgICAgKiBHZXQgYW4gSW5jaWRlbnRzIENhdXNlLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRDYXVzZSh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEluY2lkZW50Q2F1c2VSZXNvdXJjZT47XG4gICAgcHVibGljIGdldEluY2lkZW50Q2F1c2Uod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEluY2lkZW50Q2F1c2VSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudENhdXNlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8SW5jaWRlbnRDYXVzZVJlc291cmNlPj47XG4gICAgcHVibGljIGdldEluY2lkZW50Q2F1c2Uod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0SW5jaWRlbnRDYXVzZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRJbmNpZGVudENhdXNlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxJbmNpZGVudENhdXNlUmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpKX0vaW5jaWRlbnRDYXVzZWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgSW5jaWRlbnQgQ29tbWVudCBieSBFeHRlcm5hbCBJRC5cbiAgICAgKiBHZXQgdGhlIEluY2lkZW50IENvbW1lbnQgYnkgRXh0ZXJuYWwgSUQuXG4gICAgICogQHBhcmFtIGV4dGVybmFsSWQgVGhlIGV4dGVybmFsSWQgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSBDb21tZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRDb21tZW50KGV4dGVybmFsSWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxJbmNpZGVudENvbW1lbnRSZXNvdXJjZT47XG4gICAgcHVibGljIGdldEluY2lkZW50Q29tbWVudChleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxJbmNpZGVudENvbW1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudENvbW1lbnQoZXh0ZXJuYWxJZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEluY2lkZW50Q29tbWVudFJlc291cmNlPj47XG4gICAgcHVibGljIGdldEluY2lkZW50Q29tbWVudChleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChleHRlcm5hbElkID09PSBudWxsIHx8IGV4dGVybmFsSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgZXh0ZXJuYWxJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEluY2lkZW50Q29tbWVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8SW5jaWRlbnRDb21tZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRDb21tZW50cy9leHRlcm5hbElkLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhleHRlcm5hbElkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBJbmNpZGVudCBDb21tZW50IGJ5IElELlxuICAgICAqIEdldCB0aGUgSW5jaWRlbnQgQ29tbWVudCBieSBJRC5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIFRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnRDb21tZW50R3VpZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgSW5jaWRlbnQgQ29tbWVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEluY2lkZW50Q29tbWVudDEod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgaW5jaWRlbnRDb21tZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEluY2lkZW50Q29tbWVudFJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRDb21tZW50MSh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCBpbmNpZGVudENvbW1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxJbmNpZGVudENvbW1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudENvbW1lbnQxKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGluY2lkZW50Q29tbWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxJbmNpZGVudENvbW1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudENvbW1lbnQxKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGluY2lkZW50Q29tbWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0SW5jaWRlbnRDb21tZW50MS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRJbmNpZGVudENvbW1lbnQxLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudENvbW1lbnRHdWlkID09PSBudWxsIHx8IGluY2lkZW50Q29tbWVudEd1aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaW5jaWRlbnRDb21tZW50R3VpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEluY2lkZW50Q29tbWVudDEuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PEluY2lkZW50Q29tbWVudFJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L2luY2lkZW50Q29tbWVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50Q29tbWVudEd1aWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbGlzdCBvZiBJbmNpZGVudCBDb21tZW50cy5cbiAgICAgKiBHZXQgbGlzdCBvZiBJbmNpZGVudCBDb21tZW50cy5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIFRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIHBhZ2VOdW1iZXIgVGhlIHBhZ2UgbnVtYmVyIG9mIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBwYWdlUm93Q291bnQgVGhlIG51bWJlciBvZiByZXN1bHRzIHBlciBwYWdlLlxuICAgICAqIEBwYXJhbSBvcmRlckJ5IENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIG9yZGVyIHRoZSByZXN1bHQgc2V0IGJ5LlxuICAgICAqIEBwYXJhbSBleHBhbmQgVGhlIGxldmVsIG9mIGNoaWxkIHJlc291cmNlcyB0byBsb2FkLiBaZXJvIGZvciBubyBjaGlsZCByZXNvdXJjZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEluY2lkZW50Q29tbWVudExpc3Qod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SW5jaWRlbnRDb21tZW50TGlzdFJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRDb21tZW50TGlzdCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEluY2lkZW50Q29tbWVudExpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudENvbW1lbnRMaXN0KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEluY2lkZW50Q29tbWVudExpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRJbmNpZGVudENvbW1lbnRMaXN0KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRJbmNpZGVudENvbW1lbnRMaXN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSBudWxsIHx8IGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEluY2lkZW50Q29tbWVudExpc3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAocGFnZU51bWJlciAhPT0gdW5kZWZpbmVkICYmIHBhZ2VOdW1iZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhZ2VOdW1iZXIsICdwYWdlTnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZ2VSb3dDb3VudCAhPT0gdW5kZWZpbmVkICYmIHBhZ2VSb3dDb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZVJvd0NvdW50LCAncGFnZVJvd0NvdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGVyQnkgIT09IHVuZGVmaW5lZCAmJiBvcmRlckJ5ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5vcmRlckJ5LCAnb3JkZXJCeScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHBhbmQgIT09IHVuZGVmaW5lZCAmJiBleHBhbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmV4cGFuZCwgJ2V4cGFuZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxJbmNpZGVudENvbW1lbnRMaXN0UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpKX0vaW5jaWRlbnRDb21tZW50c2AsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgVmVyaWZpY2F0aW9uIFJlc3VsdHMgZm9yIGFuIEluY2lkZW50IGJ5IElELlxuICAgICAqIEdldCB0aGUgVmVyaWZpY2F0aW9uIFJlc3VsdHMgZm9yIGFuIEluY2lkZW50IGJ5IElELlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRWZXJpZmljYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxJbmNpZGVudFZlcmlmaWNhdGlvblJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRWZXJpZmljYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEluY2lkZW50VmVyaWZpY2F0aW9uUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0SW5jaWRlbnRWZXJpZmljYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxJbmNpZGVudFZlcmlmaWNhdGlvblJlc291cmNlPj47XG4gICAgcHVibGljIGdldEluY2lkZW50VmVyaWZpY2F0aW9uKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEluY2lkZW50VmVyaWZpY2F0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSBudWxsIHx8IGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEluY2lkZW50VmVyaWZpY2F0aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxJbmNpZGVudFZlcmlmaWNhdGlvblJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L3ZlcmlmaWNhdGlvbmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgSW5pdGlhbCBGaXJlIFJlcG9ydCBieSBJRC5cbiAgICAgKiBHZXQgdGhlIEluaXRpYWwgRmlyZSBSZXBvcnQgYnkgSUQuXG4gICAgICogQHBhcmFtIGluaXRpYWxGaXJlUmVwb3J0SWQgVGhlIGluaXRpYWxGaXJlUmVwb3J0SWQgb2YgdGhlIEluaXRpYWwgRmlyZSBSZXBvcnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJbml0aWFsRmlyZVJlcG9ydChpbml0aWFsRmlyZVJlcG9ydElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SW5pdGlhbEZpcmVSZXBvcnRSZXNvdXJjZT47XG4gICAgcHVibGljIGdldEluaXRpYWxGaXJlUmVwb3J0KGluaXRpYWxGaXJlUmVwb3J0SWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0SW5pdGlhbEZpcmVSZXBvcnQoaW5pdGlhbEZpcmVSZXBvcnRJZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0SW5pdGlhbEZpcmVSZXBvcnQoaW5pdGlhbEZpcmVSZXBvcnRJZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoaW5pdGlhbEZpcmVSZXBvcnRJZCA9PT0gbnVsbCB8fCBpbml0aWFsRmlyZVJlcG9ydElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluaXRpYWxGaXJlUmVwb3J0SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRJbml0aWFsRmlyZVJlcG9ydC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8SW5pdGlhbEZpcmVSZXBvcnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbml0aWFsRmlyZVJlcG9ydHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluaXRpYWxGaXJlUmVwb3J0SWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbGlzdCBvZiBJbml0aWFsIEZpcmUgUmVwb3J0cy5cbiAgICAgKiBHZXQgbGlzdCBvZiBJbml0aWFsIEZpcmUgUmVwb3J0cy5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIHNlYXJjaFRleHQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBzZWFyY2hUZXh0LlxuICAgICAqIEBwYXJhbSBwYWdlTnVtYmVyIFRoZSBwYWdlIG51bWJlciBvZiB0aGUgcmVzdWx0cyB0byBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gcGFnZVJvd0NvdW50IFRoZSBudW1iZXIgb2YgcmVzdWx0cyBwZXIgcGFnZS5cbiAgICAgKiBAcGFyYW0gb3JkZXJCeSBDb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyB0byBvcmRlciB0aGUgcmVzdWx0IHNldCBieS5cbiAgICAgKiBAcGFyYW0gZXhwYW5kIFRoZSBsZXZlbCBvZiBjaGlsZCByZXNvdXJjZXMgdG8gbG9hZC4gWmVybyBmb3Igbm8gY2hpbGQgcmVzb3VyY2VzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJbml0aWFsRmlyZVJlcG9ydExpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHNlYXJjaFRleHQ/OiBBcnJheTxzdHJpbmc+LCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEluaXRpYWxGaXJlUmVwb3J0TGlzdFJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0SW5pdGlhbEZpcmVSZXBvcnRMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0PzogQXJyYXk8c3RyaW5nPiwgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEluaXRpYWxGaXJlUmVwb3J0TGlzdFJlc291cmNlPj47XG4gICAgcHVibGljIGdldEluaXRpYWxGaXJlUmVwb3J0TGlzdChyZXN0VmVyc2lvbj86IG51bWJlciwgc2VhcmNoVGV4dD86IEFycmF5PHN0cmluZz4sIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8SW5pdGlhbEZpcmVSZXBvcnRMaXN0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0SW5pdGlhbEZpcmVSZXBvcnRMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0PzogQXJyYXk8c3RyaW5nPiwgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoc2VhcmNoVGV4dCkge1xuICAgICAgICAgICAgc2VhcmNoVGV4dC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnc2VhcmNoVGV4dCcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZU51bWJlciAhPT0gdW5kZWZpbmVkICYmIHBhZ2VOdW1iZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhZ2VOdW1iZXIsICdwYWdlTnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZ2VSb3dDb3VudCAhPT0gdW5kZWZpbmVkICYmIHBhZ2VSb3dDb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZVJvd0NvdW50LCAncGFnZVJvd0NvdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGVyQnkgIT09IHVuZGVmaW5lZCAmJiBvcmRlckJ5ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5vcmRlckJ5LCAnb3JkZXJCeScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHBhbmQgIT09IHVuZGVmaW5lZCAmJiBleHBhbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmV4cGFuZCwgJ2V4cGFuZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxJbml0aWFsRmlyZVJlcG9ydExpc3RSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbml0aWFsRmlyZVJlcG9ydHNgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gSW5jaWRlbnRzIE1hbmFnaW5nIExhbmQgQXV0aG9yaXR5LlxuICAgICAqIEdldCBhbiBJbmNpZGVudHMgTWFuYWdpbmcgTGFuZCBBdXRob3JpdHkuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBUaGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNYW5hZ2luZ0xhbmRBdXRob3JpdHkod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxJbmNpZGVudExhbmRBdXRob3JpdHlSZXNvdXJjZT47XG4gICAgcHVibGljIGdldE1hbmFnaW5nTGFuZEF1dGhvcml0eSh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8SW5jaWRlbnRMYW5kQXV0aG9yaXR5UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0TWFuYWdpbmdMYW5kQXV0aG9yaXR5KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8SW5jaWRlbnRMYW5kQXV0aG9yaXR5UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0TWFuYWdpbmdMYW5kQXV0aG9yaXR5KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldE1hbmFnaW5nTGFuZEF1dGhvcml0eS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRNYW5hZ2luZ0xhbmRBdXRob3JpdHkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PEluY2lkZW50TGFuZEF1dGhvcml0eVJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L21hbmFnaW5nTGFuZEF1dGhvcml0eWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbiBJbmNpZGVudHMgQ29tcGxpYW5jZSBBbmQgRW5mb3JjZW1lbnQgSW52ZXN0aWdhdGlvbi5cbiAgICAgKiBHZXQgYW4gSW5jaWRlbnRzIENvbXBsaWFuY2UgQW5kIEVuZm9yY2VtZW50IEludmVzdGlnYXRpb24uXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBUaGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPcmlnaW5BbmRDYXVzZUludmVzdGlnYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxPcmlnaW5BbmRDYXVzZUludmVzdGlnYXRpb25SZXNvdXJjZT47XG4gICAgcHVibGljIGdldE9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvbih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8T3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0T3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8T3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0T3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldE9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvbi4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRPcmlnaW5BbmRDYXVzZUludmVzdGlnYXRpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PE9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvblJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L29yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvbmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgUHJvdmlzaW9uYWwgWm9uZSBieSBJRC5cbiAgICAgKiBHZXQgdGhlIFByb3Zpc2lvbmFsIFpvbmUgYnkgSUQuXG4gICAgICogQHBhcmFtIHByb3Zpc2lvbmFsWm9uZUd1aWQgVGhlIGlkZW50aWZpZXIgb2YgdGhlIFByb3Zpc2lvbmFsIFpvbmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQcm92aXNpb25hbFpvbmUocHJvdmlzaW9uYWxab25lR3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFByb3Zpc2lvbmFsWm9uZVJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0UHJvdmlzaW9uYWxab25lKHByb3Zpc2lvbmFsWm9uZUd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFByb3Zpc2lvbmFsWm9uZVJlc291cmNlPj47XG4gICAgcHVibGljIGdldFByb3Zpc2lvbmFsWm9uZShwcm92aXNpb25hbFpvbmVHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UHJvdmlzaW9uYWxab25lUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0UHJvdmlzaW9uYWxab25lKHByb3Zpc2lvbmFsWm9uZUd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHByb3Zpc2lvbmFsWm9uZUd1aWQgPT09IG51bGwgfHwgcHJvdmlzaW9uYWxab25lR3VpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBwcm92aXNpb25hbFpvbmVHdWlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UHJvdmlzaW9uYWxab25lLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxQcm92aXNpb25hbFpvbmVSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wcm92aXNpb25hbFpvbmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhwcm92aXNpb25hbFpvbmVHdWlkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGxpc3Qgb2YgUHJvdmlzaW9uYWwgWm9uZXMuXG4gICAgICogR2V0IGxpc3Qgb2YgUHJvdmlzaW9uYWwgWm9uZXMuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBwcm92aXNpb25hbFpvbmVHdWlkIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcHJvdmlzaW9uYWxab25lR3VpZC5cbiAgICAgKiBAcGFyYW0gcHJvdmlzaW9uYWxab25lSWRlbnRpZmllciBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHByb3Zpc2lvbmFsWm9uZUlkZW50aWZpZXIuXG4gICAgICogQHBhcmFtIHByb3Zpc2lvbmFsWm9uZVR5cGVDb2RlIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcHJvdmlzaW9uYWxab25lVHlwZUNvZGUuXG4gICAgICogQHBhcmFtIGZpcmVDZW50cmVPcmdVbml0SWRlbnQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBmaXJlQ2VudHJlT3JnVW5pdElkZW50LlxuICAgICAqIEBwYXJhbSBwcm92aXNpb25hbFpvbmVQb2x5Z29uU3BlY2lmaWVkSW5kIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcHJvdmlzaW9uYWxab25lUG9seWdvblNwZWNpZmllZEluZC5cbiAgICAgKiBAcGFyYW0gZGlzbWlzc2VkSW5kIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgZGlzbWlzc2VkSW5kLlxuICAgICAqIEBwYXJhbSBlZmZlY3RpdmVUaW1lU3RhbXAgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBlZmZlY3RpdmVUaW1lU3RhbXAuXG4gICAgICogQHBhcmFtIGV4cGlyeVRpbWVzdGFtcCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGV4cGlyeVRpbWVzdGFtcC5cbiAgICAgKiBAcGFyYW0gZWZmZWN0aXZlQXNPZlRpbWVzdGFtcCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGVmZmVjdGl2ZUFzT2ZUaW1lc2F0bXAuXG4gICAgICogQHBhcmFtIHRleHRTZWFyY2ggRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSB0ZXh0LlxuICAgICAqIEBwYXJhbSBwcm92aXNpb25lZEJ5VXNlck5hbWUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBwcm92aXNpb25lZEJ5VXNlck5hbWUuXG4gICAgICogQHBhcmFtIHByb3Zpc2lvbmVkQnlVc2VySWQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBwcm92aXNpb25lZEJ5VXNlcklkLlxuICAgICAqIEBwYXJhbSBsYXN0U3RhdGVDaGFuZ2VBc09mVGltZXN0YW1wIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgbGFzdFN0YXRlQ2hhbmdlQXNPZlRpbWVzdGFtcC5cbiAgICAgKiBAcGFyYW0gcGFnZU51bWJlciBUaGUgcGFnZSBudW1iZXIgb2YgdGhlIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIHBhZ2VSb3dDb3VudCBUaGUgbnVtYmVyIG9mIHJlc3VsdHMgcGVyIHBhZ2UuXG4gICAgICogQHBhcmFtIG9yZGVyQnkgQ29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gb3JkZXIgdGhlIHJlc3VsdCBzZXQgYnkuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFByb3Zpc2lvbmFsWm9uZUxpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHByb3Zpc2lvbmFsWm9uZUd1aWQ/OiBBcnJheTxzdHJpbmc+LCBwcm92aXNpb25hbFpvbmVJZGVudGlmaWVyPzogQXJyYXk8c3RyaW5nPiwgcHJvdmlzaW9uYWxab25lVHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBmaXJlQ2VudHJlT3JnVW5pdElkZW50PzogQXJyYXk8c3RyaW5nPiwgcHJvdmlzaW9uYWxab25lUG9seWdvblNwZWNpZmllZEluZD86IHN0cmluZywgZGlzbWlzc2VkSW5kPzogc3RyaW5nLCBlZmZlY3RpdmVUaW1lU3RhbXA/OiBzdHJpbmcsIGV4cGlyeVRpbWVzdGFtcD86IHN0cmluZywgZWZmZWN0aXZlQXNPZlRpbWVzdGFtcD86IHN0cmluZywgdGV4dFNlYXJjaD86IEFycmF5PHN0cmluZz4sIHByb3Zpc2lvbmVkQnlVc2VyTmFtZT86IEFycmF5PHN0cmluZz4sIHByb3Zpc2lvbmVkQnlVc2VySWQ/OiBBcnJheTxzdHJpbmc+LCBsYXN0U3RhdGVDaGFuZ2VBc09mVGltZXN0YW1wPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxQcm92aXNpb25hbFpvbmVMaXN0UmVzb3VyY2U+O1xuICAgIHB1YmxpYyBnZXRQcm92aXNpb25hbFpvbmVMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwcm92aXNpb25hbFpvbmVHdWlkPzogQXJyYXk8c3RyaW5nPiwgcHJvdmlzaW9uYWxab25lSWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHByb3Zpc2lvbmFsWm9uZVR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgZmlyZUNlbnRyZU9yZ1VuaXRJZGVudD86IEFycmF5PHN0cmluZz4sIHByb3Zpc2lvbmFsWm9uZVBvbHlnb25TcGVjaWZpZWRJbmQ/OiBzdHJpbmcsIGRpc21pc3NlZEluZD86IHN0cmluZywgZWZmZWN0aXZlVGltZVN0YW1wPzogc3RyaW5nLCBleHBpcnlUaW1lc3RhbXA/OiBzdHJpbmcsIGVmZmVjdGl2ZUFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHRleHRTZWFyY2g/OiBBcnJheTxzdHJpbmc+LCBwcm92aXNpb25lZEJ5VXNlck5hbWU/OiBBcnJheTxzdHJpbmc+LCBwcm92aXNpb25lZEJ5VXNlcklkPzogQXJyYXk8c3RyaW5nPiwgbGFzdFN0YXRlQ2hhbmdlQXNPZlRpbWVzdGFtcD86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxQcm92aXNpb25hbFpvbmVMaXN0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0UHJvdmlzaW9uYWxab25lTGlzdChyZXN0VmVyc2lvbj86IG51bWJlciwgcHJvdmlzaW9uYWxab25lR3VpZD86IEFycmF5PHN0cmluZz4sIHByb3Zpc2lvbmFsWm9uZUlkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCBwcm92aXNpb25hbFpvbmVUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIGZpcmVDZW50cmVPcmdVbml0SWRlbnQ/OiBBcnJheTxzdHJpbmc+LCBwcm92aXNpb25hbFpvbmVQb2x5Z29uU3BlY2lmaWVkSW5kPzogc3RyaW5nLCBkaXNtaXNzZWRJbmQ/OiBzdHJpbmcsIGVmZmVjdGl2ZVRpbWVTdGFtcD86IHN0cmluZywgZXhwaXJ5VGltZXN0YW1wPzogc3RyaW5nLCBlZmZlY3RpdmVBc09mVGltZXN0YW1wPzogc3RyaW5nLCB0ZXh0U2VhcmNoPzogQXJyYXk8c3RyaW5nPiwgcHJvdmlzaW9uZWRCeVVzZXJOYW1lPzogQXJyYXk8c3RyaW5nPiwgcHJvdmlzaW9uZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIGxhc3RTdGF0ZUNoYW5nZUFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFByb3Zpc2lvbmFsWm9uZUxpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRQcm92aXNpb25hbFpvbmVMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwcm92aXNpb25hbFpvbmVHdWlkPzogQXJyYXk8c3RyaW5nPiwgcHJvdmlzaW9uYWxab25lSWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHByb3Zpc2lvbmFsWm9uZVR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgZmlyZUNlbnRyZU9yZ1VuaXRJZGVudD86IEFycmF5PHN0cmluZz4sIHByb3Zpc2lvbmFsWm9uZVBvbHlnb25TcGVjaWZpZWRJbmQ/OiBzdHJpbmcsIGRpc21pc3NlZEluZD86IHN0cmluZywgZWZmZWN0aXZlVGltZVN0YW1wPzogc3RyaW5nLCBleHBpcnlUaW1lc3RhbXA/OiBzdHJpbmcsIGVmZmVjdGl2ZUFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHRleHRTZWFyY2g/OiBBcnJheTxzdHJpbmc+LCBwcm92aXNpb25lZEJ5VXNlck5hbWU/OiBBcnJheTxzdHJpbmc+LCBwcm92aXNpb25lZEJ5VXNlcklkPzogQXJyYXk8c3RyaW5nPiwgbGFzdFN0YXRlQ2hhbmdlQXNPZlRpbWVzdGFtcD86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKHByb3Zpc2lvbmFsWm9uZUd1aWQpIHtcbiAgICAgICAgICAgIHByb3Zpc2lvbmFsWm9uZUd1aWQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3Byb3Zpc2lvbmFsWm9uZUd1aWQnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3Zpc2lvbmFsWm9uZUlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIHByb3Zpc2lvbmFsWm9uZUlkZW50aWZpZXIuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3Byb3Zpc2lvbmFsWm9uZUlkZW50aWZpZXInKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3Zpc2lvbmFsWm9uZVR5cGVDb2RlKSB7XG4gICAgICAgICAgICBwcm92aXNpb25hbFpvbmVUeXBlQ29kZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAncHJvdmlzaW9uYWxab25lVHlwZUNvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcmVDZW50cmVPcmdVbml0SWRlbnQpIHtcbiAgICAgICAgICAgIGZpcmVDZW50cmVPcmdVbml0SWRlbnQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2ZpcmVDZW50cmVPcmdVbml0SWRlbnQnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3Zpc2lvbmFsWm9uZVBvbHlnb25TcGVjaWZpZWRJbmQgIT09IHVuZGVmaW5lZCAmJiBwcm92aXNpb25hbFpvbmVQb2x5Z29uU3BlY2lmaWVkSW5kICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wcm92aXNpb25hbFpvbmVQb2x5Z29uU3BlY2lmaWVkSW5kLCAncHJvdmlzaW9uYWxab25lUG9seWdvblNwZWNpZmllZEluZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNtaXNzZWRJbmQgIT09IHVuZGVmaW5lZCAmJiBkaXNtaXNzZWRJbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmRpc21pc3NlZEluZCwgJ2Rpc21pc3NlZEluZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3RpdmVUaW1lU3RhbXAgIT09IHVuZGVmaW5lZCAmJiBlZmZlY3RpdmVUaW1lU3RhbXAgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmVmZmVjdGl2ZVRpbWVTdGFtcCwgJ2VmZmVjdGl2ZVRpbWVTdGFtcCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHBpcnlUaW1lc3RhbXAgIT09IHVuZGVmaW5lZCAmJiBleHBpcnlUaW1lc3RhbXAgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmV4cGlyeVRpbWVzdGFtcCwgJ2V4cGlyeVRpbWVzdGFtcCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3RpdmVBc09mVGltZXN0YW1wICE9PSB1bmRlZmluZWQgJiYgZWZmZWN0aXZlQXNPZlRpbWVzdGFtcCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+ZWZmZWN0aXZlQXNPZlRpbWVzdGFtcCwgJ2VmZmVjdGl2ZUFzT2ZUaW1lc3RhbXAnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dFNlYXJjaCkge1xuICAgICAgICAgICAgdGV4dFNlYXJjaC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAndGV4dFNlYXJjaCcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlzaW9uZWRCeVVzZXJOYW1lKSB7XG4gICAgICAgICAgICBwcm92aXNpb25lZEJ5VXNlck5hbWUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3Byb3Zpc2lvbmVkQnlVc2VyTmFtZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlzaW9uZWRCeVVzZXJJZCkge1xuICAgICAgICAgICAgcHJvdmlzaW9uZWRCeVVzZXJJZC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAncHJvdmlzaW9uZWRCeVVzZXJJZCcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdFN0YXRlQ2hhbmdlQXNPZlRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkICYmIGxhc3RTdGF0ZUNoYW5nZUFzT2ZUaW1lc3RhbXAgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pmxhc3RTdGF0ZUNoYW5nZUFzT2ZUaW1lc3RhbXAsICdsYXN0U3RhdGVDaGFuZ2VBc09mVGltZXN0YW1wJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZ2VOdW1iZXIgIT09IHVuZGVmaW5lZCAmJiBwYWdlTnVtYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlTnVtYmVyLCAncGFnZU51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWdlUm93Q291bnQgIT09IHVuZGVmaW5lZCAmJiBwYWdlUm93Q291bnQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhZ2VSb3dDb3VudCwgJ3BhZ2VSb3dDb3VudCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRlckJ5ICE9PSB1bmRlZmluZWQgJiYgb3JkZXJCeSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+b3JkZXJCeSwgJ29yZGVyQnknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8UHJvdmlzaW9uYWxab25lTGlzdFJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3Byb3Zpc2lvbmFsWm9uZXNgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSBieSBFeHRlcm5hbCBJRC5cbiAgICAgKiBHZXQgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSBieSBFeHRlcm5hbCBJRC5cbiAgICAgKiBAcGFyYW0gZXh0ZXJuYWxJZCBUaGUgZXh0ZXJuYWxJZCBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UHVibGljUmVwb3J0T2ZGaXJlKGV4dGVybmFsSWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZShleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRQdWJsaWNSZXBvcnRPZkZpcmUoZXh0ZXJuYWxJZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPj47XG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZShleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChleHRlcm5hbElkID09PSBudWxsIHx8IGV4dGVybmFsSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgZXh0ZXJuYWxJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy9leHRlcm5hbElkLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhleHRlcm5hbElkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgYnkgSUQuXG4gICAgICogR2V0IHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgYnkgSUQuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcG9ydE9mRmlyZU51bWJlciBUaGUgcmVwb3J0T2ZGaXJlTnVtYmVyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQdWJsaWNSZXBvcnRPZkZpcmUxKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZTEod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0UHVibGljUmVwb3J0T2ZGaXJlMSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0UHVibGljUmVwb3J0T2ZGaXJlMSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFB1YmxpY1JlcG9ydE9mRmlyZTEuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UHVibGljUmVwb3J0T2ZGaXJlMS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhyZXBvcnRPZkZpcmVOdW1iZXIpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSBDb21tZW50IGJ5IEV4dGVybmFsIElELlxuICAgICAqIEdldCB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIENvbW1lbnQgYnkgRXh0ZXJuYWwgSUQuXG4gICAgICogQHBhcmFtIGV4dGVybmFsSWQgVGhlIGV4dGVybmFsSWQgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSBDb21tZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudChleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudFJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudChleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudChleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudFJlc291cmNlPj47XG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnQoZXh0ZXJuYWxJZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoZXh0ZXJuYWxJZCA9PT0gbnVsbCB8fCBleHRlcm5hbElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGV4dGVybmFsSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudHMvZXh0ZXJuYWxJZC8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZXh0ZXJuYWxJZCkpfWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgUHVibGljUmVwb3J0T2ZGaXJlIENvbW1lbnQgYnkgSUQuXG4gICAgICogR2V0IHRoZSBQdWJsaWNSZXBvcnRPZkZpcmUgQ29tbWVudCBieSBJRC5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0T2ZGaXJlTnVtYmVyIFRoZSByZXBvcnRPZkZpcmVOdW1iZXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gY29tbWVudEd1aWQgVGhlIGlkZW50aWZpZXIgb2YgdGhlIFB1YmxpY1JlcG9ydE9mRmlyZSBDb21tZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudDEod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCBjb21tZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnQxKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgY29tbWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50MSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIGNvbW1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudFJlc291cmNlPj47XG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnQxKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgY29tbWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudDEuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudDEuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbW1lbnRHdWlkID09PSBudWxsIHx8IGNvbW1lbnRHdWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGNvbW1lbnRHdWlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudDEuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS9jb21tZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29tbWVudEd1aWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbGlzdCBvZiBQdWJsaWNSZXBvcnRPZkZpcmUgQ29tbWVudHMuXG4gICAgICogR2V0IGxpc3Qgb2YgUHVibGljUmVwb3J0T2ZGaXJlIENvbW1lbnRzLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXBvcnRPZkZpcmVOdW1iZXIgVGhlIHJlcG9ydE9mRmlyZU51bWJlciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gc2VhcmNoVGV4dCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHNlYXJjaFRleHQuXG4gICAgICogQHBhcmFtIHN5c3RlbUdlbmVyYXRlZENvbW1lbnRJbmQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBzeXN0ZW1HZW5lcmF0ZWRDb21tZW50SW5kLlxuICAgICAqIEBwYXJhbSBwYWdlTnVtYmVyIFRoZSBwYWdlIG51bWJlciBvZiB0aGUgcmVzdWx0cyB0byBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gcGFnZVJvd0NvdW50IFRoZSBudW1iZXIgb2YgcmVzdWx0cyBwZXIgcGFnZS5cbiAgICAgKiBAcGFyYW0gb3JkZXJCeSBDb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyB0byBvcmRlciB0aGUgcmVzdWx0IHNldCBieS5cbiAgICAgKiBAcGFyYW0gZXhwYW5kIFRoZSBsZXZlbCBvZiBjaGlsZCByZXNvdXJjZXMgdG8gbG9hZC4gWmVybyBmb3Igbm8gY2hpbGQgcmVzb3VyY2VzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50TGlzdCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0Pzogc3RyaW5nLCBzeXN0ZW1HZW5lcmF0ZWRDb21tZW50SW5kPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRMaXN0UmVzb3VyY2U+O1xuICAgIHB1YmxpYyBnZXRQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50TGlzdCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0Pzogc3RyaW5nLCBzeXN0ZW1HZW5lcmF0ZWRDb21tZW50SW5kPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudExpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRQdWJsaWNSZXBvcnRPZkZpcmVDb21tZW50TGlzdCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0Pzogc3RyaW5nLCBzeXN0ZW1HZW5lcmF0ZWRDb21tZW50SW5kPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRMaXN0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudExpc3Qod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgc2VhcmNoVGV4dD86IHN0cmluZywgc3lzdGVtR2VuZXJhdGVkQ29tbWVudEluZD86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudExpc3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UHVibGljUmVwb3J0T2ZGaXJlQ29tbWVudExpc3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoc2VhcmNoVGV4dCAhPT0gdW5kZWZpbmVkICYmIHNlYXJjaFRleHQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnNlYXJjaFRleHQsICdzZWFyY2hUZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN5c3RlbUdlbmVyYXRlZENvbW1lbnRJbmQgIT09IHVuZGVmaW5lZCAmJiBzeXN0ZW1HZW5lcmF0ZWRDb21tZW50SW5kICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5zeXN0ZW1HZW5lcmF0ZWRDb21tZW50SW5kLCAnc3lzdGVtR2VuZXJhdGVkQ29tbWVudEluZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWdlTnVtYmVyICE9PSB1bmRlZmluZWQgJiYgcGFnZU51bWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZU51bWJlciwgJ3BhZ2VOdW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZVJvd0NvdW50ICE9PSB1bmRlZmluZWQgJiYgcGFnZVJvd0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlUm93Q291bnQsICdwYWdlUm93Q291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkZXJCeSAhPT0gdW5kZWZpbmVkICYmIG9yZGVyQnkgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pm9yZGVyQnksICdvcmRlckJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cGFuZCAhPT0gdW5kZWZpbmVkICYmIGV4cGFuZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+ZXhwYW5kLCAnZXhwYW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PFB1YmxpY1JlcG9ydE9mRmlyZUNvbW1lbnRMaXN0UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhyZXBvcnRPZkZpcmVOdW1iZXIpKX0vY29tbWVudHNgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbGlzdCBvZiBQdWJsaWMgUmVwb3J0IG9mIEZpcmVzLlxuICAgICAqIEdldCBsaXN0IG9mIFB1YmxpYyBSZXBvcnQgb2YgRmlyZXMuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBzZWFyY2hUZXh0IEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgc2VhcmNoVGV4dC5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZVN0YXR1c0NvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBtZXNzYWdlU3RhdHVzQ29kZS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0T2ZGaXJlTnVtYmVyIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcmVwb3J0T2ZGaXJlTnVtYmVyLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSB3aWxkZmlyZVllYXIuXG4gICAgICogQHBhcmFtIGludGVyZmFjZUZpcmVJbmQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBpbnRlcmZhY2VGaXJlSW5kLlxuICAgICAqIEBwYXJhbSBtaW5pbXVtUmVwb3J0ZWREYXRlIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgbWluaW11bVJlcG9ydGVkRGF0ZS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0ZWRCeU5hbWUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSByZXBvcnRlZEJ5TmFtZS5cbiAgICAgKiBAcGFyYW0gcmVjZWl2ZWRCeVVzZXJJZCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHJlY2VpdmVkQnlVc2VySWQuXG4gICAgICogQHBhcmFtIHJlY2VpdmVkQnlVc2VyR3VpZCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHJlY2VpdmVkQnlVc2VyR3VpZC5cbiAgICAgKiBAcGFyYW0gYWNrbm93bGVkZ2VkQnlVc2VySWQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBhY2tub3dsZWRnZWRCeVVzZXJJZC5cbiAgICAgKiBAcGFyYW0gYWNrbm93bGVkZ2VkQnlVc2VyR3VpZCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGFja25vd2xlZGdlZEJ5VXNlckd1aWQuXG4gICAgICogQHBhcmFtIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllciBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllci5cbiAgICAgKiBAcGFyYW0gem9uZU9yZ1VuaXRJZGVudGlmaWVyIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgem9uZU9yZ1VuaXRJZGVudGlmaWVyLlxuICAgICAqIEBwYXJhbSByZXBvcnRlZEJ5UGFydHlOYW1lIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcmVwb3J0ZWRCeVBhcnR5TmFtZS5cbiAgICAgKiBAcGFyYW0gY2FsbGVyTmFtZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGNhbGxlck5hbWUuXG4gICAgICogQHBhcmFtIGxvc3RDYWxsSW5kIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgbG9zdENhbGxJbmQuXG4gICAgICogQHBhcmFtIGF2YWlsYWJsZUZvckNhbGxiYWNrSW5kIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgYXZhaWxhYmxlRm9yQ2FsbGJhY2tJbmQuXG4gICAgICogQHBhcmFtIHB1YmxpY1JlcG9ydFR5cGVDb2RlIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcHVibGljUmVwb3J0VHlwZUNvZGUuXG4gICAgICogQHBhcmFtIGZpcmVTaXplQ29tcGFyaXNpb25Db2RlIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgZmlyZVNpemVDb21wYXJpc2lvbkNvZGUuXG4gICAgICogQHBhcmFtIHJhdGVPZlNwcmVhZENvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSByYXRlT2ZTcHJlYWRDb2RlLlxuICAgICAqIEBwYXJhbSBzbW9rZUNvbG91ckNvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBzbW9rZUNvbG91ckNvZGUuXG4gICAgICogQHBhcmFtIG1lc3NhZ2VSZWNlaXZlZFNvdXJjZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIG1lc3NhZ2VSZWNlaXZlZFNvdXJjZS5cbiAgICAgKiBAcGFyYW0gc3VibWl0dGVkQXNPZlRpbWVzdGFtcCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHN1Ym1pdHRlZFRpbWVzdGFtcC5cbiAgICAgKiBAcGFyYW0gcmVjZWlldmVkQXNPZlRpbWVzdGFtcCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHJlY2VpZXZlZFRpbWVzdGFtcC5cbiAgICAgKiBAcGFyYW0gc3VibWl0dGVkT3JSZWNlaXZlZEFzT2ZUaW1lc3RhbXAgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBzdWJtaXR0ZWRUaW1lc3RhbXAgb3IgZm9yIFJvRnMgdGhhdCBoYXZlIG5vdCBiZWVuIHN1Ym1pdHRlZCwgYnkgcmVjZWlldmVkVGltZXN0YW1wLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudFdpbGRmaXJlWWVhciBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGluY2lkZW50V2lsZGZpcmVZZWFyLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZS5cbiAgICAgKiBAcGFyYW0gcmVsYXllZEluZCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHJlbGF5ZWRJbmQuXG4gICAgICogQHBhcmFtIHBhZ2VOdW1iZXIgVGhlIHBhZ2UgbnVtYmVyIG9mIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBwYWdlUm93Q291bnQgVGhlIG51bWJlciBvZiByZXN1bHRzIHBlciBwYWdlLlxuICAgICAqIEBwYXJhbSBvcmRlckJ5IENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIG9yZGVyIHRoZSByZXN1bHQgc2V0IGJ5LlxuICAgICAqIEBwYXJhbSBleHBhbmQgVGhlIGxldmVsIG9mIGNoaWxkIHJlc291cmNlcyB0byBsb2FkLiBaZXJvIGZvciBubyBjaGlsZCByZXNvdXJjZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZUxpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHNlYXJjaFRleHQ/OiBBcnJheTxzdHJpbmc+LCBtZXNzYWdlU3RhdHVzQ29kZT86IEFycmF5PHN0cmluZz4sIHJlcG9ydE9mRmlyZU51bWJlcj86IEFycmF5PHN0cmluZz4sIHdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGludGVyZmFjZUZpcmVJbmQ/OiBzdHJpbmcsIG1pbmltdW1SZXBvcnRlZERhdGU/OiBzdHJpbmcsIHJlcG9ydGVkQnlOYW1lPzogQXJyYXk8c3RyaW5nPiwgcmVjZWl2ZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIHJlY2VpdmVkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIGFja25vd2xlZGdlZEJ5VXNlcklkPzogQXJyYXk8c3RyaW5nPiwgYWNrbm93bGVkZ2VkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHpvbmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHJlcG9ydGVkQnlQYXJ0eU5hbWU/OiBBcnJheTxzdHJpbmc+LCBjYWxsZXJOYW1lPzogQXJyYXk8c3RyaW5nPiwgbG9zdENhbGxJbmQ/OiBzdHJpbmcsIGF2YWlsYWJsZUZvckNhbGxiYWNrSW5kPzogc3RyaW5nLCBwdWJsaWNSZXBvcnRUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIGZpcmVTaXplQ29tcGFyaXNpb25Db2RlPzogQXJyYXk8c3RyaW5nPiwgcmF0ZU9mU3ByZWFkQ29kZT86IEFycmF5PHN0cmluZz4sIHNtb2tlQ29sb3VyQ29kZT86IEFycmF5PHN0cmluZz4sIG1lc3NhZ2VSZWNlaXZlZFNvdXJjZT86IEFycmF5PHN0cmluZz4sIHN1Ym1pdHRlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHJlY2VpZXZlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHN1Ym1pdHRlZE9yUmVjZWl2ZWRBc09mVGltZXN0YW1wPzogc3RyaW5nLCBpbmNpZGVudFdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TnVtYmVyU2VxdWVuY2U/OiBBcnJheTxzdHJpbmc+LCByZWxheWVkSW5kPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFB1YmxpY1JlcG9ydE9mRmlyZUxpc3RSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZUxpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHNlYXJjaFRleHQ/OiBBcnJheTxzdHJpbmc+LCBtZXNzYWdlU3RhdHVzQ29kZT86IEFycmF5PHN0cmluZz4sIHJlcG9ydE9mRmlyZU51bWJlcj86IEFycmF5PHN0cmluZz4sIHdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGludGVyZmFjZUZpcmVJbmQ/OiBzdHJpbmcsIG1pbmltdW1SZXBvcnRlZERhdGU/OiBzdHJpbmcsIHJlcG9ydGVkQnlOYW1lPzogQXJyYXk8c3RyaW5nPiwgcmVjZWl2ZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIHJlY2VpdmVkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIGFja25vd2xlZGdlZEJ5VXNlcklkPzogQXJyYXk8c3RyaW5nPiwgYWNrbm93bGVkZ2VkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHpvbmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHJlcG9ydGVkQnlQYXJ0eU5hbWU/OiBBcnJheTxzdHJpbmc+LCBjYWxsZXJOYW1lPzogQXJyYXk8c3RyaW5nPiwgbG9zdENhbGxJbmQ/OiBzdHJpbmcsIGF2YWlsYWJsZUZvckNhbGxiYWNrSW5kPzogc3RyaW5nLCBwdWJsaWNSZXBvcnRUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIGZpcmVTaXplQ29tcGFyaXNpb25Db2RlPzogQXJyYXk8c3RyaW5nPiwgcmF0ZU9mU3ByZWFkQ29kZT86IEFycmF5PHN0cmluZz4sIHNtb2tlQ29sb3VyQ29kZT86IEFycmF5PHN0cmluZz4sIG1lc3NhZ2VSZWNlaXZlZFNvdXJjZT86IEFycmF5PHN0cmluZz4sIHN1Ym1pdHRlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHJlY2VpZXZlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHN1Ym1pdHRlZE9yUmVjZWl2ZWRBc09mVGltZXN0YW1wPzogc3RyaW5nLCBpbmNpZGVudFdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TnVtYmVyU2VxdWVuY2U/OiBBcnJheTxzdHJpbmc+LCByZWxheWVkSW5kPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8UHVibGljUmVwb3J0T2ZGaXJlTGlzdFJlc291cmNlPj47XG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZUxpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHNlYXJjaFRleHQ/OiBBcnJheTxzdHJpbmc+LCBtZXNzYWdlU3RhdHVzQ29kZT86IEFycmF5PHN0cmluZz4sIHJlcG9ydE9mRmlyZU51bWJlcj86IEFycmF5PHN0cmluZz4sIHdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGludGVyZmFjZUZpcmVJbmQ/OiBzdHJpbmcsIG1pbmltdW1SZXBvcnRlZERhdGU/OiBzdHJpbmcsIHJlcG9ydGVkQnlOYW1lPzogQXJyYXk8c3RyaW5nPiwgcmVjZWl2ZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIHJlY2VpdmVkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIGFja25vd2xlZGdlZEJ5VXNlcklkPzogQXJyYXk8c3RyaW5nPiwgYWNrbm93bGVkZ2VkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHpvbmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHJlcG9ydGVkQnlQYXJ0eU5hbWU/OiBBcnJheTxzdHJpbmc+LCBjYWxsZXJOYW1lPzogQXJyYXk8c3RyaW5nPiwgbG9zdENhbGxJbmQ/OiBzdHJpbmcsIGF2YWlsYWJsZUZvckNhbGxiYWNrSW5kPzogc3RyaW5nLCBwdWJsaWNSZXBvcnRUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIGZpcmVTaXplQ29tcGFyaXNpb25Db2RlPzogQXJyYXk8c3RyaW5nPiwgcmF0ZU9mU3ByZWFkQ29kZT86IEFycmF5PHN0cmluZz4sIHNtb2tlQ29sb3VyQ29kZT86IEFycmF5PHN0cmluZz4sIG1lc3NhZ2VSZWNlaXZlZFNvdXJjZT86IEFycmF5PHN0cmluZz4sIHN1Ym1pdHRlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHJlY2VpZXZlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHN1Ym1pdHRlZE9yUmVjZWl2ZWRBc09mVGltZXN0YW1wPzogc3RyaW5nLCBpbmNpZGVudFdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TnVtYmVyU2VxdWVuY2U/OiBBcnJheTxzdHJpbmc+LCByZWxheWVkSW5kPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFB1YmxpY1JlcG9ydE9mRmlyZUxpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRQdWJsaWNSZXBvcnRPZkZpcmVMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0PzogQXJyYXk8c3RyaW5nPiwgbWVzc2FnZVN0YXR1c0NvZGU/OiBBcnJheTxzdHJpbmc+LCByZXBvcnRPZkZpcmVOdW1iZXI/OiBBcnJheTxzdHJpbmc+LCB3aWxkZmlyZVllYXI/OiBBcnJheTxzdHJpbmc+LCBpbnRlcmZhY2VGaXJlSW5kPzogc3RyaW5nLCBtaW5pbXVtUmVwb3J0ZWREYXRlPzogc3RyaW5nLCByZXBvcnRlZEJ5TmFtZT86IEFycmF5PHN0cmluZz4sIHJlY2VpdmVkQnlVc2VySWQ/OiBBcnJheTxzdHJpbmc+LCByZWNlaXZlZEJ5VXNlckd1aWQ/OiBBcnJheTxzdHJpbmc+LCBhY2tub3dsZWRnZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIGFja25vd2xlZGdlZEJ5VXNlckd1aWQ/OiBBcnJheTxzdHJpbmc+LCBmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCB6b25lT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCByZXBvcnRlZEJ5UGFydHlOYW1lPzogQXJyYXk8c3RyaW5nPiwgY2FsbGVyTmFtZT86IEFycmF5PHN0cmluZz4sIGxvc3RDYWxsSW5kPzogc3RyaW5nLCBhdmFpbGFibGVGb3JDYWxsYmFja0luZD86IHN0cmluZywgcHVibGljUmVwb3J0VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBmaXJlU2l6ZUNvbXBhcmlzaW9uQ29kZT86IEFycmF5PHN0cmluZz4sIHJhdGVPZlNwcmVhZENvZGU/OiBBcnJheTxzdHJpbmc+LCBzbW9rZUNvbG91ckNvZGU/OiBBcnJheTxzdHJpbmc+LCBtZXNzYWdlUmVjZWl2ZWRTb3VyY2U/OiBBcnJheTxzdHJpbmc+LCBzdWJtaXR0ZWRBc09mVGltZXN0YW1wPzogc3RyaW5nLCByZWNlaWV2ZWRBc09mVGltZXN0YW1wPzogc3RyaW5nLCBzdWJtaXR0ZWRPclJlY2VpdmVkQXNPZlRpbWVzdGFtcD86IHN0cmluZywgaW5jaWRlbnRXaWxkZmlyZVllYXI/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudE51bWJlclNlcXVlbmNlPzogQXJyYXk8c3RyaW5nPiwgcmVsYXllZEluZD86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoc2VhcmNoVGV4dCkge1xuICAgICAgICAgICAgc2VhcmNoVGV4dC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnc2VhcmNoVGV4dCcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZVN0YXR1c0NvZGUpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VTdGF0dXNDb2RlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdtZXNzYWdlU3RhdHVzQ29kZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0T2ZGaXJlTnVtYmVyKSB7XG4gICAgICAgICAgICByZXBvcnRPZkZpcmVOdW1iZXIuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3JlcG9ydE9mRmlyZU51bWJlcicpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAod2lsZGZpcmVZZWFyKSB7XG4gICAgICAgICAgICB3aWxkZmlyZVllYXIuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3dpbGRmaXJlWWVhcicpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJmYWNlRmlyZUluZCAhPT0gdW5kZWZpbmVkICYmIGludGVyZmFjZUZpcmVJbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmludGVyZmFjZUZpcmVJbmQsICdpbnRlcmZhY2VGaXJlSW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbmltdW1SZXBvcnRlZERhdGUgIT09IHVuZGVmaW5lZCAmJiBtaW5pbXVtUmVwb3J0ZWREYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5taW5pbXVtUmVwb3J0ZWREYXRlLCAnbWluaW11bVJlcG9ydGVkRGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnRlZEJ5TmFtZSkge1xuICAgICAgICAgICAgcmVwb3J0ZWRCeU5hbWUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3JlcG9ydGVkQnlOYW1lJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZWNlaXZlZEJ5VXNlcklkKSB7XG4gICAgICAgICAgICByZWNlaXZlZEJ5VXNlcklkLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdyZWNlaXZlZEJ5VXNlcklkJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZWNlaXZlZEJ5VXNlckd1aWQpIHtcbiAgICAgICAgICAgIHJlY2VpdmVkQnlVc2VyR3VpZC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAncmVjZWl2ZWRCeVVzZXJHdWlkJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChhY2tub3dsZWRnZWRCeVVzZXJJZCkge1xuICAgICAgICAgICAgYWNrbm93bGVkZ2VkQnlVc2VySWQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2Fja25vd2xlZGdlZEJ5VXNlcklkJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChhY2tub3dsZWRnZWRCeVVzZXJHdWlkKSB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWRCeVVzZXJHdWlkLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdhY2tub3dsZWRnZWRCeVVzZXJHdWlkJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmICh6b25lT3JnVW5pdElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIHpvbmVPcmdVbml0SWRlbnRpZmllci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnem9uZU9yZ1VuaXRJZGVudGlmaWVyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnRlZEJ5UGFydHlOYW1lKSB7XG4gICAgICAgICAgICByZXBvcnRlZEJ5UGFydHlOYW1lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdyZXBvcnRlZEJ5UGFydHlOYW1lJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsZXJOYW1lKSB7XG4gICAgICAgICAgICBjYWxsZXJOYW1lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdjYWxsZXJOYW1lJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChsb3N0Q2FsbEluZCAhPT0gdW5kZWZpbmVkICYmIGxvc3RDYWxsSW5kICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5sb3N0Q2FsbEluZCwgJ2xvc3RDYWxsSW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF2YWlsYWJsZUZvckNhbGxiYWNrSW5kICE9PSB1bmRlZmluZWQgJiYgYXZhaWxhYmxlRm9yQ2FsbGJhY2tJbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmF2YWlsYWJsZUZvckNhbGxiYWNrSW5kLCAnYXZhaWxhYmxlRm9yQ2FsbGJhY2tJbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHVibGljUmVwb3J0VHlwZUNvZGUpIHtcbiAgICAgICAgICAgIHB1YmxpY1JlcG9ydFR5cGVDb2RlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdwdWJsaWNSZXBvcnRUeXBlQ29kZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyZVNpemVDb21wYXJpc2lvbkNvZGUpIHtcbiAgICAgICAgICAgIGZpcmVTaXplQ29tcGFyaXNpb25Db2RlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdmaXJlU2l6ZUNvbXBhcmlzaW9uQ29kZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocmF0ZU9mU3ByZWFkQ29kZSkge1xuICAgICAgICAgICAgcmF0ZU9mU3ByZWFkQ29kZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAncmF0ZU9mU3ByZWFkQ29kZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoc21va2VDb2xvdXJDb2RlKSB7XG4gICAgICAgICAgICBzbW9rZUNvbG91ckNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3Ntb2tlQ29sb3VyQ29kZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZVJlY2VpdmVkU291cmNlKSB7XG4gICAgICAgICAgICBtZXNzYWdlUmVjZWl2ZWRTb3VyY2UuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ21lc3NhZ2VSZWNlaXZlZFNvdXJjZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VibWl0dGVkQXNPZlRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkICYmIHN1Ym1pdHRlZEFzT2ZUaW1lc3RhbXAgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnN1Ym1pdHRlZEFzT2ZUaW1lc3RhbXAsICdzdWJtaXR0ZWRBc09mVGltZXN0YW1wJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlY2VpZXZlZEFzT2ZUaW1lc3RhbXAgIT09IHVuZGVmaW5lZCAmJiByZWNlaWV2ZWRBc09mVGltZXN0YW1wICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5yZWNlaWV2ZWRBc09mVGltZXN0YW1wLCAncmVjZWlldmVkQXNPZlRpbWVzdGFtcCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJtaXR0ZWRPclJlY2VpdmVkQXNPZlRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkICYmIHN1Ym1pdHRlZE9yUmVjZWl2ZWRBc09mVGltZXN0YW1wICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5zdWJtaXR0ZWRPclJlY2VpdmVkQXNPZlRpbWVzdGFtcCwgJ3N1Ym1pdHRlZE9yUmVjZWl2ZWRBc09mVGltZXN0YW1wJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50V2lsZGZpcmVZZWFyKSB7XG4gICAgICAgICAgICBpbmNpZGVudFdpbGRmaXJlWWVhci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnaW5jaWRlbnRXaWxkZmlyZVllYXInKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpIHtcbiAgICAgICAgICAgIGluY2lkZW50TnVtYmVyU2VxdWVuY2UuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2luY2lkZW50TnVtYmVyU2VxdWVuY2UnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbGF5ZWRJbmQgIT09IHVuZGVmaW5lZCAmJiByZWxheWVkSW5kICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5yZWxheWVkSW5kLCAncmVsYXllZEluZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWdlTnVtYmVyICE9PSB1bmRlZmluZWQgJiYgcGFnZU51bWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZU51bWJlciwgJ3BhZ2VOdW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZVJvd0NvdW50ICE9PSB1bmRlZmluZWQgJiYgcGFnZVJvd0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlUm93Q291bnQsICdwYWdlUm93Q291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkZXJCeSAhPT0gdW5kZWZpbmVkICYmIG9yZGVyQnkgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pm9yZGVyQnksICdvcmRlckJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cGFuZCAhPT0gdW5kZWZpbmVkICYmIGV4cGFuZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+ZXhwYW5kLCAnZXhwYW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PFB1YmxpY1JlcG9ydE9mRmlyZUxpc3RSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGxpc3Qgb2YgUHVibGljIFJlcG9ydCBvZiBGaXJlIFN0YXR1cyBDaGFuZ2VzLlxuICAgICAqIEdldCBsaXN0IG9mIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSBTdGF0dXMgQ2hhbmdlcy5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0T2ZGaXJlTnVtYmVyIFRoZSByZXBvcnRPZkZpcmVOdW1iZXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIHBhZ2VOdW1iZXIgVGhlIHBhZ2UgbnVtYmVyIG9mIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBwYWdlUm93Q291bnQgVGhlIG51bWJlciBvZiByZXN1bHRzIHBlciBwYWdlLlxuICAgICAqIEBwYXJhbSBvcmRlckJ5IENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIG9yZGVyIHRoZSByZXN1bHQgc2V0IGJ5LlxuICAgICAqIEBwYXJhbSBleHBhbmQgVGhlIGxldmVsIG9mIGNoaWxkIHJlc291cmNlcyB0byBsb2FkLiBaZXJvIGZvciBubyBjaGlsZCByZXNvdXJjZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFB1YmxpY1JlcG9ydE9mRmlyZVN0YXR1c0NoYW5nZUxpc3Qod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxTdGF0dXNDaGFuZ2VMaXN0UmVzb3VyY2U+O1xuICAgIHB1YmxpYyBnZXRQdWJsaWNSZXBvcnRPZkZpcmVTdGF0dXNDaGFuZ2VMaXN0KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxTdGF0dXNDaGFuZ2VMaXN0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0UHVibGljUmVwb3J0T2ZGaXJlU3RhdHVzQ2hhbmdlTGlzdCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFN0YXR1c0NoYW5nZUxpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRQdWJsaWNSZXBvcnRPZkZpcmVTdGF0dXNDaGFuZ2VMaXN0KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFB1YmxpY1JlcG9ydE9mRmlyZVN0YXR1c0NoYW5nZUxpc3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UHVibGljUmVwb3J0T2ZGaXJlU3RhdHVzQ2hhbmdlTGlzdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChwYWdlTnVtYmVyICE9PSB1bmRlZmluZWQgJiYgcGFnZU51bWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZU51bWJlciwgJ3BhZ2VOdW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZVJvd0NvdW50ICE9PSB1bmRlZmluZWQgJiYgcGFnZVJvd0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlUm93Q291bnQsICdwYWdlUm93Q291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkZXJCeSAhPT0gdW5kZWZpbmVkICYmIG9yZGVyQnkgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pm9yZGVyQnksICdvcmRlckJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cGFuZCAhPT0gdW5kZWZpbmVkICYmIGV4cGFuZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+ZXhwYW5kLCAnZXhwYW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PFN0YXR1c0NoYW5nZUxpc3RSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS9zdGF0dXNDaGFuZ2VzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHB1Ymxpc2hlZEluY2lkZW50RGV0YWlsR3VpZCBcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UHVibGlzaGVkSW5jaWRlbnQocHVibGlzaGVkSW5jaWRlbnREZXRhaWxHdWlkOiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHB1YmxpYyBnZXRQdWJsaXNoZWRJbmNpZGVudChwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgcHVibGljIGdldFB1Ymxpc2hlZEluY2lkZW50KHB1Ymxpc2hlZEluY2lkZW50RGV0YWlsR3VpZDogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgcHVibGljIGdldFB1Ymxpc2hlZEluY2lkZW50KHB1Ymxpc2hlZEluY2lkZW50RGV0YWlsR3VpZDogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQgPT09IG51bGwgfHwgcHVibGlzaGVkSW5jaWRlbnREZXRhaWxHdWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHB1Ymxpc2hlZEluY2lkZW50RGV0YWlsR3VpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFB1Ymxpc2hlZEluY2lkZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxhbnk+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGlzaGVkSW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gaW5jaWRlbnRHdWlkIFxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQdWJsaXNoZWRJbmNpZGVudEJ5SW5jaWRlbnRHdWlkKGluY2lkZW50R3VpZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgZ2V0UHVibGlzaGVkSW5jaWRlbnRCeUluY2lkZW50R3VpZChpbmNpZGVudEd1aWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgcHVibGljIGdldFB1Ymxpc2hlZEluY2lkZW50QnlJbmNpZGVudEd1aWQoaW5jaWRlbnRHdWlkOiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICBwdWJsaWMgZ2V0UHVibGlzaGVkSW5jaWRlbnRCeUluY2lkZW50R3VpZChpbmNpZGVudEd1aWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoaW5jaWRlbnRHdWlkID09PSBudWxsIHx8IGluY2lkZW50R3VpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudEd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRQdWJsaXNoZWRJbmNpZGVudEJ5SW5jaWRlbnRHdWlkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxhbnk+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGlzaGVkSW5jaWRlbnRzL2J5SW5jaWRlbnQvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50R3VpZCkpfWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBwYWdlTnVtYmVyIFxuICAgICAqIEBwYXJhbSBwYWdlUm93Q291bnQgXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFB1Ymxpc2hlZEluY2lkZW50TGlzdChwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHB1YmxpYyBnZXRQdWJsaXNoZWRJbmNpZGVudExpc3QocGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PjtcbiAgICBwdWJsaWMgZ2V0UHVibGlzaGVkSW5jaWRlbnRMaXN0KHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuICAgIHB1YmxpYyBnZXRQdWJsaXNoZWRJbmNpZGVudExpc3QocGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKHBhZ2VOdW1iZXIgIT09IHVuZGVmaW5lZCAmJiBwYWdlTnVtYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlTnVtYmVyLCAncGFnZU51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWdlUm93Q291bnQgIT09IHVuZGVmaW5lZCAmJiBwYWdlUm93Q291bnQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhZ2VSb3dDb3VudCwgJ3BhZ2VSb3dDb3VudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxhbnk+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGlzaGVkSW5jaWRlbnRzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IFJlcG9ydCBvZiBGaXJlIEF0dGFjaG1lbnQgYnkgSUQuXG4gICAgICogR2V0IHRoZSBSZXBvcnQgb2YgRmlyZSBBdHRhY2htZW50IGJ5IElELlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXBvcnRPZkZpcmVOdW1iZXIgVGhlIHJlcG9ydE9mRmlyZU51bWJlciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBhdHRhY2htZW50R3VpZCBUaGUgYXR0YWNobWVudEd1aWQgb2YgdGhlIEF0dGFjaG1lbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRSZXBvcnRPZkZpcmVBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxBdHRhY2htZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyBnZXRSZXBvcnRPZkZpcmVBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEF0dGFjaG1lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRSZXBvcnRPZkZpcmVBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBdHRhY2htZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0UmVwb3J0T2ZGaXJlQXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFJlcG9ydE9mRmlyZUF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UmVwb3J0T2ZGaXJlQXR0YWNobWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0YWNobWVudEd1aWQgPT09IG51bGwgfHwgYXR0YWNobWVudEd1aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYXR0YWNobWVudEd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRSZXBvcnRPZkZpcmVBdHRhY2htZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxBdHRhY2htZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhyZXBvcnRPZkZpcmVOdW1iZXIpKX0vYXR0YWNobWVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGF0dGFjaG1lbnRHdWlkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IFJlcG9ydCBvZiBGaXJlIEF0dGFjaG1lbnRzLlxuICAgICAqIEdldCBsaXN0IG9mIFJlcG9ydCBvZiBGaXJlIEF0dGFjaG1lbnRzLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXBvcnRPZkZpcmVOdW1iZXIgVGhlIHJlcG9ydE9mRmlyZU51bWJlciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gYXJjaGl2ZWQgTGlzdCBhcmNoaXZlZCBhdHRhY2htZW50c1xuICAgICAqIEBwYXJhbSBwcml2YXRlSW5kaWNhdG9yIExpc3QgcHJpdmF0ZSBhdHRhY2htZW50c1xuICAgICAqIEBwYXJhbSBzb3VyY2VPYmplY3ROYW1lQ29kZSBUaGUgc291cmNlT2JqZWN0TmFtZUNvZGUgdGhlIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnRUeXBlQ29kZSBUaGUgYXR0YWNobWVudFR5cGVDb2RlIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSB1cGxvYWRlZEJ5VXNlcklkIFRoZSB1cGxvYWRlZEJ5VXNlcklkIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSB1cGxvYWRlZEJ5QnlVc2VyVHlwZSBUaGUgdXBsb2FkZWRCeUJ5VXNlclR5cGUgdGhlIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIHVwbG9hZGVkQnlVc2VyR3VpZCBUaGUgdXBsb2FkZWRCeVVzZXJHdWlkIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBwYWdlTnVtYmVyIFRoZSBwYWdlIG51bWJlciBvZiB0aGUgcmVzdWx0cyB0byBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gcGFnZVJvd0NvdW50IFRoZSBudW1iZXIgb2YgcmVzdWx0cyBwZXIgcGFnZS5cbiAgICAgKiBAcGFyYW0gb3JkZXJCeSBDb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyB0byBvcmRlciB0aGUgcmVzdWx0IHNldCBieS5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UmVwb3J0T2ZGaXJlQXR0YWNobWVudExpc3Qod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXJjaGl2ZWQ/OiBzdHJpbmcsIHByaXZhdGVJbmRpY2F0b3I/OiBzdHJpbmcsIHNvdXJjZU9iamVjdE5hbWVDb2RlPzogQXJyYXk8c3RyaW5nPiwgYXR0YWNobWVudFR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgdXBsb2FkZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlCeVVzZXJUeXBlPzogQXJyYXk8c3RyaW5nPiwgdXBsb2FkZWRCeVVzZXJHdWlkPzogQXJyYXk8c3RyaW5nPiwgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8QXR0YWNobWVudExpc3RSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFJlcG9ydE9mRmlyZUF0dGFjaG1lbnRMaXN0KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGFyY2hpdmVkPzogc3RyaW5nLCBwcml2YXRlSW5kaWNhdG9yPzogc3RyaW5nLCBzb3VyY2VPYmplY3ROYW1lQ29kZT86IEFycmF5PHN0cmluZz4sIGF0dGFjaG1lbnRUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlVc2VySWQ/OiBBcnJheTxzdHJpbmc+LCB1cGxvYWRlZEJ5QnlVc2VyVHlwZT86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXR0YWNobWVudExpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRSZXBvcnRPZkZpcmVBdHRhY2htZW50TGlzdCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBhcmNoaXZlZD86IHN0cmluZywgcHJpdmF0ZUluZGljYXRvcj86IHN0cmluZywgc291cmNlT2JqZWN0TmFtZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBhdHRhY2htZW50VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCB1cGxvYWRlZEJ5VXNlcklkPzogQXJyYXk8c3RyaW5nPiwgdXBsb2FkZWRCeUJ5VXNlclR5cGU/OiBBcnJheTxzdHJpbmc+LCB1cGxvYWRlZEJ5VXNlckd1aWQ/OiBBcnJheTxzdHJpbmc+LCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBdHRhY2htZW50TGlzdFJlc291cmNlPj47XG4gICAgcHVibGljIGdldFJlcG9ydE9mRmlyZUF0dGFjaG1lbnRMaXN0KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGFyY2hpdmVkPzogc3RyaW5nLCBwcml2YXRlSW5kaWNhdG9yPzogc3RyaW5nLCBzb3VyY2VPYmplY3ROYW1lQ29kZT86IEFycmF5PHN0cmluZz4sIGF0dGFjaG1lbnRUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlVc2VySWQ/OiBBcnJheTxzdHJpbmc+LCB1cGxvYWRlZEJ5QnlVc2VyVHlwZT86IEFycmF5PHN0cmluZz4sIHVwbG9hZGVkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRSZXBvcnRPZkZpcmVBdHRhY2htZW50TGlzdC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0T2ZGaXJlTnVtYmVyID09PSBudWxsIHx8IHJlcG9ydE9mRmlyZU51bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciByZXBvcnRPZkZpcmVOdW1iZXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRSZXBvcnRPZkZpcmVBdHRhY2htZW50TGlzdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChhcmNoaXZlZCAhPT0gdW5kZWZpbmVkICYmIGFyY2hpdmVkICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5hcmNoaXZlZCwgJ2FyY2hpdmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByaXZhdGVJbmRpY2F0b3IgIT09IHVuZGVmaW5lZCAmJiBwcml2YXRlSW5kaWNhdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wcml2YXRlSW5kaWNhdG9yLCAncHJpdmF0ZUluZGljYXRvcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2VPYmplY3ROYW1lQ29kZSkge1xuICAgICAgICAgICAgc291cmNlT2JqZWN0TmFtZUNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3NvdXJjZU9iamVjdE5hbWVDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRhY2htZW50VHlwZUNvZGUpIHtcbiAgICAgICAgICAgIGF0dGFjaG1lbnRUeXBlQ29kZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnYXR0YWNobWVudFR5cGVDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmICh1cGxvYWRlZEJ5VXNlcklkKSB7XG4gICAgICAgICAgICB1cGxvYWRlZEJ5VXNlcklkLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICd1cGxvYWRlZEJ5VXNlcklkJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmICh1cGxvYWRlZEJ5QnlVc2VyVHlwZSkge1xuICAgICAgICAgICAgdXBsb2FkZWRCeUJ5VXNlclR5cGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3VwbG9hZGVkQnlCeVVzZXJUeXBlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmICh1cGxvYWRlZEJ5VXNlckd1aWQpIHtcbiAgICAgICAgICAgIHVwbG9hZGVkQnlVc2VyR3VpZC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAndXBsb2FkZWRCeVVzZXJHdWlkJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYWdlTnVtYmVyICE9PSB1bmRlZmluZWQgJiYgcGFnZU51bWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZU51bWJlciwgJ3BhZ2VOdW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZVJvd0NvdW50ICE9PSB1bmRlZmluZWQgJiYgcGFnZVJvd0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlUm93Q291bnQsICdwYWdlUm93Q291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkZXJCeSAhPT0gdW5kZWZpbmVkICYmIG9yZGVyQnkgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pm9yZGVyQnksICdvcmRlckJ5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PEF0dGFjaG1lbnRMaXN0UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhyZXBvcnRPZkZpcmVOdW1iZXIpKX0vYXR0YWNobWVudHNgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIFJlc291cmNlIEFsbG9jYXRpb24gQXNzZXNzbWVudCBmb3IgYW4gSW5jaWRlbnQgYnkgSUQuXG4gICAgICogR2V0IHRoZSBSZXNvdXJjZSBBbGxvY2F0aW9uIEFzc2Vzc21lbnQgZm9yIGFuIEluY2lkZW50IGJ5IElELlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UmVzb3VyY2VBbGxvY2F0aW9uQXNzZXNzbWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnRSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UmVzb3VyY2VBbGxvY2F0aW9uQXNzZXNzbWVudFJlc291cmNlPj47XG4gICAgcHVibGljIGdldFJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UmVzb3VyY2VBbGxvY2F0aW9uQXNzZXNzbWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpKX0vcmVzb3VyY2VBbGxvY2F0aW9uQXNzZXNzbWVudGAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBsaXN0IG9mIFNpbXBsZSBSZXBvcnQgb2YgRmlyZXMuXG4gICAgICogR2V0IGxpc3Qgb2YgU2ltcGxlIFJlcG9ydCBvZiBGaXJlcy5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIHNlYXJjaFRleHQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBzZWFyY2hUZXh0LlxuICAgICAqIEBwYXJhbSBtZXNzYWdlU3RhdHVzQ29kZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIG1lc3NhZ2VTdGF0dXNDb2RlLlxuICAgICAqIEBwYXJhbSByZXBvcnRPZkZpcmVOdW1iZXIgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSByZXBvcnRPZkZpcmVOdW1iZXIuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHdpbGRmaXJlWWVhci5cbiAgICAgKiBAcGFyYW0gaW50ZXJmYWNlRmlyZUluZCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGludGVyZmFjZUZpcmVJbmQuXG4gICAgICogQHBhcmFtIG1pbmltdW1SZXBvcnRlZERhdGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBtaW5pbXVtUmVwb3J0ZWREYXRlLlxuICAgICAqIEBwYXJhbSByZXBvcnRlZEJ5TmFtZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHJlcG9ydGVkQnlOYW1lLlxuICAgICAqIEBwYXJhbSByZWNlaXZlZEJ5VXNlcklkIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcmVjZWl2ZWRCeVVzZXJJZC5cbiAgICAgKiBAcGFyYW0gcmVjZWl2ZWRCeVVzZXJHdWlkIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcmVjZWl2ZWRCeVVzZXJHdWlkLlxuICAgICAqIEBwYXJhbSBhY2tub3dsZWRnZWRCeVVzZXJJZCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGFja25vd2xlZGdlZEJ5VXNlcklkLlxuICAgICAqIEBwYXJhbSBhY2tub3dsZWRnZWRCeVVzZXJHdWlkIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgYWNrbm93bGVkZ2VkQnlVc2VyR3VpZC5cbiAgICAgKiBAcGFyYW0gZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyLlxuICAgICAqIEBwYXJhbSB6b25lT3JnVW5pdElkZW50aWZpZXIgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSB6b25lT3JnVW5pdElkZW50aWZpZXIuXG4gICAgICogQHBhcmFtIHJlcG9ydGVkQnlQYXJ0eU5hbWUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSByZXBvcnRlZEJ5UGFydHlOYW1lLlxuICAgICAqIEBwYXJhbSBjYWxsZXJOYW1lIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgY2FsbGVyTmFtZS5cbiAgICAgKiBAcGFyYW0gbG9zdENhbGxJbmQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBsb3N0Q2FsbEluZC5cbiAgICAgKiBAcGFyYW0gYXZhaWxhYmxlRm9yQ2FsbGJhY2tJbmQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBhdmFpbGFibGVGb3JDYWxsYmFja0luZC5cbiAgICAgKiBAcGFyYW0gcHVibGljUmVwb3J0VHlwZUNvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBwdWJsaWNSZXBvcnRUeXBlQ29kZS5cbiAgICAgKiBAcGFyYW0gZmlyZVNpemVDb21wYXJpc2lvbkNvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBmaXJlU2l6ZUNvbXBhcmlzaW9uQ29kZS5cbiAgICAgKiBAcGFyYW0gcmF0ZU9mU3ByZWFkQ29kZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHJhdGVPZlNwcmVhZENvZGUuXG4gICAgICogQHBhcmFtIHNtb2tlQ29sb3VyQ29kZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHNtb2tlQ29sb3VyQ29kZS5cbiAgICAgKiBAcGFyYW0gc3VibWl0dGVkQXNPZlRpbWVzdGFtcCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHN1Ym1pdHRlZEFzT2ZUaW1lc3RhbXAuXG4gICAgICogQHBhcmFtIGluY2lkZW50V2lsZGZpcmVZZWFyIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgaW5jaWRlbnRXaWxkZmlyZVllYXIuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlLlxuICAgICAqIEBwYXJhbSByZWxheWVkSW5kIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcmVsYXllZEluZC5cbiAgICAgKiBAcGFyYW0gbGFzdFN0YXRlQ2hhbmdlQXNPZlRpbWVzdGFtcCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGxhc3RTdGF0ZUNoYW5nZUFzT2ZUaW1lc3RhbXAuXG4gICAgICogQHBhcmFtIHBhZ2VOdW1iZXIgVGhlIHBhZ2UgbnVtYmVyIG9mIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBwYWdlUm93Q291bnQgVGhlIG51bWJlciBvZiByZXN1bHRzIHBlciBwYWdlLlxuICAgICAqIEBwYXJhbSBvcmRlckJ5IENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIG9yZGVyIHRoZSByZXN1bHQgc2V0IGJ5LlxuICAgICAqIEBwYXJhbSBleHBhbmQgVGhlIGxldmVsIG9mIGNoaWxkIHJlc291cmNlcyB0byBsb2FkLiBaZXJvIGZvciBubyBjaGlsZCByZXNvdXJjZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFNpbXBsZVJlcG9ydE9mRmlyZUxpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHNlYXJjaFRleHQ/OiBBcnJheTxzdHJpbmc+LCBtZXNzYWdlU3RhdHVzQ29kZT86IEFycmF5PHN0cmluZz4sIHJlcG9ydE9mRmlyZU51bWJlcj86IEFycmF5PHN0cmluZz4sIHdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGludGVyZmFjZUZpcmVJbmQ/OiBzdHJpbmcsIG1pbmltdW1SZXBvcnRlZERhdGU/OiBzdHJpbmcsIHJlcG9ydGVkQnlOYW1lPzogQXJyYXk8c3RyaW5nPiwgcmVjZWl2ZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIHJlY2VpdmVkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIGFja25vd2xlZGdlZEJ5VXNlcklkPzogQXJyYXk8c3RyaW5nPiwgYWNrbm93bGVkZ2VkQnlVc2VyR3VpZD86IEFycmF5PHN0cmluZz4sIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHpvbmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHJlcG9ydGVkQnlQYXJ0eU5hbWU/OiBBcnJheTxzdHJpbmc+LCBjYWxsZXJOYW1lPzogQXJyYXk8c3RyaW5nPiwgbG9zdENhbGxJbmQ/OiBzdHJpbmcsIGF2YWlsYWJsZUZvckNhbGxiYWNrSW5kPzogc3RyaW5nLCBwdWJsaWNSZXBvcnRUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIGZpcmVTaXplQ29tcGFyaXNpb25Db2RlPzogQXJyYXk8c3RyaW5nPiwgcmF0ZU9mU3ByZWFkQ29kZT86IEFycmF5PHN0cmluZz4sIHNtb2tlQ29sb3VyQ29kZT86IEFycmF5PHN0cmluZz4sIHN1Ym1pdHRlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIGluY2lkZW50V2lsZGZpcmVZZWFyPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZT86IEFycmF5PHN0cmluZz4sIHJlbGF5ZWRJbmQ/OiBzdHJpbmcsIGxhc3RTdGF0ZUNoYW5nZUFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8U2ltcGxlUmVwb3J0T2ZGaXJlTGlzdFJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0U2ltcGxlUmVwb3J0T2ZGaXJlTGlzdChyZXN0VmVyc2lvbj86IG51bWJlciwgc2VhcmNoVGV4dD86IEFycmF5PHN0cmluZz4sIG1lc3NhZ2VTdGF0dXNDb2RlPzogQXJyYXk8c3RyaW5nPiwgcmVwb3J0T2ZGaXJlTnVtYmVyPzogQXJyYXk8c3RyaW5nPiwgd2lsZGZpcmVZZWFyPzogQXJyYXk8c3RyaW5nPiwgaW50ZXJmYWNlRmlyZUluZD86IHN0cmluZywgbWluaW11bVJlcG9ydGVkRGF0ZT86IHN0cmluZywgcmVwb3J0ZWRCeU5hbWU/OiBBcnJheTxzdHJpbmc+LCByZWNlaXZlZEJ5VXNlcklkPzogQXJyYXk8c3RyaW5nPiwgcmVjZWl2ZWRCeVVzZXJHdWlkPzogQXJyYXk8c3RyaW5nPiwgYWNrbm93bGVkZ2VkQnlVc2VySWQ/OiBBcnJheTxzdHJpbmc+LCBhY2tub3dsZWRnZWRCeVVzZXJHdWlkPzogQXJyYXk8c3RyaW5nPiwgZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyPzogQXJyYXk8c3RyaW5nPiwgem9uZU9yZ1VuaXRJZGVudGlmaWVyPzogQXJyYXk8c3RyaW5nPiwgcmVwb3J0ZWRCeVBhcnR5TmFtZT86IEFycmF5PHN0cmluZz4sIGNhbGxlck5hbWU/OiBBcnJheTxzdHJpbmc+LCBsb3N0Q2FsbEluZD86IHN0cmluZywgYXZhaWxhYmxlRm9yQ2FsbGJhY2tJbmQ/OiBzdHJpbmcsIHB1YmxpY1JlcG9ydFR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgZmlyZVNpemVDb21wYXJpc2lvbkNvZGU/OiBBcnJheTxzdHJpbmc+LCByYXRlT2ZTcHJlYWRDb2RlPzogQXJyYXk8c3RyaW5nPiwgc21va2VDb2xvdXJDb2RlPzogQXJyYXk8c3RyaW5nPiwgc3VibWl0dGVkQXNPZlRpbWVzdGFtcD86IHN0cmluZywgaW5jaWRlbnRXaWxkZmlyZVllYXI/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudE51bWJlclNlcXVlbmNlPzogQXJyYXk8c3RyaW5nPiwgcmVsYXllZEluZD86IHN0cmluZywgbGFzdFN0YXRlQ2hhbmdlQXNPZlRpbWVzdGFtcD86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFNpbXBsZVJlcG9ydE9mRmlyZUxpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRTaW1wbGVSZXBvcnRPZkZpcmVMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0PzogQXJyYXk8c3RyaW5nPiwgbWVzc2FnZVN0YXR1c0NvZGU/OiBBcnJheTxzdHJpbmc+LCByZXBvcnRPZkZpcmVOdW1iZXI/OiBBcnJheTxzdHJpbmc+LCB3aWxkZmlyZVllYXI/OiBBcnJheTxzdHJpbmc+LCBpbnRlcmZhY2VGaXJlSW5kPzogc3RyaW5nLCBtaW5pbXVtUmVwb3J0ZWREYXRlPzogc3RyaW5nLCByZXBvcnRlZEJ5TmFtZT86IEFycmF5PHN0cmluZz4sIHJlY2VpdmVkQnlVc2VySWQ/OiBBcnJheTxzdHJpbmc+LCByZWNlaXZlZEJ5VXNlckd1aWQ/OiBBcnJheTxzdHJpbmc+LCBhY2tub3dsZWRnZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIGFja25vd2xlZGdlZEJ5VXNlckd1aWQ/OiBBcnJheTxzdHJpbmc+LCBmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCB6b25lT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCByZXBvcnRlZEJ5UGFydHlOYW1lPzogQXJyYXk8c3RyaW5nPiwgY2FsbGVyTmFtZT86IEFycmF5PHN0cmluZz4sIGxvc3RDYWxsSW5kPzogc3RyaW5nLCBhdmFpbGFibGVGb3JDYWxsYmFja0luZD86IHN0cmluZywgcHVibGljUmVwb3J0VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBmaXJlU2l6ZUNvbXBhcmlzaW9uQ29kZT86IEFycmF5PHN0cmluZz4sIHJhdGVPZlNwcmVhZENvZGU/OiBBcnJheTxzdHJpbmc+LCBzbW9rZUNvbG91ckNvZGU/OiBBcnJheTxzdHJpbmc+LCBzdWJtaXR0ZWRBc09mVGltZXN0YW1wPzogc3RyaW5nLCBpbmNpZGVudFdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TnVtYmVyU2VxdWVuY2U/OiBBcnJheTxzdHJpbmc+LCByZWxheWVkSW5kPzogc3RyaW5nLCBsYXN0U3RhdGVDaGFuZ2VBc09mVGltZXN0YW1wPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFNpbXBsZVJlcG9ydE9mRmlyZUxpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRTaW1wbGVSZXBvcnRPZkZpcmVMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0PzogQXJyYXk8c3RyaW5nPiwgbWVzc2FnZVN0YXR1c0NvZGU/OiBBcnJheTxzdHJpbmc+LCByZXBvcnRPZkZpcmVOdW1iZXI/OiBBcnJheTxzdHJpbmc+LCB3aWxkZmlyZVllYXI/OiBBcnJheTxzdHJpbmc+LCBpbnRlcmZhY2VGaXJlSW5kPzogc3RyaW5nLCBtaW5pbXVtUmVwb3J0ZWREYXRlPzogc3RyaW5nLCByZXBvcnRlZEJ5TmFtZT86IEFycmF5PHN0cmluZz4sIHJlY2VpdmVkQnlVc2VySWQ/OiBBcnJheTxzdHJpbmc+LCByZWNlaXZlZEJ5VXNlckd1aWQ/OiBBcnJheTxzdHJpbmc+LCBhY2tub3dsZWRnZWRCeVVzZXJJZD86IEFycmF5PHN0cmluZz4sIGFja25vd2xlZGdlZEJ5VXNlckd1aWQ/OiBBcnJheTxzdHJpbmc+LCBmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCB6b25lT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCByZXBvcnRlZEJ5UGFydHlOYW1lPzogQXJyYXk8c3RyaW5nPiwgY2FsbGVyTmFtZT86IEFycmF5PHN0cmluZz4sIGxvc3RDYWxsSW5kPzogc3RyaW5nLCBhdmFpbGFibGVGb3JDYWxsYmFja0luZD86IHN0cmluZywgcHVibGljUmVwb3J0VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBmaXJlU2l6ZUNvbXBhcmlzaW9uQ29kZT86IEFycmF5PHN0cmluZz4sIHJhdGVPZlNwcmVhZENvZGU/OiBBcnJheTxzdHJpbmc+LCBzbW9rZUNvbG91ckNvZGU/OiBBcnJheTxzdHJpbmc+LCBzdWJtaXR0ZWRBc09mVGltZXN0YW1wPzogc3RyaW5nLCBpbmNpZGVudFdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TnVtYmVyU2VxdWVuY2U/OiBBcnJheTxzdHJpbmc+LCByZWxheWVkSW5kPzogc3RyaW5nLCBsYXN0U3RhdGVDaGFuZ2VBc09mVGltZXN0YW1wPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChzZWFyY2hUZXh0KSB7XG4gICAgICAgICAgICBzZWFyY2hUZXh0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdzZWFyY2hUZXh0Jyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlU3RhdHVzQ29kZSkge1xuICAgICAgICAgICAgbWVzc2FnZVN0YXR1c0NvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ21lc3NhZ2VTdGF0dXNDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnRPZkZpcmVOdW1iZXIpIHtcbiAgICAgICAgICAgIHJlcG9ydE9mRmlyZU51bWJlci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAncmVwb3J0T2ZGaXJlTnVtYmVyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIpIHtcbiAgICAgICAgICAgIHdpbGRmaXJlWWVhci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnd2lsZGZpcmVZZWFyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcmZhY2VGaXJlSW5kICE9PSB1bmRlZmluZWQgJiYgaW50ZXJmYWNlRmlyZUluZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+aW50ZXJmYWNlRmlyZUluZCwgJ2ludGVyZmFjZUZpcmVJbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWluaW11bVJlcG9ydGVkRGF0ZSAhPT0gdW5kZWZpbmVkICYmIG1pbmltdW1SZXBvcnRlZERhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pm1pbmltdW1SZXBvcnRlZERhdGUsICdtaW5pbXVtUmVwb3J0ZWREYXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydGVkQnlOYW1lKSB7XG4gICAgICAgICAgICByZXBvcnRlZEJ5TmFtZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAncmVwb3J0ZWRCeU5hbWUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlY2VpdmVkQnlVc2VySWQpIHtcbiAgICAgICAgICAgIHJlY2VpdmVkQnlVc2VySWQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3JlY2VpdmVkQnlVc2VySWQnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlY2VpdmVkQnlVc2VyR3VpZCkge1xuICAgICAgICAgICAgcmVjZWl2ZWRCeVVzZXJHdWlkLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdyZWNlaXZlZEJ5VXNlckd1aWQnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFja25vd2xlZGdlZEJ5VXNlcklkKSB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWRCeVVzZXJJZC5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnYWNrbm93bGVkZ2VkQnlVc2VySWQnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFja25vd2xlZGdlZEJ5VXNlckd1aWQpIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZEJ5VXNlckd1aWQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2Fja25vd2xlZGdlZEJ5VXNlckd1aWQnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcikge1xuICAgICAgICAgICAgZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXInKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHpvbmVPcmdVbml0SWRlbnRpZmllcikge1xuICAgICAgICAgICAgem9uZU9yZ1VuaXRJZGVudGlmaWVyLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICd6b25lT3JnVW5pdElkZW50aWZpZXInKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydGVkQnlQYXJ0eU5hbWUpIHtcbiAgICAgICAgICAgIHJlcG9ydGVkQnlQYXJ0eU5hbWUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3JlcG9ydGVkQnlQYXJ0eU5hbWUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxlck5hbWUpIHtcbiAgICAgICAgICAgIGNhbGxlck5hbWUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2NhbGxlck5hbWUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvc3RDYWxsSW5kICE9PSB1bmRlZmluZWQgJiYgbG9zdENhbGxJbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pmxvc3RDYWxsSW5kLCAnbG9zdENhbGxJbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXZhaWxhYmxlRm9yQ2FsbGJhY2tJbmQgIT09IHVuZGVmaW5lZCAmJiBhdmFpbGFibGVGb3JDYWxsYmFja0luZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+YXZhaWxhYmxlRm9yQ2FsbGJhY2tJbmQsICdhdmFpbGFibGVGb3JDYWxsYmFja0luZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwdWJsaWNSZXBvcnRUeXBlQ29kZSkge1xuICAgICAgICAgICAgcHVibGljUmVwb3J0VHlwZUNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3B1YmxpY1JlcG9ydFR5cGVDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJlU2l6ZUNvbXBhcmlzaW9uQ29kZSkge1xuICAgICAgICAgICAgZmlyZVNpemVDb21wYXJpc2lvbkNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2ZpcmVTaXplQ29tcGFyaXNpb25Db2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChyYXRlT2ZTcHJlYWRDb2RlKSB7XG4gICAgICAgICAgICByYXRlT2ZTcHJlYWRDb2RlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdyYXRlT2ZTcHJlYWRDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChzbW9rZUNvbG91ckNvZGUpIHtcbiAgICAgICAgICAgIHNtb2tlQ29sb3VyQ29kZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnc21va2VDb2xvdXJDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJtaXR0ZWRBc09mVGltZXN0YW1wICE9PSB1bmRlZmluZWQgJiYgc3VibWl0dGVkQXNPZlRpbWVzdGFtcCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+c3VibWl0dGVkQXNPZlRpbWVzdGFtcCwgJ3N1Ym1pdHRlZEFzT2ZUaW1lc3RhbXAnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnRXaWxkZmlyZVllYXIpIHtcbiAgICAgICAgICAgIGluY2lkZW50V2lsZGZpcmVZZWFyLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdpbmNpZGVudFdpbGRmaXJlWWVhcicpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkge1xuICAgICAgICAgICAgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnaW5jaWRlbnROdW1iZXJTZXF1ZW5jZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVsYXllZEluZCAhPT0gdW5kZWZpbmVkICYmIHJlbGF5ZWRJbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnJlbGF5ZWRJbmQsICdyZWxheWVkSW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RTdGF0ZUNoYW5nZUFzT2ZUaW1lc3RhbXAgIT09IHVuZGVmaW5lZCAmJiBsYXN0U3RhdGVDaGFuZ2VBc09mVGltZXN0YW1wICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5sYXN0U3RhdGVDaGFuZ2VBc09mVGltZXN0YW1wLCAnbGFzdFN0YXRlQ2hhbmdlQXNPZlRpbWVzdGFtcCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWdlTnVtYmVyICE9PSB1bmRlZmluZWQgJiYgcGFnZU51bWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZU51bWJlciwgJ3BhZ2VOdW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZVJvd0NvdW50ICE9PSB1bmRlZmluZWQgJiYgcGFnZVJvd0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlUm93Q291bnQsICdwYWdlUm93Q291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkZXJCeSAhPT0gdW5kZWZpbmVkICYmIG9yZGVyQnkgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pm9yZGVyQnksICdvcmRlckJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cGFuZCAhPT0gdW5kZWZpbmVkICYmIGV4cGFuZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+ZXhwYW5kLCAnZXhwYW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PFNpbXBsZVJlcG9ydE9mRmlyZUxpc3RSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9zaW1wbGVSZXBvcnRPZkZpcmVzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGxpc3Qgb2YgU2ltcGxlIFdpbGRmaXJlIEluY2lkZW50cy5cbiAgICAgKiBHZXQgbGlzdCBvZiBTaW1wbGUgV2lsZGZpcmUgSW5jaWRlbnRzLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gc2VhcmNoVGV4dCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHNlYXJjaFRleHQuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHdpbGRmaXJlWWVhci5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2UuXG4gICAgICogQHBhcmFtIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllciBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllci5cbiAgICAgKiBAcGFyYW0gem9uZU9yZ1VuaXRJZGVudGlmaWVyIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgem9uZU9yZ1VuaXRJZGVudGlmaWVyLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudFN0YXR1c0NvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBpbmNpZGVudFN0YXR1c0NvZGUuXG4gICAgICogQHBhcmFtIGluY2lkZW50VHlwZUNvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBpbmNpZGVudFR5cGVDb2RlLlxuICAgICAqIEBwYXJhbSBzdGFnZU9mQ29udHJvbENvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBzdGFnZU9mQ29udHJvbENvZGUuXG4gICAgICogQHBhcmFtIHJlc3BvbnNlVHlwZUNvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSByZXNwb25zZVR5cGVDb2RlLlxuICAgICAqIEBwYXJhbSBzdXNwZWN0ZWRDYXVzZUNhdGVnb3J5Q29kZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHN1c3BlY3RlZENhdXNlQ2F0ZWdvcnlDb2RlLlxuICAgICAqIEBwYXJhbSBsYXN0VXBkYXRlZEFzT2ZUaW1lc3RhbXAgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBsYXN0VXBkYXRlZEFzT2ZUaW1lc3RhbXAuXG4gICAgICogQHBhcmFtIHBhZ2VOdW1iZXIgVGhlIHBhZ2UgbnVtYmVyIG9mIHRoZSByZXN1bHRzIHRvIGJlIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBwYWdlUm93Q291bnQgVGhlIG51bWJlciBvZiByZXN1bHRzIHBlciBwYWdlLlxuICAgICAqIEBwYXJhbSBvcmRlckJ5IENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIG9yZGVyIHRoZSByZXN1bHQgc2V0IGJ5LlxuICAgICAqIEBwYXJhbSBleHBhbmQgVGhlIGxldmVsIG9mIGNoaWxkIHJlc291cmNlcyB0byBsb2FkLiBaZXJvIGZvciBubyBjaGlsZCByZXNvdXJjZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFNpbXBsZVdpbGRmaXJlSW5jaWRlbnRMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0PzogQXJyYXk8c3RyaW5nPiwgd2lsZGZpcmVZZWFyPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZT86IEFycmF5PHN0cmluZz4sIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHpvbmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50U3RhdHVzQ29kZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBzdGFnZU9mQ29udHJvbENvZGU/OiBBcnJheTxzdHJpbmc+LCByZXNwb25zZVR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgc3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGU/OiBBcnJheTxzdHJpbmc+LCBsYXN0VXBkYXRlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8U2ltcGxlV2lsZGZpcmVJbmNpZGVudExpc3RSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFNpbXBsZVdpbGRmaXJlSW5jaWRlbnRMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0PzogQXJyYXk8c3RyaW5nPiwgd2lsZGZpcmVZZWFyPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZT86IEFycmF5PHN0cmluZz4sIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHpvbmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50U3RhdHVzQ29kZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBzdGFnZU9mQ29udHJvbENvZGU/OiBBcnJheTxzdHJpbmc+LCByZXNwb25zZVR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgc3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGU/OiBBcnJheTxzdHJpbmc+LCBsYXN0VXBkYXRlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxTaW1wbGVXaWxkZmlyZUluY2lkZW50TGlzdFJlc291cmNlPj47XG4gICAgcHVibGljIGdldFNpbXBsZVdpbGRmaXJlSW5jaWRlbnRMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0PzogQXJyYXk8c3RyaW5nPiwgd2lsZGZpcmVZZWFyPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZT86IEFycmF5PHN0cmluZz4sIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHpvbmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50U3RhdHVzQ29kZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBzdGFnZU9mQ29udHJvbENvZGU/OiBBcnJheTxzdHJpbmc+LCByZXNwb25zZVR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgc3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGU/OiBBcnJheTxzdHJpbmc+LCBsYXN0VXBkYXRlZEFzT2ZUaW1lc3RhbXA/OiBzdHJpbmcsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8U2ltcGxlV2lsZGZpcmVJbmNpZGVudExpc3RSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRTaW1wbGVXaWxkZmlyZUluY2lkZW50TGlzdChyZXN0VmVyc2lvbj86IG51bWJlciwgc2VhcmNoVGV4dD86IEFycmF5PHN0cmluZz4sIHdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TnVtYmVyU2VxdWVuY2U/OiBBcnJheTxzdHJpbmc+LCBmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCB6b25lT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudFN0YXR1c0NvZGU/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudFR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgc3RhZ2VPZkNvbnRyb2xDb2RlPzogQXJyYXk8c3RyaW5nPiwgcmVzcG9uc2VUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIHN1c3BlY3RlZENhdXNlQ2F0ZWdvcnlDb2RlPzogQXJyYXk8c3RyaW5nPiwgbGFzdFVwZGF0ZWRBc09mVGltZXN0YW1wPzogc3RyaW5nLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChzZWFyY2hUZXh0KSB7XG4gICAgICAgICAgICBzZWFyY2hUZXh0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdzZWFyY2hUZXh0Jyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIpIHtcbiAgICAgICAgICAgIHdpbGRmaXJlWWVhci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnd2lsZGZpcmVZZWFyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE51bWJlclNlcXVlbmNlKSB7XG4gICAgICAgICAgICBpbmNpZGVudE51bWJlclNlcXVlbmNlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdpbmNpZGVudE51bWJlclNlcXVlbmNlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmICh6b25lT3JnVW5pdElkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIHpvbmVPcmdVbml0SWRlbnRpZmllci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnem9uZU9yZ1VuaXRJZGVudGlmaWVyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudFN0YXR1c0NvZGUpIHtcbiAgICAgICAgICAgIGluY2lkZW50U3RhdHVzQ29kZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnaW5jaWRlbnRTdGF0dXNDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudFR5cGVDb2RlKSB7XG4gICAgICAgICAgICBpbmNpZGVudFR5cGVDb2RlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdpbmNpZGVudFR5cGVDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFnZU9mQ29udHJvbENvZGUpIHtcbiAgICAgICAgICAgIHN0YWdlT2ZDb250cm9sQ29kZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnc3RhZ2VPZkNvbnRyb2xDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZVR5cGVDb2RlKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGVDb2RlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdyZXNwb25zZVR5cGVDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdXNwZWN0ZWRDYXVzZUNhdGVnb3J5Q29kZSkge1xuICAgICAgICAgICAgc3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3N1c3BlY3RlZENhdXNlQ2F0ZWdvcnlDb2RlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0VXBkYXRlZEFzT2ZUaW1lc3RhbXAgIT09IHVuZGVmaW5lZCAmJiBsYXN0VXBkYXRlZEFzT2ZUaW1lc3RhbXAgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pmxhc3RVcGRhdGVkQXNPZlRpbWVzdGFtcCwgJ2xhc3RVcGRhdGVkQXNPZlRpbWVzdGFtcCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWdlTnVtYmVyICE9PSB1bmRlZmluZWQgJiYgcGFnZU51bWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZU51bWJlciwgJ3BhZ2VOdW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZVJvd0NvdW50ICE9PSB1bmRlZmluZWQgJiYgcGFnZVJvd0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlUm93Q291bnQsICdwYWdlUm93Q291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkZXJCeSAhPT0gdW5kZWZpbmVkICYmIG9yZGVyQnkgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pm9yZGVyQnksICdvcmRlckJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cGFuZCAhPT0gdW5kZWZpbmVkICYmIGV4cGFuZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+ZXhwYW5kLCAnZXhwYW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PFNpbXBsZVdpbGRmaXJlSW5jaWRlbnRMaXN0UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vc2ltcGxlV2lsZGZpcmVJbmNpZGVudHNgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgVG9wIExldmVsIFJlc291cmNlcy5cbiAgICAgKiBHZXQgVG9wIExldmVsIFJlc291cmNlc1xuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VG9wTGV2ZWwocmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxFbmRwb2ludHNSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFRvcExldmVsKHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxFbmRwb2ludHNSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRUb3BMZXZlbChyZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEVuZHBvaW50c1Jlc291cmNlPj47XG4gICAgcHVibGljIGdldFRvcExldmVsKHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxFbmRwb2ludHNSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIFdpbGRmaXJlIEluY2lkZW50IGJ5IEV4dGVybmFsIElELlxuICAgICAqIEdldCB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgYnkgRXh0ZXJuYWwgSUQuXG4gICAgICogQHBhcmFtIGV4dGVybmFsSWQgVGhlIGV4dGVybmFsSWQgb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudChleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8V2lsZGZpcmVJbmNpZGVudFJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudChleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudChleHRlcm5hbElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8V2lsZGZpcmVJbmNpZGVudFJlc291cmNlPj47XG4gICAgcHVibGljIGdldFdpbGRmaXJlSW5jaWRlbnQoZXh0ZXJuYWxJZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoZXh0ZXJuYWxJZCA9PT0gbnVsbCB8fCBleHRlcm5hbElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGV4dGVybmFsSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRXaWxkZmlyZUluY2lkZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzL2V4dGVybmFsSWQvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGV4dGVybmFsSWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIFdpbGRmaXJlIEluY2lkZW50IGJ5IElELlxuICAgICAqIEdldCB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgYnkgSUQuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBUaGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRXaWxkZmlyZUluY2lkZW50MSh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFdpbGRmaXJlSW5jaWRlbnQxKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudDEod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudDEod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0V2lsZGZpcmVJbmNpZGVudDEuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0V2lsZGZpcmVJbmNpZGVudDEuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgYnkgSW5jaWRlbnQgR1VJRC5cbiAgICAgKiBHZXQgdGhlIFdpbGRmaXJlIEluY2lkZW50IGJ5IEluY2lkZW50IEdVSUQuXG4gICAgICogQHBhcmFtIGluY2lkZW50R3VpZCBUaGUgaW5jaWRlbnRHdWlkIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFdpbGRmaXJlSW5jaWRlbnRCeUluY2lkZW50R3VpZChpbmNpZGVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyBnZXRXaWxkZmlyZUluY2lkZW50QnlJbmNpZGVudEd1aWQoaW5jaWRlbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudEJ5SW5jaWRlbnRHdWlkKGluY2lkZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBnZXRXaWxkZmlyZUluY2lkZW50QnlJbmNpZGVudEd1aWQoaW5jaWRlbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChpbmNpZGVudEd1aWQgPT09IG51bGwgfHwgaW5jaWRlbnRHdWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50R3VpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFdpbGRmaXJlSW5jaWRlbnRCeUluY2lkZW50R3VpZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8V2lsZGZpcmVJbmNpZGVudFJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnRHdWlkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGxpc3Qgb2YgV2lsZGZpcmUgSW5jaWRlbnRzLlxuICAgICAqIEdldCBsaXN0IG9mIFdpbGRmaXJlIEluY2lkZW50cy5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIHNlYXJjaFRleHQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBzZWFyY2hUZXh0LlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSB3aWxkZmlyZVllYXIuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudElkIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgaW5jaWRlbnRJZC5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROYW1lIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgaW5jaWRlbnROYW1lLlxuICAgICAqIEBwYXJhbSBjbGFpbUV4cGVjdGVkSW5kIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgY2xhaW1FeHBlY3RlZEluZC5cbiAgICAgKiBAcGFyYW0gcmVoYWJpbGl0YXRpb25QbGFuUmVxdWlyZWRJbmQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSByZWhhYmlsaXRhdGlvblBsYW5SZXF1aXJlZEluZC5cbiAgICAgKiBAcGFyYW0gcGFwZXJUcmFpbGVkSW5kIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcGFwZXJUcmFpbGVkSW5kLlxuICAgICAqIEBwYXJhbSBmaWVsZFBob3RvSW5kIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgZmllbGRQaG90b0luZC5cbiAgICAgKiBAcGFyYW0gZmluYWxSZXBvcnRDb21wbGV0ZUluZCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGZpbmFsUmVwb3J0Q29tcGxldGVJbmQuXG4gICAgICogQHBhcmFtIGluY2lkZW50Q29tbWFuZGVyTmFtZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGluY2lkZW50Q29tbWFuZGVyTmFtZS5cbiAgICAgKiBAcGFyYW0gc2lnbm9mZlNpZ25hdHVyZUluZCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHNpZ25vZmZTaWduYXR1cmVJbmQuXG4gICAgICogQHBhcmFtIGFnZW5jeUFzc2lzdGFuY2VUYXNrSWRlbnRpZmllciBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGFnZW5jeUFzc2lzdGFuY2VUYXNrSWRlbnRpZmllci5cbiAgICAgKiBAcGFyYW0gYXBwcm92YWxTaWduYXR1cmVOYW1lIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgYXBwcm92YWxTaWduYXR1cmVOYW1lLlxuICAgICAqIEBwYXJhbSBhcHByb3ZhbFNpZ25hdHVyZUluZCBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGFwcHJvdmFsU2lnbmF0dXJlSW5kLlxuICAgICAqIEBwYXJhbSBmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXIgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXIuXG4gICAgICogQHBhcmFtIHpvbmVPcmdVbml0SWRlbnRpZmllciBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHpvbmVPcmdVbml0SWRlbnRpZmllci5cbiAgICAgKiBAcGFyYW0gZGV0ZWN0aW9uU291cmNlQ29kZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGRldGVjdGlvblNvdXJjZUNvZGUuXG4gICAgICogQHBhcmFtIGZpcmVDbGFzc2lmaWNhdGlvbkNvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBmaXJlQ2xhc3NpZmljYXRpb25Db2RlLlxuICAgICAqIEBwYXJhbSBhZ2VuY3lBc3Npc3RUeXBlQ29kZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGFnZW5jeUFzc2lzdFR5cGVDb2RlLlxuICAgICAqIEBwYXJhbSByZXNwb25zZVR5cGVDb2RlIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcmVzcG9uc2VUeXBlQ29kZS5cbiAgICAgKiBAcGFyYW0gYXNzaXN0aW5nUGFydHlOYW1lIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgYXNzaXN0aW5nUGFydHlOYW1lLlxuICAgICAqIEBwYXJhbSBkaXNjb3ZlcmVkQnlQYXJ0eU5hbWUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBkaXNjb3ZlcmVkQnlQYXJ0eU5hbWUuXG4gICAgICogQHBhcmFtIGZpcnN0QWN0aW9uZWRCeVBhcnR5TmFtZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGZpcnN0QWN0aW9uZWRCeVBhcnR5TmFtZS5cbiAgICAgKiBAcGFyYW0gbGVhZEJ5UGFydHlOYW1lIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgbGVhZEJ5UGFydHlOYW1lLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudFN0YXR1c0NvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBpbmNpZGVudFN0YXR1c0NvZGUuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyTGFiZWwgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBpbmNpZGVudE51bWJlckxhYmVsLlxuICAgICAqIEBwYXJhbSBwcm9iYWJpbGl0eU9mSW5pdGlhbEF0dGFja1N1Y2Nlc3NDb2RlIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgcHJvYmFiaWxpdHlPZkluaXRpYWxBdHRhY2tTdWNjZXNzQ29kZS5cbiAgICAgKiBAcGFyYW0gc3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBzdXNwZWN0ZWRDYXVzZUNhdGVnb3J5Q29kZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnRDYXRlZ29yeUNvZGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBpbmNpZGVudENhdGVnb3J5Q29kZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnRUeXBlQ29kZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIGluY2lkZW50VHlwZUNvZGUuXG4gICAgICogQHBhcmFtIGZpcmVPZk5vdGVQdWJsaXNoZWRJbmQgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBmaXJlT2ZOb3RlUHVibGlzaGVkSW5kLlxuICAgICAqIEBwYXJhbSB3YXNGaXJlT2ZOb3RlUHVibGlzaGVkSW5kIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgd2FzRmlyZU9mTm90ZVB1Ymxpc2hlZEluZC5cbiAgICAgKiBAcGFyYW0gc3RhZ2VPZkNvbnRyb2xDb2RlIEZpbHRlciB0aGUgcmVzdWx0cyBieSB0aGUgc3RhZ2VPZkNvbnRyb2xDb2RlLlxuICAgICAqIEBwYXJhbSBwYWdlTnVtYmVyIFRoZSBwYWdlIG51bWJlciBvZiB0aGUgcmVzdWx0cyB0byBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gcGFnZVJvd0NvdW50IFRoZSBudW1iZXIgb2YgcmVzdWx0cyBwZXIgcGFnZS5cbiAgICAgKiBAcGFyYW0gb3JkZXJCeSBDb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyB0byBvcmRlciB0aGUgcmVzdWx0IHNldCBieS5cbiAgICAgKiBAcGFyYW0gZXhwYW5kIFRoZSBsZXZlbCBvZiBjaGlsZCByZXNvdXJjZXMgdG8gbG9hZC4gWmVybyBmb3Igbm8gY2hpbGQgcmVzb3VyY2VzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRXaWxkZmlyZUluY2lkZW50TGlzdChyZXN0VmVyc2lvbj86IG51bWJlciwgc2VhcmNoVGV4dD86IEFycmF5PHN0cmluZz4sIHdpbGRmaXJlWWVhcj86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TnVtYmVyU2VxdWVuY2U/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudElkPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnROYW1lPzogQXJyYXk8c3RyaW5nPiwgY2xhaW1FeHBlY3RlZEluZD86IHN0cmluZywgcmVoYWJpbGl0YXRpb25QbGFuUmVxdWlyZWRJbmQ/OiBzdHJpbmcsIHBhcGVyVHJhaWxlZEluZD86IHN0cmluZywgZmllbGRQaG90b0luZD86IHN0cmluZywgZmluYWxSZXBvcnRDb21wbGV0ZUluZD86IHN0cmluZywgaW5jaWRlbnRDb21tYW5kZXJOYW1lPzogQXJyYXk8c3RyaW5nPiwgc2lnbm9mZlNpZ25hdHVyZUluZD86IHN0cmluZywgYWdlbmN5QXNzaXN0YW5jZVRhc2tJZGVudGlmaWVyPzogQXJyYXk8c3RyaW5nPiwgYXBwcm92YWxTaWduYXR1cmVOYW1lPzogQXJyYXk8c3RyaW5nPiwgYXBwcm92YWxTaWduYXR1cmVJbmQ/OiBzdHJpbmcsIGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIHpvbmVPcmdVbml0SWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIGRldGVjdGlvblNvdXJjZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBmaXJlQ2xhc3NpZmljYXRpb25Db2RlPzogQXJyYXk8c3RyaW5nPiwgYWdlbmN5QXNzaXN0VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCByZXNwb25zZVR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgYXNzaXN0aW5nUGFydHlOYW1lPzogQXJyYXk8c3RyaW5nPiwgZGlzY292ZXJlZEJ5UGFydHlOYW1lPzogQXJyYXk8c3RyaW5nPiwgZmlyc3RBY3Rpb25lZEJ5UGFydHlOYW1lPzogQXJyYXk8c3RyaW5nPiwgbGVhZEJ5UGFydHlOYW1lPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnRTdGF0dXNDb2RlPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnROdW1iZXJMYWJlbD86IEFycmF5PHN0cmluZz4sIHByb2JhYmlsaXR5T2ZJbml0aWFsQXR0YWNrU3VjY2Vzc0NvZGU/OiBBcnJheTxzdHJpbmc+LCBzdXNwZWN0ZWRDYXVzZUNhdGVnb3J5Q29kZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50Q2F0ZWdvcnlDb2RlPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnRUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIGZpcmVPZk5vdGVQdWJsaXNoZWRJbmQ/OiBzdHJpbmcsIHdhc0ZpcmVPZk5vdGVQdWJsaXNoZWRJbmQ/OiBzdHJpbmcsIHN0YWdlT2ZDb250cm9sQ29kZT86IEFycmF5PHN0cmluZz4sIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8V2lsZGZpcmVJbmNpZGVudExpc3RSZXNvdXJjZT47XG4gICAgcHVibGljIGdldFdpbGRmaXJlSW5jaWRlbnRMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBzZWFyY2hUZXh0PzogQXJyYXk8c3RyaW5nPiwgd2lsZGZpcmVZZWFyPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50SWQ/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudE5hbWU/OiBBcnJheTxzdHJpbmc+LCBjbGFpbUV4cGVjdGVkSW5kPzogc3RyaW5nLCByZWhhYmlsaXRhdGlvblBsYW5SZXF1aXJlZEluZD86IHN0cmluZywgcGFwZXJUcmFpbGVkSW5kPzogc3RyaW5nLCBmaWVsZFBob3RvSW5kPzogc3RyaW5nLCBmaW5hbFJlcG9ydENvbXBsZXRlSW5kPzogc3RyaW5nLCBpbmNpZGVudENvbW1hbmRlck5hbWU/OiBBcnJheTxzdHJpbmc+LCBzaWdub2ZmU2lnbmF0dXJlSW5kPzogc3RyaW5nLCBhZ2VuY3lBc3Npc3RhbmNlVGFza0lkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCBhcHByb3ZhbFNpZ25hdHVyZU5hbWU/OiBBcnJheTxzdHJpbmc+LCBhcHByb3ZhbFNpZ25hdHVyZUluZD86IHN0cmluZywgZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyPzogQXJyYXk8c3RyaW5nPiwgem9uZU9yZ1VuaXRJZGVudGlmaWVyPzogQXJyYXk8c3RyaW5nPiwgZGV0ZWN0aW9uU291cmNlQ29kZT86IEFycmF5PHN0cmluZz4sIGZpcmVDbGFzc2lmaWNhdGlvbkNvZGU/OiBBcnJheTxzdHJpbmc+LCBhZ2VuY3lBc3Npc3RUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIHJlc3BvbnNlVHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBhc3Npc3RpbmdQYXJ0eU5hbWU/OiBBcnJheTxzdHJpbmc+LCBkaXNjb3ZlcmVkQnlQYXJ0eU5hbWU/OiBBcnJheTxzdHJpbmc+LCBmaXJzdEFjdGlvbmVkQnlQYXJ0eU5hbWU/OiBBcnJheTxzdHJpbmc+LCBsZWFkQnlQYXJ0eU5hbWU/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudFN0YXR1c0NvZGU/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudE51bWJlckxhYmVsPzogQXJyYXk8c3RyaW5nPiwgcHJvYmFiaWxpdHlPZkluaXRpYWxBdHRhY2tTdWNjZXNzQ29kZT86IEFycmF5PHN0cmluZz4sIHN1c3BlY3RlZENhdXNlQ2F0ZWdvcnlDb2RlPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnRDYXRlZ29yeUNvZGU/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudFR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgZmlyZU9mTm90ZVB1Ymxpc2hlZEluZD86IHN0cmluZywgd2FzRmlyZU9mTm90ZVB1Ymxpc2hlZEluZD86IHN0cmluZywgc3RhZ2VPZkNvbnRyb2xDb2RlPzogQXJyYXk8c3RyaW5nPiwgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFdpbGRmaXJlSW5jaWRlbnRMaXN0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudExpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHNlYXJjaFRleHQ/OiBBcnJheTxzdHJpbmc+LCB3aWxkZmlyZVllYXI/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudE51bWJlclNlcXVlbmNlPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnRJZD86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TmFtZT86IEFycmF5PHN0cmluZz4sIGNsYWltRXhwZWN0ZWRJbmQ/OiBzdHJpbmcsIHJlaGFiaWxpdGF0aW9uUGxhblJlcXVpcmVkSW5kPzogc3RyaW5nLCBwYXBlclRyYWlsZWRJbmQ/OiBzdHJpbmcsIGZpZWxkUGhvdG9JbmQ/OiBzdHJpbmcsIGZpbmFsUmVwb3J0Q29tcGxldGVJbmQ/OiBzdHJpbmcsIGluY2lkZW50Q29tbWFuZGVyTmFtZT86IEFycmF5PHN0cmluZz4sIHNpZ25vZmZTaWduYXR1cmVJbmQ/OiBzdHJpbmcsIGFnZW5jeUFzc2lzdGFuY2VUYXNrSWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIGFwcHJvdmFsU2lnbmF0dXJlTmFtZT86IEFycmF5PHN0cmluZz4sIGFwcHJvdmFsU2lnbmF0dXJlSW5kPzogc3RyaW5nLCBmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCB6b25lT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCBkZXRlY3Rpb25Tb3VyY2VDb2RlPzogQXJyYXk8c3RyaW5nPiwgZmlyZUNsYXNzaWZpY2F0aW9uQ29kZT86IEFycmF5PHN0cmluZz4sIGFnZW5jeUFzc2lzdFR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgcmVzcG9uc2VUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIGFzc2lzdGluZ1BhcnR5TmFtZT86IEFycmF5PHN0cmluZz4sIGRpc2NvdmVyZWRCeVBhcnR5TmFtZT86IEFycmF5PHN0cmluZz4sIGZpcnN0QWN0aW9uZWRCeVBhcnR5TmFtZT86IEFycmF5PHN0cmluZz4sIGxlYWRCeVBhcnR5TmFtZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50U3RhdHVzQ29kZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TnVtYmVyTGFiZWw/OiBBcnJheTxzdHJpbmc+LCBwcm9iYWJpbGl0eU9mSW5pdGlhbEF0dGFja1N1Y2Nlc3NDb2RlPzogQXJyYXk8c3RyaW5nPiwgc3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGU/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudENhdGVnb3J5Q29kZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBmaXJlT2ZOb3RlUHVibGlzaGVkSW5kPzogc3RyaW5nLCB3YXNGaXJlT2ZOb3RlUHVibGlzaGVkSW5kPzogc3RyaW5nLCBzdGFnZU9mQ29udHJvbENvZGU/OiBBcnJheTxzdHJpbmc+LCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFdpbGRmaXJlSW5jaWRlbnRMaXN0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudExpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHNlYXJjaFRleHQ/OiBBcnJheTxzdHJpbmc+LCB3aWxkZmlyZVllYXI/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudE51bWJlclNlcXVlbmNlPzogQXJyYXk8c3RyaW5nPiwgaW5jaWRlbnRJZD86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TmFtZT86IEFycmF5PHN0cmluZz4sIGNsYWltRXhwZWN0ZWRJbmQ/OiBzdHJpbmcsIHJlaGFiaWxpdGF0aW9uUGxhblJlcXVpcmVkSW5kPzogc3RyaW5nLCBwYXBlclRyYWlsZWRJbmQ/OiBzdHJpbmcsIGZpZWxkUGhvdG9JbmQ/OiBzdHJpbmcsIGZpbmFsUmVwb3J0Q29tcGxldGVJbmQ/OiBzdHJpbmcsIGluY2lkZW50Q29tbWFuZGVyTmFtZT86IEFycmF5PHN0cmluZz4sIHNpZ25vZmZTaWduYXR1cmVJbmQ/OiBzdHJpbmcsIGFnZW5jeUFzc2lzdGFuY2VUYXNrSWRlbnRpZmllcj86IEFycmF5PHN0cmluZz4sIGFwcHJvdmFsU2lnbmF0dXJlTmFtZT86IEFycmF5PHN0cmluZz4sIGFwcHJvdmFsU2lnbmF0dXJlSW5kPzogc3RyaW5nLCBmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCB6b25lT3JnVW5pdElkZW50aWZpZXI/OiBBcnJheTxzdHJpbmc+LCBkZXRlY3Rpb25Tb3VyY2VDb2RlPzogQXJyYXk8c3RyaW5nPiwgZmlyZUNsYXNzaWZpY2F0aW9uQ29kZT86IEFycmF5PHN0cmluZz4sIGFnZW5jeUFzc2lzdFR5cGVDb2RlPzogQXJyYXk8c3RyaW5nPiwgcmVzcG9uc2VUeXBlQ29kZT86IEFycmF5PHN0cmluZz4sIGFzc2lzdGluZ1BhcnR5TmFtZT86IEFycmF5PHN0cmluZz4sIGRpc2NvdmVyZWRCeVBhcnR5TmFtZT86IEFycmF5PHN0cmluZz4sIGZpcnN0QWN0aW9uZWRCeVBhcnR5TmFtZT86IEFycmF5PHN0cmluZz4sIGxlYWRCeVBhcnR5TmFtZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50U3RhdHVzQ29kZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50TnVtYmVyTGFiZWw/OiBBcnJheTxzdHJpbmc+LCBwcm9iYWJpbGl0eU9mSW5pdGlhbEF0dGFja1N1Y2Nlc3NDb2RlPzogQXJyYXk8c3RyaW5nPiwgc3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGU/OiBBcnJheTxzdHJpbmc+LCBpbmNpZGVudENhdGVnb3J5Q29kZT86IEFycmF5PHN0cmluZz4sIGluY2lkZW50VHlwZUNvZGU/OiBBcnJheTxzdHJpbmc+LCBmaXJlT2ZOb3RlUHVibGlzaGVkSW5kPzogc3RyaW5nLCB3YXNGaXJlT2ZOb3RlUHVibGlzaGVkSW5kPzogc3RyaW5nLCBzdGFnZU9mQ29udHJvbENvZGU/OiBBcnJheTxzdHJpbmc+LCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChzZWFyY2hUZXh0KSB7XG4gICAgICAgICAgICBzZWFyY2hUZXh0LmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdzZWFyY2hUZXh0Jyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIpIHtcbiAgICAgICAgICAgIHdpbGRmaXJlWWVhci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnd2lsZGZpcmVZZWFyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE51bWJlclNlcXVlbmNlKSB7XG4gICAgICAgICAgICBpbmNpZGVudE51bWJlclNlcXVlbmNlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdpbmNpZGVudE51bWJlclNlcXVlbmNlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudElkKSB7XG4gICAgICAgICAgICBpbmNpZGVudElkLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdpbmNpZGVudElkJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE5hbWUpIHtcbiAgICAgICAgICAgIGluY2lkZW50TmFtZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnaW5jaWRlbnROYW1lJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChjbGFpbUV4cGVjdGVkSW5kICE9PSB1bmRlZmluZWQgJiYgY2xhaW1FeHBlY3RlZEluZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+Y2xhaW1FeHBlY3RlZEluZCwgJ2NsYWltRXhwZWN0ZWRJbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVoYWJpbGl0YXRpb25QbGFuUmVxdWlyZWRJbmQgIT09IHVuZGVmaW5lZCAmJiByZWhhYmlsaXRhdGlvblBsYW5SZXF1aXJlZEluZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cmVoYWJpbGl0YXRpb25QbGFuUmVxdWlyZWRJbmQsICdyZWhhYmlsaXRhdGlvblBsYW5SZXF1aXJlZEluZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXBlclRyYWlsZWRJbmQgIT09IHVuZGVmaW5lZCAmJiBwYXBlclRyYWlsZWRJbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhcGVyVHJhaWxlZEluZCwgJ3BhcGVyVHJhaWxlZEluZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZFBob3RvSW5kICE9PSB1bmRlZmluZWQgJiYgZmllbGRQaG90b0luZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+ZmllbGRQaG90b0luZCwgJ2ZpZWxkUGhvdG9JbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmluYWxSZXBvcnRDb21wbGV0ZUluZCAhPT0gdW5kZWZpbmVkICYmIGZpbmFsUmVwb3J0Q29tcGxldGVJbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmZpbmFsUmVwb3J0Q29tcGxldGVJbmQsICdmaW5hbFJlcG9ydENvbXBsZXRlSW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50Q29tbWFuZGVyTmFtZSkge1xuICAgICAgICAgICAgaW5jaWRlbnRDb21tYW5kZXJOYW1lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdpbmNpZGVudENvbW1hbmRlck5hbWUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNpZ25vZmZTaWduYXR1cmVJbmQgIT09IHVuZGVmaW5lZCAmJiBzaWdub2ZmU2lnbmF0dXJlSW5kICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5zaWdub2ZmU2lnbmF0dXJlSW5kLCAnc2lnbm9mZlNpZ25hdHVyZUluZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhZ2VuY3lBc3Npc3RhbmNlVGFza0lkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGFnZW5jeUFzc2lzdGFuY2VUYXNrSWRlbnRpZmllci5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnYWdlbmN5QXNzaXN0YW5jZVRhc2tJZGVudGlmaWVyJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChhcHByb3ZhbFNpZ25hdHVyZU5hbWUpIHtcbiAgICAgICAgICAgIGFwcHJvdmFsU2lnbmF0dXJlTmFtZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnYXBwcm92YWxTaWduYXR1cmVOYW1lJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChhcHByb3ZhbFNpZ25hdHVyZUluZCAhPT0gdW5kZWZpbmVkICYmIGFwcHJvdmFsU2lnbmF0dXJlSW5kICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5hcHByb3ZhbFNpZ25hdHVyZUluZCwgJ2FwcHJvdmFsU2lnbmF0dXJlSW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcmVDZW50cmVPcmdVbml0SWRlbnRpZmllcikge1xuICAgICAgICAgICAgZmlyZUNlbnRyZU9yZ1VuaXRJZGVudGlmaWVyLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdmaXJlQ2VudHJlT3JnVW5pdElkZW50aWZpZXInKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHpvbmVPcmdVbml0SWRlbnRpZmllcikge1xuICAgICAgICAgICAgem9uZU9yZ1VuaXRJZGVudGlmaWVyLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICd6b25lT3JnVW5pdElkZW50aWZpZXInKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRldGVjdGlvblNvdXJjZUNvZGUpIHtcbiAgICAgICAgICAgIGRldGVjdGlvblNvdXJjZUNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2RldGVjdGlvblNvdXJjZUNvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcmVDbGFzc2lmaWNhdGlvbkNvZGUpIHtcbiAgICAgICAgICAgIGZpcmVDbGFzc2lmaWNhdGlvbkNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2ZpcmVDbGFzc2lmaWNhdGlvbkNvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFnZW5jeUFzc2lzdFR5cGVDb2RlKSB7XG4gICAgICAgICAgICBhZ2VuY3lBc3Npc3RUeXBlQ29kZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnYWdlbmN5QXNzaXN0VHlwZUNvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZUNvZGUpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZUNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3Jlc3BvbnNlVHlwZUNvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFzc2lzdGluZ1BhcnR5TmFtZSkge1xuICAgICAgICAgICAgYXNzaXN0aW5nUGFydHlOYW1lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdhc3Npc3RpbmdQYXJ0eU5hbWUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc2NvdmVyZWRCeVBhcnR5TmFtZSkge1xuICAgICAgICAgICAgZGlzY292ZXJlZEJ5UGFydHlOYW1lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdkaXNjb3ZlcmVkQnlQYXJ0eU5hbWUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0QWN0aW9uZWRCeVBhcnR5TmFtZSkge1xuICAgICAgICAgICAgZmlyc3RBY3Rpb25lZEJ5UGFydHlOYW1lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdmaXJzdEFjdGlvbmVkQnlQYXJ0eU5hbWUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlYWRCeVBhcnR5TmFtZSkge1xuICAgICAgICAgICAgbGVhZEJ5UGFydHlOYW1lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdsZWFkQnlQYXJ0eU5hbWUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50U3RhdHVzQ29kZSkge1xuICAgICAgICAgICAgaW5jaWRlbnRTdGF0dXNDb2RlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICA8YW55PmVsZW1lbnQsICdpbmNpZGVudFN0YXR1c0NvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyTGFiZWwpIHtcbiAgICAgICAgICAgIGluY2lkZW50TnVtYmVyTGFiZWwuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2luY2lkZW50TnVtYmVyTGFiZWwnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2JhYmlsaXR5T2ZJbml0aWFsQXR0YWNrU3VjY2Vzc0NvZGUpIHtcbiAgICAgICAgICAgIHByb2JhYmlsaXR5T2ZJbml0aWFsQXR0YWNrU3VjY2Vzc0NvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3Byb2JhYmlsaXR5T2ZJbml0aWFsQXR0YWNrU3VjY2Vzc0NvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1c3BlY3RlZENhdXNlQ2F0ZWdvcnlDb2RlKSB7XG4gICAgICAgICAgICBzdXNwZWN0ZWRDYXVzZUNhdGVnb3J5Q29kZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnc3VzcGVjdGVkQ2F1c2VDYXRlZ29yeUNvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50Q2F0ZWdvcnlDb2RlKSB7XG4gICAgICAgICAgICBpbmNpZGVudENhdGVnb3J5Q29kZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgPGFueT5lbGVtZW50LCAnaW5jaWRlbnRDYXRlZ29yeUNvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50VHlwZUNvZGUpIHtcbiAgICAgICAgICAgIGluY2lkZW50VHlwZUNvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ2luY2lkZW50VHlwZUNvZGUnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcmVPZk5vdGVQdWJsaXNoZWRJbmQgIT09IHVuZGVmaW5lZCAmJiBmaXJlT2ZOb3RlUHVibGlzaGVkSW5kICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5maXJlT2ZOb3RlUHVibGlzaGVkSW5kLCAnZmlyZU9mTm90ZVB1Ymxpc2hlZEluZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3YXNGaXJlT2ZOb3RlUHVibGlzaGVkSW5kICE9PSB1bmRlZmluZWQgJiYgd2FzRmlyZU9mTm90ZVB1Ymxpc2hlZEluZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+d2FzRmlyZU9mTm90ZVB1Ymxpc2hlZEluZCwgJ3dhc0ZpcmVPZk5vdGVQdWJsaXNoZWRJbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhZ2VPZkNvbnRyb2xDb2RlKSB7XG4gICAgICAgICAgICBzdGFnZU9mQ29udHJvbENvZGUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgIDxhbnk+ZWxlbWVudCwgJ3N0YWdlT2ZDb250cm9sQ29kZScpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZU51bWJlciAhPT0gdW5kZWZpbmVkICYmIHBhZ2VOdW1iZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhZ2VOdW1iZXIsICdwYWdlTnVtYmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZ2VSb3dDb3VudCAhPT0gdW5kZWZpbmVkICYmIHBhZ2VSb3dDb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZVJvd0NvdW50LCAncGFnZVJvd0NvdW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGVyQnkgIT09IHVuZGVmaW5lZCAmJiBvcmRlckJ5ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5vcmRlckJ5LCAnb3JkZXJCeScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHBhbmQgIT09IHVuZGVmaW5lZCAmJiBleHBhbmQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PmV4cGFuZCwgJ2V4cGFuZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxXaWxkZmlyZUluY2lkZW50TGlzdFJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50c2AsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBsaXN0IG9mIFdpbGRmaXJlIEluY2lkZW50IFN0YXR1cyBDaGFuZ2VzLlxuICAgICAqIEdldCBsaXN0IG9mIFdpbGRmaXJlIEluY2lkZW50IFN0YXR1cyBDaGFuZ2VzLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gcGFnZU51bWJlciBUaGUgcGFnZSBudW1iZXIgb2YgdGhlIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIHBhZ2VSb3dDb3VudCBUaGUgbnVtYmVyIG9mIHJlc3VsdHMgcGVyIHBhZ2UuXG4gICAgICogQHBhcmFtIG9yZGVyQnkgQ29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gb3JkZXIgdGhlIHJlc3VsdCBzZXQgYnkuXG4gICAgICogQHBhcmFtIGV4cGFuZCBUaGUgbGV2ZWwgb2YgY2hpbGQgcmVzb3VyY2VzIHRvIGxvYWQuIFplcm8gZm9yIG5vIGNoaWxkIHJlc291cmNlcy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudFN0YXR1c0NoYW5nZUxpc3Qod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8U3RhdHVzQ2hhbmdlTGlzdFJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudFN0YXR1c0NoYW5nZUxpc3Qod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxTdGF0dXNDaGFuZ2VMaXN0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVJbmNpZGVudFN0YXR1c0NoYW5nZUxpc3Qod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8U3RhdHVzQ2hhbmdlTGlzdFJlc291cmNlPj47XG4gICAgcHVibGljIGdldFdpbGRmaXJlSW5jaWRlbnRTdGF0dXNDaGFuZ2VMaXN0KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwYWdlTnVtYmVyPzogc3RyaW5nLCBwYWdlUm93Q291bnQ/OiBzdHJpbmcsIG9yZGVyQnk/OiBzdHJpbmcsIGV4cGFuZD86IG51bWJlciwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRXaWxkZmlyZUluY2lkZW50U3RhdHVzQ2hhbmdlTGlzdC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRXaWxkZmlyZUluY2lkZW50U3RhdHVzQ2hhbmdlTGlzdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChwYWdlTnVtYmVyICE9PSB1bmRlZmluZWQgJiYgcGFnZU51bWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFnZU51bWJlciwgJ3BhZ2VOdW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZVJvd0NvdW50ICE9PSB1bmRlZmluZWQgJiYgcGFnZVJvd0NvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlUm93Q291bnQsICdwYWdlUm93Q291bnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkZXJCeSAhPT0gdW5kZWZpbmVkICYmIG9yZGVyQnkgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pm9yZGVyQnksICdvcmRlckJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cGFuZCAhPT0gdW5kZWZpbmVkICYmIGV4cGFuZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+ZXhwYW5kLCAnZXhwYW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PFN0YXR1c0NoYW5nZUxpc3RSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfS9zdGF0dXNDaGFuZ2VzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBXaWxkZmlyZSBQYXJ0eSBieSBJRC5cbiAgICAgKiBHZXQgdGhlIFdpbGRmaXJlIFBhcnR5IGJ5IElELlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVBhcnR5R3VpZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgV2lsZGZpcmUgUGFydHkgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRXaWxkZmlyZVBhcnR5KHdpbGRmaXJlUGFydHlHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8V2lsZGZpcmVQYXJ0eVJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVQYXJ0eSh3aWxkZmlyZVBhcnR5R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8V2lsZGZpcmVQYXJ0eVJlc291cmNlPj47XG4gICAgcHVibGljIGdldFdpbGRmaXJlUGFydHkod2lsZGZpcmVQYXJ0eUd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxXaWxkZmlyZVBhcnR5UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVQYXJ0eSh3aWxkZmlyZVBhcnR5R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVQYXJ0eUd1aWQgPT09IG51bGwgfHwgd2lsZGZpcmVQYXJ0eUd1aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVQYXJ0eUd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRXaWxkZmlyZVBhcnR5LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxXaWxkZmlyZVBhcnR5UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vd2lsZGZpcmVQYXJ0eXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlUGFydHlHdWlkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGxpc3Qgb2YgV2lsZGZpcmUgUGFydHlzLlxuICAgICAqIEdldCBsaXN0IG9mIFdpbGRmaXJlIFBhcnR5cy5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIHBhcnR5TmFtZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHBhcnR5TmFtZS5cbiAgICAgKiBAcGFyYW0gcGFydHlUeXBlQ29kZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHBhcnR5VHlwZUNvZGUuXG4gICAgICogQHBhcmFtIHBhcnR5VXNhZ2VUeXBlQ29kZSBGaWx0ZXIgdGhlIHJlc3VsdHMgYnkgdGhlIHBhcnR5VXNhZ2VUeXBlQ29kZS5cbiAgICAgKiBAcGFyYW0gZWZmZWN0aXZlQXNPZkRhdGUgRmlsdGVyIHRoZSByZXN1bHRzIGJ5IHRoZSBlZmZlY3RpdmVBc09mRGF0ZS5cbiAgICAgKiBAcGFyYW0gcGFnZU51bWJlciBUaGUgcGFnZSBudW1iZXIgb2YgdGhlIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQuXG4gICAgICogQHBhcmFtIHBhZ2VSb3dDb3VudCBUaGUgbnVtYmVyIG9mIHJlc3VsdHMgcGVyIHBhZ2UuXG4gICAgICogQHBhcmFtIG9yZGVyQnkgQ29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gb3JkZXIgdGhlIHJlc3VsdCBzZXQgYnkuXG4gICAgICogQHBhcmFtIGV4cGFuZCBUaGUgbGV2ZWwgb2YgY2hpbGQgcmVzb3VyY2VzIHRvIGxvYWQuIFplcm8gZm9yIG5vIGNoaWxkIHJlc291cmNlcy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVQYXJ0eUxpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHBhcnR5TmFtZT86IHN0cmluZywgcGFydHlUeXBlQ29kZT86IHN0cmluZywgcGFydHlVc2FnZVR5cGVDb2RlPzogc3RyaW5nLCBlZmZlY3RpdmVBc09mRGF0ZT86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxXaWxkZmlyZVBhcnR5TGlzdFJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVQYXJ0eUxpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHBhcnR5TmFtZT86IHN0cmluZywgcGFydHlUeXBlQ29kZT86IHN0cmluZywgcGFydHlVc2FnZVR5cGVDb2RlPzogc3RyaW5nLCBlZmZlY3RpdmVBc09mRGF0ZT86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFdpbGRmaXJlUGFydHlMaXN0UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVQYXJ0eUxpc3QocmVzdFZlcnNpb24/OiBudW1iZXIsIHBhcnR5TmFtZT86IHN0cmluZywgcGFydHlUeXBlQ29kZT86IHN0cmluZywgcGFydHlVc2FnZVR5cGVDb2RlPzogc3RyaW5nLCBlZmZlY3RpdmVBc09mRGF0ZT86IHN0cmluZywgcGFnZU51bWJlcj86IHN0cmluZywgcGFnZVJvd0NvdW50Pzogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBleHBhbmQ/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxXaWxkZmlyZVBhcnR5TGlzdFJlc291cmNlPj47XG4gICAgcHVibGljIGdldFdpbGRmaXJlUGFydHlMaXN0KHJlc3RWZXJzaW9uPzogbnVtYmVyLCBwYXJ0eU5hbWU/OiBzdHJpbmcsIHBhcnR5VHlwZUNvZGU/OiBzdHJpbmcsIHBhcnR5VXNhZ2VUeXBlQ29kZT86IHN0cmluZywgZWZmZWN0aXZlQXNPZkRhdGU/OiBzdHJpbmcsIHBhZ2VOdW1iZXI/OiBzdHJpbmcsIHBhZ2VSb3dDb3VudD86IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgZXhwYW5kPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKHBhcnR5TmFtZSAhPT0gdW5kZWZpbmVkICYmIHBhcnR5TmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+cGFydHlOYW1lLCAncGFydHlOYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnR5VHlwZUNvZGUgIT09IHVuZGVmaW5lZCAmJiBwYXJ0eVR5cGVDb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYXJ0eVR5cGVDb2RlLCAncGFydHlUeXBlQ29kZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0eVVzYWdlVHlwZUNvZGUgIT09IHVuZGVmaW5lZCAmJiBwYXJ0eVVzYWdlVHlwZUNvZGUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhcnR5VXNhZ2VUeXBlQ29kZSwgJ3BhcnR5VXNhZ2VUeXBlQ29kZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3RpdmVBc09mRGF0ZSAhPT0gdW5kZWZpbmVkICYmIGVmZmVjdGl2ZUFzT2ZEYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5lZmZlY3RpdmVBc09mRGF0ZSwgJ2VmZmVjdGl2ZUFzT2ZEYXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZ2VOdW1iZXIgIT09IHVuZGVmaW5lZCAmJiBwYWdlTnVtYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5wYWdlTnVtYmVyLCAncGFnZU51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWdlUm93Q291bnQgIT09IHVuZGVmaW5lZCAmJiBwYWdlUm93Q291bnQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55PnBhZ2VSb3dDb3VudCwgJ3BhZ2VSb3dDb3VudCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRlckJ5ICE9PSB1bmRlZmluZWQgJiYgb3JkZXJCeSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+b3JkZXJCeSwgJ29yZGVyQnknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwYW5kICE9PSB1bmRlZmluZWQgJiYgZXhwYW5kICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5leHBhbmQsICdleHBhbmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8V2lsZGZpcmVQYXJ0eUxpc3RSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS93aWxkZmlyZVBhcnR5c2AsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgV2lsZGZpcmUgUGVyaW1ldGVyLlxuICAgICAqIEdldCB0aGUgV2lsZGZpcmUgUGVyaW1ldGVyLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVQZXJpbWV0ZXIod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxXaWxkZmlyZVBlcmltZXRlclJlc291cmNlPjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVQZXJpbWV0ZXIod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFdpbGRmaXJlUGVyaW1ldGVyUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgZ2V0V2lsZGZpcmVQZXJpbWV0ZXIod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxXaWxkZmlyZVBlcmltZXRlclJlc291cmNlPj47XG4gICAgcHVibGljIGdldFdpbGRmaXJlUGVyaW1ldGVyKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFdpbGRmaXJlUGVyaW1ldGVyLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSBudWxsIHx8IGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFdpbGRmaXJlUGVyaW1ldGVyLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxXaWxkZmlyZVBlcmltZXRlclJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L3dpbGRmaXJlUGVyaW1ldGVyYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcnkgdGhlIGhlYWx0aCBvZiB0aGUgc2VydmljZS5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdElkIFRoZSB1bmlxdWUgaWRlbnRpdHkgb2YgdGhlIHJlcXVlc3QgYXNzaWduZWQgYnkgdGhlIG9yaWdpbmF0b3IgdG8gaGVscCB0cmFjZSB0aGUgcmVxdWVzdCB0aHJvdWdoIHRoZSBsb2dzLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gY2FjaGVDb250cm9sIFVzZWQgdG8gc3BlY2lmeSBkaXJlY3RpdmVzIGZvciBjYWNoZXMgYWxvbmcgdGhlIHJlcXVlc3QtcmVzcG9uc2UgY2hhaW5cbiAgICAgKiBAcGFyYW0gcHJhZ21hIEFuIGltcGxlbWVudGF0aW9uLXNwZWNpZmljIGhlYWRlciB0aGF0IG1heSBoYXZlIHZhcmlvdXMgZWZmZWN0cyBhbG9uZyB0aGUgcmVxdWVzdC1yZXNwb25zZSBjaGFpbi4gSXQgaXMgdXNlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBIVFRQLzEuMCBjYWNoZXMgd2hlcmUgdGhlIENhY2hlLUNvbnRyb2wgSFRUUC8xLjEgaGVhZGVyIGlzIG5vdCB5ZXQgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0gYXV0aG9yaXphdGlvbiBDb250YWlucyB0aGUgY3JlZGVudGlhbHMgdG8gYXV0aGVudGljYXRlIGEgdXNlciBhZ2VudCB3aXRoIGEgc2VydmVyLlxuICAgICAqIEBwYXJhbSBjYWxsc3RhY2sgQSBjb21tIHNlcGFyYXRlZCBsaXN0IG9mIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBjYWxsaW5nIGNvbXBvbmVudHMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHF1ZXJ5VGhlSGVhbHRoT2ZUaGVTZXJ2aWNlKHJlcXVlc3RJZD86IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGNhY2hlQ29udHJvbD86IHN0cmluZywgcHJhZ21hPzogc3RyaW5nLCBhdXRob3JpemF0aW9uPzogc3RyaW5nLCBjYWxsc3RhY2s/OiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIZWFsdGhDaGVja1Jlc3BvbnNlUnNyYz47XG4gICAgcHVibGljIHF1ZXJ5VGhlSGVhbHRoT2ZUaGVTZXJ2aWNlKHJlcXVlc3RJZD86IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGNhY2hlQ29udHJvbD86IHN0cmluZywgcHJhZ21hPzogc3RyaW5nLCBhdXRob3JpemF0aW9uPzogc3RyaW5nLCBjYWxsc3RhY2s/OiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEhlYWx0aENoZWNrUmVzcG9uc2VSc3JjPj47XG4gICAgcHVibGljIHF1ZXJ5VGhlSGVhbHRoT2ZUaGVTZXJ2aWNlKHJlcXVlc3RJZD86IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGNhY2hlQ29udHJvbD86IHN0cmluZywgcHJhZ21hPzogc3RyaW5nLCBhdXRob3JpemF0aW9uPzogc3RyaW5nLCBjYWxsc3RhY2s/OiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxIZWFsdGhDaGVja1Jlc3BvbnNlUnNyYz4+O1xuICAgIHB1YmxpYyBxdWVyeVRoZUhlYWx0aE9mVGhlU2VydmljZShyZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgY2FsbHN0YWNrPzogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKGNhbGxzdGFjayAhPT0gdW5kZWZpbmVkICYmIGNhbGxzdGFjayAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+Y2FsbHN0YWNrLCAnY2FsbHN0YWNrJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXF1ZXN0SWQgIT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVxdWVzdElkJywgU3RyaW5nKHJlcXVlc3RJZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWNoZUNvbnRyb2wgIT09IHVuZGVmaW5lZCAmJiBjYWNoZUNvbnRyb2wgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ2FjaGUtQ29udHJvbCcsIFN0cmluZyhjYWNoZUNvbnRyb2wpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJhZ21hICE9PSB1bmRlZmluZWQgJiYgcHJhZ21hICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1ByYWdtYScsIFN0cmluZyhwcmFnbWEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXV0aG9yaXphdGlvbiAhPT0gdW5kZWZpbmVkICYmIGF1dGhvcml6YXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsIFN0cmluZyhhdXRob3JpemF0aW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8SGVhbHRoQ2hlY2tSZXNwb25zZVJzcmM+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2hlY2tIZWFsdGhgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWRhY3QgSW5jaWRlbnQgQXR0YWNobWVudCBieSBJRFxuICAgICAqIFJlZGFjdCBJbmNpZGVudCBBdHRhY2htZW50IGJ5IElEXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBUaGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnRHdWlkIFRoZSBhdHRhY2htZW50R3VpZCBvZiB0aGUgQXR0YWNobWVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnRSZXNvdXJjZSBUaGUgSW5jaWRlbnQgQXR0YWNobWVudCByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgZmlsZSBpZCBhbmQgcGF0aC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVkYWN0SW5jaWRlbnRBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBhdHRhY2htZW50UmVzb3VyY2U/OiBBdHRhY2htZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxBdHRhY2htZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyByZWRhY3RJbmNpZGVudEF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGF0dGFjaG1lbnRSZXNvdXJjZT86IEF0dGFjaG1lbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXR0YWNobWVudFJlc291cmNlPj47XG4gICAgcHVibGljIHJlZGFjdEluY2lkZW50QXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCBhdHRhY2htZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8QXR0YWNobWVudFJlc291cmNlPj47XG4gICAgcHVibGljIHJlZGFjdEluY2lkZW50QXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCBhdHRhY2htZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHJlZGFjdEluY2lkZW50QXR0YWNobWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyByZWRhY3RJbmNpZGVudEF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dGFjaG1lbnRHdWlkID09PSBudWxsIHx8IGF0dGFjaG1lbnRHdWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGF0dGFjaG1lbnRHdWlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcmVkYWN0SW5jaWRlbnRBdHRhY2htZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxBdHRhY2htZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpKX0vYXR0YWNobWVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGF0dGFjaG1lbnRHdWlkKSl9L3JlZGFjdGAsXG4gICAgICAgICAgICBhdHRhY2htZW50UmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZGFjdCBSZXBvcnQgb2YgRmlyZSBBdHRhY2htZW50IGJ5IElEXG4gICAgICogUmVkYWN0IFJlcG9ydCBvZiBGaXJlIEF0dGFjaG1lbnQgYnkgSURcbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0T2ZGaXJlTnVtYmVyIFRoZSByZXBvcnRPZkZpcmVOdW1iZXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gYXR0YWNobWVudEd1aWQgVGhlIGF0dGFjaG1lbnRHdWlkIG9mIHRoZSBBdHRhY2htZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gYXR0YWNobWVudFJlc291cmNlIFRoZSBSZXBvcnRPZkZpcmUgQXR0YWNobWVudCByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgZmlsZSBpZCBhbmQgcGF0aC5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVkYWN0UmVwb3J0T2ZGaXJlQXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBhdHRhY2htZW50UmVzb3VyY2U/OiBBdHRhY2htZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxBdHRhY2htZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyByZWRhY3RSZXBvcnRPZkZpcmVBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGF0dGFjaG1lbnRSZXNvdXJjZT86IEF0dGFjaG1lbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXR0YWNobWVudFJlc291cmNlPj47XG4gICAgcHVibGljIHJlZGFjdFJlcG9ydE9mRmlyZUF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCBhdHRhY2htZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8QXR0YWNobWVudFJlc291cmNlPj47XG4gICAgcHVibGljIHJlZGFjdFJlcG9ydE9mRmlyZUF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCBhdHRhY2htZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHJlZGFjdFJlcG9ydE9mRmlyZUF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcmVkYWN0UmVwb3J0T2ZGaXJlQXR0YWNobWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0YWNobWVudEd1aWQgPT09IG51bGwgfHwgYXR0YWNobWVudEd1aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYXR0YWNobWVudEd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyByZWRhY3RSZXBvcnRPZkZpcmVBdHRhY2htZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxBdHRhY2htZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhyZXBvcnRPZkZpcmVOdW1iZXIpKX0vYXR0YWNobWVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGF0dGFjaG1lbnRHdWlkKSl9L3JlZGFjdGAsXG4gICAgICAgICAgICBhdHRhY2htZW50UmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmlldyBhIFJlY2VpdmVkIFB1YmxpYyBSZXBvcnQgT2YgRmlyZVxuICAgICAqIFJldmlldyBhIFJlY2VpdmVkIFB1YmxpYyBSZXBvcnQgT2YgRmlyZVxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXBvcnRPZkZpcmVOdW1iZXIgVGhlIHJlcG9ydE9mRmlyZU51bWJlciBvZiB0aGUgUHVibGljIFJlcG9ydCBvZiBGaXJlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIG9uQmVoYWxmT2ZSZXNvdXJjZSBUaGUgT25CZWhhbGZPZiByZXNvdXJjZSBjb250YWluaW5nIHRoZSBhdWRpdCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHJldmlld1B1YmxpY1JlcG9ydE9mRmlyZSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT47XG4gICAgcHVibGljIHJldmlld1B1YmxpY1JlcG9ydE9mRmlyZSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPj47XG4gICAgcHVibGljIHJldmlld1B1YmxpY1JlcG9ydE9mRmlyZSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyByZXZpZXdQdWJsaWNSZXBvcnRPZkZpcmUod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb25CZWhhbGZPZlJlc291cmNlPzogT25CZWhhbGZPZlJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHJldmlld1B1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0T2ZGaXJlTnVtYmVyID09PSBudWxsIHx8IHJlcG9ydE9mRmlyZU51bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciByZXBvcnRPZkZpcmVOdW1iZXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyByZXZpZXdQdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZk1hdGNoICE9PSB1bmRlZmluZWQgJiYgaWZNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdJZi1NYXRjaCcsIFN0cmluZyhpZk1hdGNoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhyZXBvcnRPZkZpcmVOdW1iZXIpKX0vcmV2aWV3YCxcbiAgICAgICAgICAgIG9uQmVoYWxmT2ZSZXNvdXJjZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2lnbm9mZiB0aGUgQXBwcm92YWwgUmVzdWx0cyBmb3IgYW4gSW5jaWRlbnQgYnkgSUQuXG4gICAgICogU2lnbm9mZiB0aGUgQXBwcm92YWwgUmVzdWx0cyBmb3IgYW4gSW5jaWRlbnQgYnkgSUQuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBUaGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBzaWdub2ZmSW5jaWRlbnRBcHByb3ZhbCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT47XG4gICAgcHVibGljIHNpZ25vZmZJbmNpZGVudEFwcHJvdmFsKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgc2lnbm9mZkluY2lkZW50QXBwcm92YWwod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgc2lnbm9mZkluY2lkZW50QXBwcm92YWwod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgc2lnbm9mZkluY2lkZW50QXBwcm92YWwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgc2lnbm9mZkluY2lkZW50QXBwcm92YWwuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpKX0vYXBwcm92YWxgLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2lnbm9mZiB0aGUgVmVyaWZpY2F0aW9uIFJlc3VsdHMgZm9yIGFuIEluY2lkZW50IGJ5IElELlxuICAgICAqIFNpZ25vZmYgdGhlIFZlcmlmaWNhdGlvbiBSZXN1bHRzIGZvciBhbiBJbmNpZGVudCBieSBJRC5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIFRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHNpZ25vZmZJbmNpZGVudFZlcmlmaWNhdGlvbih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT47XG4gICAgcHVibGljIHNpZ25vZmZJbmNpZGVudFZlcmlmaWNhdGlvbih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8V2lsZGZpcmVJbmNpZGVudFJlc291cmNlPj47XG4gICAgcHVibGljIHNpZ25vZmZJbmNpZGVudFZlcmlmaWNhdGlvbih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyBzaWdub2ZmSW5jaWRlbnRWZXJpZmljYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgc2lnbm9mZkluY2lkZW50VmVyaWZpY2F0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSBudWxsIHx8IGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHNpZ25vZmZJbmNpZGVudFZlcmlmaWNhdGlvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfS92ZXJpZmljYXRpb25gLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3VibWl0IGEgUHVibGljIFJlcG9ydCBPZiBGaXJlXG4gICAgICogU3VibWl0IGEgUHVibGljIFJlcG9ydCBPZiBGaXJlXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcG9ydE9mRmlyZU51bWJlciBUaGUgcmVwb3J0T2ZGaXJlTnVtYmVyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gb25CZWhhbGZPZlJlc291cmNlIFRoZSBPbkJlaGFsZk9mIHJlc291cmNlIGNvbnRhaW5pbmcgdGhlIGF1ZGl0IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3VibWl0UHVibGljUmVwb3J0T2ZGaXJlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9uQmVoYWxmT2ZSZXNvdXJjZT86IE9uQmVoYWxmT2ZSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPjtcbiAgICBwdWJsaWMgc3VibWl0UHVibGljUmVwb3J0T2ZGaXJlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9uQmVoYWxmT2ZSZXNvdXJjZT86IE9uQmVoYWxmT2ZSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgc3VibWl0UHVibGljUmVwb3J0T2ZGaXJlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9uQmVoYWxmT2ZSZXNvdXJjZT86IE9uQmVoYWxmT2ZSZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPj47XG4gICAgcHVibGljIHN1Ym1pdFB1YmxpY1JlcG9ydE9mRmlyZSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgc3VibWl0UHVibGljUmVwb3J0T2ZGaXJlLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnRPZkZpcmVOdW1iZXIgPT09IG51bGwgfHwgcmVwb3J0T2ZGaXJlTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHJlcG9ydE9mRmlyZU51bWJlciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHN1Ym1pdFB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS9zdWJtaXRgLFxuICAgICAgICAgICAgb25CZWhhbGZPZlJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbmFja25vd2xlZGdlIGEgUHVibGljIFJlcG9ydCBPZiBGaXJlXG4gICAgICogVW5hY2tub3dsZWRnZSBhIFB1YmxpYyBSZXBvcnQgT2YgRmlyZVxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0T2ZGaXJlTnVtYmVyIFRoZSByZXBvcnRPZkZpcmVOdW1iZXIgb2YgdGhlIFB1YmxpYyBSZXBvcnQgb2YgRmlyZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIG9uQmVoYWxmT2ZSZXNvdXJjZSBUaGUgT25CZWhhbGZPZiByZXNvdXJjZSBjb250YWluaW5nIHRoZSBhdWRpdCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVuYWNrbm93bGVkZ2VQdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT47XG4gICAgcHVibGljIHVuYWNrbm93bGVkZ2VQdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPj47XG4gICAgcHVibGljIHVuYWNrbm93bGVkZ2VQdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyB1bmFja25vd2xlZGdlUHVibGljUmVwb3J0T2ZGaXJlKGlmTWF0Y2g6IHN0cmluZywgd2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb25CZWhhbGZPZlJlc291cmNlPzogT25CZWhhbGZPZlJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChpZk1hdGNoID09PSBudWxsIHx8IGlmTWF0Y2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWZNYXRjaCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVuYWNrbm93bGVkZ2VQdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5hY2tub3dsZWRnZVB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0T2ZGaXJlTnVtYmVyID09PSBudWxsIHx8IHJlcG9ydE9mRmlyZU51bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciByZXBvcnRPZkZpcmVOdW1iZXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1bmFja25vd2xlZGdlUHVibGljUmVwb3J0T2ZGaXJlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIGlmTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnSWYtTWF0Y2gnLCBTdHJpbmcoaWZNYXRjaCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vcHVibGljUmVwb3J0T2ZGaXJlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhyZXBvcnRPZkZpcmVOdW1iZXIpKX0vdW5hY2tub3dsZWRnZWAsXG4gICAgICAgICAgICBvbkJlaGFsZk9mUmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVuYXNzaWduIGEgUHVibGljIFJlcG9ydCBPZiBGaXJlXG4gICAgICogVW5hc3NpZ24gYSBQdWJsaWMgUmVwb3J0IE9mIEZpcmVcbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcG9ydE9mRmlyZU51bWJlciBUaGUgcmVwb3J0T2ZGaXJlTnVtYmVyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvbkJlaGFsZk9mUmVzb3VyY2UgVGhlIE9uQmVoYWxmT2YgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgYXVkaXQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1bmFzc2lnblB1YmxpY1JlcG9ydE9mRmlyZShpZk1hdGNoOiBzdHJpbmcsIHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9uQmVoYWxmT2ZSZXNvdXJjZT86IE9uQmVoYWxmT2ZSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPjtcbiAgICBwdWJsaWMgdW5hc3NpZ25QdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPj47XG4gICAgcHVibGljIHVuYXNzaWduUHVibGljUmVwb3J0T2ZGaXJlKGlmTWF0Y2g6IHN0cmluZywgd2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb25CZWhhbGZPZlJlc291cmNlPzogT25CZWhhbGZPZlJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdW5hc3NpZ25QdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKGlmTWF0Y2ggPT09IG51bGwgfHwgaWZNYXRjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpZk1hdGNoIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5hc3NpZ25QdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5hc3NpZ25QdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5hc3NpZ25QdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZk1hdGNoICE9PSB1bmRlZmluZWQgJiYgaWZNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdJZi1NYXRjaCcsIFN0cmluZyhpZk1hdGNoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS91bmFzc2lnbmAsXG4gICAgICAgICAgICBvbkJlaGFsZk9mUmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVuY2FuY2VsIGEgUHVibGljIFJlcG9ydCBPZiBGaXJlXG4gICAgICogVW5jYW5jZWwgYSBQdWJsaWMgUmVwb3J0IE9mIEZpcmVcbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcG9ydE9mRmlyZU51bWJlciBUaGUgcmVwb3J0T2ZGaXJlTnVtYmVyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvbkJlaGFsZk9mUmVzb3VyY2UgVGhlIE9uQmVoYWxmT2YgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgYXVkaXQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1bmNhbmNlbFB1YmxpY1JlcG9ydE9mRmlyZShpZk1hdGNoOiBzdHJpbmcsIHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9uQmVoYWxmT2ZSZXNvdXJjZT86IE9uQmVoYWxmT2ZSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPjtcbiAgICBwdWJsaWMgdW5jYW5jZWxQdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPj47XG4gICAgcHVibGljIHVuY2FuY2VsUHVibGljUmVwb3J0T2ZGaXJlKGlmTWF0Y2g6IHN0cmluZywgd2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb25CZWhhbGZPZlJlc291cmNlPzogT25CZWhhbGZPZlJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdW5jYW5jZWxQdWJsaWNSZXBvcnRPZkZpcmUoaWZNYXRjaDogc3RyaW5nLCB3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvbkJlaGFsZk9mUmVzb3VyY2U/OiBPbkJlaGFsZk9mUmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKGlmTWF0Y2ggPT09IG51bGwgfHwgaWZNYXRjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpZk1hdGNoIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5jYW5jZWxQdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5jYW5jZWxQdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5jYW5jZWxQdWJsaWNSZXBvcnRPZkZpcmUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZk1hdGNoICE9PSB1bmRlZmluZWQgJiYgaWZNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdJZi1NYXRjaCcsIFN0cmluZyhpZk1hdGNoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS91bmNhbmNlbGAsXG4gICAgICAgICAgICBvbkJlaGFsZk9mUmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVuc2lnbiB0aGUgQXBwcm92YWwgUmVzdWx0cyBmb3IgYW4gSW5jaWRlbnQgYnkgSUQuXG4gICAgICogVW5zaWduIHRoZSBBcHByb3ZhbCBSZXN1bHRzIGZvciBhbiBJbmNpZGVudCBieSBJRC5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIFRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVuc2lnbkluY2lkZW50QXBwcm92YWwod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyB1bnNpZ25JbmNpZGVudEFwcHJvdmFsKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdW5zaWduSW5jaWRlbnRBcHByb3ZhbCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyB1bnNpZ25JbmNpZGVudEFwcHJvdmFsKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVuc2lnbkluY2lkZW50QXBwcm92YWwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5zaWduSW5jaWRlbnRBcHByb3ZhbC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5kZWxldGU8V2lsZGZpcmVJbmNpZGVudFJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L2FwcHJvdmFsYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5zaWduIHRoZSBWZXJpZmljYXRpb24gUmVzdWx0cyBmb3IgYW4gSW5jaWRlbnQgYnkgSUQuXG4gICAgICogVW5zaWduIHRoZSBWZXJpZmljYXRpb24gUmVzdWx0cyBmb3IgYW4gSW5jaWRlbnQgYnkgSUQuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBUaGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1bnNpZ25JbmNpZGVudFZlcmlmaWNhdGlvbih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT47XG4gICAgcHVibGljIHVuc2lnbkluY2lkZW50VmVyaWZpY2F0aW9uKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdW5zaWduSW5jaWRlbnRWZXJpZmljYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdW5zaWduSW5jaWRlbnRWZXJpZmljYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5zaWduSW5jaWRlbnRWZXJpZmljYXRpb24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdW5zaWduSW5jaWRlbnRWZXJpZmljYXRpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlPFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfS92ZXJpZmljYXRpb25gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgQ29kZUhpZXJhcmNoeSBieSBjb2RlIHRhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtIGlmTWF0Y2ggVGhlIElmLU1hdGNoIHJlcXVlc3QtaGVhZGVyIG11c3QgbWF0Y2ggdGhlIGN1cnJlbnQgZVRhZyBvZiB0aGUgcmVzb3VyY2Ugb3IgdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxuICAgICAqIEBwYXJhbSBjb2RlSGllcmFyY2h5TmFtZSBUaGUgaWRlbnRpZmllciBvZiB0aGUgQ29kZUhpZXJhcmNoeSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gY29kZUhpZXJhcmNoeVJzcmMgVGhlIENvZGVIaWVyYXJjaHkgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgbmV3IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdElkIFRoZSB1bmlxdWUgaWRlbnRpdHkgb2YgdGhlIHJlcXVlc3QgYXNzaWduZWQgYnkgdGhlIG9yaWdpbmF0b3IgdG8gaGVscCB0cmFjZSB0aGUgcmVxdWVzdCB0aHJvdWdoIHRoZSBsb2dzLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gY2FjaGVDb250cm9sIFVzZWQgdG8gc3BlY2lmeSBkaXJlY3RpdmVzIGZvciBjYWNoZXMgYWxvbmcgdGhlIHJlcXVlc3QtcmVzcG9uc2UgY2hhaW5cbiAgICAgKiBAcGFyYW0gcHJhZ21hIEFuIGltcGxlbWVudGF0aW9uLXNwZWNpZmljIGhlYWRlciB0aGF0IG1heSBoYXZlIHZhcmlvdXMgZWZmZWN0cyBhbG9uZyB0aGUgcmVxdWVzdC1yZXNwb25zZSBjaGFpbi4gSXQgaXMgdXNlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBIVFRQLzEuMCBjYWNoZXMgd2hlcmUgdGhlIENhY2hlLUNvbnRyb2wgSFRUUC8xLjEgaGVhZGVyIGlzIG5vdCB5ZXQgcHJlc2VudC5cbiAgICAgKiBAcGFyYW0gYXV0aG9yaXphdGlvbiBDb250YWlucyB0aGUgY3JlZGVudGlhbHMgdG8gYXV0aGVudGljYXRlIGEgdXNlciBhZ2VudCB3aXRoIGEgc2VydmVyLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVDb2RlSGllcmFyY2h5UmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoaWZNYXRjaDogc3RyaW5nLCBjb2RlSGllcmFyY2h5TmFtZTogc3RyaW5nLCBjb2RlSGllcmFyY2h5UnNyYzogQ29kZUhpZXJhcmNoeVJzcmMsIHJlcXVlc3RJZD86IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGNhY2hlQ29udHJvbD86IHN0cmluZywgcHJhZ21hPzogc3RyaW5nLCBhdXRob3JpemF0aW9uPzogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8Q29kZUhpZXJhcmNoeVJzcmM+O1xuICAgIHB1YmxpYyB1cGRhdGVDb2RlSGllcmFyY2h5UmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoaWZNYXRjaDogc3RyaW5nLCBjb2RlSGllcmFyY2h5TmFtZTogc3RyaW5nLCBjb2RlSGllcmFyY2h5UnNyYzogQ29kZUhpZXJhcmNoeVJzcmMsIHJlcXVlc3RJZD86IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGNhY2hlQ29udHJvbD86IHN0cmluZywgcHJhZ21hPzogc3RyaW5nLCBhdXRob3JpemF0aW9uPzogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxDb2RlSGllcmFyY2h5UnNyYz4+O1xuICAgIHB1YmxpYyB1cGRhdGVDb2RlSGllcmFyY2h5UmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoaWZNYXRjaDogc3RyaW5nLCBjb2RlSGllcmFyY2h5TmFtZTogc3RyaW5nLCBjb2RlSGllcmFyY2h5UnNyYzogQ29kZUhpZXJhcmNoeVJzcmMsIHJlcXVlc3RJZD86IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGNhY2hlQ29udHJvbD86IHN0cmluZywgcHJhZ21hPzogc3RyaW5nLCBhdXRob3JpemF0aW9uPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8Q29kZUhpZXJhcmNoeVJzcmM+PjtcbiAgICBwdWJsaWMgdXBkYXRlQ29kZUhpZXJhcmNoeVJlc291cmNlQnlDb2RlVGFibGVOYW1lKGlmTWF0Y2g6IHN0cmluZywgY29kZUhpZXJhcmNoeU5hbWU6IHN0cmluZywgY29kZUhpZXJhcmNoeVJzcmM6IENvZGVIaWVyYXJjaHlSc3JjLCByZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoaWZNYXRjaCA9PT0gbnVsbCB8fCBpZk1hdGNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGlmTWF0Y2ggd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVDb2RlSGllcmFyY2h5UmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGVIaWVyYXJjaHlOYW1lID09PSBudWxsIHx8IGNvZGVIaWVyYXJjaHlOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGNvZGVIaWVyYXJjaHlOYW1lIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlQ29kZUhpZXJhcmNoeVJlc291cmNlQnlDb2RlVGFibGVOYW1lLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlSGllcmFyY2h5UnNyYyA9PT0gbnVsbCB8fCBjb2RlSGllcmFyY2h5UnNyYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBjb2RlSGllcmFyY2h5UnNyYyB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZUNvZGVIaWVyYXJjaHlSZXNvdXJjZUJ5Q29kZVRhYmxlTmFtZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlcXVlc3RJZCAhPT0gdW5kZWZpbmVkICYmIHJlcXVlc3RJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXF1ZXN0SWQnLCBTdHJpbmcocmVxdWVzdElkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhY2hlQ29udHJvbCAhPT0gdW5kZWZpbmVkICYmIGNhY2hlQ29udHJvbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDYWNoZS1Db250cm9sJywgU3RyaW5nKGNhY2hlQ29udHJvbCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmFnbWEgIT09IHVuZGVmaW5lZCAmJiBwcmFnbWEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUHJhZ21hJywgU3RyaW5nKHByYWdtYSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhdXRob3JpemF0aW9uICE9PSB1bmRlZmluZWQgJiYgYXV0aG9yaXphdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgU3RyaW5nKGF1dGhvcml6YXRpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIGlmTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnSWYtTWF0Y2gnLCBTdHJpbmcoaWZNYXRjaCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wdXQ8Q29kZUhpZXJhcmNoeVJzcmM+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY29kZUhpZXJhcmNoaWVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb2RlSGllcmFyY2h5TmFtZSkpfWAsXG4gICAgICAgICAgICBjb2RlSGllcmFyY2h5UnNyYyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIENvZGVUYWJsZSBieSBjb2RlIHRhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtIGlmTWF0Y2ggVGhlIElmLU1hdGNoIHJlcXVlc3QtaGVhZGVyIG11c3QgbWF0Y2ggdGhlIGN1cnJlbnQgZVRhZyBvZiB0aGUgcmVzb3VyY2Ugb3IgdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxuICAgICAqIEBwYXJhbSBjb2RlVGFibGVOYW1lIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBDb2RlVGFibGUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGNvZGVUYWJsZVJzcmMgVGhlIENvZGVUYWJsZSByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0SWQgVGhlIHVuaXF1ZSBpZGVudGl0eSBvZiB0aGUgcmVxdWVzdCBhc3NpZ25lZCBieSB0aGUgb3JpZ2luYXRvciB0byBoZWxwIHRyYWNlIHRoZSByZXF1ZXN0IHRocm91Z2ggdGhlIGxvZ3MuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBjYWNoZUNvbnRyb2wgVXNlZCB0byBzcGVjaWZ5IGRpcmVjdGl2ZXMgZm9yIGNhY2hlcyBhbG9uZyB0aGUgcmVxdWVzdC1yZXNwb25zZSBjaGFpblxuICAgICAqIEBwYXJhbSBwcmFnbWEgQW4gaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgaGVhZGVyIHRoYXQgbWF5IGhhdmUgdmFyaW91cyBlZmZlY3RzIGFsb25nIHRoZSByZXF1ZXN0LXJlc3BvbnNlIGNoYWluLiBJdCBpcyB1c2VkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIEhUVFAvMS4wIGNhY2hlcyB3aGVyZSB0aGUgQ2FjaGUtQ29udHJvbCBIVFRQLzEuMSBoZWFkZXIgaXMgbm90IHlldCBwcmVzZW50LlxuICAgICAqIEBwYXJhbSBhdXRob3JpemF0aW9uIENvbnRhaW5zIHRoZSBjcmVkZW50aWFscyB0byBhdXRoZW50aWNhdGUgYSB1c2VyIGFnZW50IHdpdGggYSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUNvZGVUYWJsZVJlc291cmNlQnlDb2RlVGFibGVOYW1lKGlmTWF0Y2g6IHN0cmluZywgY29kZVRhYmxlTmFtZTogc3RyaW5nLCBjb2RlVGFibGVSc3JjOiBDb2RlVGFibGVSc3JjLCByZXF1ZXN0SWQ/OiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBjYWNoZUNvbnRyb2w/OiBzdHJpbmcsIHByYWdtYT86IHN0cmluZywgYXV0aG9yaXphdGlvbj86IHN0cmluZywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPENvZGVUYWJsZVJzcmM+O1xuICAgIHB1YmxpYyB1cGRhdGVDb2RlVGFibGVSZXNvdXJjZUJ5Q29kZVRhYmxlTmFtZShpZk1hdGNoOiBzdHJpbmcsIGNvZGVUYWJsZU5hbWU6IHN0cmluZywgY29kZVRhYmxlUnNyYzogQ29kZVRhYmxlUnNyYywgcmVxdWVzdElkPzogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgY2FjaGVDb250cm9sPzogc3RyaW5nLCBwcmFnbWE/OiBzdHJpbmcsIGF1dGhvcml6YXRpb24/OiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPENvZGVUYWJsZVJzcmM+PjtcbiAgICBwdWJsaWMgdXBkYXRlQ29kZVRhYmxlUmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUoaWZNYXRjaDogc3RyaW5nLCBjb2RlVGFibGVOYW1lOiBzdHJpbmcsIGNvZGVUYWJsZVJzcmM6IENvZGVUYWJsZVJzcmMsIHJlcXVlc3RJZD86IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGNhY2hlQ29udHJvbD86IHN0cmluZywgcHJhZ21hPzogc3RyaW5nLCBhdXRob3JpemF0aW9uPzogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8Q29kZVRhYmxlUnNyYz4+O1xuICAgIHB1YmxpYyB1cGRhdGVDb2RlVGFibGVSZXNvdXJjZUJ5Q29kZVRhYmxlTmFtZShpZk1hdGNoOiBzdHJpbmcsIGNvZGVUYWJsZU5hbWU6IHN0cmluZywgY29kZVRhYmxlUnNyYzogQ29kZVRhYmxlUnNyYywgcmVxdWVzdElkPzogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgY2FjaGVDb250cm9sPzogc3RyaW5nLCBwcmFnbWE/OiBzdHJpbmcsIGF1dGhvcml6YXRpb24/OiBzdHJpbmcsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKGlmTWF0Y2ggPT09IG51bGwgfHwgaWZNYXRjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpZk1hdGNoIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlQ29kZVRhYmxlUmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGVUYWJsZU5hbWUgPT09IG51bGwgfHwgY29kZVRhYmxlTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBjb2RlVGFibGVOYW1lIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlQ29kZVRhYmxlUmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGVUYWJsZVJzcmMgPT09IG51bGwgfHwgY29kZVRhYmxlUnNyYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBjb2RlVGFibGVSc3JjIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlQ29kZVRhYmxlUmVzb3VyY2VCeUNvZGVUYWJsZU5hbWUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXF1ZXN0SWQgIT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVxdWVzdElkJywgU3RyaW5nKHJlcXVlc3RJZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWNoZUNvbnRyb2wgIT09IHVuZGVmaW5lZCAmJiBjYWNoZUNvbnRyb2wgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ2FjaGUtQ29udHJvbCcsIFN0cmluZyhjYWNoZUNvbnRyb2wpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJhZ21hICE9PSB1bmRlZmluZWQgJiYgcHJhZ21hICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1ByYWdtYScsIFN0cmluZyhwcmFnbWEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXV0aG9yaXphdGlvbiAhPT0gdW5kZWZpbmVkICYmIGF1dGhvcml6YXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsIFN0cmluZyhhdXRob3JpemF0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PENvZGVUYWJsZVJzcmM+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY29kZVRhYmxlcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29kZVRhYmxlTmFtZSkpfWAsXG4gICAgICAgICAgICBjb2RlVGFibGVSc3JjLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYW4gSW5jaWRlbnRzIENvbXBsaWFuY2UgQW5kIEVuZm9yY2VtZW50IEludmVzdGlnYXRpb25cbiAgICAgKiBVcGRhdGUgYW4gSW5jaWRlbnRzIENvbXBsaWFuY2UgQW5kIEVuZm9yY2VtZW50IEludmVzdGlnYXRpb25cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIFRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGlmTWF0Y2ggVGhlIElmLU1hdGNoIHJlcXVlc3QtaGVhZGVyIG11c3QgbWF0Y2ggdGhlIGN1cnJlbnQgZVRhZyBvZiB0aGUgcmVzb3VyY2Ugb3IgdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxuICAgICAqIEBwYXJhbSBjb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2UgVGhlIEluY2lkZW50SW52ZXN0aWdhdGlvbiByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBjb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2U/OiBDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2U+O1xuICAgIHB1YmxpYyB1cGRhdGVDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBjb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2U/OiBDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPENvbXBsaWFuY2VBbmRFbmZvcmNlbWVudEludmVzdGlnYXRpb25SZXNvdXJjZT4+O1xuICAgIHB1YmxpYyB1cGRhdGVDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBjb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2U/OiBDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxDb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdXBkYXRlQ29tcGxpYW5jZUFuZEVuZm9yY2VtZW50SW52ZXN0aWdhdGlvbih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgY29tcGxpYW5jZUFuZEVuZm9yY2VtZW50SW52ZXN0aWdhdGlvblJlc291cmNlPzogQ29tcGxpYW5jZUFuZEVuZm9yY2VtZW50SW52ZXN0aWdhdGlvblJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZUNvbXBsaWFuY2VBbmRFbmZvcmNlbWVudEludmVzdGlnYXRpb24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlQ29tcGxpYW5jZUFuZEVuZm9yY2VtZW50SW52ZXN0aWdhdGlvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PENvbXBsaWFuY2VBbmRFbmZvcmNlbWVudEludmVzdGlnYXRpb25SZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfS9jb21wbGlhbmNlQW5kRW5mb3JjZW1lbnRJbnZlc3RpZ2F0aW9uYCxcbiAgICAgICAgICAgIGNvbXBsaWFuY2VBbmRFbmZvcmNlbWVudEludmVzdGlnYXRpb25SZXNvdXJjZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGV4dGVybmFsVXJpR3VpZCBcbiAgICAgKiBAcGFyYW0gZXh0ZXJuYWxVcmlSZXNvdXJjZSBcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlRXh0ZXJuYWxVcmkoZXh0ZXJuYWxVcmlHdWlkOiBzdHJpbmcsIGV4dGVybmFsVXJpUmVzb3VyY2U/OiBFeHRlcm5hbFVyaVJlc291cmNlLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBwdWJsaWMgdXBkYXRlRXh0ZXJuYWxVcmkoZXh0ZXJuYWxVcmlHdWlkOiBzdHJpbmcsIGV4dGVybmFsVXJpUmVzb3VyY2U/OiBFeHRlcm5hbFVyaVJlc291cmNlLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PjtcbiAgICBwdWJsaWMgdXBkYXRlRXh0ZXJuYWxVcmkoZXh0ZXJuYWxVcmlHdWlkOiBzdHJpbmcsIGV4dGVybmFsVXJpUmVzb3VyY2U/OiBFeHRlcm5hbFVyaVJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgcHVibGljIHVwZGF0ZUV4dGVybmFsVXJpKGV4dGVybmFsVXJpR3VpZDogc3RyaW5nLCBleHRlcm5hbFVyaVJlc291cmNlPzogRXh0ZXJuYWxVcmlSZXNvdXJjZSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoZXh0ZXJuYWxVcmlHdWlkID09PSBudWxsIHx8IGV4dGVybmFsVXJpR3VpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBleHRlcm5hbFVyaUd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVFeHRlcm5hbFVyaS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnB1dDxhbnk+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vZXh0ZXJuYWxVcmkvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGV4dGVybmFsVXJpR3VpZCkpfWAsXG4gICAgICAgICAgICBleHRlcm5hbFVyaVJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgSW5jaWRlbnQgQXR0YWNobWVudCBieSBJRFxuICAgICAqIFVwZGF0ZSBJbmNpZGVudCBBdHRhY2htZW50IGJ5IElEXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBUaGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnRHdWlkIFRoZSBhdHRhY2htZW50R3VpZCBvZiB0aGUgQXR0YWNobWVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnRSZXNvdXJjZSBUaGUgSW5jaWRlbnQgQXR0YWNobWVudCByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVJbmNpZGVudEF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGF0dGFjaG1lbnRSZXNvdXJjZT86IEF0dGFjaG1lbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEF0dGFjaG1lbnRSZXNvdXJjZT47XG4gICAgcHVibGljIHVwZGF0ZUluY2lkZW50QXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCBhdHRhY2htZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxBdHRhY2htZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdXBkYXRlSW5jaWRlbnRBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBhdHRhY2htZW50UmVzb3VyY2U/OiBBdHRhY2htZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBdHRhY2htZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdXBkYXRlSW5jaWRlbnRBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBhdHRhY2htZW50UmVzb3VyY2U/OiBBdHRhY2htZW50UmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlSW5jaWRlbnRBdHRhY2htZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSBudWxsIHx8IGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZUluY2lkZW50QXR0YWNobWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0YWNobWVudEd1aWQgPT09IG51bGwgfHwgYXR0YWNobWVudEd1aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYXR0YWNobWVudEd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVJbmNpZGVudEF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wdXQ8QXR0YWNobWVudFJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2luY2lkZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVZZWFyKSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbmNpZGVudE51bWJlclNlcXVlbmNlKSl9L2F0dGFjaG1lbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhhdHRhY2htZW50R3VpZCkpfWAsXG4gICAgICAgICAgICBhdHRhY2htZW50UmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBJbml0aWFsRmlyZVJlcG9ydCByZXNvdXJjZSBieSBJRFxuICAgICAqIFVwZGF0ZSBJbml0aWFsRmlyZVJlcG9ydCBieSBJRFxuICAgICAqIEBwYXJhbSBpbml0aWFsRmlyZVJlcG9ydElkIFRoZSBpbml0aWFsRmlyZVJlcG9ydElkIG9mIHRoZSBJbml0aWFsIEZpcmUgUmVwb3J0IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIGluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2UgVGhlIEluaXRpYWxGaXJlUmVwb3J0IHJlc291cmNlIGNvbnRhaW5pbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUluaXRpYWxGaXJlUmVwb3J0KGluaXRpYWxGaXJlUmVwb3J0SWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIGluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U/OiBJbml0aWFsRmlyZVJlcG9ydFJlc291cmNlLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SW5pdGlhbEZpcmVSZXBvcnRSZXNvdXJjZT47XG4gICAgcHVibGljIHVwZGF0ZUluaXRpYWxGaXJlUmVwb3J0KGluaXRpYWxGaXJlUmVwb3J0SWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIGluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U/OiBJbml0aWFsRmlyZVJlcG9ydFJlc291cmNlLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxJbml0aWFsRmlyZVJlcG9ydFJlc291cmNlPj47XG4gICAgcHVibGljIHVwZGF0ZUluaXRpYWxGaXJlUmVwb3J0KGluaXRpYWxGaXJlUmVwb3J0SWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIGluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U/OiBJbml0aWFsRmlyZVJlcG9ydFJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8SW5pdGlhbEZpcmVSZXBvcnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyB1cGRhdGVJbml0aWFsRmlyZVJlcG9ydChpbml0aWFsRmlyZVJlcG9ydElkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBpbml0aWFsRmlyZVJlcG9ydFJlc291cmNlPzogSW5pdGlhbEZpcmVSZXBvcnRSZXNvdXJjZSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAoaW5pdGlhbEZpcmVSZXBvcnRJZCA9PT0gbnVsbCB8fCBpbml0aWFsRmlyZVJlcG9ydElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluaXRpYWxGaXJlUmVwb3J0SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVJbml0aWFsRmlyZVJlcG9ydC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PEluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5pdGlhbEZpcmVSZXBvcnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpbml0aWFsRmlyZVJlcG9ydElkKSl9YCxcbiAgICAgICAgICAgIGluaXRpYWxGaXJlUmVwb3J0UmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhbiBJbmNpZGVudHMgTWFuYWdpbmcgTGFuZCBBdXRob3JpdHlcbiAgICAgKiBVcGRhdGUgYW4gSW5jaWRlbnRzIE1hbmFnaW5nIExhbmQgQXV0aG9yaXR5XG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBUaGUgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gaW5jaWRlbnRMYW5kQXV0aG9yaXR5UmVzb3VyY2UgVGhlIEluY2lkZW50TGFuZEF1dGhvcml0eSByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVNYW5hZ2luZ0xhbmRBdXRob3JpdHkod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIGluY2lkZW50TGFuZEF1dGhvcml0eVJlc291cmNlPzogSW5jaWRlbnRMYW5kQXV0aG9yaXR5UmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxJbmNpZGVudExhbmRBdXRob3JpdHlSZXNvdXJjZT47XG4gICAgcHVibGljIHVwZGF0ZU1hbmFnaW5nTGFuZEF1dGhvcml0eSh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgaW5jaWRlbnRMYW5kQXV0aG9yaXR5UmVzb3VyY2U/OiBJbmNpZGVudExhbmRBdXRob3JpdHlSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8SW5jaWRlbnRMYW5kQXV0aG9yaXR5UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdXBkYXRlTWFuYWdpbmdMYW5kQXV0aG9yaXR5KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBpbmNpZGVudExhbmRBdXRob3JpdHlSZXNvdXJjZT86IEluY2lkZW50TGFuZEF1dGhvcml0eVJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8SW5jaWRlbnRMYW5kQXV0aG9yaXR5UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdXBkYXRlTWFuYWdpbmdMYW5kQXV0aG9yaXR5KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBpbmNpZGVudExhbmRBdXRob3JpdHlSZXNvdXJjZT86IEluY2lkZW50TGFuZEF1dGhvcml0eVJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZU1hbmFnaW5nTGFuZEF1dGhvcml0eS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gbnVsbCB8fCBpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVNYW5hZ2luZ0xhbmRBdXRob3JpdHkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG4gICAgICAgIGlmIChyZXN0VmVyc2lvbiAhPT0gdW5kZWZpbmVkICYmIHJlc3RWZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ1Jlc3QtVmVyc2lvbicsIFN0cmluZyhyZXN0VmVyc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZk1hdGNoICE9PSB1bmRlZmluZWQgJiYgaWZNYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdJZi1NYXRjaCcsIFN0cmluZyhpZk1hdGNoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnB1dDxJbmNpZGVudExhbmRBdXRob3JpdHlSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfS9tYW5hZ2luZ0xhbmRBdXRob3JpdHlgLFxuICAgICAgICAgICAgaW5jaWRlbnRMYW5kQXV0aG9yaXR5UmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhbiBJbmNpZGVudHMgQ29tcGxpYW5jZSBBbmQgRW5mb3JjZW1lbnQgSW52ZXN0aWdhdGlvblxuICAgICAqIFVwZGF0ZSBhbiBJbmNpZGVudHMgQ29tcGxpYW5jZSBBbmQgRW5mb3JjZW1lbnQgSW52ZXN0aWdhdGlvblxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIG9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvblJlc291cmNlIFRoZSBJbmNpZGVudEludmVzdGlnYXRpb24gcmVzb3VyY2UgY29udGFpbmluZyB0aGUgbmV3IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlT3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBvcmlnaW5BbmRDYXVzZUludmVzdGlnYXRpb25SZXNvdXJjZT86IE9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvblJlc291cmNlLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8T3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uUmVzb3VyY2U+O1xuICAgIHB1YmxpYyB1cGRhdGVPcmlnaW5BbmRDYXVzZUludmVzdGlnYXRpb24od2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIG9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvblJlc291cmNlPzogT3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uUmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPE9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvblJlc291cmNlPj47XG4gICAgcHVibGljIHVwZGF0ZU9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvbih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uUmVzb3VyY2U/OiBPcmlnaW5BbmRDYXVzZUludmVzdGlnYXRpb25SZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PE9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvblJlc291cmNlPj47XG4gICAgcHVibGljIHVwZGF0ZU9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvbih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgb3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uUmVzb3VyY2U/OiBPcmlnaW5BbmRDYXVzZUludmVzdGlnYXRpb25SZXNvdXJjZSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAod2lsZGZpcmVZZWFyID09PSBudWxsIHx8IHdpbGRmaXJlWWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB3aWxkZmlyZVllYXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVPcmlnaW5BbmRDYXVzZUludmVzdGlnYXRpb24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlT3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIGlmTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnSWYtTWF0Y2gnLCBTdHJpbmcoaWZNYXRjaCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wdXQ8T3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uUmVzb3VyY2U+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vaW5jaWRlbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGluY2lkZW50TnVtYmVyU2VxdWVuY2UpKX0vb3JpZ2luQW5kQ2F1c2VJbnZlc3RpZ2F0aW9uYCxcbiAgICAgICAgICAgIG9yaWdpbkFuZENhdXNlSW52ZXN0aWdhdGlvblJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgUHJvdmlzaW9uYWwgWm9uZSByZXNvdXJjZSBieSBJRFxuICAgICAqIFVwZGF0ZSBQcm92aXNpb25hbFpvbmUgYnkgSURcbiAgICAgKiBAcGFyYW0gcHJvdmlzaW9uYWxab25lR3VpZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgUHJvdmlzaW9uYWxab25lIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIHByb3Zpc2lvbmFsWm9uZVJlc291cmNlIFRoZSBQcm92aXNpb25hbFpvbmUgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgbmV3IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlUHJvdmlzaW9uYWxab25lKHByb3Zpc2lvbmFsWm9uZUd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIHByb3Zpc2lvbmFsWm9uZVJlc291cmNlPzogUHJvdmlzaW9uYWxab25lUmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxQcm92aXNpb25hbFpvbmVSZXNvdXJjZT47XG4gICAgcHVibGljIHVwZGF0ZVByb3Zpc2lvbmFsWm9uZShwcm92aXNpb25hbFpvbmVHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBwcm92aXNpb25hbFpvbmVSZXNvdXJjZT86IFByb3Zpc2lvbmFsWm9uZVJlc291cmNlLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxQcm92aXNpb25hbFpvbmVSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyB1cGRhdGVQcm92aXNpb25hbFpvbmUocHJvdmlzaW9uYWxab25lR3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgcHJvdmlzaW9uYWxab25lUmVzb3VyY2U/OiBQcm92aXNpb25hbFpvbmVSZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFByb3Zpc2lvbmFsWm9uZVJlc291cmNlPj47XG4gICAgcHVibGljIHVwZGF0ZVByb3Zpc2lvbmFsWm9uZShwcm92aXNpb25hbFpvbmVHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBwcm92aXNpb25hbFpvbmVSZXNvdXJjZT86IFByb3Zpc2lvbmFsWm9uZVJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChwcm92aXNpb25hbFpvbmVHdWlkID09PSBudWxsIHx8IHByb3Zpc2lvbmFsWm9uZUd1aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcHJvdmlzaW9uYWxab25lR3VpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZVByb3Zpc2lvbmFsWm9uZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PFByb3Zpc2lvbmFsWm9uZVJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3Byb3Zpc2lvbmFsWm9uZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHByb3Zpc2lvbmFsWm9uZUd1aWQpKX1gLFxuICAgICAgICAgICAgcHJvdmlzaW9uYWxab25lUmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBQdWJsaWNSZXBvcnRPZkZpcmUgcmVzb3VyY2UgYnkgSURcbiAgICAgKiBVcGRhdGUgUHVibGljUmVwb3J0T2ZGaXJlIGJ5IElEXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcG9ydE9mRmlyZU51bWJlciBUaGUgcmVwb3J0T2ZGaXJlTnVtYmVyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gcHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2UgVGhlIFB1YmxpY1JlcG9ydE9mRmlyZSByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVQdWJsaWNSZXBvcnRPZkZpcmUod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgcHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U/OiBQdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPjtcbiAgICBwdWJsaWMgdXBkYXRlUHVibGljUmVwb3J0T2ZGaXJlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIHB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPzogUHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPj47XG4gICAgcHVibGljIHVwZGF0ZVB1YmxpY1JlcG9ydE9mRmlyZSh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCBwdWJsaWNSZXBvcnRPZkZpcmVSZXNvdXJjZT86IFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdXBkYXRlUHVibGljUmVwb3J0T2ZGaXJlKHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIHB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPzogUHVibGljUmVwb3J0T2ZGaXJlUmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlWWVhciA9PT0gbnVsbCB8fCB3aWxkZmlyZVllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgd2lsZGZpcmVZZWFyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlUHVibGljUmVwb3J0T2ZGaXJlLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnRPZkZpcmVOdW1iZXIgPT09IG51bGwgfHwgcmVwb3J0T2ZGaXJlTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHJlcG9ydE9mRmlyZU51bWJlciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZVB1YmxpY1JlcG9ydE9mRmlyZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PFB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L3B1YmxpY1JlcG9ydE9mRmlyZXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocmVwb3J0T2ZGaXJlTnVtYmVyKSl9YCxcbiAgICAgICAgICAgIHB1YmxpY1JlcG9ydE9mRmlyZVJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcHVibGlzaGVkSW5jaWRlbnREZXRhaWxHdWlkIFxuICAgICAqIEBwYXJhbSBwdWJsaXNoZWRJbmNpZGVudFJlc291cmNlIFxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVQdWJsaXNoZWRJbmNpZGVudChwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQ6IHN0cmluZywgcHVibGlzaGVkSW5jaWRlbnRSZXNvdXJjZT86IFB1Ymxpc2hlZEluY2lkZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHB1YmxpYyB1cGRhdGVQdWJsaXNoZWRJbmNpZGVudChwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQ6IHN0cmluZywgcHVibGlzaGVkSW5jaWRlbnRSZXNvdXJjZT86IFB1Ymxpc2hlZEluY2lkZW50UmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xuICAgIHB1YmxpYyB1cGRhdGVQdWJsaXNoZWRJbmNpZGVudChwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQ6IHN0cmluZywgcHVibGlzaGVkSW5jaWRlbnRSZXNvdXJjZT86IFB1Ymxpc2hlZEluY2lkZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICBwdWJsaWMgdXBkYXRlUHVibGlzaGVkSW5jaWRlbnQocHVibGlzaGVkSW5jaWRlbnREZXRhaWxHdWlkOiBzdHJpbmcsIHB1Ymxpc2hlZEluY2lkZW50UmVzb3VyY2U/OiBQdWJsaXNoZWRJbmNpZGVudFJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmIChwdWJsaXNoZWRJbmNpZGVudERldGFpbEd1aWQgPT09IG51bGwgfHwgcHVibGlzaGVkSW5jaWRlbnREZXRhaWxHdWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHB1Ymxpc2hlZEluY2lkZW50RGV0YWlsR3VpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZVB1Ymxpc2hlZEluY2lkZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaXNoZWRJbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHB1Ymxpc2hlZEluY2lkZW50RGV0YWlsR3VpZCkpfWAsXG4gICAgICAgICAgICBwdWJsaXNoZWRJbmNpZGVudFJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgUmVwb3J0IG9mIEZpcmUgQXR0YWNobWVudCBieSBJRFxuICAgICAqIFVwZGF0ZSBSZXBvcnQgb2YgRmlyZSBBdHRhY2htZW50IGJ5IElEXG4gICAgICogQHBhcmFtIHdpbGRmaXJlWWVhciBUaGUgd2lsZGZpcmVZZWFyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlcG9ydE9mRmlyZU51bWJlciBUaGUgcmVwb3J0T2ZGaXJlTnVtYmVyIG9mIHRoZSBQdWJsaWMgUmVwb3J0IG9mIEZpcmUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnRHdWlkIFRoZSBhdHRhY2htZW50R3VpZCBvZiB0aGUgQXR0YWNobWVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnRSZXNvdXJjZSBUaGUgUmVwb3J0T2ZGaXJlIEF0dGFjaG1lbnQgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgbmV3IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlUmVwb3J0T2ZGaXJlQXR0YWNobWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgcmVwb3J0T2ZGaXJlTnVtYmVyOiBzdHJpbmcsIGF0dGFjaG1lbnRHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBhdHRhY2htZW50UmVzb3VyY2U/OiBBdHRhY2htZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxBdHRhY2htZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyB1cGRhdGVSZXBvcnRPZkZpcmVBdHRhY2htZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCByZXBvcnRPZkZpcmVOdW1iZXI6IHN0cmluZywgYXR0YWNobWVudEd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGF0dGFjaG1lbnRSZXNvdXJjZT86IEF0dGFjaG1lbnRSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXR0YWNobWVudFJlc291cmNlPj47XG4gICAgcHVibGljIHVwZGF0ZVJlcG9ydE9mRmlyZUF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCBhdHRhY2htZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8QXR0YWNobWVudFJlc291cmNlPj47XG4gICAgcHVibGljIHVwZGF0ZVJlcG9ydE9mRmlyZUF0dGFjaG1lbnQod2lsZGZpcmVZZWFyOiBzdHJpbmcsIHJlcG9ydE9mRmlyZU51bWJlcjogc3RyaW5nLCBhdHRhY2htZW50R3VpZDogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgYXR0YWNobWVudFJlc291cmNlPzogQXR0YWNobWVudFJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZVJlcG9ydE9mRmlyZUF0dGFjaG1lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydE9mRmlyZU51bWJlciA9PT0gbnVsbCB8fCByZXBvcnRPZkZpcmVOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVwb3J0T2ZGaXJlTnVtYmVyIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlUmVwb3J0T2ZGaXJlQXR0YWNobWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0YWNobWVudEd1aWQgPT09IG51bGwgfHwgYXR0YWNobWVudEd1aWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYXR0YWNobWVudEd1aWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVSZXBvcnRPZkZpcmVBdHRhY2htZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PEF0dGFjaG1lbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9wdWJsaWNSZXBvcnRPZkZpcmVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh3aWxkZmlyZVllYXIpKX0vJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJlcG9ydE9mRmlyZU51bWJlcikpfS9hdHRhY2htZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYXR0YWNobWVudEd1aWQpKX1gLFxuICAgICAgICAgICAgYXR0YWNobWVudFJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIFJlc291cmNlIEFsbG9jYXRpb24gQXNzZXNzbWVudCBmb3IgYW4gSW5jaWRlbnQgYnkgSUQuXG4gICAgICogVXBkYXRlIHRoZSBSZXNvdXJjZSBBbGxvY2F0aW9uIEFzc2Vzc21lbnQgZm9yIGFuIEluY2lkZW50IGJ5IElELlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIHJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnRSZXNvdXJjZSBUaGUgUmVzb3VyY2VBbGxvY2F0aW9uQXNzZXNzbWVudCByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCByZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50UmVzb3VyY2U/OiBSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyB1cGRhdGVSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCByZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50UmVzb3VyY2U/OiBSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50UmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyB1cGRhdGVSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCByZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50UmVzb3VyY2U/OiBSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxSZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdXBkYXRlUmVzb3VyY2VBbGxvY2F0aW9uQXNzZXNzbWVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgcmVzb3VyY2VBbGxvY2F0aW9uQXNzZXNzbWVudFJlc291cmNlPzogUmVzb3VyY2VBbGxvY2F0aW9uQXNzZXNzbWVudFJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZVJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlUmVzb3VyY2VBbGxvY2F0aW9uQXNzZXNzbWVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PFJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfS9yZXNvdXJjZUFsbG9jYXRpb25Bc3Nlc3NtZW50YCxcbiAgICAgICAgICAgIHJlc291cmNlQWxsb2NhdGlvbkFzc2Vzc21lbnRSZXNvdXJjZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIFdpbGRmaXJlSW5jaWRlbnQgcmVzb3VyY2UgYnkgSURcbiAgICAgKiBVcGRhdGUgV2lsZGZpcmVJbmNpZGVudCBieSBJRFxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVllYXIgVGhlIHdpbGRmaXJlWWVhciBvZiB0aGUgV2lsZGZpcmUgSW5jaWRlbnQgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIGluY2lkZW50TnVtYmVyU2VxdWVuY2UgVGhlIGluY2lkZW50TnVtYmVyU2VxdWVuY2Ugb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSByZXN0VmVyc2lvbiBUaGUgdmVyc2lvbiBvZiB0aGUgUmVzdCBBUEkgc3VwcG9ydGVkIGJ5IHRoZSByZXF1ZXN0aW5nIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gaWZNYXRjaCBUaGUgSWYtTWF0Y2ggcmVxdWVzdC1oZWFkZXIgbXVzdCBtYXRjaCB0aGUgY3VycmVudCBlVGFnIG9mIHRoZSByZXNvdXJjZSBvciB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICogQHBhcmFtIHdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZSBUaGUgV2lsZGZpcmVJbmNpZGVudCByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVXaWxkZmlyZUluY2lkZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCB3aWxkZmlyZUluY2lkZW50UmVzb3VyY2U/OiBXaWxkZmlyZUluY2lkZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+O1xuICAgIHB1YmxpYyB1cGRhdGVXaWxkZmlyZUluY2lkZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCB3aWxkZmlyZUluY2lkZW50UmVzb3VyY2U/OiBXaWxkZmlyZUluY2lkZW50UmVzb3VyY2UsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyB1cGRhdGVXaWxkZmlyZUluY2lkZW50KHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCB3aWxkZmlyZUluY2lkZW50UmVzb3VyY2U/OiBXaWxkZmlyZUluY2lkZW50UmVzb3VyY2UsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxXaWxkZmlyZUluY2lkZW50UmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdXBkYXRlV2lsZGZpcmVJbmNpZGVudCh3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgd2lsZGZpcmVJbmNpZGVudFJlc291cmNlPzogV2lsZGZpcmVJbmNpZGVudFJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZVdpbGRmaXJlSW5jaWRlbnQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IG51bGwgfHwgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpbmNpZGVudE51bWJlclNlcXVlbmNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlV2lsZGZpcmVJbmNpZGVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PFdpbGRmaXJlSW5jaWRlbnRSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfWAsXG4gICAgICAgICAgICB3aWxkZmlyZUluY2lkZW50UmVzb3VyY2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBXaWxkZmlyZVBhcnR5IHJlc291cmNlIGJ5IElEXG4gICAgICogVXBkYXRlIFdpbGRmaXJlUGFydHkgYnkgSURcbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVQYXJ0eUd1aWQgVGhlIGlkZW50aWZpZXIgb2YgdGhlIFdpbGRmaXJlUGFydHkgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIHJlc3RWZXJzaW9uIFRoZSB2ZXJzaW9uIG9mIHRoZSBSZXN0IEFQSSBzdXBwb3J0ZWQgYnkgdGhlIHJlcXVlc3RpbmcgY2xpZW50LlxuICAgICAqIEBwYXJhbSBpZk1hdGNoIFRoZSBJZi1NYXRjaCByZXF1ZXN0LWhlYWRlciBtdXN0IG1hdGNoIHRoZSBjdXJyZW50IGVUYWcgb2YgdGhlIHJlc291cmNlIG9yIHRoZSByZXF1ZXN0IHdpbGwgZmFpbC5cbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVQYXJ0eVJlc291cmNlIFRoZSBXaWxkZmlyZVBhcnR5IHJlc291cmNlIGNvbnRhaW5pbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZVdpbGRmaXJlUGFydHkod2lsZGZpcmVQYXJ0eUd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIHdpbGRmaXJlUGFydHlSZXNvdXJjZT86IFdpbGRmaXJlUGFydHlSZXNvdXJjZSwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPFdpbGRmaXJlUGFydHlSZXNvdXJjZT47XG4gICAgcHVibGljIHVwZGF0ZVdpbGRmaXJlUGFydHkod2lsZGZpcmVQYXJ0eUd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIHdpbGRmaXJlUGFydHlSZXNvdXJjZT86IFdpbGRmaXJlUGFydHlSZXNvdXJjZSwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8V2lsZGZpcmVQYXJ0eVJlc291cmNlPj47XG4gICAgcHVibGljIHVwZGF0ZVdpbGRmaXJlUGFydHkod2lsZGZpcmVQYXJ0eUd1aWQ6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIHdpbGRmaXJlUGFydHlSZXNvdXJjZT86IFdpbGRmaXJlUGFydHlSZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFdpbGRmaXJlUGFydHlSZXNvdXJjZT4+O1xuICAgIHB1YmxpYyB1cGRhdGVXaWxkZmlyZVBhcnR5KHdpbGRmaXJlUGFydHlHdWlkOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCB3aWxkZmlyZVBhcnR5UmVzb3VyY2U/OiBXaWxkZmlyZVBhcnR5UmVzb3VyY2UsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKHdpbGRmaXJlUGFydHlHdWlkID09PSBudWxsIHx8IHdpbGRmaXJlUGFydHlHdWlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlUGFydHlHdWlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlV2lsZGZpcmVQYXJ0eS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcbiAgICAgICAgaWYgKHJlc3RWZXJzaW9uICE9PSB1bmRlZmluZWQgJiYgcmVzdFZlcnNpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnUmVzdC1WZXJzaW9uJywgU3RyaW5nKHJlc3RWZXJzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlmTWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBpZk1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0lmLU1hdGNoJywgU3RyaW5nKGlmTWF0Y2gpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL3htbCdcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PFdpbGRmaXJlUGFydHlSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS93aWxkZmlyZVBhcnR5cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcod2lsZGZpcmVQYXJ0eUd1aWQpKX1gLFxuICAgICAgICAgICAgd2lsZGZpcmVQYXJ0eVJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgV2lsZGZpcmVQZXJpbWV0ZXIgcmVzb3VyY2VcbiAgICAgKiBVcGRhdGUgV2lsZGZpcmVQZXJpbWV0ZXJcbiAgICAgKiBAcGFyYW0gd2lsZGZpcmVZZWFyIFRoZSB3aWxkZmlyZVllYXIgb2YgdGhlIFdpbGRmaXJlIEluY2lkZW50IHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBpbmNpZGVudE51bWJlclNlcXVlbmNlIFRoZSBpbmNpZGVudE51bWJlclNlcXVlbmNlIG9mIHRoZSBXaWxkZmlyZSBJbmNpZGVudCByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gcmVzdFZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhlIFJlc3QgQVBJIHN1cHBvcnRlZCBieSB0aGUgcmVxdWVzdGluZyBjbGllbnQuXG4gICAgICogQHBhcmFtIGlmTWF0Y2ggVGhlIElmLU1hdGNoIHJlcXVlc3QtaGVhZGVyIG11c3QgbWF0Y2ggdGhlIGN1cnJlbnQgZVRhZyBvZiB0aGUgcmVzb3VyY2Ugb3IgdGhlIHJlcXVlc3Qgd2lsbCBmYWlsLlxuICAgICAqIEBwYXJhbSB3aWxkZmlyZVBlcmltZXRlclJlc291cmNlIFRoZSBXaWxkZmlyZVBlcmltZXRlciByZXNvdXJjZSBjb250YWluaW5nIHRoZSBuZXcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVXaWxkZmlyZVBlcmltZXRlcih3aWxkZmlyZVllYXI6IHN0cmluZywgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZTogc3RyaW5nLCByZXN0VmVyc2lvbj86IG51bWJlciwgaWZNYXRjaD86IHN0cmluZywgd2lsZGZpcmVQZXJpbWV0ZXJSZXNvdXJjZT86IFdpbGRmaXJlUGVyaW1ldGVyUmVzb3VyY2UsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nIHwgJ2FwcGxpY2F0aW9uL3htbCd9KTogT2JzZXJ2YWJsZTxXaWxkZmlyZVBlcmltZXRlclJlc291cmNlPjtcbiAgICBwdWJsaWMgdXBkYXRlV2lsZGZpcmVQZXJpbWV0ZXIod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIHdpbGRmaXJlUGVyaW1ldGVyUmVzb3VyY2U/OiBXaWxkZmlyZVBlcmltZXRlclJlc291cmNlLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbicgfCAnYXBwbGljYXRpb24veG1sJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxXaWxkZmlyZVBlcmltZXRlclJlc291cmNlPj47XG4gICAgcHVibGljIHVwZGF0ZVdpbGRmaXJlUGVyaW1ldGVyKHdpbGRmaXJlWWVhcjogc3RyaW5nLCBpbmNpZGVudE51bWJlclNlcXVlbmNlOiBzdHJpbmcsIHJlc3RWZXJzaW9uPzogbnVtYmVyLCBpZk1hdGNoPzogc3RyaW5nLCB3aWxkZmlyZVBlcmltZXRlclJlc291cmNlPzogV2lsZGZpcmVQZXJpbWV0ZXJSZXNvdXJjZSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFdpbGRmaXJlUGVyaW1ldGVyUmVzb3VyY2U+PjtcbiAgICBwdWJsaWMgdXBkYXRlV2lsZGZpcmVQZXJpbWV0ZXIod2lsZGZpcmVZZWFyOiBzdHJpbmcsIGluY2lkZW50TnVtYmVyU2VxdWVuY2U6IHN0cmluZywgcmVzdFZlcnNpb24/OiBudW1iZXIsIGlmTWF0Y2g/OiBzdHJpbmcsIHdpbGRmaXJlUGVyaW1ldGVyUmVzb3VyY2U/OiBXaWxkZmlyZVBlcmltZXRlclJlc291cmNlLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJyB8ICdhcHBsaWNhdGlvbi94bWwnfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGlmICh3aWxkZmlyZVllYXIgPT09IG51bGwgfHwgd2lsZGZpcmVZZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHdpbGRmaXJlWWVhciB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZVdpbGRmaXJlUGVyaW1ldGVyLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmNpZGVudE51bWJlclNlcXVlbmNlID09PSBudWxsIHx8IGluY2lkZW50TnVtYmVyU2VxdWVuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZVdpbGRmaXJlUGVyaW1ldGVyLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuICAgICAgICBpZiAocmVzdFZlcnNpb24gIT09IHVuZGVmaW5lZCAmJiByZXN0VmVyc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdSZXN0LVZlcnNpb24nLCBTdHJpbmcocmVzdFZlcnNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWZNYXRjaCAhPT0gdW5kZWZpbmVkICYmIGlmTWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnSWYtTWF0Y2gnLCBTdHJpbmcoaWZNYXRjaCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi94bWwnXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnYXBwbGljYXRpb24veG1sJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wdXQ8V2lsZGZpcmVQZXJpbWV0ZXJSZXNvdXJjZT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9pbmNpZGVudHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHdpbGRmaXJlWWVhcikpfS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaW5jaWRlbnROdW1iZXJTZXF1ZW5jZSkpfS93aWxkZmlyZVBlcmltZXRlcmAsXG4gICAgICAgICAgICB3aWxkZmlyZVBlcmltZXRlclJlc291cmNlLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vZGVmYXVsdC5zZXJ2aWNlJztcbmltcG9ydCB7IERlZmF1bHRTZXJ2aWNlIH0gZnJvbSAnLi9kZWZhdWx0LnNlcnZpY2UnO1xuZXhwb3J0IGNvbnN0IEFQSVMgPSBbRGVmYXVsdFNlcnZpY2VdO1xuIiwiLyoqXG4gKiBXRklNIEluY2lkZW50IE1hbmFnZXIgQVBJXG4gKiBObyBkZXNjcmlwdGlvbiBwcm92aWRlZCAoZ2VuZXJhdGVkIGJ5IE9wZW5hcGkgR2VuZXJhdG9yIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuYXBpdG9vbHMvb3BlbmFwaS1nZW5lcmF0b3IpXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDEuOC4wLVNOQVBTSE9UXG4gKiBcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cblxuXG5leHBvcnQgaW50ZXJmYWNlIEhlYWx0aENoZWNrUmVzcG9uc2VSc3JjIHsgXG4gICAgY29tcG9uZW50SWRlbnRpZmllcj86IHN0cmluZztcbiAgICBjb21wb25lbnROYW1lPzogc3RyaW5nO1xuICAgIHZhbGlkYXRpb25TdGF0dXM/OiBIZWFsdGhDaGVja1Jlc3BvbnNlUnNyYy5WYWxpZGF0aW9uU3RhdHVzRW51bTtcbiAgICBzdGF0dXNEZXRhaWxzPzogc3RyaW5nO1xuICAgIGRlcGVuZGVuY3lDb21wb25lbnRSZXNwb25zZXM/OiBBcnJheTxIZWFsdGhDaGVja1Jlc3BvbnNlUnNyYz47XG4gICAgdHlwZTogc3RyaW5nO1xufVxuZXhwb3J0IG5hbWVzcGFjZSBIZWFsdGhDaGVja1Jlc3BvbnNlUnNyYyB7XG4gICAgZXhwb3J0IHR5cGUgVmFsaWRhdGlvblN0YXR1c0VudW0gPSAnUkVEJyB8ICdZRUxMT1cnIHwgJ0dSRUVOJztcbiAgICBleHBvcnQgY29uc3QgVmFsaWRhdGlvblN0YXR1c0VudW0gPSB7XG4gICAgICAgIFJFRDogJ1JFRCcgYXMgVmFsaWRhdGlvblN0YXR1c0VudW0sXG4gICAgICAgIFlFTExPVzogJ1lFTExPVycgYXMgVmFsaWRhdGlvblN0YXR1c0VudW0sXG4gICAgICAgIEdSRUVOOiAnR1JFRU4nIGFzIFZhbGlkYXRpb25TdGF0dXNFbnVtXG4gICAgfTtcbn1cblxuXG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgU2tpcFNlbGYsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cblxuaW1wb3J0IHsgRGVmYXVsdFNlcnZpY2UgfSBmcm9tICcuL2FwaS9kZWZhdWx0LnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiAgICAgIFtdLFxuICBkZWNsYXJhdGlvbnM6IFtdLFxuICBleHBvcnRzOiAgICAgIFtdLFxuICBwcm92aWRlcnM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIEFwaU1vZHVsZSB7XG4gICAgcHVibGljIHN0YXRpYyBmb3JSb290KGNvbmZpZ3VyYXRpb25GYWN0b3J5OiAoKSA9PiBDb25maWd1cmF0aW9uKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogQXBpTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbIHsgcHJvdmlkZTogQ29uZmlndXJhdGlvbiwgdXNlRmFjdG9yeTogY29uZmlndXJhdGlvbkZhY3RvcnkgfSBdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogQXBpTW9kdWxlLFxuICAgICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXBpTW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaW4geW91ciBiYXNlIEFwcE1vZHVsZSBvbmx5LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaHR0cCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBpbXBvcnQgdGhlIEh0dHBDbGllbnRNb2R1bGUgaW4geW91ciBBcHBNb2R1bGUhIFxcbicgK1xuICAgICAgICAgICAgJ1NlZSBhbHNvIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzIwNTc1Jyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOlsiSW5qZWN0aW9uVG9rZW4iLCJIdHRwSGVhZGVycyIsIkh0dHBQYXJhbXMiLCJJbmplY3RhYmxlIiwiSHR0cENsaWVudCIsIk9wdGlvbmFsIiwiSW5qZWN0IiwiSGVhbHRoQ2hlY2tSZXNwb25zZVJzcmMiLCJOZ01vZHVsZSIsIlNraXBTZWxmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQU1BOzs7UUFBQTs7Ozs7OztRQUNJLDRDQUFTOzs7O1lBQVQsVUFBVSxDQUFTO2dCQUNmLE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEM7Ozs7O1FBQ0QsOENBQVc7Ozs7WUFBWCxVQUFZLENBQVM7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