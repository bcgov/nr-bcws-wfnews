{"version":3,"file":"wf1-incidents-rest-api-src-lib.umd.js.map","sources":["ng://@wf1/incidents-rest-api/src/lib/encoder.ts","ng://@wf1/incidents-rest-api/src/lib/variables.ts","ng://@wf1/incidents-rest-api/src/lib/configuration.ts","ng://@wf1/incidents-rest-api/src/lib/api/default.service.ts","ng://@wf1/incidents-rest-api/src/lib/api/api.ts","ng://@wf1/incidents-rest-api/src/lib/model/healthCheckResponseRsrc.ts","ng://@wf1/incidents-rest-api/src/lib/api.module.ts"],"sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * WFIM Incident Manager API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.8.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { AttachmentListResource } from '../model/models';\nimport { AttachmentResource } from '../model/models';\nimport { CodeHierarchyListRsrc } from '../model/models';\nimport { CodeHierarchyRsrc } from '../model/models';\nimport { CodeTableListRsrc } from '../model/models';\nimport { CodeTableRsrc } from '../model/models';\nimport { ComplianceAndEnforcementInvestigationResource } from '../model/models';\nimport { EndpointsResource } from '../model/models';\nimport { ExternalUriResource } from '../model/models';\nimport { HealthCheckResponseRsrc } from '../model/models';\nimport { IncidentApprovalResource } from '../model/models';\nimport { IncidentCauseResource } from '../model/models';\nimport { IncidentCommentListResource } from '../model/models';\nimport { IncidentCommentResource } from '../model/models';\nimport { IncidentLandAuthorityResource } from '../model/models';\nimport { IncidentVerificationResource } from '../model/models';\nimport { InitialFireReportListResource } from '../model/models';\nimport { InitialFireReportResource } from '../model/models';\nimport { MessageListRsrc } from '../model/models';\nimport { OnBehalfOfResource } from '../model/models';\nimport { OriginAndCauseInvestigationResource } from '../model/models';\nimport { ProvisionalZoneListResource } from '../model/models';\nimport { ProvisionalZoneResource } from '../model/models';\nimport { PublicReportOfFireCommentListResource } from '../model/models';\nimport { PublicReportOfFireCommentResource } from '../model/models';\nimport { PublicReportOfFireListResource } from '../model/models';\nimport { PublicReportOfFireResource } from '../model/models';\nimport { PublishedIncidentResource } from '../model/models';\nimport { ResourceAllocationAssessmentResource } from '../model/models';\nimport { SimpleReportOfFireListResource } from '../model/models';\nimport { SimpleWildfireIncidentListResource } from '../model/models';\nimport { StatusChangeListResource } from '../model/models';\nimport { WildfireIncidentListResource } from '../model/models';\nimport { WildfireIncidentResource } from '../model/models';\nimport { WildfirePartyListResource } from '../model/models';\nimport { WildfirePartyResource } from '../model/models';\nimport { WildfirePerimeterResource } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DefaultService {\n\n    protected basePath = 'http://localhost';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Acknowledge a Public Report Of Fire\n     * Acknowledge a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public acknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling acknowledgePublicReportOfFire.');\n        }\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling acknowledgePublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling acknowledgePublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/acknowledge`,\n            onBehalfOfResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add an ReportOfFireRelayMessage to PublicReportOfFire.\n     * Add an ReportOfFireRelayMessage to PublicReportOfFire.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param publicReportOfFireRelayMessage The Public Report Of Fire Relay Message.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public addPublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireRelayMessage?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling addPublicReportOfFireRelayMessage.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling addPublicReportOfFireRelayMessage.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (publicReportOfFireRelayMessage !== undefined && publicReportOfFireRelayMessage !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>publicReportOfFireRelayMessage, 'publicReportOfFireRelayMessage');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/relaymessage`,\n            null,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Assign a Public Report Of Fire\n     * Assign a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param incidentWildfireYear The wildfireYear of the Wildfire Incident resource to be linked to the Report of Fire\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource to be linked to the Report of Fire\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public assignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, incidentWildfireYear?: string, incidentNumberSequence?: string, onBehalfOfResource?: OnBehalfOfResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling assignPublicReportOfFire.');\n        }\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling assignPublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling assignPublicReportOfFire.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (incidentWildfireYear !== undefined && incidentWildfireYear !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>incidentWildfireYear, 'incidentWildfireYear');\n        }\n        if (incidentNumberSequence !== undefined && incidentNumberSequence !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>incidentNumberSequence, 'incidentNumberSequence');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/assign`,\n            onBehalfOfResource,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Cancel a Public Report Of Fire\n     * Cancel a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public cancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling cancelPublicReportOfFire.');\n        }\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling cancelPublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling cancelPublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/cancel`,\n            onBehalfOfResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param externalUriResource \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createExternalUri(externalUriResource?: ExternalUriResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public createExternalUri(externalUriResource?: ExternalUriResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public createExternalUri(externalUriResource?: ExternalUriResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public createExternalUri(externalUriResource?: ExternalUriResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/externalUri`,\n            externalUriResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add Incident Attachment\n     * Add a Incident attachment resource to the List of Incident attachment resources\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The Attachment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentResource>;\n    public createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentResource>>;\n    public createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentResource>>;\n    public createIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, attachmentResource?: AttachmentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling createIncidentAttachment.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling createIncidentAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<AttachmentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments`,\n            attachmentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add an Incident Comment Resource to the List of Incident Comments resources\n     * Add an Incident Comment Resource to the List of Incident Comments resources\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param incidentCommentResource The IncidentComment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<IncidentCommentResource>;\n    public createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<IncidentCommentResource>>;\n    public createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<IncidentCommentResource>>;\n    public createIncidentComment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, incidentCommentResource?: IncidentCommentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling createIncidentComment.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling createIncidentComment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<IncidentCommentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentComments`,\n            incidentCommentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add an Initial Fire Report Resource to the List of Initial Fire Reports resources\n     * Add an Initial Fire Report Resource to the List of Initial Fire Reports resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param initialFireReportResource The InitialFireReport resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<InitialFireReportResource>;\n    public createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<InitialFireReportResource>>;\n    public createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<InitialFireReportResource>>;\n    public createInitialFireReport(restVersion?: number, initialFireReportResource?: InitialFireReportResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<InitialFireReportResource>(`${this.configuration.basePath}/initialFireReports`,\n            initialFireReportResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add an Provisional Zone  Resource to the List of Provisional Zones resources\n     * Add an Provisional Zone  Resource to the List of Provisional Zones resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param provisionalZoneResource The provisionalZone resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<ProvisionalZoneResource>;\n    public createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<ProvisionalZoneResource>>;\n    public createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<ProvisionalZoneResource>>;\n    public createProvisionalZone(restVersion?: number, provisionalZoneResource?: ProvisionalZoneResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<ProvisionalZoneResource>(`${this.configuration.basePath}/provisionalZones`,\n            provisionalZoneResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add an Public Report of Fire Resource to the List of Public Report of Fires resources\n     * Add an Public Report of Fire Resource to the List of Public Report of Fires resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param publicReportOfFireResource The PublicReportOfFire resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public createPublicReportOfFire(restVersion?: number, publicReportOfFireResource?: PublicReportOfFireResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires`,\n            publicReportOfFireResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add an ReportOfFireComment Resource to the List of PublicReportOfFire Comments\n     * Add an ReportOfFireComment Resource to the List of PublicReportOfFire Comments\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param publicReportOfFireCommentResource The ReportOfFireComment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireCommentResource>;\n    public createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireCommentResource>>;\n    public createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireCommentResource>>;\n    public createPublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, publicReportOfFireCommentResource?: PublicReportOfFireCommentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling createPublicReportOfFireComment.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling createPublicReportOfFireComment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireCommentResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/comments`,\n            publicReportOfFireCommentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param publishedIncidentResource \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public createPublishedIncident(publishedIncidentResource?: PublishedIncidentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/publishedIncidents`,\n            publishedIncidentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add Report of Fire Attachment\n     * Add a Report of Fire attachment resource to the List of Report of Fire attachment resources\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The Attachment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentResource>;\n    public createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentResource>>;\n    public createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentResource>>;\n    public createReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, attachmentResource?: AttachmentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling createReportOfFireAttachment.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling createReportOfFireAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<AttachmentResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments`,\n            attachmentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add an Wildfire Incident Resource to the List of Wildfire Incidents resources\n     * Add an Wildfire Incident Resource to the List of Wildfire Incidents resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param wildfireIncidentResource The WildfireIncident resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentResource>;\n    public createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentResource>>;\n    public createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentResource>>;\n    public createWildfireIncident(restVersion?: number, wildfireIncidentResource?: WildfireIncidentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<WildfireIncidentResource>(`${this.configuration.basePath}/incidents`,\n            wildfireIncidentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add an Wildfire Party Resource to the List of Wildfire Partys resources\n     * Add an Wildfire Party Resource to the List of Wildfire Partys resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param wildfirePartyResource The WildfireParty resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfirePartyResource>;\n    public createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfirePartyResource>>;\n    public createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfirePartyResource>>;\n    public createWildfireParty(restVersion?: number, wildfirePartyResource?: WildfirePartyResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<WildfirePartyResource>(`${this.configuration.basePath}/wildfirePartys`,\n            wildfirePartyResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param externalUriGuid \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteExternalUri(externalUriGuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deleteExternalUri(externalUriGuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deleteExternalUri(externalUriGuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deleteExternalUri(externalUriGuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (externalUriGuid === null || externalUriGuid === undefined) {\n            throw new Error('Required parameter externalUriGuid was null or undefined when calling deleteExternalUri.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/externalUri/${encodeURIComponent(String(externalUriGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Incident Attachment by ID\n     * Delete Incident Attachment by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deleteIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling deleteIncidentAttachment.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling deleteIncidentAttachment.');\n        }\n        if (attachmentGuid === null || attachmentGuid === undefined) {\n            throw new Error('Required parameter attachmentGuid was null or undefined when calling deleteIncidentAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments/${encodeURIComponent(String(attachmentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete IncidentComment resource by ID\n     * Delete IncidentComment by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param incidentCommentGuid The identifier of the IncidentComment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deleteIncidentComment(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling deleteIncidentComment.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling deleteIncidentComment.');\n        }\n        if (incidentCommentGuid === null || incidentCommentGuid === undefined) {\n            throw new Error('Required parameter incidentCommentGuid was null or undefined when calling deleteIncidentComment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentComments/${encodeURIComponent(String(incidentCommentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete InitialFireReport resource by ID\n     * Delete InitialFireReport by ID\n     * @param initialFireReportId The initialFireReportId of the Initial Fire Report resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deleteInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (initialFireReportId === null || initialFireReportId === undefined) {\n            throw new Error('Required parameter initialFireReportId was null or undefined when calling deleteInitialFireReport.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/initialFireReports/${encodeURIComponent(String(initialFireReportId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete ProvisionalZone resource by ID\n     * Delete ProvisionalZone by ID\n     * @param provisionalZoneGuid The identifier of the ProvisionalZone resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deleteProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (provisionalZoneGuid === null || provisionalZoneGuid === undefined) {\n            throw new Error('Required parameter provisionalZoneGuid was null or undefined when calling deleteProvisionalZone.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/provisionalZones/${encodeURIComponent(String(provisionalZoneGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete PublicReportOfFire resource by ID\n     * Delete PublicReportOfFire by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deletePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling deletePublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deletePublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete ReportOfFireComment resource by ID\n     * Delete ReportOfFireComment by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param commentGuid The identifier of the PublicReportOfFire Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deletePublicReportOfFireComment(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling deletePublicReportOfFireComment.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deletePublicReportOfFireComment.');\n        }\n        if (commentGuid === null || commentGuid === undefined) {\n            throw new Error('Required parameter commentGuid was null or undefined when calling deletePublicReportOfFireComment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/comments/${encodeURIComponent(String(commentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete ReportOfFireRelayMessage from PublicReportOfFire.\n     * Delete ReportOfFireRelayMessage from PublicReportOfFire.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deletePublicReportOfFireRelayMessage(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling deletePublicReportOfFireRelayMessage.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deletePublicReportOfFireRelayMessage.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/relaymessage`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param publishedIncidentDetailGuid \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePublishedIncident(publishedIncidentDetailGuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public deletePublishedIncident(publishedIncidentDetailGuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public deletePublishedIncident(publishedIncidentDetailGuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public deletePublishedIncident(publishedIncidentDetailGuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (publishedIncidentDetailGuid === null || publishedIncidentDetailGuid === undefined) {\n            throw new Error('Required parameter publishedIncidentDetailGuid was null or undefined when calling deletePublishedIncident.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/publishedIncidents/${encodeURIComponent(String(publishedIncidentDetailGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Report of Fire Attachment by ID\n     * Delete Report of Fire Attachment by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deleteReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling deleteReportOfFireAttachment.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deleteReportOfFireAttachment.');\n        }\n        if (attachmentGuid === null || attachmentGuid === undefined) {\n            throw new Error('Required parameter attachmentGuid was null or undefined when calling deleteReportOfFireAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments/${encodeURIComponent(String(attachmentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete WildfireIncident resource by ID\n     * Delete WildfireIncident by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deleteWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling deleteWildfireIncident.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling deleteWildfireIncident.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete WildfireParty resource by ID\n     * Delete WildfireParty by ID\n     * @param wildfirePartyGuid The identifier of the WildfireParty resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<any>;\n    public deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<any>>;\n    public deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<any>>;\n    public deleteWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n        if (wildfirePartyGuid === null || wildfirePartyGuid === undefined) {\n            throw new Error('Required parameter wildfirePartyGuid was null or undefined when calling deleteWildfireParty.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/wildfirePartys/${encodeURIComponent(String(wildfirePartyGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Code Hierarchy List Resource\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeHierarchyName Filter the results by the codeHierarchyName.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<CodeHierarchyListRsrc>;\n    public getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<CodeHierarchyListRsrc>>;\n    public getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<CodeHierarchyListRsrc>>;\n    public getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>effectiveAsOfDate, 'effectiveAsOfDate');\n        }\n        if (codeHierarchyName !== undefined && codeHierarchyName !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>codeHierarchyName, 'codeHierarchyName');\n        }\n\n        let headers = this.defaultHeaders;\n        if (requestId !== undefined && requestId !== null) {\n            headers = headers.set('RequestId', String(requestId));\n        }\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (cacheControl !== undefined && cacheControl !== null) {\n            headers = headers.set('Cache-Control', String(cacheControl));\n        }\n        if (pragma !== undefined && pragma !== null) {\n            headers = headers.set('Pragma', String(pragma));\n        }\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<CodeHierarchyListRsrc>(`${this.configuration.basePath}/codeHierarchies`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get CodeHierarchy resource by code table name.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<CodeHierarchyRsrc>;\n    public getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<CodeHierarchyRsrc>>;\n    public getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<CodeHierarchyRsrc>>;\n    public getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (codeHierarchyName === null || codeHierarchyName === undefined) {\n            throw new Error('Required parameter codeHierarchyName was null or undefined when calling getCodeHierarchyResourceByCodeTableName.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>effectiveAsOfDate, 'effectiveAsOfDate');\n        }\n\n        let headers = this.defaultHeaders;\n        if (requestId !== undefined && requestId !== null) {\n            headers = headers.set('RequestId', String(requestId));\n        }\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (cacheControl !== undefined && cacheControl !== null) {\n            headers = headers.set('Cache-Control', String(cacheControl));\n        }\n        if (pragma !== undefined && pragma !== null) {\n            headers = headers.set('Pragma', String(pragma));\n        }\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<CodeHierarchyRsrc>(`${this.configuration.basePath}/codeHierarchies/${encodeURIComponent(String(codeHierarchyName))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Code Table List Resource\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeTableName Filter the results by the codeTableName.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<CodeTableListRsrc>;\n    public getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<CodeTableListRsrc>>;\n    public getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<CodeTableListRsrc>>;\n    public getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>effectiveAsOfDate, 'effectiveAsOfDate');\n        }\n        if (codeTableName !== undefined && codeTableName !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>codeTableName, 'codeTableName');\n        }\n\n        let headers = this.defaultHeaders;\n        if (requestId !== undefined && requestId !== null) {\n            headers = headers.set('RequestId', String(requestId));\n        }\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (cacheControl !== undefined && cacheControl !== null) {\n            headers = headers.set('Cache-Control', String(cacheControl));\n        }\n        if (pragma !== undefined && pragma !== null) {\n            headers = headers.set('Pragma', String(pragma));\n        }\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<CodeTableListRsrc>(`${this.configuration.basePath}/codeTables`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get CodeTable resource by code table name.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<CodeTableRsrc>;\n    public getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<CodeTableRsrc>>;\n    public getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<CodeTableRsrc>>;\n    public getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (codeTableName === null || codeTableName === undefined) {\n            throw new Error('Required parameter codeTableName was null or undefined when calling getCodeTableResourceByCodeTableName.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>effectiveAsOfDate, 'effectiveAsOfDate');\n        }\n\n        let headers = this.defaultHeaders;\n        if (requestId !== undefined && requestId !== null) {\n            headers = headers.set('RequestId', String(requestId));\n        }\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (cacheControl !== undefined && cacheControl !== null) {\n            headers = headers.set('Cache-Control', String(cacheControl));\n        }\n        if (pragma !== undefined && pragma !== null) {\n            headers = headers.set('Pragma', String(pragma));\n        }\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<CodeTableRsrc>(`${this.configuration.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an Incidents Compliance And Enforcement Investigation.\n     * Get an Incidents Compliance And Enforcement Investigation.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<ComplianceAndEnforcementInvestigationResource>;\n    public getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<ComplianceAndEnforcementInvestigationResource>>;\n    public getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<ComplianceAndEnforcementInvestigationResource>>;\n    public getComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getComplianceAndEnforcementInvestigation.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getComplianceAndEnforcementInvestigation.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<ComplianceAndEnforcementInvestigationResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/complianceAndEnforcementInvestigation`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param externalUriGuid \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getExternalUri(externalUriGuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public getExternalUri(externalUriGuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public getExternalUri(externalUriGuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public getExternalUri(externalUriGuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (externalUriGuid === null || externalUriGuid === undefined) {\n            throw new Error('Required parameter externalUriGuid was null or undefined when calling getExternalUri.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/externalUri/${encodeURIComponent(String(externalUriGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param sourceObjectUniqueId \n     * @param pageNumber \n     * @param pageRowCount \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public getExternalUriList(sourceObjectUniqueId?: string, pageNumber?: string, pageRowCount?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (sourceObjectUniqueId !== undefined && sourceObjectUniqueId !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>sourceObjectUniqueId, 'sourceObjectUniqueId');\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/externalUri`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Approval Results for an Incident by ID.\n     * Get the Approval Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<IncidentApprovalResource>;\n    public getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<IncidentApprovalResource>>;\n    public getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<IncidentApprovalResource>>;\n    public getIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentApproval.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentApproval.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<IncidentApprovalResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/approval`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Incident Attachment by ID.\n     * Get the Incident Attachment by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentResource>;\n    public getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentResource>>;\n    public getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentResource>>;\n    public getIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentAttachment.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentAttachment.');\n        }\n        if (attachmentGuid === null || attachmentGuid === undefined) {\n            throw new Error('Required parameter attachmentGuid was null or undefined when calling getIncidentAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<AttachmentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments/${encodeURIComponent(String(attachmentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Incident Attachments.\n     * Get list of Incident Attachments.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param archived List archived attachments\n     * @param privateIndicator List private attachments\n     * @param sourceObjectNameCode The sourceObjectNameCode the results to be returned.\n     * @param attachmentTypeCode The attachmentTypeCode the results to be returned.\n     * @param uploadedByUserId The uploadedByUserId the results to be returned.\n     * @param uploadedByByUserType The uploadedByByUserType the results to be returned.\n     * @param uploadedByUserGuid The uploadedByUserGuid the results to be returned.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentListResource>;\n    public getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentListResource>>;\n    public getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentListResource>>;\n    public getIncidentAttachmentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentAttachmentList.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentAttachmentList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (archived !== undefined && archived !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>archived, 'archived');\n        }\n        if (privateIndicator !== undefined && privateIndicator !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>privateIndicator, 'privateIndicator');\n        }\n        if (sourceObjectNameCode) {\n            sourceObjectNameCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'sourceObjectNameCode');\n            })\n        }\n        if (attachmentTypeCode) {\n            attachmentTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'attachmentTypeCode');\n            })\n        }\n        if (uploadedByUserId) {\n            uploadedByUserId.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'uploadedByUserId');\n            })\n        }\n        if (uploadedByByUserType) {\n            uploadedByByUserType.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'uploadedByByUserType');\n            })\n        }\n        if (uploadedByUserGuid) {\n            uploadedByUserGuid.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'uploadedByUserGuid');\n            })\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<AttachmentListResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an Incidents Cause.\n     * Get an Incidents Cause.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<IncidentCauseResource>;\n    public getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<IncidentCauseResource>>;\n    public getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<IncidentCauseResource>>;\n    public getIncidentCause(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentCause.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentCause.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<IncidentCauseResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentCause`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Incident Comment by External ID.\n     * Get the Incident Comment by External ID.\n     * @param externalId The externalId of the Public Report of Fire Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIncidentComment(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<IncidentCommentResource>;\n    public getIncidentComment(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<IncidentCommentResource>>;\n    public getIncidentComment(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<IncidentCommentResource>>;\n    public getIncidentComment(externalId: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (externalId === null || externalId === undefined) {\n            throw new Error('Required parameter externalId was null or undefined when calling getIncidentComment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<IncidentCommentResource>(`${this.configuration.basePath}/incidentComments/externalId/${encodeURIComponent(String(externalId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Incident Comment by ID.\n     * Get the Incident Comment by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param incidentCommentGuid The identifier of the Incident Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<IncidentCommentResource>;\n    public getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<IncidentCommentResource>>;\n    public getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<IncidentCommentResource>>;\n    public getIncidentComment1(wildfireYear: string, incidentNumberSequence: string, incidentCommentGuid: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentComment1.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentComment1.');\n        }\n        if (incidentCommentGuid === null || incidentCommentGuid === undefined) {\n            throw new Error('Required parameter incidentCommentGuid was null or undefined when calling getIncidentComment1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<IncidentCommentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentComments/${encodeURIComponent(String(incidentCommentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Incident Comments.\n     * Get list of Incident Comments.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<IncidentCommentListResource>;\n    public getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<IncidentCommentListResource>>;\n    public getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<IncidentCommentListResource>>;\n    public getIncidentCommentList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentCommentList.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentCommentList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<IncidentCommentListResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentComments`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Verification Results for an Incident by ID.\n     * Get the Verification Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<IncidentVerificationResource>;\n    public getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<IncidentVerificationResource>>;\n    public getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<IncidentVerificationResource>>;\n    public getIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentVerification.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentVerification.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<IncidentVerificationResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/verification`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Initial Fire Report by ID.\n     * Get the Initial Fire Report by ID.\n     * @param initialFireReportId The initialFireReportId of the Initial Fire Report resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getInitialFireReport(initialFireReportId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<InitialFireReportResource>;\n    public getInitialFireReport(initialFireReportId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<InitialFireReportResource>>;\n    public getInitialFireReport(initialFireReportId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<InitialFireReportResource>>;\n    public getInitialFireReport(initialFireReportId: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (initialFireReportId === null || initialFireReportId === undefined) {\n            throw new Error('Required parameter initialFireReportId was null or undefined when calling getInitialFireReport.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<InitialFireReportResource>(`${this.configuration.basePath}/initialFireReports/${encodeURIComponent(String(initialFireReportId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Initial Fire Reports.\n     * Get list of Initial Fire Reports.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<InitialFireReportListResource>;\n    public getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<InitialFireReportListResource>>;\n    public getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<InitialFireReportListResource>>;\n    public getInitialFireReportList(restVersion?: number, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (searchText) {\n            searchText.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'searchText');\n            })\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<InitialFireReportListResource>(`${this.configuration.basePath}/initialFireReports`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an Incidents Managing Land Authority.\n     * Get an Incidents Managing Land Authority.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<IncidentLandAuthorityResource>;\n    public getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<IncidentLandAuthorityResource>>;\n    public getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<IncidentLandAuthorityResource>>;\n    public getManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getManagingLandAuthority.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getManagingLandAuthority.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<IncidentLandAuthorityResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/managingLandAuthority`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an Incidents Compliance And Enforcement Investigation.\n     * Get an Incidents Compliance And Enforcement Investigation.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<OriginAndCauseInvestigationResource>;\n    public getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<OriginAndCauseInvestigationResource>>;\n    public getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<OriginAndCauseInvestigationResource>>;\n    public getOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getOriginAndCauseInvestigation.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getOriginAndCauseInvestigation.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<OriginAndCauseInvestigationResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/originAndCauseInvestigation`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Provisional Zone by ID.\n     * Get the Provisional Zone by ID.\n     * @param provisionalZoneGuid The identifier of the Provisional Zone resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<ProvisionalZoneResource>;\n    public getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<ProvisionalZoneResource>>;\n    public getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<ProvisionalZoneResource>>;\n    public getProvisionalZone(provisionalZoneGuid: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (provisionalZoneGuid === null || provisionalZoneGuid === undefined) {\n            throw new Error('Required parameter provisionalZoneGuid was null or undefined when calling getProvisionalZone.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<ProvisionalZoneResource>(`${this.configuration.basePath}/provisionalZones/${encodeURIComponent(String(provisionalZoneGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Provisional Zones.\n     * Get list of Provisional Zones.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param provisionalZoneGuid Filter the results by the provisionalZoneGuid.\n     * @param provisionalZoneIdentifier Filter the results by the provisionalZoneIdentifier.\n     * @param provisionalZoneTypeCode Filter the results by the provisionalZoneTypeCode.\n     * @param fireCentreOrgUnitIdent Filter the results by the fireCentreOrgUnitIdent.\n     * @param provisionalZonePolygonSpecifiedInd Filter the results by the provisionalZonePolygonSpecifiedInd.\n     * @param dismissedInd Filter the results by the dismissedInd.\n     * @param effectiveTimeStamp Filter the results by the effectiveTimeStamp.\n     * @param expiryTimestamp Filter the results by the expiryTimestamp.\n     * @param effectiveAsOfTimestamp Filter the results by the effectiveAsOfTimesatmp.\n     * @param textSearch Filter the results by the text.\n     * @param provisionedByUserName Filter the results by the provisionedByUserName.\n     * @param provisionedByUserId Filter the results by the provisionedByUserId.\n     * @param lastStateChangeAsOfTimestamp Filter the results by the lastStateChangeAsOfTimestamp.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<ProvisionalZoneListResource>;\n    public getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<ProvisionalZoneListResource>>;\n    public getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<ProvisionalZoneListResource>>;\n    public getProvisionalZoneList(restVersion?: number, provisionalZoneGuid?: Array<string>, provisionalZoneIdentifier?: Array<string>, provisionalZoneTypeCode?: Array<string>, fireCentreOrgUnitIdent?: Array<string>, provisionalZonePolygonSpecifiedInd?: string, dismissedInd?: string, effectiveTimeStamp?: string, expiryTimestamp?: string, effectiveAsOfTimestamp?: string, textSearch?: Array<string>, provisionedByUserName?: Array<string>, provisionedByUserId?: Array<string>, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (provisionalZoneGuid) {\n            provisionalZoneGuid.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'provisionalZoneGuid');\n            })\n        }\n        if (provisionalZoneIdentifier) {\n            provisionalZoneIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'provisionalZoneIdentifier');\n            })\n        }\n        if (provisionalZoneTypeCode) {\n            provisionalZoneTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'provisionalZoneTypeCode');\n            })\n        }\n        if (fireCentreOrgUnitIdent) {\n            fireCentreOrgUnitIdent.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'fireCentreOrgUnitIdent');\n            })\n        }\n        if (provisionalZonePolygonSpecifiedInd !== undefined && provisionalZonePolygonSpecifiedInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>provisionalZonePolygonSpecifiedInd, 'provisionalZonePolygonSpecifiedInd');\n        }\n        if (dismissedInd !== undefined && dismissedInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>dismissedInd, 'dismissedInd');\n        }\n        if (effectiveTimeStamp !== undefined && effectiveTimeStamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>effectiveTimeStamp, 'effectiveTimeStamp');\n        }\n        if (expiryTimestamp !== undefined && expiryTimestamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expiryTimestamp, 'expiryTimestamp');\n        }\n        if (effectiveAsOfTimestamp !== undefined && effectiveAsOfTimestamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>effectiveAsOfTimestamp, 'effectiveAsOfTimestamp');\n        }\n        if (textSearch) {\n            textSearch.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'textSearch');\n            })\n        }\n        if (provisionedByUserName) {\n            provisionedByUserName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'provisionedByUserName');\n            })\n        }\n        if (provisionedByUserId) {\n            provisionedByUserId.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'provisionedByUserId');\n            })\n        }\n        if (lastStateChangeAsOfTimestamp !== undefined && lastStateChangeAsOfTimestamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>lastStateChangeAsOfTimestamp, 'lastStateChangeAsOfTimestamp');\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<ProvisionalZoneListResource>(`${this.configuration.basePath}/provisionalZones`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Public Report of Fire by External ID.\n     * Get the Public Report of Fire by External ID.\n     * @param externalId The externalId of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublicReportOfFire(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public getPublicReportOfFire(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public getPublicReportOfFire(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public getPublicReportOfFire(externalId: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (externalId === null || externalId === undefined) {\n            throw new Error('Required parameter externalId was null or undefined when calling getPublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/externalId/${encodeURIComponent(String(externalId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Public Report of Fire by ID.\n     * Get the Public Report of Fire by ID.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public getPublicReportOfFire1(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFire1.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFire1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Public Report of Fire Comment by External ID.\n     * Get the Public Report of Fire Comment by External ID.\n     * @param externalId The externalId of the Public Report of Fire Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublicReportOfFireComment(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireCommentResource>;\n    public getPublicReportOfFireComment(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireCommentResource>>;\n    public getPublicReportOfFireComment(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireCommentResource>>;\n    public getPublicReportOfFireComment(externalId: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (externalId === null || externalId === undefined) {\n            throw new Error('Required parameter externalId was null or undefined when calling getPublicReportOfFireComment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PublicReportOfFireCommentResource>(`${this.configuration.basePath}/publicReportOfFireComments/externalId/${encodeURIComponent(String(externalId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the PublicReportOfFire Comment by ID.\n     * Get the PublicReportOfFire Comment by ID.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param commentGuid The identifier of the PublicReportOfFire Comment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireCommentResource>;\n    public getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireCommentResource>>;\n    public getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireCommentResource>>;\n    public getPublicReportOfFireComment1(wildfireYear: string, reportOfFireNumber: string, commentGuid: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFireComment1.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFireComment1.');\n        }\n        if (commentGuid === null || commentGuid === undefined) {\n            throw new Error('Required parameter commentGuid was null or undefined when calling getPublicReportOfFireComment1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PublicReportOfFireCommentResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/comments/${encodeURIComponent(String(commentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of PublicReportOfFire Comments.\n     * Get list of PublicReportOfFire Comments.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param systemGeneratedCommentInd Filter the results by the systemGeneratedCommentInd.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireCommentListResource>;\n    public getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireCommentListResource>>;\n    public getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireCommentListResource>>;\n    public getPublicReportOfFireCommentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, searchText?: string, systemGeneratedCommentInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFireCommentList.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFireCommentList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (searchText !== undefined && searchText !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>searchText, 'searchText');\n        }\n        if (systemGeneratedCommentInd !== undefined && systemGeneratedCommentInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>systemGeneratedCommentInd, 'systemGeneratedCommentInd');\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PublicReportOfFireCommentListResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/comments`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Public Report of Fires.\n     * Get list of Public Report of Fires.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param messageStatusCode Filter the results by the messageStatusCode.\n     * @param reportOfFireNumber Filter the results by the reportOfFireNumber.\n     * @param wildfireYear Filter the results by the wildfireYear.\n     * @param interfaceFireInd Filter the results by the interfaceFireInd.\n     * @param minimumReportedDate Filter the results by the minimumReportedDate.\n     * @param reportedByName Filter the results by the reportedByName.\n     * @param receivedByUserId Filter the results by the receivedByUserId.\n     * @param receivedByUserGuid Filter the results by the receivedByUserGuid.\n     * @param acknowledgedByUserId Filter the results by the acknowledgedByUserId.\n     * @param acknowledgedByUserGuid Filter the results by the acknowledgedByUserGuid.\n     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.\n     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.\n     * @param reportedByPartyName Filter the results by the reportedByPartyName.\n     * @param callerName Filter the results by the callerName.\n     * @param lostCallInd Filter the results by the lostCallInd.\n     * @param availableForCallbackInd Filter the results by the availableForCallbackInd.\n     * @param publicReportTypeCode Filter the results by the publicReportTypeCode.\n     * @param fireSizeComparisionCode Filter the results by the fireSizeComparisionCode.\n     * @param rateOfSpreadCode Filter the results by the rateOfSpreadCode.\n     * @param smokeColourCode Filter the results by the smokeColourCode.\n     * @param messageReceivedSource Filter the results by the messageReceivedSource.\n     * @param submittedAsOfTimestamp Filter the results by the submittedTimestamp.\n     * @param receievedAsOfTimestamp Filter the results by the receievedTimestamp.\n     * @param submittedOrReceivedAsOfTimestamp Filter the results by the submittedTimestamp or for RoFs that have not been submitted, by receievedTimestamp.\n     * @param incidentWildfireYear Filter the results by the incidentWildfireYear.\n     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.\n     * @param relayedInd Filter the results by the relayedInd.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireListResource>;\n    public getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireListResource>>;\n    public getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireListResource>>;\n    public getPublicReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, messageReceivedSource?: Array<string>, submittedAsOfTimestamp?: string, receievedAsOfTimestamp?: string, submittedOrReceivedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (searchText) {\n            searchText.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'searchText');\n            })\n        }\n        if (messageStatusCode) {\n            messageStatusCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'messageStatusCode');\n            })\n        }\n        if (reportOfFireNumber) {\n            reportOfFireNumber.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'reportOfFireNumber');\n            })\n        }\n        if (wildfireYear) {\n            wildfireYear.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'wildfireYear');\n            })\n        }\n        if (interfaceFireInd !== undefined && interfaceFireInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>interfaceFireInd, 'interfaceFireInd');\n        }\n        if (minimumReportedDate !== undefined && minimumReportedDate !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>minimumReportedDate, 'minimumReportedDate');\n        }\n        if (reportedByName) {\n            reportedByName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'reportedByName');\n            })\n        }\n        if (receivedByUserId) {\n            receivedByUserId.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'receivedByUserId');\n            })\n        }\n        if (receivedByUserGuid) {\n            receivedByUserGuid.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'receivedByUserGuid');\n            })\n        }\n        if (acknowledgedByUserId) {\n            acknowledgedByUserId.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'acknowledgedByUserId');\n            })\n        }\n        if (acknowledgedByUserGuid) {\n            acknowledgedByUserGuid.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'acknowledgedByUserGuid');\n            })\n        }\n        if (fireCentreOrgUnitIdentifier) {\n            fireCentreOrgUnitIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'fireCentreOrgUnitIdentifier');\n            })\n        }\n        if (zoneOrgUnitIdentifier) {\n            zoneOrgUnitIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'zoneOrgUnitIdentifier');\n            })\n        }\n        if (reportedByPartyName) {\n            reportedByPartyName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'reportedByPartyName');\n            })\n        }\n        if (callerName) {\n            callerName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'callerName');\n            })\n        }\n        if (lostCallInd !== undefined && lostCallInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>lostCallInd, 'lostCallInd');\n        }\n        if (availableForCallbackInd !== undefined && availableForCallbackInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>availableForCallbackInd, 'availableForCallbackInd');\n        }\n        if (publicReportTypeCode) {\n            publicReportTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'publicReportTypeCode');\n            })\n        }\n        if (fireSizeComparisionCode) {\n            fireSizeComparisionCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'fireSizeComparisionCode');\n            })\n        }\n        if (rateOfSpreadCode) {\n            rateOfSpreadCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'rateOfSpreadCode');\n            })\n        }\n        if (smokeColourCode) {\n            smokeColourCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'smokeColourCode');\n            })\n        }\n        if (messageReceivedSource) {\n            messageReceivedSource.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'messageReceivedSource');\n            })\n        }\n        if (submittedAsOfTimestamp !== undefined && submittedAsOfTimestamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>submittedAsOfTimestamp, 'submittedAsOfTimestamp');\n        }\n        if (receievedAsOfTimestamp !== undefined && receievedAsOfTimestamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>receievedAsOfTimestamp, 'receievedAsOfTimestamp');\n        }\n        if (submittedOrReceivedAsOfTimestamp !== undefined && submittedOrReceivedAsOfTimestamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>submittedOrReceivedAsOfTimestamp, 'submittedOrReceivedAsOfTimestamp');\n        }\n        if (incidentWildfireYear) {\n            incidentWildfireYear.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentWildfireYear');\n            })\n        }\n        if (incidentNumberSequence) {\n            incidentNumberSequence.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentNumberSequence');\n            })\n        }\n        if (relayedInd !== undefined && relayedInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>relayedInd, 'relayedInd');\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PublicReportOfFireListResource>(`${this.configuration.basePath}/publicReportOfFires`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Public Report of Fire Status Changes.\n     * Get list of Public Report of Fire Status Changes.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<StatusChangeListResource>;\n    public getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<StatusChangeListResource>>;\n    public getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<StatusChangeListResource>>;\n    public getPublicReportOfFireStatusChangeList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFireStatusChangeList.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFireStatusChangeList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<StatusChangeListResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/statusChanges`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param publishedIncidentDetailGuid \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublishedIncident(publishedIncidentDetailGuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public getPublishedIncident(publishedIncidentDetailGuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public getPublishedIncident(publishedIncidentDetailGuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public getPublishedIncident(publishedIncidentDetailGuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (publishedIncidentDetailGuid === null || publishedIncidentDetailGuid === undefined) {\n            throw new Error('Required parameter publishedIncidentDetailGuid was null or undefined when calling getPublishedIncident.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/publishedIncidents/${encodeURIComponent(String(publishedIncidentDetailGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param incidentGuid \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublishedIncidentByIncidentGuid(incidentGuid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public getPublishedIncidentByIncidentGuid(incidentGuid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public getPublishedIncidentByIncidentGuid(incidentGuid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public getPublishedIncidentByIncidentGuid(incidentGuid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (incidentGuid === null || incidentGuid === undefined) {\n            throw new Error('Required parameter incidentGuid was null or undefined when calling getPublishedIncidentByIncidentGuid.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/publishedIncidents/byIncident/${encodeURIComponent(String(incidentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param pageNumber \n     * @param pageRowCount \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public getPublishedIncidentList(pageNumber?: string, pageRowCount?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/publishedIncidents`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Report of Fire Attachment by ID.\n     * Get the Report of Fire Attachment by ID.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentResource>;\n    public getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentResource>>;\n    public getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentResource>>;\n    public getReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getReportOfFireAttachment.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getReportOfFireAttachment.');\n        }\n        if (attachmentGuid === null || attachmentGuid === undefined) {\n            throw new Error('Required parameter attachmentGuid was null or undefined when calling getReportOfFireAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<AttachmentResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments/${encodeURIComponent(String(attachmentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Report of Fire Attachments.\n     * Get list of Report of Fire Attachments.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param archived List archived attachments\n     * @param privateIndicator List private attachments\n     * @param sourceObjectNameCode The sourceObjectNameCode the results to be returned.\n     * @param attachmentTypeCode The attachmentTypeCode the results to be returned.\n     * @param uploadedByUserId The uploadedByUserId the results to be returned.\n     * @param uploadedByByUserType The uploadedByByUserType the results to be returned.\n     * @param uploadedByUserGuid The uploadedByUserGuid the results to be returned.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentListResource>;\n    public getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentListResource>>;\n    public getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentListResource>>;\n    public getReportOfFireAttachmentList(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, archived?: string, privateIndicator?: string, sourceObjectNameCode?: Array<string>, attachmentTypeCode?: Array<string>, uploadedByUserId?: Array<string>, uploadedByByUserType?: Array<string>, uploadedByUserGuid?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getReportOfFireAttachmentList.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getReportOfFireAttachmentList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (archived !== undefined && archived !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>archived, 'archived');\n        }\n        if (privateIndicator !== undefined && privateIndicator !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>privateIndicator, 'privateIndicator');\n        }\n        if (sourceObjectNameCode) {\n            sourceObjectNameCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'sourceObjectNameCode');\n            })\n        }\n        if (attachmentTypeCode) {\n            attachmentTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'attachmentTypeCode');\n            })\n        }\n        if (uploadedByUserId) {\n            uploadedByUserId.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'uploadedByUserId');\n            })\n        }\n        if (uploadedByByUserType) {\n            uploadedByByUserType.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'uploadedByByUserType');\n            })\n        }\n        if (uploadedByUserGuid) {\n            uploadedByUserGuid.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'uploadedByUserGuid');\n            })\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<AttachmentListResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Resource Allocation Assessment for an Incident by ID.\n     * Get the Resource Allocation Assessment for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<ResourceAllocationAssessmentResource>;\n    public getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<ResourceAllocationAssessmentResource>>;\n    public getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<ResourceAllocationAssessmentResource>>;\n    public getResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getResourceAllocationAssessment.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getResourceAllocationAssessment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<ResourceAllocationAssessmentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/resourceAllocationAssessment`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Simple Report of Fires.\n     * Get list of Simple Report of Fires.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param messageStatusCode Filter the results by the messageStatusCode.\n     * @param reportOfFireNumber Filter the results by the reportOfFireNumber.\n     * @param wildfireYear Filter the results by the wildfireYear.\n     * @param interfaceFireInd Filter the results by the interfaceFireInd.\n     * @param minimumReportedDate Filter the results by the minimumReportedDate.\n     * @param reportedByName Filter the results by the reportedByName.\n     * @param receivedByUserId Filter the results by the receivedByUserId.\n     * @param receivedByUserGuid Filter the results by the receivedByUserGuid.\n     * @param acknowledgedByUserId Filter the results by the acknowledgedByUserId.\n     * @param acknowledgedByUserGuid Filter the results by the acknowledgedByUserGuid.\n     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.\n     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.\n     * @param reportedByPartyName Filter the results by the reportedByPartyName.\n     * @param callerName Filter the results by the callerName.\n     * @param lostCallInd Filter the results by the lostCallInd.\n     * @param availableForCallbackInd Filter the results by the availableForCallbackInd.\n     * @param publicReportTypeCode Filter the results by the publicReportTypeCode.\n     * @param fireSizeComparisionCode Filter the results by the fireSizeComparisionCode.\n     * @param rateOfSpreadCode Filter the results by the rateOfSpreadCode.\n     * @param smokeColourCode Filter the results by the smokeColourCode.\n     * @param submittedAsOfTimestamp Filter the results by the submittedAsOfTimestamp.\n     * @param incidentWildfireYear Filter the results by the incidentWildfireYear.\n     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.\n     * @param relayedInd Filter the results by the relayedInd.\n     * @param lastStateChangeAsOfTimestamp Filter the results by the lastStateChangeAsOfTimestamp.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<SimpleReportOfFireListResource>;\n    public getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<SimpleReportOfFireListResource>>;\n    public getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<SimpleReportOfFireListResource>>;\n    public getSimpleReportOfFireList(restVersion?: number, searchText?: Array<string>, messageStatusCode?: Array<string>, reportOfFireNumber?: Array<string>, wildfireYear?: Array<string>, interfaceFireInd?: string, minimumReportedDate?: string, reportedByName?: Array<string>, receivedByUserId?: Array<string>, receivedByUserGuid?: Array<string>, acknowledgedByUserId?: Array<string>, acknowledgedByUserGuid?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, reportedByPartyName?: Array<string>, callerName?: Array<string>, lostCallInd?: string, availableForCallbackInd?: string, publicReportTypeCode?: Array<string>, fireSizeComparisionCode?: Array<string>, rateOfSpreadCode?: Array<string>, smokeColourCode?: Array<string>, submittedAsOfTimestamp?: string, incidentWildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, relayedInd?: string, lastStateChangeAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (searchText) {\n            searchText.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'searchText');\n            })\n        }\n        if (messageStatusCode) {\n            messageStatusCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'messageStatusCode');\n            })\n        }\n        if (reportOfFireNumber) {\n            reportOfFireNumber.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'reportOfFireNumber');\n            })\n        }\n        if (wildfireYear) {\n            wildfireYear.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'wildfireYear');\n            })\n        }\n        if (interfaceFireInd !== undefined && interfaceFireInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>interfaceFireInd, 'interfaceFireInd');\n        }\n        if (minimumReportedDate !== undefined && minimumReportedDate !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>minimumReportedDate, 'minimumReportedDate');\n        }\n        if (reportedByName) {\n            reportedByName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'reportedByName');\n            })\n        }\n        if (receivedByUserId) {\n            receivedByUserId.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'receivedByUserId');\n            })\n        }\n        if (receivedByUserGuid) {\n            receivedByUserGuid.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'receivedByUserGuid');\n            })\n        }\n        if (acknowledgedByUserId) {\n            acknowledgedByUserId.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'acknowledgedByUserId');\n            })\n        }\n        if (acknowledgedByUserGuid) {\n            acknowledgedByUserGuid.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'acknowledgedByUserGuid');\n            })\n        }\n        if (fireCentreOrgUnitIdentifier) {\n            fireCentreOrgUnitIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'fireCentreOrgUnitIdentifier');\n            })\n        }\n        if (zoneOrgUnitIdentifier) {\n            zoneOrgUnitIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'zoneOrgUnitIdentifier');\n            })\n        }\n        if (reportedByPartyName) {\n            reportedByPartyName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'reportedByPartyName');\n            })\n        }\n        if (callerName) {\n            callerName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'callerName');\n            })\n        }\n        if (lostCallInd !== undefined && lostCallInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>lostCallInd, 'lostCallInd');\n        }\n        if (availableForCallbackInd !== undefined && availableForCallbackInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>availableForCallbackInd, 'availableForCallbackInd');\n        }\n        if (publicReportTypeCode) {\n            publicReportTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'publicReportTypeCode');\n            })\n        }\n        if (fireSizeComparisionCode) {\n            fireSizeComparisionCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'fireSizeComparisionCode');\n            })\n        }\n        if (rateOfSpreadCode) {\n            rateOfSpreadCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'rateOfSpreadCode');\n            })\n        }\n        if (smokeColourCode) {\n            smokeColourCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'smokeColourCode');\n            })\n        }\n        if (submittedAsOfTimestamp !== undefined && submittedAsOfTimestamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>submittedAsOfTimestamp, 'submittedAsOfTimestamp');\n        }\n        if (incidentWildfireYear) {\n            incidentWildfireYear.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentWildfireYear');\n            })\n        }\n        if (incidentNumberSequence) {\n            incidentNumberSequence.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentNumberSequence');\n            })\n        }\n        if (relayedInd !== undefined && relayedInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>relayedInd, 'relayedInd');\n        }\n        if (lastStateChangeAsOfTimestamp !== undefined && lastStateChangeAsOfTimestamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>lastStateChangeAsOfTimestamp, 'lastStateChangeAsOfTimestamp');\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<SimpleReportOfFireListResource>(`${this.configuration.basePath}/simpleReportOfFires`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Simple Wildfire Incidents.\n     * Get list of Simple Wildfire Incidents.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param wildfireYear Filter the results by the wildfireYear.\n     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.\n     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.\n     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.\n     * @param incidentStatusCode Filter the results by the incidentStatusCode.\n     * @param incidentTypeCode Filter the results by the incidentTypeCode.\n     * @param stageOfControlCode Filter the results by the stageOfControlCode.\n     * @param responseTypeCode Filter the results by the responseTypeCode.\n     * @param suspectedCauseCategoryCode Filter the results by the suspectedCauseCategoryCode.\n     * @param lastUpdatedAsOfTimestamp Filter the results by the lastUpdatedAsOfTimestamp.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<SimpleWildfireIncidentListResource>;\n    public getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<SimpleWildfireIncidentListResource>>;\n    public getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<SimpleWildfireIncidentListResource>>;\n    public getSimpleWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, incidentStatusCode?: Array<string>, incidentTypeCode?: Array<string>, stageOfControlCode?: Array<string>, responseTypeCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, lastUpdatedAsOfTimestamp?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (searchText) {\n            searchText.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'searchText');\n            })\n        }\n        if (wildfireYear) {\n            wildfireYear.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'wildfireYear');\n            })\n        }\n        if (incidentNumberSequence) {\n            incidentNumberSequence.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentNumberSequence');\n            })\n        }\n        if (fireCentreOrgUnitIdentifier) {\n            fireCentreOrgUnitIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'fireCentreOrgUnitIdentifier');\n            })\n        }\n        if (zoneOrgUnitIdentifier) {\n            zoneOrgUnitIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'zoneOrgUnitIdentifier');\n            })\n        }\n        if (incidentStatusCode) {\n            incidentStatusCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentStatusCode');\n            })\n        }\n        if (incidentTypeCode) {\n            incidentTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentTypeCode');\n            })\n        }\n        if (stageOfControlCode) {\n            stageOfControlCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'stageOfControlCode');\n            })\n        }\n        if (responseTypeCode) {\n            responseTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'responseTypeCode');\n            })\n        }\n        if (suspectedCauseCategoryCode) {\n            suspectedCauseCategoryCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'suspectedCauseCategoryCode');\n            })\n        }\n        if (lastUpdatedAsOfTimestamp !== undefined && lastUpdatedAsOfTimestamp !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>lastUpdatedAsOfTimestamp, 'lastUpdatedAsOfTimestamp');\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<SimpleWildfireIncidentListResource>(`${this.configuration.basePath}/simpleWildfireIncidents`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Top Level Resources.\n     * Get Top Level Resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTopLevel(restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<EndpointsResource>;\n    public getTopLevel(restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<EndpointsResource>>;\n    public getTopLevel(restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<EndpointsResource>>;\n    public getTopLevel(restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<EndpointsResource>(`${this.configuration.basePath}/`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Wildfire Incident by External ID.\n     * Get the Wildfire Incident by External ID.\n     * @param externalId The externalId of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWildfireIncident(externalId: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentResource>;\n    public getWildfireIncident(externalId: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentResource>>;\n    public getWildfireIncident(externalId: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentResource>>;\n    public getWildfireIncident(externalId: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (externalId === null || externalId === undefined) {\n            throw new Error('Required parameter externalId was null or undefined when calling getWildfireIncident.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<WildfireIncidentResource>(`${this.configuration.basePath}/incidents/externalId/${encodeURIComponent(String(externalId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Wildfire Incident by ID.\n     * Get the Wildfire Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentResource>;\n    public getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentResource>>;\n    public getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentResource>>;\n    public getWildfireIncident1(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getWildfireIncident1.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getWildfireIncident1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<WildfireIncidentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Wildfire Incident by Incident GUID.\n     * Get the Wildfire Incident by Incident GUID.\n     * @param incidentGuid The incidentGuid of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentResource>;\n    public getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentResource>>;\n    public getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentResource>>;\n    public getWildfireIncidentByIncidentGuid(incidentGuid: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (incidentGuid === null || incidentGuid === undefined) {\n            throw new Error('Required parameter incidentGuid was null or undefined when calling getWildfireIncidentByIncidentGuid.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<WildfireIncidentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(incidentGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Wildfire Incidents.\n     * Get list of Wildfire Incidents.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param searchText Filter the results by the searchText.\n     * @param wildfireYear Filter the results by the wildfireYear.\n     * @param incidentNumberSequence Filter the results by the incidentNumberSequence.\n     * @param incidentId Filter the results by the incidentId.\n     * @param incidentName Filter the results by the incidentName.\n     * @param claimExpectedInd Filter the results by the claimExpectedInd.\n     * @param rehabilitationPlanRequiredInd Filter the results by the rehabilitationPlanRequiredInd.\n     * @param paperTrailedInd Filter the results by the paperTrailedInd.\n     * @param fieldPhotoInd Filter the results by the fieldPhotoInd.\n     * @param finalReportCompleteInd Filter the results by the finalReportCompleteInd.\n     * @param incidentCommanderName Filter the results by the incidentCommanderName.\n     * @param signoffSignatureInd Filter the results by the signoffSignatureInd.\n     * @param agencyAssistanceTaskIdentifier Filter the results by the agencyAssistanceTaskIdentifier.\n     * @param approvalSignatureName Filter the results by the approvalSignatureName.\n     * @param approvalSignatureInd Filter the results by the approvalSignatureInd.\n     * @param fireCentreOrgUnitIdentifier Filter the results by the fireCentreOrgUnitIdentifier.\n     * @param zoneOrgUnitIdentifier Filter the results by the zoneOrgUnitIdentifier.\n     * @param detectionSourceCode Filter the results by the detectionSourceCode.\n     * @param fireClassificationCode Filter the results by the fireClassificationCode.\n     * @param agencyAssistTypeCode Filter the results by the agencyAssistTypeCode.\n     * @param responseTypeCode Filter the results by the responseTypeCode.\n     * @param assistingPartyName Filter the results by the assistingPartyName.\n     * @param discoveredByPartyName Filter the results by the discoveredByPartyName.\n     * @param firstActionedByPartyName Filter the results by the firstActionedByPartyName.\n     * @param leadByPartyName Filter the results by the leadByPartyName.\n     * @param incidentStatusCode Filter the results by the incidentStatusCode.\n     * @param incidentNumberLabel Filter the results by the incidentNumberLabel.\n     * @param probabilityOfInitialAttackSuccessCode Filter the results by the probabilityOfInitialAttackSuccessCode.\n     * @param suspectedCauseCategoryCode Filter the results by the suspectedCauseCategoryCode.\n     * @param incidentCategoryCode Filter the results by the incidentCategoryCode.\n     * @param incidentTypeCode Filter the results by the incidentTypeCode.\n     * @param fireOfNotePublishedInd Filter the results by the fireOfNotePublishedInd.\n     * @param wasFireOfNotePublishedInd Filter the results by the wasFireOfNotePublishedInd.\n     * @param stageOfControlCode Filter the results by the stageOfControlCode.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentListResource>;\n    public getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentListResource>>;\n    public getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentListResource>>;\n    public getWildfireIncidentList(restVersion?: number, searchText?: Array<string>, wildfireYear?: Array<string>, incidentNumberSequence?: Array<string>, incidentId?: Array<string>, incidentName?: Array<string>, claimExpectedInd?: string, rehabilitationPlanRequiredInd?: string, paperTrailedInd?: string, fieldPhotoInd?: string, finalReportCompleteInd?: string, incidentCommanderName?: Array<string>, signoffSignatureInd?: string, agencyAssistanceTaskIdentifier?: Array<string>, approvalSignatureName?: Array<string>, approvalSignatureInd?: string, fireCentreOrgUnitIdentifier?: Array<string>, zoneOrgUnitIdentifier?: Array<string>, detectionSourceCode?: Array<string>, fireClassificationCode?: Array<string>, agencyAssistTypeCode?: Array<string>, responseTypeCode?: Array<string>, assistingPartyName?: Array<string>, discoveredByPartyName?: Array<string>, firstActionedByPartyName?: Array<string>, leadByPartyName?: Array<string>, incidentStatusCode?: Array<string>, incidentNumberLabel?: Array<string>, probabilityOfInitialAttackSuccessCode?: Array<string>, suspectedCauseCategoryCode?: Array<string>, incidentCategoryCode?: Array<string>, incidentTypeCode?: Array<string>, fireOfNotePublishedInd?: string, wasFireOfNotePublishedInd?: string, stageOfControlCode?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (searchText) {\n            searchText.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'searchText');\n            })\n        }\n        if (wildfireYear) {\n            wildfireYear.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'wildfireYear');\n            })\n        }\n        if (incidentNumberSequence) {\n            incidentNumberSequence.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentNumberSequence');\n            })\n        }\n        if (incidentId) {\n            incidentId.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentId');\n            })\n        }\n        if (incidentName) {\n            incidentName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentName');\n            })\n        }\n        if (claimExpectedInd !== undefined && claimExpectedInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>claimExpectedInd, 'claimExpectedInd');\n        }\n        if (rehabilitationPlanRequiredInd !== undefined && rehabilitationPlanRequiredInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>rehabilitationPlanRequiredInd, 'rehabilitationPlanRequiredInd');\n        }\n        if (paperTrailedInd !== undefined && paperTrailedInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>paperTrailedInd, 'paperTrailedInd');\n        }\n        if (fieldPhotoInd !== undefined && fieldPhotoInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>fieldPhotoInd, 'fieldPhotoInd');\n        }\n        if (finalReportCompleteInd !== undefined && finalReportCompleteInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>finalReportCompleteInd, 'finalReportCompleteInd');\n        }\n        if (incidentCommanderName) {\n            incidentCommanderName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentCommanderName');\n            })\n        }\n        if (signoffSignatureInd !== undefined && signoffSignatureInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>signoffSignatureInd, 'signoffSignatureInd');\n        }\n        if (agencyAssistanceTaskIdentifier) {\n            agencyAssistanceTaskIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'agencyAssistanceTaskIdentifier');\n            })\n        }\n        if (approvalSignatureName) {\n            approvalSignatureName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'approvalSignatureName');\n            })\n        }\n        if (approvalSignatureInd !== undefined && approvalSignatureInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>approvalSignatureInd, 'approvalSignatureInd');\n        }\n        if (fireCentreOrgUnitIdentifier) {\n            fireCentreOrgUnitIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'fireCentreOrgUnitIdentifier');\n            })\n        }\n        if (zoneOrgUnitIdentifier) {\n            zoneOrgUnitIdentifier.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'zoneOrgUnitIdentifier');\n            })\n        }\n        if (detectionSourceCode) {\n            detectionSourceCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'detectionSourceCode');\n            })\n        }\n        if (fireClassificationCode) {\n            fireClassificationCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'fireClassificationCode');\n            })\n        }\n        if (agencyAssistTypeCode) {\n            agencyAssistTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'agencyAssistTypeCode');\n            })\n        }\n        if (responseTypeCode) {\n            responseTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'responseTypeCode');\n            })\n        }\n        if (assistingPartyName) {\n            assistingPartyName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'assistingPartyName');\n            })\n        }\n        if (discoveredByPartyName) {\n            discoveredByPartyName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'discoveredByPartyName');\n            })\n        }\n        if (firstActionedByPartyName) {\n            firstActionedByPartyName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'firstActionedByPartyName');\n            })\n        }\n        if (leadByPartyName) {\n            leadByPartyName.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'leadByPartyName');\n            })\n        }\n        if (incidentStatusCode) {\n            incidentStatusCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentStatusCode');\n            })\n        }\n        if (incidentNumberLabel) {\n            incidentNumberLabel.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentNumberLabel');\n            })\n        }\n        if (probabilityOfInitialAttackSuccessCode) {\n            probabilityOfInitialAttackSuccessCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'probabilityOfInitialAttackSuccessCode');\n            })\n        }\n        if (suspectedCauseCategoryCode) {\n            suspectedCauseCategoryCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'suspectedCauseCategoryCode');\n            })\n        }\n        if (incidentCategoryCode) {\n            incidentCategoryCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentCategoryCode');\n            })\n        }\n        if (incidentTypeCode) {\n            incidentTypeCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'incidentTypeCode');\n            })\n        }\n        if (fireOfNotePublishedInd !== undefined && fireOfNotePublishedInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>fireOfNotePublishedInd, 'fireOfNotePublishedInd');\n        }\n        if (wasFireOfNotePublishedInd !== undefined && wasFireOfNotePublishedInd !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>wasFireOfNotePublishedInd, 'wasFireOfNotePublishedInd');\n        }\n        if (stageOfControlCode) {\n            stageOfControlCode.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'stageOfControlCode');\n            })\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<WildfireIncidentListResource>(`${this.configuration.basePath}/incidents`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Wildfire Incident Status Changes.\n     * Get list of Wildfire Incident Status Changes.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<StatusChangeListResource>;\n    public getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<StatusChangeListResource>>;\n    public getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<StatusChangeListResource>>;\n    public getWildfireIncidentStatusChangeList(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getWildfireIncidentStatusChangeList.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getWildfireIncidentStatusChangeList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<StatusChangeListResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/statusChanges`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Wildfire Party by ID.\n     * Get the Wildfire Party by ID.\n     * @param wildfirePartyGuid The identifier of the Wildfire Party resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfirePartyResource>;\n    public getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfirePartyResource>>;\n    public getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfirePartyResource>>;\n    public getWildfireParty(wildfirePartyGuid: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfirePartyGuid === null || wildfirePartyGuid === undefined) {\n            throw new Error('Required parameter wildfirePartyGuid was null or undefined when calling getWildfireParty.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<WildfirePartyResource>(`${this.configuration.basePath}/wildfirePartys/${encodeURIComponent(String(wildfirePartyGuid))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of Wildfire Partys.\n     * Get list of Wildfire Partys.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param partyName Filter the results by the partyName.\n     * @param partyTypeCode Filter the results by the partyTypeCode.\n     * @param partyUsageTypeCode Filter the results by the partyUsageTypeCode.\n     * @param effectiveAsOfDate Filter the results by the effectiveAsOfDate.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param expand The level of child resources to load. Zero for no child resources.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfirePartyListResource>;\n    public getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfirePartyListResource>>;\n    public getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfirePartyListResource>>;\n    public getWildfirePartyList(restVersion?: number, partyName?: string, partyTypeCode?: string, partyUsageTypeCode?: string, effectiveAsOfDate?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, expand?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (partyName !== undefined && partyName !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>partyName, 'partyName');\n        }\n        if (partyTypeCode !== undefined && partyTypeCode !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>partyTypeCode, 'partyTypeCode');\n        }\n        if (partyUsageTypeCode !== undefined && partyUsageTypeCode !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>partyUsageTypeCode, 'partyUsageTypeCode');\n        }\n        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>effectiveAsOfDate, 'effectiveAsOfDate');\n        }\n        if (pageNumber !== undefined && pageNumber !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageNumber, 'pageNumber');\n        }\n        if (pageRowCount !== undefined && pageRowCount !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>pageRowCount, 'pageRowCount');\n        }\n        if (orderBy !== undefined && orderBy !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>orderBy, 'orderBy');\n        }\n        if (expand !== undefined && expand !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>expand, 'expand');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<WildfirePartyListResource>(`${this.configuration.basePath}/wildfirePartys`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the Wildfire Perimeter.\n     * Get the Wildfire Perimeter.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfirePerimeterResource>;\n    public getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfirePerimeterResource>>;\n    public getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfirePerimeterResource>>;\n    public getWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling getWildfirePerimeter.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getWildfirePerimeter.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<WildfirePerimeterResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/wildfirePerimeter`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Query the health of the service.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param callstack A comm separated list of the identifier of the calling components.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HealthCheckResponseRsrc>;\n    public queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<HealthCheckResponseRsrc>>;\n    public queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<HealthCheckResponseRsrc>>;\n    public queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (callstack !== undefined && callstack !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>callstack, 'callstack');\n        }\n\n        let headers = this.defaultHeaders;\n        if (requestId !== undefined && requestId !== null) {\n            headers = headers.set('RequestId', String(requestId));\n        }\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (cacheControl !== undefined && cacheControl !== null) {\n            headers = headers.set('Cache-Control', String(cacheControl));\n        }\n        if (pragma !== undefined && pragma !== null) {\n            headers = headers.set('Pragma', String(pragma));\n        }\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<HealthCheckResponseRsrc>(`${this.configuration.basePath}/checkHealth`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Redact Incident Attachment by ID\n     * Redact Incident Attachment by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The Incident Attachment resource containing the new file id and path.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentResource>;\n    public redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentResource>>;\n    public redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentResource>>;\n    public redactIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling redactIncidentAttachment.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling redactIncidentAttachment.');\n        }\n        if (attachmentGuid === null || attachmentGuid === undefined) {\n            throw new Error('Required parameter attachmentGuid was null or undefined when calling redactIncidentAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<AttachmentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments/${encodeURIComponent(String(attachmentGuid))}/redact`,\n            attachmentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Redact Report of Fire Attachment by ID\n     * Redact Report of Fire Attachment by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The ReportOfFire Attachment resource containing the new file id and path.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentResource>;\n    public redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentResource>>;\n    public redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentResource>>;\n    public redactReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling redactReportOfFireAttachment.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling redactReportOfFireAttachment.');\n        }\n        if (attachmentGuid === null || attachmentGuid === undefined) {\n            throw new Error('Required parameter attachmentGuid was null or undefined when calling redactReportOfFireAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<AttachmentResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments/${encodeURIComponent(String(attachmentGuid))}/redact`,\n            attachmentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Review a Received Public Report Of Fire\n     * Review a Received Public Report Of Fire\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public reviewPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling reviewPublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling reviewPublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/review`,\n            onBehalfOfResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Signoff the Approval Results for an Incident by ID.\n     * Signoff the Approval Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentResource>;\n    public signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentResource>>;\n    public signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentResource>>;\n    public signoffIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling signoffIncidentApproval.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling signoffIncidentApproval.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<WildfireIncidentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/approval`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Signoff the Verification Results for an Incident by ID.\n     * Signoff the Verification Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentResource>;\n    public signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentResource>>;\n    public signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentResource>>;\n    public signoffIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling signoffIncidentVerification.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling signoffIncidentVerification.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<WildfireIncidentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/verification`,\n            null,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Submit a Public Report Of Fire\n     * Submit a Public Report Of Fire\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public submitPublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, onBehalfOfResource?: OnBehalfOfResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling submitPublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling submitPublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/submit`,\n            onBehalfOfResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Unacknowledge a Public Report Of Fire\n     * Unacknowledge a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public unacknowledgePublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling unacknowledgePublicReportOfFire.');\n        }\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling unacknowledgePublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling unacknowledgePublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/unacknowledge`,\n            onBehalfOfResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Unassign a Public Report Of Fire\n     * Unassign a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public unassignPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling unassignPublicReportOfFire.');\n        }\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling unassignPublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling unassignPublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/unassign`,\n            onBehalfOfResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Uncancel a Public Report Of Fire\n     * Uncancel a Public Report Of Fire\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param onBehalfOfResource The OnBehalfOf resource containing the audit values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public uncancelPublicReportOfFire(ifMatch: string, wildfireYear: string, reportOfFireNumber: string, restVersion?: number, onBehalfOfResource?: OnBehalfOfResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling uncancelPublicReportOfFire.');\n        }\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling uncancelPublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling uncancelPublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/uncancel`,\n            onBehalfOfResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Unsign the Approval Results for an Incident by ID.\n     * Unsign the Approval Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentResource>;\n    public unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentResource>>;\n    public unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentResource>>;\n    public unsignIncidentApproval(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling unsignIncidentApproval.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling unsignIncidentApproval.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<WildfireIncidentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/approval`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Unsign the Verification Results for an Incident by ID.\n     * Unsign the Verification Results for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentResource>;\n    public unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentResource>>;\n    public unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentResource>>;\n    public unsignIncidentVerification(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling unsignIncidentVerification.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling unsignIncidentVerification.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.delete<WildfireIncidentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/verification`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update CodeHierarchy by code table name.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param codeHierarchyRsrc The CodeHierarchy resource containing the new values.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<CodeHierarchyRsrc>;\n    public updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<CodeHierarchyRsrc>>;\n    public updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<CodeHierarchyRsrc>>;\n    public updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeHierarchyResourceByCodeTableName.');\n        }\n        if (codeHierarchyName === null || codeHierarchyName === undefined) {\n            throw new Error('Required parameter codeHierarchyName was null or undefined when calling updateCodeHierarchyResourceByCodeTableName.');\n        }\n        if (codeHierarchyRsrc === null || codeHierarchyRsrc === undefined) {\n            throw new Error('Required parameter codeHierarchyRsrc was null or undefined when calling updateCodeHierarchyResourceByCodeTableName.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (requestId !== undefined && requestId !== null) {\n            headers = headers.set('RequestId', String(requestId));\n        }\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (cacheControl !== undefined && cacheControl !== null) {\n            headers = headers.set('Cache-Control', String(cacheControl));\n        }\n        if (pragma !== undefined && pragma !== null) {\n            headers = headers.set('Pragma', String(pragma));\n        }\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<CodeHierarchyRsrc>(`${this.configuration.basePath}/codeHierarchies/${encodeURIComponent(String(codeHierarchyName))}`,\n            codeHierarchyRsrc,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update CodeTable by code table name.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param codeTableRsrc The CodeTable resource containing the new values.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<CodeTableRsrc>;\n    public updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<CodeTableRsrc>>;\n    public updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<CodeTableRsrc>>;\n    public updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeTableResourceByCodeTableName.');\n        }\n        if (codeTableName === null || codeTableName === undefined) {\n            throw new Error('Required parameter codeTableName was null or undefined when calling updateCodeTableResourceByCodeTableName.');\n        }\n        if (codeTableRsrc === null || codeTableRsrc === undefined) {\n            throw new Error('Required parameter codeTableRsrc was null or undefined when calling updateCodeTableResourceByCodeTableName.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (requestId !== undefined && requestId !== null) {\n            headers = headers.set('RequestId', String(requestId));\n        }\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (cacheControl !== undefined && cacheControl !== null) {\n            headers = headers.set('Cache-Control', String(cacheControl));\n        }\n        if (pragma !== undefined && pragma !== null) {\n            headers = headers.set('Pragma', String(pragma));\n        }\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<CodeTableRsrc>(`${this.configuration.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`,\n            codeTableRsrc,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update an Incidents Compliance And Enforcement Investigation\n     * Update an Incidents Compliance And Enforcement Investigation\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param complianceAndEnforcementInvestigationResource The IncidentInvestigation resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<ComplianceAndEnforcementInvestigationResource>;\n    public updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<ComplianceAndEnforcementInvestigationResource>>;\n    public updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<ComplianceAndEnforcementInvestigationResource>>;\n    public updateComplianceAndEnforcementInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, complianceAndEnforcementInvestigationResource?: ComplianceAndEnforcementInvestigationResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling updateComplianceAndEnforcementInvestigation.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateComplianceAndEnforcementInvestigation.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ComplianceAndEnforcementInvestigationResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/complianceAndEnforcementInvestigation`,\n            complianceAndEnforcementInvestigationResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param externalUriGuid \n     * @param externalUriResource \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public updateExternalUri(externalUriGuid: string, externalUriResource?: ExternalUriResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (externalUriGuid === null || externalUriGuid === undefined) {\n            throw new Error('Required parameter externalUriGuid was null or undefined when calling updateExternalUri.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/externalUri/${encodeURIComponent(String(externalUriGuid))}`,\n            externalUriResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Incident Attachment by ID\n     * Update Incident Attachment by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The Incident Attachment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentResource>;\n    public updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentResource>>;\n    public updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentResource>>;\n    public updateIncidentAttachment(wildfireYear: string, incidentNumberSequence: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling updateIncidentAttachment.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateIncidentAttachment.');\n        }\n        if (attachmentGuid === null || attachmentGuid === undefined) {\n            throw new Error('Required parameter attachmentGuid was null or undefined when calling updateIncidentAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<AttachmentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments/${encodeURIComponent(String(attachmentGuid))}`,\n            attachmentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update InitialFireReport resource by ID\n     * Update InitialFireReport by ID\n     * @param initialFireReportId The initialFireReportId of the Initial Fire Report resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param initialFireReportResource The InitialFireReport resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<InitialFireReportResource>;\n    public updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<InitialFireReportResource>>;\n    public updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<InitialFireReportResource>>;\n    public updateInitialFireReport(initialFireReportId: string, restVersion?: number, ifMatch?: string, initialFireReportResource?: InitialFireReportResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (initialFireReportId === null || initialFireReportId === undefined) {\n            throw new Error('Required parameter initialFireReportId was null or undefined when calling updateInitialFireReport.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<InitialFireReportResource>(`${this.configuration.basePath}/initialFireReports/${encodeURIComponent(String(initialFireReportId))}`,\n            initialFireReportResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update an Incidents Managing Land Authority\n     * Update an Incidents Managing Land Authority\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param incidentLandAuthorityResource The IncidentLandAuthority resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<IncidentLandAuthorityResource>;\n    public updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<IncidentLandAuthorityResource>>;\n    public updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<IncidentLandAuthorityResource>>;\n    public updateManagingLandAuthority(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, incidentLandAuthorityResource?: IncidentLandAuthorityResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling updateManagingLandAuthority.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateManagingLandAuthority.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<IncidentLandAuthorityResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/managingLandAuthority`,\n            incidentLandAuthorityResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update an Incidents Compliance And Enforcement Investigation\n     * Update an Incidents Compliance And Enforcement Investigation\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param originAndCauseInvestigationResource The IncidentInvestigation resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<OriginAndCauseInvestigationResource>;\n    public updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<OriginAndCauseInvestigationResource>>;\n    public updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<OriginAndCauseInvestigationResource>>;\n    public updateOriginAndCauseInvestigation(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, originAndCauseInvestigationResource?: OriginAndCauseInvestigationResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling updateOriginAndCauseInvestigation.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateOriginAndCauseInvestigation.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<OriginAndCauseInvestigationResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/originAndCauseInvestigation`,\n            originAndCauseInvestigationResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Provisional Zone resource by ID\n     * Update ProvisionalZone by ID\n     * @param provisionalZoneGuid The identifier of the ProvisionalZone resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param provisionalZoneResource The ProvisionalZone resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<ProvisionalZoneResource>;\n    public updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<ProvisionalZoneResource>>;\n    public updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<ProvisionalZoneResource>>;\n    public updateProvisionalZone(provisionalZoneGuid: string, restVersion?: number, ifMatch?: string, provisionalZoneResource?: ProvisionalZoneResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (provisionalZoneGuid === null || provisionalZoneGuid === undefined) {\n            throw new Error('Required parameter provisionalZoneGuid was null or undefined when calling updateProvisionalZone.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ProvisionalZoneResource>(`${this.configuration.basePath}/provisionalZones/${encodeURIComponent(String(provisionalZoneGuid))}`,\n            provisionalZoneResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update PublicReportOfFire resource by ID\n     * Update PublicReportOfFire by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param publicReportOfFireResource The PublicReportOfFire resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<PublicReportOfFireResource>;\n    public updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<PublicReportOfFireResource>>;\n    public updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<PublicReportOfFireResource>>;\n    public updatePublicReportOfFire(wildfireYear: string, reportOfFireNumber: string, restVersion?: number, ifMatch?: string, publicReportOfFireResource?: PublicReportOfFireResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling updatePublicReportOfFire.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling updatePublicReportOfFire.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<PublicReportOfFireResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}`,\n            publicReportOfFireResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param publishedIncidentDetailGuid \n     * @param publishedIncidentResource \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any>;\n    public updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<any>>;\n    public updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<any>>;\n    public updatePublishedIncident(publishedIncidentDetailGuid: string, publishedIncidentResource?: PublishedIncidentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (publishedIncidentDetailGuid === null || publishedIncidentDetailGuid === undefined) {\n            throw new Error('Required parameter publishedIncidentDetailGuid was null or undefined when calling updatePublishedIncident.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/publishedIncidents/${encodeURIComponent(String(publishedIncidentDetailGuid))}`,\n            publishedIncidentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Report of Fire Attachment by ID\n     * Update Report of Fire Attachment by ID\n     * @param wildfireYear The wildfireYear of the Public Report of Fire resource.\n     * @param reportOfFireNumber The reportOfFireNumber of the Public Report of Fire resource.\n     * @param attachmentGuid The attachmentGuid of the Attachment resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param attachmentResource The ReportOfFire Attachment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<AttachmentResource>;\n    public updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<AttachmentResource>>;\n    public updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<AttachmentResource>>;\n    public updateReportOfFireAttachment(wildfireYear: string, reportOfFireNumber: string, attachmentGuid: string, restVersion?: number, attachmentResource?: AttachmentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling updateReportOfFireAttachment.');\n        }\n        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {\n            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling updateReportOfFireAttachment.');\n        }\n        if (attachmentGuid === null || attachmentGuid === undefined) {\n            throw new Error('Required parameter attachmentGuid was null or undefined when calling updateReportOfFireAttachment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<AttachmentResource>(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments/${encodeURIComponent(String(attachmentGuid))}`,\n            attachmentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update the Resource Allocation Assessment for an Incident by ID.\n     * Update the Resource Allocation Assessment for an Incident by ID.\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param resourceAllocationAssessmentResource The ResourceAllocationAssessment resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<ResourceAllocationAssessmentResource>;\n    public updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<ResourceAllocationAssessmentResource>>;\n    public updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<ResourceAllocationAssessmentResource>>;\n    public updateResourceAllocationAssessment(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, resourceAllocationAssessmentResource?: ResourceAllocationAssessmentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling updateResourceAllocationAssessment.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateResourceAllocationAssessment.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<ResourceAllocationAssessmentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/resourceAllocationAssessment`,\n            resourceAllocationAssessmentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update WildfireIncident resource by ID\n     * Update WildfireIncident by ID\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfireIncidentResource The WildfireIncident resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfireIncidentResource>;\n    public updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfireIncidentResource>>;\n    public updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfireIncidentResource>>;\n    public updateWildfireIncident(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfireIncidentResource?: WildfireIncidentResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling updateWildfireIncident.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateWildfireIncident.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<WildfireIncidentResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}`,\n            wildfireIncidentResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update WildfireParty resource by ID\n     * Update WildfireParty by ID\n     * @param wildfirePartyGuid The identifier of the WildfireParty resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfirePartyResource The WildfireParty resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfirePartyResource>;\n    public updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfirePartyResource>>;\n    public updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfirePartyResource>>;\n    public updateWildfireParty(wildfirePartyGuid: string, restVersion?: number, ifMatch?: string, wildfirePartyResource?: WildfirePartyResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfirePartyGuid === null || wildfirePartyGuid === undefined) {\n            throw new Error('Required parameter wildfirePartyGuid was null or undefined when calling updateWildfireParty.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<WildfirePartyResource>(`${this.configuration.basePath}/wildfirePartys/${encodeURIComponent(String(wildfirePartyGuid))}`,\n            wildfirePartyResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update WildfirePerimeter resource\n     * Update WildfirePerimeter\n     * @param wildfireYear The wildfireYear of the Wildfire Incident resource.\n     * @param incidentNumberSequence The incidentNumberSequence of the Wildfire Incident resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param wildfirePerimeterResource The WildfirePerimeter resource containing the new values.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<WildfirePerimeterResource>;\n    public updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<WildfirePerimeterResource>>;\n    public updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<WildfirePerimeterResource>>;\n    public updateWildfirePerimeter(wildfireYear: string, incidentNumberSequence: string, restVersion?: number, ifMatch?: string, wildfirePerimeterResource?: WildfirePerimeterResource, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n        if (wildfireYear === null || wildfireYear === undefined) {\n            throw new Error('Required parameter wildfireYear was null or undefined when calling updateWildfirePerimeter.');\n        }\n        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {\n            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateWildfirePerimeter.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<WildfirePerimeterResource>(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/wildfirePerimeter`,\n            wildfirePerimeterResource,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './default.service';\nimport { DefaultService } from './default.service';\nexport const APIS = [DefaultService];\n","/**\n * WFIM Incident Manager API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.8.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface HealthCheckResponseRsrc { \n    componentIdentifier?: string;\n    componentName?: string;\n    validationStatus?: HealthCheckResponseRsrc.ValidationStatusEnum;\n    statusDetails?: string;\n    dependencyComponentResponses?: Array<HealthCheckResponseRsrc>;\n    type: string;\n}\nexport namespace HealthCheckResponseRsrc {\n    export type ValidationStatusEnum = 'RED' | 'YELLOW' | 'GREEN';\n    export const ValidationStatusEnum = {\n        RED: 'RED' as ValidationStatusEnum,\n        YELLOW: 'YELLOW' as ValidationStatusEnum,\n        GREEN: 'GREEN' as ValidationStatusEnum\n    };\n}\n\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DefaultService } from './api/default.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n"],"names":["InjectionToken","HttpHeaders","HttpParams","Injectable","HttpClient","Optional","Inject","HealthCheckResponseRsrc","NgModule","SkipSelf"],"mappings":"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"}
