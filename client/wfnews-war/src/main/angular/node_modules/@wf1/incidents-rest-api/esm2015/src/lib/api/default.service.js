/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * WFIM Incident Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../variables";
import * as i3 from "../configuration";
export class DefaultService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://localhost';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    /**
     * @param {?} httpParams
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    /**
     * @param {?} httpParams
     * @param {?=} value
     * @param {?=} key
     * @return {?}
     */
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (/** @type {?} */ (value)).forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (/** @type {?} */ (value)).toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    /**
     * @param {?} ifMatch
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} onBehalfOfResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    acknowledgePublicReportOfFire(ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe = 'body', reportProgress = false, options) {
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling acknowledgePublicReportOfFire.');
        }
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling acknowledgePublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling acknowledgePublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/acknowledge`, onBehalfOfResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} publicReportOfFireRelayMessage
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    addPublicReportOfFireRelayMessage(wildfireYear, reportOfFireNumber, restVersion, publicReportOfFireRelayMessage, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling addPublicReportOfFireRelayMessage.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling addPublicReportOfFireRelayMessage.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (publicReportOfFireRelayMessage !== undefined && publicReportOfFireRelayMessage !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (publicReportOfFireRelayMessage), 'publicReportOfFireRelayMessage');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/relaymessage`, null, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} ifMatch
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} incidentWildfireYear
     * @param {?=} incidentNumberSequence
     * @param {?=} onBehalfOfResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    assignPublicReportOfFire(ifMatch, wildfireYear, reportOfFireNumber, restVersion, incidentWildfireYear, incidentNumberSequence, onBehalfOfResource, observe = 'body', reportProgress = false, options) {
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling assignPublicReportOfFire.');
        }
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling assignPublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling assignPublicReportOfFire.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (incidentWildfireYear !== undefined && incidentWildfireYear !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (incidentWildfireYear), 'incidentWildfireYear');
        }
        if (incidentNumberSequence !== undefined && incidentNumberSequence !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (incidentNumberSequence), 'incidentNumberSequence');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/assign`, onBehalfOfResource, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} ifMatch
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} onBehalfOfResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    cancelPublicReportOfFire(ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe = 'body', reportProgress = false, options) {
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling cancelPublicReportOfFire.');
        }
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling cancelPublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling cancelPublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/cancel`, onBehalfOfResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} externalUriResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createExternalUri(externalUriResource, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/externalUri`, externalUriResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} attachmentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createIncidentAttachment(wildfireYear, incidentNumberSequence, restVersion, attachmentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling createIncidentAttachment.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling createIncidentAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments`, attachmentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} incidentCommentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createIncidentComment(wildfireYear, incidentNumberSequence, restVersion, incidentCommentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling createIncidentComment.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling createIncidentComment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentComments`, incidentCommentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} initialFireReportResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createInitialFireReport(restVersion, initialFireReportResource, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/initialFireReports`, initialFireReportResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} provisionalZoneResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createProvisionalZone(restVersion, provisionalZoneResource, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/provisionalZones`, provisionalZoneResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} publicReportOfFireResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createPublicReportOfFire(restVersion, publicReportOfFireResource, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires`, publicReportOfFireResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} publicReportOfFireCommentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createPublicReportOfFireComment(wildfireYear, reportOfFireNumber, restVersion, publicReportOfFireCommentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling createPublicReportOfFireComment.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling createPublicReportOfFireComment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/comments`, publicReportOfFireCommentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} publishedIncidentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createPublishedIncident(publishedIncidentResource, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publishedIncidents`, publishedIncidentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} attachmentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createReportOfFireAttachment(wildfireYear, reportOfFireNumber, restVersion, attachmentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling createReportOfFireAttachment.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling createReportOfFireAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments`, attachmentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} wildfireIncidentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createWildfireIncident(restVersion, wildfireIncidentResource, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/incidents`, wildfireIncidentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} wildfirePartyResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    createWildfireParty(restVersion, wildfirePartyResource, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/wildfirePartys`, wildfirePartyResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} externalUriGuid
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deleteExternalUri(externalUriGuid, observe = 'body', reportProgress = false, options) {
        if (externalUriGuid === null || externalUriGuid === undefined) {
            throw new Error('Required parameter externalUriGuid was null or undefined when calling deleteExternalUri.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/externalUri/${encodeURIComponent(String(externalUriGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?} attachmentGuid
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deleteIncidentAttachment(wildfireYear, incidentNumberSequence, attachmentGuid, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling deleteIncidentAttachment.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling deleteIncidentAttachment.');
        }
        if (attachmentGuid === null || attachmentGuid === undefined) {
            throw new Error('Required parameter attachmentGuid was null or undefined when calling deleteIncidentAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments/${encodeURIComponent(String(attachmentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?} incidentCommentGuid
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deleteIncidentComment(wildfireYear, incidentNumberSequence, incidentCommentGuid, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling deleteIncidentComment.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling deleteIncidentComment.');
        }
        if (incidentCommentGuid === null || incidentCommentGuid === undefined) {
            throw new Error('Required parameter incidentCommentGuid was null or undefined when calling deleteIncidentComment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentComments/${encodeURIComponent(String(incidentCommentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} initialFireReportId
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deleteInitialFireReport(initialFireReportId, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (initialFireReportId === null || initialFireReportId === undefined) {
            throw new Error('Required parameter initialFireReportId was null or undefined when calling deleteInitialFireReport.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/initialFireReports/${encodeURIComponent(String(initialFireReportId))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} provisionalZoneGuid
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deleteProvisionalZone(provisionalZoneGuid, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (provisionalZoneGuid === null || provisionalZoneGuid === undefined) {
            throw new Error('Required parameter provisionalZoneGuid was null or undefined when calling deleteProvisionalZone.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/provisionalZones/${encodeURIComponent(String(provisionalZoneGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deletePublicReportOfFire(wildfireYear, reportOfFireNumber, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling deletePublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deletePublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?} commentGuid
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deletePublicReportOfFireComment(wildfireYear, reportOfFireNumber, commentGuid, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling deletePublicReportOfFireComment.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deletePublicReportOfFireComment.');
        }
        if (commentGuid === null || commentGuid === undefined) {
            throw new Error('Required parameter commentGuid was null or undefined when calling deletePublicReportOfFireComment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/comments/${encodeURIComponent(String(commentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deletePublicReportOfFireRelayMessage(wildfireYear, reportOfFireNumber, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling deletePublicReportOfFireRelayMessage.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deletePublicReportOfFireRelayMessage.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/relaymessage`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} publishedIncidentDetailGuid
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deletePublishedIncident(publishedIncidentDetailGuid, observe = 'body', reportProgress = false, options) {
        if (publishedIncidentDetailGuid === null || publishedIncidentDetailGuid === undefined) {
            throw new Error('Required parameter publishedIncidentDetailGuid was null or undefined when calling deletePublishedIncident.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/publishedIncidents/${encodeURIComponent(String(publishedIncidentDetailGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?} attachmentGuid
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deleteReportOfFireAttachment(wildfireYear, reportOfFireNumber, attachmentGuid, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling deleteReportOfFireAttachment.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling deleteReportOfFireAttachment.');
        }
        if (attachmentGuid === null || attachmentGuid === undefined) {
            throw new Error('Required parameter attachmentGuid was null or undefined when calling deleteReportOfFireAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments/${encodeURIComponent(String(attachmentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deleteWildfireIncident(wildfireYear, incidentNumberSequence, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling deleteWildfireIncident.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling deleteWildfireIncident.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfirePartyGuid
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    deleteWildfireParty(wildfirePartyGuid, restVersion, ifMatch, observe = 'body', reportProgress = false, options) {
        if (wildfirePartyGuid === null || wildfirePartyGuid === undefined) {
            throw new Error('Required parameter wildfirePartyGuid was null or undefined when calling deleteWildfireParty.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                '*/*'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/wildfirePartys/${encodeURIComponent(String(wildfirePartyGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} requestId
     * @param {?=} restVersion
     * @param {?=} cacheControl
     * @param {?=} pragma
     * @param {?=} authorization
     * @param {?=} effectiveAsOfDate
     * @param {?=} codeHierarchyName
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getCodeHierarchyListResource(requestId, restVersion, cacheControl, pragma, authorization, effectiveAsOfDate, codeHierarchyName, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
        }
        if (codeHierarchyName !== undefined && codeHierarchyName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (codeHierarchyName), 'codeHierarchyName');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (requestId !== undefined && requestId !== null) {
            headers = headers.set('RequestId', String(requestId));
        }
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (cacheControl !== undefined && cacheControl !== null) {
            headers = headers.set('Cache-Control', String(cacheControl));
        }
        if (pragma !== undefined && pragma !== null) {
            headers = headers.set('Pragma', String(pragma));
        }
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/codeHierarchies`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} codeHierarchyName
     * @param {?=} requestId
     * @param {?=} restVersion
     * @param {?=} cacheControl
     * @param {?=} pragma
     * @param {?=} authorization
     * @param {?=} effectiveAsOfDate
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getCodeHierarchyResourceByCodeTableName(codeHierarchyName, requestId, restVersion, cacheControl, pragma, authorization, effectiveAsOfDate, observe = 'body', reportProgress = false, options) {
        if (codeHierarchyName === null || codeHierarchyName === undefined) {
            throw new Error('Required parameter codeHierarchyName was null or undefined when calling getCodeHierarchyResourceByCodeTableName.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (requestId !== undefined && requestId !== null) {
            headers = headers.set('RequestId', String(requestId));
        }
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (cacheControl !== undefined && cacheControl !== null) {
            headers = headers.set('Cache-Control', String(cacheControl));
        }
        if (pragma !== undefined && pragma !== null) {
            headers = headers.set('Pragma', String(pragma));
        }
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/codeHierarchies/${encodeURIComponent(String(codeHierarchyName))}`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} requestId
     * @param {?=} restVersion
     * @param {?=} cacheControl
     * @param {?=} pragma
     * @param {?=} authorization
     * @param {?=} effectiveAsOfDate
     * @param {?=} codeTableName
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getCodeTableListResource(requestId, restVersion, cacheControl, pragma, authorization, effectiveAsOfDate, codeTableName, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
        }
        if (codeTableName !== undefined && codeTableName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (codeTableName), 'codeTableName');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (requestId !== undefined && requestId !== null) {
            headers = headers.set('RequestId', String(requestId));
        }
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (cacheControl !== undefined && cacheControl !== null) {
            headers = headers.set('Cache-Control', String(cacheControl));
        }
        if (pragma !== undefined && pragma !== null) {
            headers = headers.set('Pragma', String(pragma));
        }
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/codeTables`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} codeTableName
     * @param {?=} requestId
     * @param {?=} restVersion
     * @param {?=} cacheControl
     * @param {?=} pragma
     * @param {?=} authorization
     * @param {?=} effectiveAsOfDate
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getCodeTableResourceByCodeTableName(codeTableName, requestId, restVersion, cacheControl, pragma, authorization, effectiveAsOfDate, observe = 'body', reportProgress = false, options) {
        if (codeTableName === null || codeTableName === undefined) {
            throw new Error('Required parameter codeTableName was null or undefined when calling getCodeTableResourceByCodeTableName.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (requestId !== undefined && requestId !== null) {
            headers = headers.set('RequestId', String(requestId));
        }
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (cacheControl !== undefined && cacheControl !== null) {
            headers = headers.set('Cache-Control', String(cacheControl));
        }
        if (pragma !== undefined && pragma !== null) {
            headers = headers.set('Pragma', String(pragma));
        }
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getComplianceAndEnforcementInvestigation(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getComplianceAndEnforcementInvestigation.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getComplianceAndEnforcementInvestigation.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/complianceAndEnforcementInvestigation`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} externalUriGuid
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getExternalUri(externalUriGuid, observe = 'body', reportProgress = false, options) {
        if (externalUriGuid === null || externalUriGuid === undefined) {
            throw new Error('Required parameter externalUriGuid was null or undefined when calling getExternalUri.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/externalUri/${encodeURIComponent(String(externalUriGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} sourceObjectUniqueId
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getExternalUriList(sourceObjectUniqueId, pageNumber, pageRowCount, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (sourceObjectUniqueId !== undefined && sourceObjectUniqueId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (sourceObjectUniqueId), 'sourceObjectUniqueId');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/externalUri`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getIncidentApproval(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentApproval.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentApproval.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/approval`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?} attachmentGuid
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getIncidentAttachment(wildfireYear, incidentNumberSequence, attachmentGuid, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentAttachment.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentAttachment.');
        }
        if (attachmentGuid === null || attachmentGuid === undefined) {
            throw new Error('Required parameter attachmentGuid was null or undefined when calling getIncidentAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments/${encodeURIComponent(String(attachmentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} archived
     * @param {?=} privateIndicator
     * @param {?=} sourceObjectNameCode
     * @param {?=} attachmentTypeCode
     * @param {?=} uploadedByUserId
     * @param {?=} uploadedByByUserType
     * @param {?=} uploadedByUserGuid
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getIncidentAttachmentList(wildfireYear, incidentNumberSequence, restVersion, archived, privateIndicator, sourceObjectNameCode, attachmentTypeCode, uploadedByUserId, uploadedByByUserType, uploadedByUserGuid, pageNumber, pageRowCount, orderBy, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentAttachmentList.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentAttachmentList.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (archived !== undefined && archived !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (archived), 'archived');
        }
        if (privateIndicator !== undefined && privateIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (privateIndicator), 'privateIndicator');
        }
        if (sourceObjectNameCode) {
            sourceObjectNameCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'sourceObjectNameCode');
            });
        }
        if (attachmentTypeCode) {
            attachmentTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'attachmentTypeCode');
            });
        }
        if (uploadedByUserId) {
            uploadedByUserId.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByUserId');
            });
        }
        if (uploadedByByUserType) {
            uploadedByByUserType.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByByUserType');
            });
        }
        if (uploadedByUserGuid) {
            uploadedByUserGuid.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByUserGuid');
            });
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getIncidentCause(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentCause.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentCause.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentCause`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} externalId
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getIncidentComment(externalId, restVersion, observe = 'body', reportProgress = false, options) {
        if (externalId === null || externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getIncidentComment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidentComments/externalId/${encodeURIComponent(String(externalId))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?} incidentCommentGuid
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getIncidentComment1(wildfireYear, incidentNumberSequence, incidentCommentGuid, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentComment1.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentComment1.');
        }
        if (incidentCommentGuid === null || incidentCommentGuid === undefined) {
            throw new Error('Required parameter incidentCommentGuid was null or undefined when calling getIncidentComment1.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentComments/${encodeURIComponent(String(incidentCommentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getIncidentCommentList(wildfireYear, incidentNumberSequence, restVersion, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentCommentList.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentCommentList.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/incidentComments`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getIncidentVerification(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getIncidentVerification.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getIncidentVerification.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/verification`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} initialFireReportId
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getInitialFireReport(initialFireReportId, restVersion, observe = 'body', reportProgress = false, options) {
        if (initialFireReportId === null || initialFireReportId === undefined) {
            throw new Error('Required parameter initialFireReportId was null or undefined when calling getInitialFireReport.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/initialFireReports/${encodeURIComponent(String(initialFireReportId))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} searchText
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getInitialFireReportList(restVersion, searchText, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (searchText) {
            searchText.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
            });
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/initialFireReports`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getManagingLandAuthority(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getManagingLandAuthority.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getManagingLandAuthority.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/managingLandAuthority`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getOriginAndCauseInvestigation(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getOriginAndCauseInvestigation.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getOriginAndCauseInvestigation.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/originAndCauseInvestigation`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} provisionalZoneGuid
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getProvisionalZone(provisionalZoneGuid, restVersion, observe = 'body', reportProgress = false, options) {
        if (provisionalZoneGuid === null || provisionalZoneGuid === undefined) {
            throw new Error('Required parameter provisionalZoneGuid was null or undefined when calling getProvisionalZone.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/provisionalZones/${encodeURIComponent(String(provisionalZoneGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} provisionalZoneGuid
     * @param {?=} provisionalZoneIdentifier
     * @param {?=} provisionalZoneTypeCode
     * @param {?=} fireCentreOrgUnitIdent
     * @param {?=} provisionalZonePolygonSpecifiedInd
     * @param {?=} dismissedInd
     * @param {?=} effectiveTimeStamp
     * @param {?=} expiryTimestamp
     * @param {?=} effectiveAsOfTimestamp
     * @param {?=} textSearch
     * @param {?=} provisionedByUserName
     * @param {?=} provisionedByUserId
     * @param {?=} lastStateChangeAsOfTimestamp
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getProvisionalZoneList(restVersion, provisionalZoneGuid, provisionalZoneIdentifier, provisionalZoneTypeCode, fireCentreOrgUnitIdent, provisionalZonePolygonSpecifiedInd, dismissedInd, effectiveTimeStamp, expiryTimestamp, effectiveAsOfTimestamp, textSearch, provisionedByUserName, provisionedByUserId, lastStateChangeAsOfTimestamp, pageNumber, pageRowCount, orderBy, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (provisionalZoneGuid) {
            provisionalZoneGuid.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionalZoneGuid');
            });
        }
        if (provisionalZoneIdentifier) {
            provisionalZoneIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionalZoneIdentifier');
            });
        }
        if (provisionalZoneTypeCode) {
            provisionalZoneTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionalZoneTypeCode');
            });
        }
        if (fireCentreOrgUnitIdent) {
            fireCentreOrgUnitIdent.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdent');
            });
        }
        if (provisionalZonePolygonSpecifiedInd !== undefined && provisionalZonePolygonSpecifiedInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (provisionalZonePolygonSpecifiedInd), 'provisionalZonePolygonSpecifiedInd');
        }
        if (dismissedInd !== undefined && dismissedInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (dismissedInd), 'dismissedInd');
        }
        if (effectiveTimeStamp !== undefined && effectiveTimeStamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveTimeStamp), 'effectiveTimeStamp');
        }
        if (expiryTimestamp !== undefined && expiryTimestamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expiryTimestamp), 'expiryTimestamp');
        }
        if (effectiveAsOfTimestamp !== undefined && effectiveAsOfTimestamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfTimestamp), 'effectiveAsOfTimestamp');
        }
        if (textSearch) {
            textSearch.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'textSearch');
            });
        }
        if (provisionedByUserName) {
            provisionedByUserName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionedByUserName');
            });
        }
        if (provisionedByUserId) {
            provisionedByUserId.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'provisionedByUserId');
            });
        }
        if (lastStateChangeAsOfTimestamp !== undefined && lastStateChangeAsOfTimestamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lastStateChangeAsOfTimestamp), 'lastStateChangeAsOfTimestamp');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/provisionalZones`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} externalId
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublicReportOfFire(externalId, restVersion, observe = 'body', reportProgress = false, options) {
        if (externalId === null || externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getPublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publicReportOfFires/externalId/${encodeURIComponent(String(externalId))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublicReportOfFire1(wildfireYear, reportOfFireNumber, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFire1.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFire1.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} externalId
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublicReportOfFireComment(externalId, restVersion, observe = 'body', reportProgress = false, options) {
        if (externalId === null || externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getPublicReportOfFireComment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publicReportOfFireComments/externalId/${encodeURIComponent(String(externalId))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?} commentGuid
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublicReportOfFireComment1(wildfireYear, reportOfFireNumber, commentGuid, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFireComment1.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFireComment1.');
        }
        if (commentGuid === null || commentGuid === undefined) {
            throw new Error('Required parameter commentGuid was null or undefined when calling getPublicReportOfFireComment1.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/comments/${encodeURIComponent(String(commentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} searchText
     * @param {?=} systemGeneratedCommentInd
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublicReportOfFireCommentList(wildfireYear, reportOfFireNumber, restVersion, searchText, systemGeneratedCommentInd, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFireCommentList.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFireCommentList.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (searchText !== undefined && searchText !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (searchText), 'searchText');
        }
        if (systemGeneratedCommentInd !== undefined && systemGeneratedCommentInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (systemGeneratedCommentInd), 'systemGeneratedCommentInd');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/comments`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} searchText
     * @param {?=} messageStatusCode
     * @param {?=} reportOfFireNumber
     * @param {?=} wildfireYear
     * @param {?=} interfaceFireInd
     * @param {?=} minimumReportedDate
     * @param {?=} reportedByName
     * @param {?=} receivedByUserId
     * @param {?=} receivedByUserGuid
     * @param {?=} acknowledgedByUserId
     * @param {?=} acknowledgedByUserGuid
     * @param {?=} fireCentreOrgUnitIdentifier
     * @param {?=} zoneOrgUnitIdentifier
     * @param {?=} reportedByPartyName
     * @param {?=} callerName
     * @param {?=} lostCallInd
     * @param {?=} availableForCallbackInd
     * @param {?=} publicReportTypeCode
     * @param {?=} fireSizeComparisionCode
     * @param {?=} rateOfSpreadCode
     * @param {?=} smokeColourCode
     * @param {?=} messageReceivedSource
     * @param {?=} submittedAsOfTimestamp
     * @param {?=} receievedAsOfTimestamp
     * @param {?=} submittedOrReceivedAsOfTimestamp
     * @param {?=} incidentWildfireYear
     * @param {?=} incidentNumberSequence
     * @param {?=} relayedInd
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublicReportOfFireList(restVersion, searchText, messageStatusCode, reportOfFireNumber, wildfireYear, interfaceFireInd, minimumReportedDate, reportedByName, receivedByUserId, receivedByUserGuid, acknowledgedByUserId, acknowledgedByUserGuid, fireCentreOrgUnitIdentifier, zoneOrgUnitIdentifier, reportedByPartyName, callerName, lostCallInd, availableForCallbackInd, publicReportTypeCode, fireSizeComparisionCode, rateOfSpreadCode, smokeColourCode, messageReceivedSource, submittedAsOfTimestamp, receievedAsOfTimestamp, submittedOrReceivedAsOfTimestamp, incidentWildfireYear, incidentNumberSequence, relayedInd, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (searchText) {
            searchText.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
            });
        }
        if (messageStatusCode) {
            messageStatusCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'messageStatusCode');
            });
        }
        if (reportOfFireNumber) {
            reportOfFireNumber.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportOfFireNumber');
            });
        }
        if (wildfireYear) {
            wildfireYear.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'wildfireYear');
            });
        }
        if (interfaceFireInd !== undefined && interfaceFireInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (interfaceFireInd), 'interfaceFireInd');
        }
        if (minimumReportedDate !== undefined && minimumReportedDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (minimumReportedDate), 'minimumReportedDate');
        }
        if (reportedByName) {
            reportedByName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportedByName');
            });
        }
        if (receivedByUserId) {
            receivedByUserId.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'receivedByUserId');
            });
        }
        if (receivedByUserGuid) {
            receivedByUserGuid.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'receivedByUserGuid');
            });
        }
        if (acknowledgedByUserId) {
            acknowledgedByUserId.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'acknowledgedByUserId');
            });
        }
        if (acknowledgedByUserGuid) {
            acknowledgedByUserGuid.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'acknowledgedByUserGuid');
            });
        }
        if (fireCentreOrgUnitIdentifier) {
            fireCentreOrgUnitIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdentifier');
            });
        }
        if (zoneOrgUnitIdentifier) {
            zoneOrgUnitIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'zoneOrgUnitIdentifier');
            });
        }
        if (reportedByPartyName) {
            reportedByPartyName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportedByPartyName');
            });
        }
        if (callerName) {
            callerName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'callerName');
            });
        }
        if (lostCallInd !== undefined && lostCallInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lostCallInd), 'lostCallInd');
        }
        if (availableForCallbackInd !== undefined && availableForCallbackInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (availableForCallbackInd), 'availableForCallbackInd');
        }
        if (publicReportTypeCode) {
            publicReportTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'publicReportTypeCode');
            });
        }
        if (fireSizeComparisionCode) {
            fireSizeComparisionCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireSizeComparisionCode');
            });
        }
        if (rateOfSpreadCode) {
            rateOfSpreadCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'rateOfSpreadCode');
            });
        }
        if (smokeColourCode) {
            smokeColourCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'smokeColourCode');
            });
        }
        if (messageReceivedSource) {
            messageReceivedSource.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'messageReceivedSource');
            });
        }
        if (submittedAsOfTimestamp !== undefined && submittedAsOfTimestamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (submittedAsOfTimestamp), 'submittedAsOfTimestamp');
        }
        if (receievedAsOfTimestamp !== undefined && receievedAsOfTimestamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (receievedAsOfTimestamp), 'receievedAsOfTimestamp');
        }
        if (submittedOrReceivedAsOfTimestamp !== undefined && submittedOrReceivedAsOfTimestamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (submittedOrReceivedAsOfTimestamp), 'submittedOrReceivedAsOfTimestamp');
        }
        if (incidentWildfireYear) {
            incidentWildfireYear.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentWildfireYear');
            });
        }
        if (incidentNumberSequence) {
            incidentNumberSequence.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberSequence');
            });
        }
        if (relayedInd !== undefined && relayedInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (relayedInd), 'relayedInd');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publicReportOfFires`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublicReportOfFireStatusChangeList(wildfireYear, reportOfFireNumber, restVersion, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getPublicReportOfFireStatusChangeList.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getPublicReportOfFireStatusChangeList.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/statusChanges`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} publishedIncidentDetailGuid
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublishedIncident(publishedIncidentDetailGuid, observe = 'body', reportProgress = false, options) {
        if (publishedIncidentDetailGuid === null || publishedIncidentDetailGuid === undefined) {
            throw new Error('Required parameter publishedIncidentDetailGuid was null or undefined when calling getPublishedIncident.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publishedIncidents/${encodeURIComponent(String(publishedIncidentDetailGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} incidentGuid
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublishedIncidentByIncidentGuid(incidentGuid, observe = 'body', reportProgress = false, options) {
        if (incidentGuid === null || incidentGuid === undefined) {
            throw new Error('Required parameter incidentGuid was null or undefined when calling getPublishedIncidentByIncidentGuid.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publishedIncidents/byIncident/${encodeURIComponent(String(incidentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getPublishedIncidentList(pageNumber, pageRowCount, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publishedIncidents`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?} attachmentGuid
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getReportOfFireAttachment(wildfireYear, reportOfFireNumber, attachmentGuid, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getReportOfFireAttachment.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getReportOfFireAttachment.');
        }
        if (attachmentGuid === null || attachmentGuid === undefined) {
            throw new Error('Required parameter attachmentGuid was null or undefined when calling getReportOfFireAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments/${encodeURIComponent(String(attachmentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} archived
     * @param {?=} privateIndicator
     * @param {?=} sourceObjectNameCode
     * @param {?=} attachmentTypeCode
     * @param {?=} uploadedByUserId
     * @param {?=} uploadedByByUserType
     * @param {?=} uploadedByUserGuid
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getReportOfFireAttachmentList(wildfireYear, reportOfFireNumber, restVersion, archived, privateIndicator, sourceObjectNameCode, attachmentTypeCode, uploadedByUserId, uploadedByByUserType, uploadedByUserGuid, pageNumber, pageRowCount, orderBy, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getReportOfFireAttachmentList.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling getReportOfFireAttachmentList.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (archived !== undefined && archived !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (archived), 'archived');
        }
        if (privateIndicator !== undefined && privateIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (privateIndicator), 'privateIndicator');
        }
        if (sourceObjectNameCode) {
            sourceObjectNameCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'sourceObjectNameCode');
            });
        }
        if (attachmentTypeCode) {
            attachmentTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'attachmentTypeCode');
            });
        }
        if (uploadedByUserId) {
            uploadedByUserId.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByUserId');
            });
        }
        if (uploadedByByUserType) {
            uploadedByByUserType.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByByUserType');
            });
        }
        if (uploadedByUserGuid) {
            uploadedByUserGuid.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'uploadedByUserGuid');
            });
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getResourceAllocationAssessment(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getResourceAllocationAssessment.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getResourceAllocationAssessment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/resourceAllocationAssessment`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} searchText
     * @param {?=} messageStatusCode
     * @param {?=} reportOfFireNumber
     * @param {?=} wildfireYear
     * @param {?=} interfaceFireInd
     * @param {?=} minimumReportedDate
     * @param {?=} reportedByName
     * @param {?=} receivedByUserId
     * @param {?=} receivedByUserGuid
     * @param {?=} acknowledgedByUserId
     * @param {?=} acknowledgedByUserGuid
     * @param {?=} fireCentreOrgUnitIdentifier
     * @param {?=} zoneOrgUnitIdentifier
     * @param {?=} reportedByPartyName
     * @param {?=} callerName
     * @param {?=} lostCallInd
     * @param {?=} availableForCallbackInd
     * @param {?=} publicReportTypeCode
     * @param {?=} fireSizeComparisionCode
     * @param {?=} rateOfSpreadCode
     * @param {?=} smokeColourCode
     * @param {?=} submittedAsOfTimestamp
     * @param {?=} incidentWildfireYear
     * @param {?=} incidentNumberSequence
     * @param {?=} relayedInd
     * @param {?=} lastStateChangeAsOfTimestamp
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getSimpleReportOfFireList(restVersion, searchText, messageStatusCode, reportOfFireNumber, wildfireYear, interfaceFireInd, minimumReportedDate, reportedByName, receivedByUserId, receivedByUserGuid, acknowledgedByUserId, acknowledgedByUserGuid, fireCentreOrgUnitIdentifier, zoneOrgUnitIdentifier, reportedByPartyName, callerName, lostCallInd, availableForCallbackInd, publicReportTypeCode, fireSizeComparisionCode, rateOfSpreadCode, smokeColourCode, submittedAsOfTimestamp, incidentWildfireYear, incidentNumberSequence, relayedInd, lastStateChangeAsOfTimestamp, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (searchText) {
            searchText.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
            });
        }
        if (messageStatusCode) {
            messageStatusCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'messageStatusCode');
            });
        }
        if (reportOfFireNumber) {
            reportOfFireNumber.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportOfFireNumber');
            });
        }
        if (wildfireYear) {
            wildfireYear.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'wildfireYear');
            });
        }
        if (interfaceFireInd !== undefined && interfaceFireInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (interfaceFireInd), 'interfaceFireInd');
        }
        if (minimumReportedDate !== undefined && minimumReportedDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (minimumReportedDate), 'minimumReportedDate');
        }
        if (reportedByName) {
            reportedByName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportedByName');
            });
        }
        if (receivedByUserId) {
            receivedByUserId.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'receivedByUserId');
            });
        }
        if (receivedByUserGuid) {
            receivedByUserGuid.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'receivedByUserGuid');
            });
        }
        if (acknowledgedByUserId) {
            acknowledgedByUserId.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'acknowledgedByUserId');
            });
        }
        if (acknowledgedByUserGuid) {
            acknowledgedByUserGuid.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'acknowledgedByUserGuid');
            });
        }
        if (fireCentreOrgUnitIdentifier) {
            fireCentreOrgUnitIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdentifier');
            });
        }
        if (zoneOrgUnitIdentifier) {
            zoneOrgUnitIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'zoneOrgUnitIdentifier');
            });
        }
        if (reportedByPartyName) {
            reportedByPartyName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'reportedByPartyName');
            });
        }
        if (callerName) {
            callerName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'callerName');
            });
        }
        if (lostCallInd !== undefined && lostCallInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lostCallInd), 'lostCallInd');
        }
        if (availableForCallbackInd !== undefined && availableForCallbackInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (availableForCallbackInd), 'availableForCallbackInd');
        }
        if (publicReportTypeCode) {
            publicReportTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'publicReportTypeCode');
            });
        }
        if (fireSizeComparisionCode) {
            fireSizeComparisionCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireSizeComparisionCode');
            });
        }
        if (rateOfSpreadCode) {
            rateOfSpreadCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'rateOfSpreadCode');
            });
        }
        if (smokeColourCode) {
            smokeColourCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'smokeColourCode');
            });
        }
        if (submittedAsOfTimestamp !== undefined && submittedAsOfTimestamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (submittedAsOfTimestamp), 'submittedAsOfTimestamp');
        }
        if (incidentWildfireYear) {
            incidentWildfireYear.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentWildfireYear');
            });
        }
        if (incidentNumberSequence) {
            incidentNumberSequence.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberSequence');
            });
        }
        if (relayedInd !== undefined && relayedInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (relayedInd), 'relayedInd');
        }
        if (lastStateChangeAsOfTimestamp !== undefined && lastStateChangeAsOfTimestamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lastStateChangeAsOfTimestamp), 'lastStateChangeAsOfTimestamp');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/simpleReportOfFires`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} searchText
     * @param {?=} wildfireYear
     * @param {?=} incidentNumberSequence
     * @param {?=} fireCentreOrgUnitIdentifier
     * @param {?=} zoneOrgUnitIdentifier
     * @param {?=} incidentStatusCode
     * @param {?=} incidentTypeCode
     * @param {?=} stageOfControlCode
     * @param {?=} responseTypeCode
     * @param {?=} suspectedCauseCategoryCode
     * @param {?=} lastUpdatedAsOfTimestamp
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getSimpleWildfireIncidentList(restVersion, searchText, wildfireYear, incidentNumberSequence, fireCentreOrgUnitIdentifier, zoneOrgUnitIdentifier, incidentStatusCode, incidentTypeCode, stageOfControlCode, responseTypeCode, suspectedCauseCategoryCode, lastUpdatedAsOfTimestamp, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (searchText) {
            searchText.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
            });
        }
        if (wildfireYear) {
            wildfireYear.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'wildfireYear');
            });
        }
        if (incidentNumberSequence) {
            incidentNumberSequence.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberSequence');
            });
        }
        if (fireCentreOrgUnitIdentifier) {
            fireCentreOrgUnitIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdentifier');
            });
        }
        if (zoneOrgUnitIdentifier) {
            zoneOrgUnitIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'zoneOrgUnitIdentifier');
            });
        }
        if (incidentStatusCode) {
            incidentStatusCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentStatusCode');
            });
        }
        if (incidentTypeCode) {
            incidentTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentTypeCode');
            });
        }
        if (stageOfControlCode) {
            stageOfControlCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'stageOfControlCode');
            });
        }
        if (responseTypeCode) {
            responseTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'responseTypeCode');
            });
        }
        if (suspectedCauseCategoryCode) {
            suspectedCauseCategoryCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'suspectedCauseCategoryCode');
            });
        }
        if (lastUpdatedAsOfTimestamp !== undefined && lastUpdatedAsOfTimestamp !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (lastUpdatedAsOfTimestamp), 'lastUpdatedAsOfTimestamp');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/simpleWildfireIncidents`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getTopLevel(restVersion, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} externalId
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getWildfireIncident(externalId, restVersion, observe = 'body', reportProgress = false, options) {
        if (externalId === null || externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getWildfireIncident.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/externalId/${encodeURIComponent(String(externalId))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getWildfireIncident1(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getWildfireIncident1.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getWildfireIncident1.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} incidentGuid
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getWildfireIncidentByIncidentGuid(incidentGuid, restVersion, observe = 'body', reportProgress = false, options) {
        if (incidentGuid === null || incidentGuid === undefined) {
            throw new Error('Required parameter incidentGuid was null or undefined when calling getWildfireIncidentByIncidentGuid.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(incidentGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} searchText
     * @param {?=} wildfireYear
     * @param {?=} incidentNumberSequence
     * @param {?=} incidentId
     * @param {?=} incidentName
     * @param {?=} claimExpectedInd
     * @param {?=} rehabilitationPlanRequiredInd
     * @param {?=} paperTrailedInd
     * @param {?=} fieldPhotoInd
     * @param {?=} finalReportCompleteInd
     * @param {?=} incidentCommanderName
     * @param {?=} signoffSignatureInd
     * @param {?=} agencyAssistanceTaskIdentifier
     * @param {?=} approvalSignatureName
     * @param {?=} approvalSignatureInd
     * @param {?=} fireCentreOrgUnitIdentifier
     * @param {?=} zoneOrgUnitIdentifier
     * @param {?=} detectionSourceCode
     * @param {?=} fireClassificationCode
     * @param {?=} agencyAssistTypeCode
     * @param {?=} responseTypeCode
     * @param {?=} assistingPartyName
     * @param {?=} discoveredByPartyName
     * @param {?=} firstActionedByPartyName
     * @param {?=} leadByPartyName
     * @param {?=} incidentStatusCode
     * @param {?=} incidentNumberLabel
     * @param {?=} probabilityOfInitialAttackSuccessCode
     * @param {?=} suspectedCauseCategoryCode
     * @param {?=} incidentCategoryCode
     * @param {?=} incidentTypeCode
     * @param {?=} fireOfNotePublishedInd
     * @param {?=} wasFireOfNotePublishedInd
     * @param {?=} stageOfControlCode
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getWildfireIncidentList(restVersion, searchText, wildfireYear, incidentNumberSequence, incidentId, incidentName, claimExpectedInd, rehabilitationPlanRequiredInd, paperTrailedInd, fieldPhotoInd, finalReportCompleteInd, incidentCommanderName, signoffSignatureInd, agencyAssistanceTaskIdentifier, approvalSignatureName, approvalSignatureInd, fireCentreOrgUnitIdentifier, zoneOrgUnitIdentifier, detectionSourceCode, fireClassificationCode, agencyAssistTypeCode, responseTypeCode, assistingPartyName, discoveredByPartyName, firstActionedByPartyName, leadByPartyName, incidentStatusCode, incidentNumberLabel, probabilityOfInitialAttackSuccessCode, suspectedCauseCategoryCode, incidentCategoryCode, incidentTypeCode, fireOfNotePublishedInd, wasFireOfNotePublishedInd, stageOfControlCode, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (searchText) {
            searchText.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'searchText');
            });
        }
        if (wildfireYear) {
            wildfireYear.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'wildfireYear');
            });
        }
        if (incidentNumberSequence) {
            incidentNumberSequence.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberSequence');
            });
        }
        if (incidentId) {
            incidentId.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentId');
            });
        }
        if (incidentName) {
            incidentName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentName');
            });
        }
        if (claimExpectedInd !== undefined && claimExpectedInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (claimExpectedInd), 'claimExpectedInd');
        }
        if (rehabilitationPlanRequiredInd !== undefined && rehabilitationPlanRequiredInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (rehabilitationPlanRequiredInd), 'rehabilitationPlanRequiredInd');
        }
        if (paperTrailedInd !== undefined && paperTrailedInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (paperTrailedInd), 'paperTrailedInd');
        }
        if (fieldPhotoInd !== undefined && fieldPhotoInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (fieldPhotoInd), 'fieldPhotoInd');
        }
        if (finalReportCompleteInd !== undefined && finalReportCompleteInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (finalReportCompleteInd), 'finalReportCompleteInd');
        }
        if (incidentCommanderName) {
            incidentCommanderName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentCommanderName');
            });
        }
        if (signoffSignatureInd !== undefined && signoffSignatureInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (signoffSignatureInd), 'signoffSignatureInd');
        }
        if (agencyAssistanceTaskIdentifier) {
            agencyAssistanceTaskIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'agencyAssistanceTaskIdentifier');
            });
        }
        if (approvalSignatureName) {
            approvalSignatureName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'approvalSignatureName');
            });
        }
        if (approvalSignatureInd !== undefined && approvalSignatureInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (approvalSignatureInd), 'approvalSignatureInd');
        }
        if (fireCentreOrgUnitIdentifier) {
            fireCentreOrgUnitIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireCentreOrgUnitIdentifier');
            });
        }
        if (zoneOrgUnitIdentifier) {
            zoneOrgUnitIdentifier.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'zoneOrgUnitIdentifier');
            });
        }
        if (detectionSourceCode) {
            detectionSourceCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'detectionSourceCode');
            });
        }
        if (fireClassificationCode) {
            fireClassificationCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'fireClassificationCode');
            });
        }
        if (agencyAssistTypeCode) {
            agencyAssistTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'agencyAssistTypeCode');
            });
        }
        if (responseTypeCode) {
            responseTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'responseTypeCode');
            });
        }
        if (assistingPartyName) {
            assistingPartyName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'assistingPartyName');
            });
        }
        if (discoveredByPartyName) {
            discoveredByPartyName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'discoveredByPartyName');
            });
        }
        if (firstActionedByPartyName) {
            firstActionedByPartyName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'firstActionedByPartyName');
            });
        }
        if (leadByPartyName) {
            leadByPartyName.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'leadByPartyName');
            });
        }
        if (incidentStatusCode) {
            incidentStatusCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentStatusCode');
            });
        }
        if (incidentNumberLabel) {
            incidentNumberLabel.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentNumberLabel');
            });
        }
        if (probabilityOfInitialAttackSuccessCode) {
            probabilityOfInitialAttackSuccessCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'probabilityOfInitialAttackSuccessCode');
            });
        }
        if (suspectedCauseCategoryCode) {
            suspectedCauseCategoryCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'suspectedCauseCategoryCode');
            });
        }
        if (incidentCategoryCode) {
            incidentCategoryCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentCategoryCode');
            });
        }
        if (incidentTypeCode) {
            incidentTypeCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'incidentTypeCode');
            });
        }
        if (fireOfNotePublishedInd !== undefined && fireOfNotePublishedInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (fireOfNotePublishedInd), 'fireOfNotePublishedInd');
        }
        if (wasFireOfNotePublishedInd !== undefined && wasFireOfNotePublishedInd !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (wasFireOfNotePublishedInd), 'wasFireOfNotePublishedInd');
        }
        if (stageOfControlCode) {
            stageOfControlCode.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (element), 'stageOfControlCode');
            });
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getWildfireIncidentStatusChangeList(wildfireYear, incidentNumberSequence, restVersion, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getWildfireIncidentStatusChangeList.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getWildfireIncidentStatusChangeList.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/statusChanges`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfirePartyGuid
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getWildfireParty(wildfirePartyGuid, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfirePartyGuid === null || wildfirePartyGuid === undefined) {
            throw new Error('Required parameter wildfirePartyGuid was null or undefined when calling getWildfireParty.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/wildfirePartys/${encodeURIComponent(String(wildfirePartyGuid))}`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} restVersion
     * @param {?=} partyName
     * @param {?=} partyTypeCode
     * @param {?=} partyUsageTypeCode
     * @param {?=} effectiveAsOfDate
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} expand
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getWildfirePartyList(restVersion, partyName, partyTypeCode, partyUsageTypeCode, effectiveAsOfDate, pageNumber, pageRowCount, orderBy, expand, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (partyName !== undefined && partyName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (partyName), 'partyName');
        }
        if (partyTypeCode !== undefined && partyTypeCode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (partyTypeCode), 'partyTypeCode');
        }
        if (partyUsageTypeCode !== undefined && partyUsageTypeCode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (partyUsageTypeCode), 'partyUsageTypeCode');
        }
        if (effectiveAsOfDate !== undefined && effectiveAsOfDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (effectiveAsOfDate), 'effectiveAsOfDate');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageNumber), 'pageNumber');
        }
        if (pageRowCount !== undefined && pageRowCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (pageRowCount), 'pageRowCount');
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (orderBy), 'orderBy');
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (expand), 'expand');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/wildfirePartys`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    getWildfirePerimeter(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling getWildfirePerimeter.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling getWildfirePerimeter.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/wildfirePerimeter`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?=} requestId
     * @param {?=} restVersion
     * @param {?=} cacheControl
     * @param {?=} pragma
     * @param {?=} authorization
     * @param {?=} callstack
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    queryTheHealthOfTheService(requestId, restVersion, cacheControl, pragma, authorization, callstack, observe = 'body', reportProgress = false, options) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (callstack !== undefined && callstack !== null) {
            queryParameters = this.addToHttpParams(queryParameters, /** @type {?} */ (callstack), 'callstack');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (requestId !== undefined && requestId !== null) {
            headers = headers.set('RequestId', String(requestId));
        }
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (cacheControl !== undefined && cacheControl !== null) {
            headers = headers.set('Cache-Control', String(cacheControl));
        }
        if (pragma !== undefined && pragma !== null) {
            headers = headers.set('Pragma', String(pragma));
        }
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/checkHealth`, {
            params: queryParameters,
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?} attachmentGuid
     * @param {?=} restVersion
     * @param {?=} attachmentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    redactIncidentAttachment(wildfireYear, incidentNumberSequence, attachmentGuid, restVersion, attachmentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling redactIncidentAttachment.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling redactIncidentAttachment.');
        }
        if (attachmentGuid === null || attachmentGuid === undefined) {
            throw new Error('Required parameter attachmentGuid was null or undefined when calling redactIncidentAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments/${encodeURIComponent(String(attachmentGuid))}/redact`, attachmentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?} attachmentGuid
     * @param {?=} restVersion
     * @param {?=} attachmentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    redactReportOfFireAttachment(wildfireYear, reportOfFireNumber, attachmentGuid, restVersion, attachmentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling redactReportOfFireAttachment.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling redactReportOfFireAttachment.');
        }
        if (attachmentGuid === null || attachmentGuid === undefined) {
            throw new Error('Required parameter attachmentGuid was null or undefined when calling redactReportOfFireAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments/${encodeURIComponent(String(attachmentGuid))}/redact`, attachmentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} onBehalfOfResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    reviewPublicReportOfFire(wildfireYear, reportOfFireNumber, restVersion, ifMatch, onBehalfOfResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling reviewPublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling reviewPublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/review`, onBehalfOfResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    signoffIncidentApproval(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling signoffIncidentApproval.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling signoffIncidentApproval.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/approval`, null, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    signoffIncidentVerification(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling signoffIncidentVerification.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling signoffIncidentVerification.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/verification`, null, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} onBehalfOfResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    submitPublicReportOfFire(wildfireYear, reportOfFireNumber, restVersion, ifMatch, onBehalfOfResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling submitPublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling submitPublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/submit`, onBehalfOfResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} ifMatch
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} onBehalfOfResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    unacknowledgePublicReportOfFire(ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe = 'body', reportProgress = false, options) {
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling unacknowledgePublicReportOfFire.');
        }
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling unacknowledgePublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling unacknowledgePublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/unacknowledge`, onBehalfOfResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} ifMatch
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} onBehalfOfResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    unassignPublicReportOfFire(ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe = 'body', reportProgress = false, options) {
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling unassignPublicReportOfFire.');
        }
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling unassignPublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling unassignPublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/unassign`, onBehalfOfResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} ifMatch
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} onBehalfOfResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    uncancelPublicReportOfFire(ifMatch, wildfireYear, reportOfFireNumber, restVersion, onBehalfOfResource, observe = 'body', reportProgress = false, options) {
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling uncancelPublicReportOfFire.');
        }
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling uncancelPublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling uncancelPublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/uncancel`, onBehalfOfResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    unsignIncidentApproval(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling unsignIncidentApproval.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling unsignIncidentApproval.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/approval`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    unsignIncidentVerification(wildfireYear, incidentNumberSequence, restVersion, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling unsignIncidentVerification.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling unsignIncidentVerification.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/verification`, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} ifMatch
     * @param {?} codeHierarchyName
     * @param {?} codeHierarchyRsrc
     * @param {?=} requestId
     * @param {?=} restVersion
     * @param {?=} cacheControl
     * @param {?=} pragma
     * @param {?=} authorization
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateCodeHierarchyResourceByCodeTableName(ifMatch, codeHierarchyName, codeHierarchyRsrc, requestId, restVersion, cacheControl, pragma, authorization, observe = 'body', reportProgress = false, options) {
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeHierarchyResourceByCodeTableName.');
        }
        if (codeHierarchyName === null || codeHierarchyName === undefined) {
            throw new Error('Required parameter codeHierarchyName was null or undefined when calling updateCodeHierarchyResourceByCodeTableName.');
        }
        if (codeHierarchyRsrc === null || codeHierarchyRsrc === undefined) {
            throw new Error('Required parameter codeHierarchyRsrc was null or undefined when calling updateCodeHierarchyResourceByCodeTableName.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (requestId !== undefined && requestId !== null) {
            headers = headers.set('RequestId', String(requestId));
        }
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (cacheControl !== undefined && cacheControl !== null) {
            headers = headers.set('Cache-Control', String(cacheControl));
        }
        if (pragma !== undefined && pragma !== null) {
            headers = headers.set('Pragma', String(pragma));
        }
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/codeHierarchies/${encodeURIComponent(String(codeHierarchyName))}`, codeHierarchyRsrc, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} ifMatch
     * @param {?} codeTableName
     * @param {?} codeTableRsrc
     * @param {?=} requestId
     * @param {?=} restVersion
     * @param {?=} cacheControl
     * @param {?=} pragma
     * @param {?=} authorization
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateCodeTableResourceByCodeTableName(ifMatch, codeTableName, codeTableRsrc, requestId, restVersion, cacheControl, pragma, authorization, observe = 'body', reportProgress = false, options) {
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeTableResourceByCodeTableName.');
        }
        if (codeTableName === null || codeTableName === undefined) {
            throw new Error('Required parameter codeTableName was null or undefined when calling updateCodeTableResourceByCodeTableName.');
        }
        if (codeTableRsrc === null || codeTableRsrc === undefined) {
            throw new Error('Required parameter codeTableRsrc was null or undefined when calling updateCodeTableResourceByCodeTableName.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (requestId !== undefined && requestId !== null) {
            headers = headers.set('RequestId', String(requestId));
        }
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (cacheControl !== undefined && cacheControl !== null) {
            headers = headers.set('Cache-Control', String(cacheControl));
        }
        if (pragma !== undefined && pragma !== null) {
            headers = headers.set('Pragma', String(pragma));
        }
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`, codeTableRsrc, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} complianceAndEnforcementInvestigationResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateComplianceAndEnforcementInvestigation(wildfireYear, incidentNumberSequence, restVersion, ifMatch, complianceAndEnforcementInvestigationResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling updateComplianceAndEnforcementInvestigation.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateComplianceAndEnforcementInvestigation.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/complianceAndEnforcementInvestigation`, complianceAndEnforcementInvestigationResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} externalUriGuid
     * @param {?=} externalUriResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateExternalUri(externalUriGuid, externalUriResource, observe = 'body', reportProgress = false, options) {
        if (externalUriGuid === null || externalUriGuid === undefined) {
            throw new Error('Required parameter externalUriGuid was null or undefined when calling updateExternalUri.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/externalUri/${encodeURIComponent(String(externalUriGuid))}`, externalUriResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?} attachmentGuid
     * @param {?=} restVersion
     * @param {?=} attachmentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateIncidentAttachment(wildfireYear, incidentNumberSequence, attachmentGuid, restVersion, attachmentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling updateIncidentAttachment.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateIncidentAttachment.');
        }
        if (attachmentGuid === null || attachmentGuid === undefined) {
            throw new Error('Required parameter attachmentGuid was null or undefined when calling updateIncidentAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/attachments/${encodeURIComponent(String(attachmentGuid))}`, attachmentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} initialFireReportId
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} initialFireReportResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateInitialFireReport(initialFireReportId, restVersion, ifMatch, initialFireReportResource, observe = 'body', reportProgress = false, options) {
        if (initialFireReportId === null || initialFireReportId === undefined) {
            throw new Error('Required parameter initialFireReportId was null or undefined when calling updateInitialFireReport.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/initialFireReports/${encodeURIComponent(String(initialFireReportId))}`, initialFireReportResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} incidentLandAuthorityResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateManagingLandAuthority(wildfireYear, incidentNumberSequence, restVersion, ifMatch, incidentLandAuthorityResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling updateManagingLandAuthority.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateManagingLandAuthority.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/managingLandAuthority`, incidentLandAuthorityResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} originAndCauseInvestigationResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateOriginAndCauseInvestigation(wildfireYear, incidentNumberSequence, restVersion, ifMatch, originAndCauseInvestigationResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling updateOriginAndCauseInvestigation.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateOriginAndCauseInvestigation.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/originAndCauseInvestigation`, originAndCauseInvestigationResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} provisionalZoneGuid
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} provisionalZoneResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateProvisionalZone(provisionalZoneGuid, restVersion, ifMatch, provisionalZoneResource, observe = 'body', reportProgress = false, options) {
        if (provisionalZoneGuid === null || provisionalZoneGuid === undefined) {
            throw new Error('Required parameter provisionalZoneGuid was null or undefined when calling updateProvisionalZone.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/provisionalZones/${encodeURIComponent(String(provisionalZoneGuid))}`, provisionalZoneResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} publicReportOfFireResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updatePublicReportOfFire(wildfireYear, reportOfFireNumber, restVersion, ifMatch, publicReportOfFireResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling updatePublicReportOfFire.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling updatePublicReportOfFire.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}`, publicReportOfFireResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} publishedIncidentDetailGuid
     * @param {?=} publishedIncidentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updatePublishedIncident(publishedIncidentDetailGuid, publishedIncidentResource, observe = 'body', reportProgress = false, options) {
        if (publishedIncidentDetailGuid === null || publishedIncidentDetailGuid === undefined) {
            throw new Error('Required parameter publishedIncidentDetailGuid was null or undefined when calling updatePublishedIncident.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/publishedIncidents/${encodeURIComponent(String(publishedIncidentDetailGuid))}`, publishedIncidentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} reportOfFireNumber
     * @param {?} attachmentGuid
     * @param {?=} restVersion
     * @param {?=} attachmentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateReportOfFireAttachment(wildfireYear, reportOfFireNumber, attachmentGuid, restVersion, attachmentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling updateReportOfFireAttachment.');
        }
        if (reportOfFireNumber === null || reportOfFireNumber === undefined) {
            throw new Error('Required parameter reportOfFireNumber was null or undefined when calling updateReportOfFireAttachment.');
        }
        if (attachmentGuid === null || attachmentGuid === undefined) {
            throw new Error('Required parameter attachmentGuid was null or undefined when calling updateReportOfFireAttachment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/publicReportOfFires/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(reportOfFireNumber))}/attachments/${encodeURIComponent(String(attachmentGuid))}`, attachmentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} resourceAllocationAssessmentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateResourceAllocationAssessment(wildfireYear, incidentNumberSequence, restVersion, ifMatch, resourceAllocationAssessmentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling updateResourceAllocationAssessment.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateResourceAllocationAssessment.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/resourceAllocationAssessment`, resourceAllocationAssessmentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} wildfireIncidentResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateWildfireIncident(wildfireYear, incidentNumberSequence, restVersion, ifMatch, wildfireIncidentResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling updateWildfireIncident.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateWildfireIncident.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}`, wildfireIncidentResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfirePartyGuid
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} wildfirePartyResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateWildfireParty(wildfirePartyGuid, restVersion, ifMatch, wildfirePartyResource, observe = 'body', reportProgress = false, options) {
        if (wildfirePartyGuid === null || wildfirePartyGuid === undefined) {
            throw new Error('Required parameter wildfirePartyGuid was null or undefined when calling updateWildfireParty.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/wildfirePartys/${encodeURIComponent(String(wildfirePartyGuid))}`, wildfirePartyResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} wildfireYear
     * @param {?} incidentNumberSequence
     * @param {?=} restVersion
     * @param {?=} ifMatch
     * @param {?=} wildfirePerimeterResource
     * @param {?=} observe
     * @param {?=} reportProgress
     * @param {?=} options
     * @return {?}
     */
    updateWildfirePerimeter(wildfireYear, incidentNumberSequence, restVersion, ifMatch, wildfirePerimeterResource, observe = 'body', reportProgress = false, options) {
        if (wildfireYear === null || wildfireYear === undefined) {
            throw new Error('Required parameter wildfireYear was null or undefined when calling updateWildfirePerimeter.');
        }
        if (incidentNumberSequence === null || incidentNumberSequence === undefined) {
            throw new Error('Required parameter incidentNumberSequence was null or undefined when calling updateWildfirePerimeter.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            /** @type {?} */
            const httpHeaderAccepts = [
                'application/json',
                'application/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        /** @type {?} */
        const consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        /** @type {?} */
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/incidents/${encodeURIComponent(String(wildfireYear))}/${encodeURIComponent(String(incidentNumberSequence))}/wildfirePerimeter`, wildfirePerimeterResource, {
            responseType: /** @type {?} */ (responseType),
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
DefaultService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
DefaultService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];
/** @nocollapse */ DefaultService.ngInjectableDef = i0.defineInjectable({ factory: function DefaultService_Factory() { return new DefaultService(i0.inject(i1.HttpClient), i0.inject(i2.BASE_PATH, 8), i0.inject(i3.Configuration, 8)); }, token: DefaultService, providedIn: "root" });
if (false) {
    /** @type {?} */
    DefaultService.prototype.basePath;
    /** @type {?} */
    DefaultService.prototype.defaultHeaders;
    /** @type {?} */
    DefaultService.prototype.configuration;
    /** @type {?} */
    DefaultService.prototype.encoder;
    /** @type {?} */
    DefaultService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,