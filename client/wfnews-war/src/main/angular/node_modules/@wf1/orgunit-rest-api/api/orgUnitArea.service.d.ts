import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrgUnitAreaResource } from '../model/orgUnitAreaResource';
import { OrgUnitConfiguration } from '../configuration';
import * as ɵngcc0 from '@angular/core';
export declare class OrgUnitAreaService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: OrgUnitConfiguration;
    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     * Delete an Area defined for an Org Unit by ID.
     * Delete an Area defined for an Org Unit by ID.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param orgUnitAreaId The identifier of the Org Unit Area resource.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param effectiveDate Delete the resource for the period effective as of the effectiveDate or as of today if not provided.
     * @param expiryDate Delete the resource for the period expiring as of the expiryDate or open ended if not provided.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get an Area defined for an Org Unit by ID.
     * Get an Area defined for an Org Unit by ID.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param orgUnitAreaId The identifier of the Org Unit Area resource.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param includeGeometryInd Indicates if the geometry should be returned with the results.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaResource>;
    getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaResource>>;
    getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaResource>>;
    /**
     * Update an Area defined for an Org Unit by ID.
     * Update an Area defined for an Org Unit by ID.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param orgUnitAreaId The identifier of the Org Unit Area resource.
     * @param orgUnitArea The UserEditableData resource containing the new values.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaResource>;
    updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaResource>>;
    updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaResource>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<OrgUnitAreaService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<OrgUnitAreaService>;
}

//# sourceMappingURL=orgUnitArea.service.d.ts.map