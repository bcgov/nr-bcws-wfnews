import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrgUnitAreaListResource } from '../model/orgUnitAreaListResource';
import { OrgUnitAreaResource } from '../model/orgUnitAreaResource';
import { OrgUnitConfiguration } from '../configuration';
import * as ɵngcc0 from '@angular/core';
export declare class OrgUnitAreaListService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: OrgUnitConfiguration;
    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     * Add an Area Resource to the list of Areas defined for an Org Unit.
     * Add an Area Resource to the list of Areas defined for an Org Unit.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param orgUnitArea The Area resource containing the new values.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaResource>;
    createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaResource>>;
    createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaResource>>;
    /**
     * Get the list of Areas defined for an Org Unit.
     * Get the list of Areas defined for an Org Unit.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param orgUnitAreaTypeCode Filter the results by the orgUnitAreaTypeCode.
     * @param includeGeometryInd Indicates if the geometry should be returned with the results.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaListResource>;
    getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaListResource>>;
    getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaListResource>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<OrgUnitAreaListService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<OrgUnitAreaListService>;
}

//# sourceMappingURL=orgUnitAreaList.service.d.ts.map