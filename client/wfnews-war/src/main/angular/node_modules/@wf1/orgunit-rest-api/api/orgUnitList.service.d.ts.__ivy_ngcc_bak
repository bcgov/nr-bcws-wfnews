import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrgUnitListResource } from '../model/orgUnitListResource';
import { OrgUnitConfiguration } from '../configuration';
export declare class OrgUnitListService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: OrgUnitConfiguration;
    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     * Get list of Org Units.
     * Get list of Org Units.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param orgUnitName Filter the results by the orgUnitName.
     * @param integerAlias Filter the results by the integerAlias.
     * @param characterAlias Filter the results by the characterAlias.
     * @param orgUnitTypeCode Filter the results by the orgUnitTypeCode.
     * @param orgUnitAreaTypeCode Filter the results by the orgUnitAreaTypeCode.
     * @param point Filter the results by the point.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitListResource>;
    getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitListResource>>;
    getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitListResource>>;
}
