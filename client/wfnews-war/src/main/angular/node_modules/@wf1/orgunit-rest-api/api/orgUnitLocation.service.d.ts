import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrgUnitLocationResource } from '../model/orgUnitLocationResource';
import { OrgUnitConfiguration } from '../configuration';
import * as ɵngcc0 from '@angular/core';
export declare class OrgUnitLocationService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: OrgUnitConfiguration;
    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     * Delete an Location defined for an Org Unit by ID.
     * Delete an Location defined for an Org Unit by ID.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param orgUnitLocationId The identifier of the Org Unit Location resource.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param effectiveDate Delete the resource for the period effective as of the effectiveDate or as of today if not provided.
     * @param expiryDate Delete the resource for the period expiring as of the expiryDate or open ended if not provided.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * Get an Org Unit Location by ID.
     * Get an Org Unit Location by ID.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param orgUnitLocationId The identifier of the Org Unit Location resource.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;
    getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;
    getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;
    /**
     * Update a Location defined for an Org Unit by ID.
     * Update a Location defined for an Org Unit by ID.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param orgUnitLocationId The identifier of the Org Unit Location resource.
     * @param orgUnitLocation The UserEditableData resource containing the new values.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;
    updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;
    updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<OrgUnitLocationService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<OrgUnitLocationService>;
}

//# sourceMappingURL=orgUnitLocation.service.d.ts.map