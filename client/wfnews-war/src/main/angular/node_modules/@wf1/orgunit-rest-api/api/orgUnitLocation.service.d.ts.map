{"version":3,"file":"orgUnitLocation.service.d.ts","sources":["orgUnitLocation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { OrgUnitLocationResource } from '../model/orgUnitLocationResource';\nimport { OrgUnitConfiguration } from '../configuration';\nexport declare class OrgUnitLocationService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: OrgUnitConfiguration;\n    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes);\n    /**\n     * Delete an Location defined for an Org Unit by ID.\n     * Delete an Location defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param effectiveDate Delete the resource for the period effective as of the effectiveDate or as of today if not provided.\n     * @param expiryDate Delete the resource for the period expiring as of the expiryDate or open ended if not provided.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    /**\n     * Get an Org Unit Location by ID.\n     * Get an Org Unit Location by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;\n    getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;\n    getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;\n    /**\n     * Update a Location defined for an Org Unit by ID.\n     * Update a Location defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param orgUnitLocation The UserEditableData resource containing the new values.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;\n    updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;\n    updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;\n}\n"]}