import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrgUnitLocationListResource } from '../model/orgUnitLocationListResource';
import { OrgUnitLocationResource } from '../model/orgUnitLocationResource';
import { OrgUnitConfiguration } from '../configuration';
export declare class OrgUnitLocationListService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: OrgUnitConfiguration;
    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     * Add a Location Resource to the list of Locations defined for an Org Unit.
     * Add an Location Resource to the list of Locations defined for an Org Unit.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param orgUnitLocation The Location resource containing the new values.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;
    createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;
    createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;
    /**
     * Get the list of Org Unit Locations.
     * Get the list of Org Unit Locations.
     * @param orgUnitId The identifier of the Org Unit resource.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param orgUnitLocationTypeCode Filter the results by the orgUnitLocationTypeCode.
     * @param locationName Filter the results by the locationName.
     * @param primaryInd Filter the results by the primaryInd.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationListResource>;
    getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationListResource>>;
    getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationListResource>>;
}
