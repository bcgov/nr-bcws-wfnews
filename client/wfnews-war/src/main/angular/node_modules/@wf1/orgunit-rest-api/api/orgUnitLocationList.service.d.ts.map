{"version":3,"file":"orgUnitLocationList.service.d.ts","sources":["orgUnitLocationList.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { OrgUnitLocationListResource } from '../model/orgUnitLocationListResource';\nimport { OrgUnitLocationResource } from '../model/orgUnitLocationResource';\nimport { OrgUnitConfiguration } from '../configuration';\nexport declare class OrgUnitLocationListService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: OrgUnitConfiguration;\n    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes);\n    /**\n     * Add a Location Resource to the list of Locations defined for an Org Unit.\n     * Add an Location Resource to the list of Locations defined for an Org Unit.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocation The Location resource containing the new values.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;\n    createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;\n    createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;\n    /**\n     * Get the list of Org Unit Locations.\n     * Get the list of Org Unit Locations.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param orgUnitLocationTypeCode Filter the results by the orgUnitLocationTypeCode.\n     * @param locationName Filter the results by the locationName.\n     * @param primaryInd Filter the results by the primaryInd.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationListResource>;\n    getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationListResource>>;\n    getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationListResource>>;\n}\n"]}