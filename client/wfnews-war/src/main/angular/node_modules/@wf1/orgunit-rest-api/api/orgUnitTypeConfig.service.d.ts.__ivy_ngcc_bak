import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { OrgUnitTypeConfigResource } from '../model/orgUnitTypeConfigResource';
import { OrgUnitTypeConfigResultResource } from '../model/orgUnitTypeConfigResultResource';
import { OrgUnitConfiguration } from '../configuration';
export declare class OrgUnitTypeConfigService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: OrgUnitConfiguration;
    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     * Get the configuration for an Org Unit Type.
     * Get the configuration for an Org Unit Type.
     * @param orgUnitTypeCode The identifier of the Org Unit Type.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitTypeConfigResource>;
    getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitTypeConfigResource>>;
    getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitTypeConfigResource>>;
    /**
     * Add or update the configuration for an Org Unit Type
     * Add or update the configuration for an Org Unit Type
     * @param orgUnitTypeConfig The OrgUnitTypeConfig resource containing the new values.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitTypeConfigResultResource>;
    upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitTypeConfigResultResource>>;
    upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitTypeConfigResultResource>>;
}
