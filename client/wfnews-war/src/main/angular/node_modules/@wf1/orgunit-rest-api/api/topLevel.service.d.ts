import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { EndpointsResource } from '../model/endpointsResource';
import { OrgUnitConfiguration } from '../configuration';
import * as ɵngcc0 from '@angular/core';
export declare class TopLevelService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: OrgUnitConfiguration;
    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes);
    /**
     * Get Top Level Resources.
     * Get Top Level Resources
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getTopLevel1(restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<EndpointsResource>;
    getTopLevel1(restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EndpointsResource>>;
    getTopLevel1(restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EndpointsResource>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<TopLevelService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<TopLevelService>;
}

//# sourceMappingURL=topLevel.service.d.ts.map