{"version":3,"file":"topLevel.service.d.ts","sources":["topLevel.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { EndpointsResource } from '../model/endpointsResource';\nimport { OrgUnitConfiguration } from '../configuration';\nexport declare class TopLevelService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: OrgUnitConfiguration;\n    constructor(httpClient: HttpClient, basePath: string, configuration: OrgUnitConfiguration);\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes);\n    /**\n     * Get Top Level Resources.\n     * Get Top Level Resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getTopLevel1(restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<EndpointsResource>;\n    getTopLevel1(restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EndpointsResource>>;\n    getTopLevel1(restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EndpointsResource>>;\n}\n"]}