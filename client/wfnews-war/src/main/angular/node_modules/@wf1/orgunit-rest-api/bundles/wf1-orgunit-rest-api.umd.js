(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@wf1/orgunit-rest-api', ['exports', '@angular/common/http', '@angular/core', '@angular/common'], factory) :
    (factory((global.wf1 = global.wf1 || {}, global.wf1['orgunit-rest-api'] = {}),global.ng.common.http,global.ng.core,global.ng.common));
}(this, (function (exports,http,core,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * CustomHttpUrlEncodingCodec
     * Fix plus sign (+) not encoding, so sent as blank space
     * See: https://github.com/angular/angular/issues/11058#issuecomment-247367318
     */
    var /**
     * CustomHttpUrlEncodingCodec
     * Fix plus sign (+) not encoding, so sent as blank space
     * See: https://github.com/angular/angular/issues/11058#issuecomment-247367318
     */ CustomHttpUrlEncodingCodec = (function (_super) {
        __extends(CustomHttpUrlEncodingCodec, _super);
        function CustomHttpUrlEncodingCodec() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} k
         * @return {?}
         */
        CustomHttpUrlEncodingCodec.prototype.encodeKey = /**
         * @param {?} k
         * @return {?}
         */
            function (k) {
                k = _super.prototype.encodeKey.call(this, k);
                return k.replace(/\+/gi, '%2B');
            };
        /**
         * @param {?} v
         * @return {?}
         */
        CustomHttpUrlEncodingCodec.prototype.encodeValue = /**
         * @param {?} v
         * @return {?}
         */
            function (v) {
                v = _super.prototype.encodeValue.call(this, v);
                return v.replace(/\+/gi, '%2B');
            };
        return CustomHttpUrlEncodingCodec;
    }(http.HttpUrlEncodingCodec));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var BASE_PATH = new core.InjectionToken('basePath');
    /** @type {?} */
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var OrgUnitConfiguration = (function () {
        function OrgUnitConfiguration(configurationParameters) {
            if (configurationParameters === void 0) {
                configurationParameters = {};
            }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
        }
        /**
         * Select the correct content-type to use for a request.
         * Uses {\@link OrgUnitConfiguration#isJsonMime} to determine the correct content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param {?} contentTypes - the array of content types that are available for selection
         * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
         */
        OrgUnitConfiguration.prototype.selectHeaderContentType = /**
         * Select the correct content-type to use for a request.
         * Uses {\@link OrgUnitConfiguration#isJsonMime} to determine the correct content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param {?} contentTypes - the array of content types that are available for selection
         * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
         */
            function (contentTypes) {
                var _this = this;
                if (contentTypes.length == 0) {
                    return undefined;
                }
                /** @type {?} */
                var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
                if (type === undefined) {
                    return contentTypes[0];
                }
                return type;
            };
        /**
         * Select the correct accept content-type to use for a request.
         * Uses {\@link OrgUnitConfiguration#isJsonMime} to determine the correct accept content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param {?} accepts - the array of content types that are available for selection.
         * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
         */
        OrgUnitConfiguration.prototype.selectHeaderAccept = /**
         * Select the correct accept content-type to use for a request.
         * Uses {\@link OrgUnitConfiguration#isJsonMime} to determine the correct accept content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param {?} accepts - the array of content types that are available for selection.
         * @return {?} the selected content-type or <code>undefined</code> if no selection could be made.
         */
            function (accepts) {
                var _this = this;
                if (accepts.length == 0) {
                    return undefined;
                }
                /** @type {?} */
                var type = accepts.find(function (x) { return _this.isJsonMime(x); });
                if (type === undefined) {
                    return accepts[0];
                }
                return type;
            };
        /**
         * Check if the given MIME is a JSON MIME.
         * JSON MIME examples:
         *   application/json
         *   application/json; charset=UTF8
         *   APPLICATION/JSON
         *   application/vnd.company+json
         * @param {?} mime - MIME (Multipurpose Internet Mail Extensions)
         * @return {?} True if the given MIME is JSON, false otherwise.
         */
        OrgUnitConfiguration.prototype.isJsonMime = /**
         * Check if the given MIME is a JSON MIME.
         * JSON MIME examples:
         *   application/json
         *   application/json; charset=UTF8
         *   APPLICATION/JSON
         *   application/vnd.company+json
         * @param {?} mime - MIME (Multipurpose Internet Mail Extensions)
         * @return {?} True if the given MIME is JSON, false otherwise.
         */
            function (mime) {
                /** @type {?} */
                var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
                return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
            };
        return OrgUnitConfiguration;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CodeHierarchyEndpointsService = (function () {
        function CodeHierarchyEndpointsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        CodeHierarchyEndpointsService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} codeHierarchyName
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        CodeHierarchyEndpointsService.prototype.getCodeHierarchy1 = /**
         * @param {?} codeHierarchyName
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (codeHierarchyName, effectiveAsOfDate, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (codeHierarchyName === null || codeHierarchyName === undefined) {
                    throw new Error('Required parameter codeHierarchyName was null or undefined when calling getCodeHierarchy1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/codeHierarchies/" + encodeURIComponent(String(codeHierarchyName)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} codeHierarchyName
         * @param {?} codeHierarchy
         * @param {?} ifMatch
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        CodeHierarchyEndpointsService.prototype.updateCodeHierarchy1 = /**
         * @param {?} codeHierarchyName
         * @param {?} codeHierarchy
         * @param {?} ifMatch
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (codeHierarchyName, codeHierarchy, ifMatch, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (codeHierarchyName === null || codeHierarchyName === undefined) {
                    throw new Error('Required parameter codeHierarchyName was null or undefined when calling updateCodeHierarchy1.');
                }
                if (codeHierarchy === null || codeHierarchy === undefined) {
                    throw new Error('Required parameter codeHierarchy was null or undefined when calling updateCodeHierarchy1.');
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeHierarchy1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected != undefined) {
                    headers = headers.set("Content-Type", httpContentTypeSelected);
                }
                return this.httpClient.put(this.basePath + "/codeHierarchies/" + encodeURIComponent(String(codeHierarchyName)), codeHierarchy, {
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        CodeHierarchyEndpointsService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        CodeHierarchyEndpointsService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return CodeHierarchyEndpointsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CodeHierarchyListEndpointsService = (function () {
        function CodeHierarchyListEndpointsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        CodeHierarchyListEndpointsService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?=} effectiveAsOfDate
         * @param {?=} codeHierarchyName
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        CodeHierarchyListEndpointsService.prototype.getCodeHierarchyList1 = /**
         * @param {?=} effectiveAsOfDate
         * @param {?=} codeHierarchyName
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (effectiveAsOfDate, codeHierarchyName, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                if (codeHierarchyName !== undefined) {
                    queryParameters = queryParameters.set('codeHierarchyName', /** @type {?} */ (codeHierarchyName));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/codeHierarchies", {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        CodeHierarchyListEndpointsService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        CodeHierarchyListEndpointsService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return CodeHierarchyListEndpointsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CodeTableEndpointsService = (function () {
        function CodeTableEndpointsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        CodeTableEndpointsService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} codeTableName
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        CodeTableEndpointsService.prototype.getCodeTable1 = /**
         * @param {?} codeTableName
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (codeTableName, effectiveAsOfDate, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (codeTableName === null || codeTableName === undefined) {
                    throw new Error('Required parameter codeTableName was null or undefined when calling getCodeTable1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/codeTables/" + encodeURIComponent(String(codeTableName)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} codeTableName
         * @param {?} codeTable
         * @param {?} ifMatch
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        CodeTableEndpointsService.prototype.updateCodeTable1 = /**
         * @param {?} codeTableName
         * @param {?} codeTable
         * @param {?} ifMatch
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (codeTableName, codeTable, ifMatch, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (codeTableName === null || codeTableName === undefined) {
                    throw new Error('Required parameter codeTableName was null or undefined when calling updateCodeTable1.');
                }
                if (codeTable === null || codeTable === undefined) {
                    throw new Error('Required parameter codeTable was null or undefined when calling updateCodeTable1.');
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeTable1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected != undefined) {
                    headers = headers.set("Content-Type", httpContentTypeSelected);
                }
                return this.httpClient.put(this.basePath + "/codeTables/" + encodeURIComponent(String(codeTableName)), codeTable, {
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        CodeTableEndpointsService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        CodeTableEndpointsService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return CodeTableEndpointsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CodeTableListEndpointsService = (function () {
        function CodeTableListEndpointsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        CodeTableListEndpointsService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?=} effectiveAsOfDate
         * @param {?=} codeTableName
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        CodeTableListEndpointsService.prototype.getCodeTableList1 = /**
         * @param {?=} effectiveAsOfDate
         * @param {?=} codeTableName
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (effectiveAsOfDate, codeTableName, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                if (codeTableName !== undefined) {
                    queryParameters = queryParameters.set('codeTableName', /** @type {?} */ (codeTableName));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/codeTables", {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        CodeTableListEndpointsService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        CodeTableListEndpointsService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return CodeTableListEndpointsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LocationAddressService = (function () {
        function LocationAddressService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        LocationAddressService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?} locationAddressId
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        LocationAddressService.prototype.getLocationAddress = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?} locationAddressId
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitLocationId, locationAddressId, effectiveAsOfDate, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling getLocationAddress.');
                }
                if (orgUnitLocationId === null || orgUnitLocationId === undefined) {
                    throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getLocationAddress.');
                }
                if (locationAddressId === null || locationAddressId === undefined) {
                    throw new Error('Required parameter locationAddressId was null or undefined when calling getLocationAddress.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/locations/" + encodeURIComponent(String(orgUnitLocationId)) + "/addresses/" + encodeURIComponent(String(locationAddressId)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        LocationAddressService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        LocationAddressService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return LocationAddressService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LocationContactService = (function () {
        function LocationContactService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        LocationContactService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?} locationContactId
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        LocationContactService.prototype.getLocationContact1 = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?} locationContactId
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitLocationId, locationContactId, effectiveAsOfDate, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling getLocationContact1.');
                }
                if (orgUnitLocationId === null || orgUnitLocationId === undefined) {
                    throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getLocationContact1.');
                }
                if (locationContactId === null || locationContactId === undefined) {
                    throw new Error('Required parameter locationContactId was null or undefined when calling getLocationContact1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/locations/" + encodeURIComponent(String(orgUnitLocationId)) + "/contacts/" + encodeURIComponent(String(locationContactId)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        LocationContactService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        LocationContactService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return LocationContactService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var OrgUnitService = (function () {
        function OrgUnitService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        OrgUnitService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} orgUnitId
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitService.prototype.getOrgUnit1 = /**
         * @param {?} orgUnitId
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, effectiveAsOfDate, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnit1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        OrgUnitService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        OrgUnitService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return OrgUnitService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var OrgUnitAreaService = (function () {
        function OrgUnitAreaService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        OrgUnitAreaService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitAreaId
         * @param {?} ifMatch
         * @param {?=} effectiveDate
         * @param {?=} expiryDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitAreaService.prototype.deleteOrgUnitArea1 = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitAreaId
         * @param {?} ifMatch
         * @param {?=} effectiveDate
         * @param {?=} expiryDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitAreaId, ifMatch, effectiveDate, expiryDate, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling deleteOrgUnitArea1.');
                }
                if (orgUnitAreaId === null || orgUnitAreaId === undefined) {
                    throw new Error('Required parameter orgUnitAreaId was null or undefined when calling deleteOrgUnitArea1.');
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling deleteOrgUnitArea1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveDate', /** @type {?} */ (effectiveDate));
                }
                if (expiryDate !== undefined) {
                    queryParameters = queryParameters.set('expiryDate', /** @type {?} */ (expiryDate));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAccepts = [];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.delete(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/areas/" + encodeURIComponent(String(orgUnitAreaId)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitAreaId
         * @param {?=} effectiveAsOfDate
         * @param {?=} includeGeometryInd
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitAreaService.prototype.getOrgUnitArea1 = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitAreaId
         * @param {?=} effectiveAsOfDate
         * @param {?=} includeGeometryInd
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitAreaId, effectiveAsOfDate, includeGeometryInd, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitArea1.');
                }
                if (orgUnitAreaId === null || orgUnitAreaId === undefined) {
                    throw new Error('Required parameter orgUnitAreaId was null or undefined when calling getOrgUnitArea1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                if (includeGeometryInd !== undefined) {
                    queryParameters = queryParameters.set('includeGeometryInd', /** @type {?} */ (includeGeometryInd));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/areas/" + encodeURIComponent(String(orgUnitAreaId)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitAreaId
         * @param {?} orgUnitArea
         * @param {?} ifMatch
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitAreaService.prototype.updateOrgUnitArea1 = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitAreaId
         * @param {?} orgUnitArea
         * @param {?} ifMatch
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitAreaId, orgUnitArea, ifMatch, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling updateOrgUnitArea1.');
                }
                if (orgUnitAreaId === null || orgUnitAreaId === undefined) {
                    throw new Error('Required parameter orgUnitAreaId was null or undefined when calling updateOrgUnitArea1.');
                }
                if (orgUnitArea === null || orgUnitArea === undefined) {
                    throw new Error('Required parameter orgUnitArea was null or undefined when calling updateOrgUnitArea1.');
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling updateOrgUnitArea1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected != undefined) {
                    headers = headers.set("Content-Type", httpContentTypeSelected);
                }
                return this.httpClient.put(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/areas/" + encodeURIComponent(String(orgUnitAreaId)), orgUnitArea, {
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        OrgUnitAreaService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        OrgUnitAreaService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return OrgUnitAreaService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var OrgUnitAreaListService = (function () {
        function OrgUnitAreaListService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        OrgUnitAreaListService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitArea
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitAreaListService.prototype.createOrgUnitArea1 = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitArea
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitArea, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling createOrgUnitArea1.');
                }
                if (orgUnitArea === null || orgUnitArea === undefined) {
                    throw new Error('Required parameter orgUnitArea was null or undefined when calling createOrgUnitArea1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected != undefined) {
                    headers = headers.set("Content-Type", httpContentTypeSelected);
                }
                return this.httpClient.post(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/areas", orgUnitArea, {
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} orgUnitId
         * @param {?=} effectiveAsOfDate
         * @param {?=} orgUnitAreaTypeCode
         * @param {?=} includeGeometryInd
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitAreaListService.prototype.getOrgUnitAreaList1 = /**
         * @param {?} orgUnitId
         * @param {?=} effectiveAsOfDate
         * @param {?=} orgUnitAreaTypeCode
         * @param {?=} includeGeometryInd
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, effectiveAsOfDate, orgUnitAreaTypeCode, includeGeometryInd, pageNumber, pageRowCount, orderBy, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitAreaList1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                if (orgUnitAreaTypeCode !== undefined) {
                    queryParameters = queryParameters.set('orgUnitAreaTypeCode', /** @type {?} */ (orgUnitAreaTypeCode));
                }
                if (includeGeometryInd !== undefined) {
                    queryParameters = queryParameters.set('includeGeometryInd', /** @type {?} */ (includeGeometryInd));
                }
                if (pageNumber !== undefined) {
                    queryParameters = queryParameters.set('pageNumber', /** @type {?} */ (pageNumber));
                }
                if (pageRowCount !== undefined) {
                    queryParameters = queryParameters.set('pageRowCount', /** @type {?} */ (pageRowCount));
                }
                if (orderBy !== undefined) {
                    queryParameters = queryParameters.set('orderBy', /** @type {?} */ (orderBy));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/areas", {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        OrgUnitAreaListService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        OrgUnitAreaListService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return OrgUnitAreaListService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var OrgUnitListService = (function () {
        function OrgUnitListService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        OrgUnitListService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?=} effectiveAsOfDate
         * @param {?=} orgUnitName
         * @param {?=} integerAlias
         * @param {?=} characterAlias
         * @param {?=} orgUnitTypeCode
         * @param {?=} orgUnitAreaTypeCode
         * @param {?=} point
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitListService.prototype.getOrgUnitList1 = /**
         * @param {?=} effectiveAsOfDate
         * @param {?=} orgUnitName
         * @param {?=} integerAlias
         * @param {?=} characterAlias
         * @param {?=} orgUnitTypeCode
         * @param {?=} orgUnitAreaTypeCode
         * @param {?=} point
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (effectiveAsOfDate, orgUnitName, integerAlias, characterAlias, orgUnitTypeCode, orgUnitAreaTypeCode, point, pageNumber, pageRowCount, orderBy, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                if (orgUnitName !== undefined) {
                    queryParameters = queryParameters.set('orgUnitName', /** @type {?} */ (orgUnitName));
                }
                if (integerAlias !== undefined) {
                    queryParameters = queryParameters.set('integerAlias', /** @type {?} */ (integerAlias));
                }
                if (characterAlias !== undefined) {
                    queryParameters = queryParameters.set('characterAlias', /** @type {?} */ (characterAlias));
                }
                if (orgUnitTypeCode !== undefined) {
                    queryParameters = queryParameters.set('orgUnitTypeCode', /** @type {?} */ (orgUnitTypeCode));
                }
                if (orgUnitAreaTypeCode !== undefined) {
                    queryParameters = queryParameters.set('orgUnitAreaTypeCode', /** @type {?} */ (orgUnitAreaTypeCode));
                }
                if (point !== undefined) {
                    queryParameters = queryParameters.set('point', /** @type {?} */ (point));
                }
                if (pageNumber !== undefined) {
                    queryParameters = queryParameters.set('pageNumber', /** @type {?} */ (pageNumber));
                }
                if (pageRowCount !== undefined) {
                    queryParameters = queryParameters.set('pageRowCount', /** @type {?} */ (pageRowCount));
                }
                if (orderBy !== undefined) {
                    queryParameters = queryParameters.set('orderBy', /** @type {?} */ (orderBy));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/orgUnits", {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        OrgUnitListService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        OrgUnitListService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return OrgUnitListService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var OrgUnitLocationService = (function () {
        function OrgUnitLocationService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        OrgUnitLocationService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?} ifMatch
         * @param {?=} effectiveDate
         * @param {?=} expiryDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitLocationService.prototype.deleteOrgUnitLocation1 = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?} ifMatch
         * @param {?=} effectiveDate
         * @param {?=} expiryDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitLocationId, ifMatch, effectiveDate, expiryDate, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling deleteOrgUnitLocation1.');
                }
                if (orgUnitLocationId === null || orgUnitLocationId === undefined) {
                    throw new Error('Required parameter orgUnitLocationId was null or undefined when calling deleteOrgUnitLocation1.');
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling deleteOrgUnitLocation1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveDate', /** @type {?} */ (effectiveDate));
                }
                if (expiryDate !== undefined) {
                    queryParameters = queryParameters.set('expiryDate', /** @type {?} */ (expiryDate));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAccepts = [];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.delete(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/locations/" + encodeURIComponent(String(orgUnitLocationId)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitLocationService.prototype.getOrgUnitLocation1 = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitLocationId, effectiveAsOfDate, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitLocation1.');
                }
                if (orgUnitLocationId === null || orgUnitLocationId === undefined) {
                    throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getOrgUnitLocation1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/locations/" + encodeURIComponent(String(orgUnitLocationId)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?} orgUnitLocation
         * @param {?} ifMatch
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitLocationService.prototype.updateOrgUnitLocation1 = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocationId
         * @param {?} orgUnitLocation
         * @param {?} ifMatch
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitLocationId, orgUnitLocation, ifMatch, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling updateOrgUnitLocation1.');
                }
                if (orgUnitLocationId === null || orgUnitLocationId === undefined) {
                    throw new Error('Required parameter orgUnitLocationId was null or undefined when calling updateOrgUnitLocation1.');
                }
                if (orgUnitLocation === null || orgUnitLocation === undefined) {
                    throw new Error('Required parameter orgUnitLocation was null or undefined when calling updateOrgUnitLocation1.');
                }
                if (ifMatch === null || ifMatch === undefined) {
                    throw new Error('Required parameter ifMatch was null or undefined when calling updateOrgUnitLocation1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                if (ifMatch !== undefined && ifMatch !== null) {
                    headers = headers.set('If-Match', String(ifMatch));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected != undefined) {
                    headers = headers.set("Content-Type", httpContentTypeSelected);
                }
                return this.httpClient.put(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/locations/" + encodeURIComponent(String(orgUnitLocationId)), orgUnitLocation, {
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        OrgUnitLocationService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        OrgUnitLocationService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return OrgUnitLocationService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var OrgUnitLocationListService = (function () {
        function OrgUnitLocationListService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        OrgUnitLocationListService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocation
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitLocationListService.prototype.createOrgUnitLocation1 = /**
         * @param {?} orgUnitId
         * @param {?} orgUnitLocation
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, orgUnitLocation, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling createOrgUnitLocation1.');
                }
                if (orgUnitLocation === null || orgUnitLocation === undefined) {
                    throw new Error('Required parameter orgUnitLocation was null or undefined when calling createOrgUnitLocation1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected != undefined) {
                    headers = headers.set("Content-Type", httpContentTypeSelected);
                }
                return this.httpClient.post(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/locations", orgUnitLocation, {
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} orgUnitId
         * @param {?=} effectiveAsOfDate
         * @param {?=} orgUnitLocationTypeCode
         * @param {?=} locationName
         * @param {?=} primaryInd
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitLocationListService.prototype.getOrgUnitLocationList1 = /**
         * @param {?} orgUnitId
         * @param {?=} effectiveAsOfDate
         * @param {?=} orgUnitLocationTypeCode
         * @param {?=} locationName
         * @param {?=} primaryInd
         * @param {?=} pageNumber
         * @param {?=} pageRowCount
         * @param {?=} orderBy
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitId, effectiveAsOfDate, orgUnitLocationTypeCode, locationName, primaryInd, pageNumber, pageRowCount, orderBy, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitId === null || orgUnitId === undefined) {
                    throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitLocationList1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                if (orgUnitLocationTypeCode !== undefined) {
                    queryParameters = queryParameters.set('orgUnitLocationTypeCode', /** @type {?} */ (orgUnitLocationTypeCode));
                }
                if (locationName !== undefined) {
                    queryParameters = queryParameters.set('locationName', /** @type {?} */ (locationName));
                }
                if (primaryInd !== undefined) {
                    queryParameters = queryParameters.set('primaryInd', /** @type {?} */ (primaryInd));
                }
                if (pageNumber !== undefined) {
                    queryParameters = queryParameters.set('pageNumber', /** @type {?} */ (pageNumber));
                }
                if (pageRowCount !== undefined) {
                    queryParameters = queryParameters.set('pageRowCount', /** @type {?} */ (pageRowCount));
                }
                if (orderBy !== undefined) {
                    queryParameters = queryParameters.set('orderBy', /** @type {?} */ (orderBy));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/orgUnits/" + encodeURIComponent(String(orgUnitId)) + "/locations", {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        OrgUnitLocationListService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        OrgUnitLocationListService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return OrgUnitLocationListService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var OrgUnitTypeConfigService = (function () {
        function OrgUnitTypeConfigService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        OrgUnitTypeConfigService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?} orgUnitTypeCode
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitTypeConfigService.prototype.getOrgUnitTypeConfig1 = /**
         * @param {?} orgUnitTypeCode
         * @param {?=} effectiveAsOfDate
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitTypeCode, effectiveAsOfDate, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitTypeCode === null || orgUnitTypeCode === undefined) {
                    throw new Error('Required parameter orgUnitTypeCode was null or undefined when calling getOrgUnitTypeConfig1.');
                }
                /** @type {?} */
                var queryParameters = new http.HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
                if (effectiveAsOfDate !== undefined) {
                    queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/orgUnitTypeConfigs/" + encodeURIComponent(String(orgUnitTypeCode)), {
                    params: queryParameters,
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        /**
         * @param {?} orgUnitTypeConfig
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        OrgUnitTypeConfigService.prototype.upsertOrgUnitTypeConfig1 = /**
         * @param {?} orgUnitTypeConfig
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (orgUnitTypeConfig, restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                if (orgUnitTypeConfig === null || orgUnitTypeConfig === undefined) {
                    throw new Error('Required parameter orgUnitTypeConfig was null or undefined when calling upsertOrgUnitTypeConfig1.');
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                /** @type {?} */
                var consumes = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
                if (httpContentTypeSelected != undefined) {
                    headers = headers.set("Content-Type", httpContentTypeSelected);
                }
                return this.httpClient.post(this.basePath + "/orgUnitTypeConfigs", orgUnitTypeConfig, {
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        OrgUnitTypeConfigService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        OrgUnitTypeConfigService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return OrgUnitTypeConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TopLevelService = (function () {
        function TopLevelService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
            this.defaultHeaders = new http.HttpHeaders();
            this.configuration = new OrgUnitConfiguration();
            if (basePath) {
                this.basePath = basePath;
            }
            if (configuration) {
                this.configuration = configuration;
                this.basePath = basePath || configuration.basePath || this.basePath;
            }
        }
        /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
        TopLevelService.prototype.canConsumeForm = /**
         * @param {?} consumes string[] mime-types
         * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
         */
            function (consumes) {
                /** @type {?} */
                var form = 'multipart/form-data';
                try {
                    for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
                        var consume = consumes_1_1.value;
                        if (form === consume) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return))
                            _a.call(consumes_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return false;
                var e_1, _a;
            };
        /**
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
        TopLevelService.prototype.getTopLevel1 = /**
         * @param {?=} restVersion
         * @param {?=} observe
         * @param {?=} reportProgress
         * @return {?}
         */
            function (restVersion, observe, reportProgress) {
                if (observe === void 0) {
                    observe = 'body';
                }
                if (reportProgress === void 0) {
                    reportProgress = false;
                }
                /** @type {?} */
                var headers = this.defaultHeaders;
                if (restVersion !== undefined && restVersion !== null) {
                    headers = headers.set('Rest-Version', String(restVersion));
                }
                /** @type {?} */
                var httpHeaderAccepts = [
                    'application/json',
                    'application/xml'
                ];
                /** @type {?} */
                var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
                if (httpHeaderAcceptSelected != undefined) {
                    headers = headers.set("Accept", httpHeaderAcceptSelected);
                }
                return this.httpClient.get(this.basePath + "/", {
                    withCredentials: this.configuration.withCredentials,
                    headers: headers,
                    observe: observe,
                    reportProgress: reportProgress
                });
            };
        TopLevelService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        TopLevelService.ctorParameters = function () {
            return [
                { type: http.HttpClient },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [BASE_PATH,] }] },
                { type: OrgUnitConfiguration, decorators: [{ type: core.Optional }] }
            ];
        };
        return TopLevelService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var APIS = [CodeHierarchyEndpointsService, CodeHierarchyListEndpointsService, CodeTableEndpointsService, CodeTableListEndpointsService, LocationAddressService, LocationContactService, OrgUnitService, OrgUnitAreaService, OrgUnitAreaListService, OrgUnitListService, OrgUnitLocationService, OrgUnitLocationListService, OrgUnitTypeConfigService, TopLevelService];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ApiModule = (function () {
        function ApiModule(parentModule) {
            if (parentModule) {
                throw new Error('ApiModule is already loaded. Import your base AppModule only.');
            }
        }
        /**
         * @param {?} configurationFactory
         * @return {?}
         */
        ApiModule.forRoot = /**
         * @param {?} configurationFactory
         * @return {?}
         */
            function (configurationFactory) {
                return {
                    ngModule: ApiModule,
                    providers: [{ provide: OrgUnitConfiguration, useFactory: configurationFactory }]
                };
            };
        ApiModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, http.HttpClientModule],
                        declarations: [],
                        exports: [],
                        providers: [
                            CodeHierarchyEndpointsService,
                            CodeHierarchyListEndpointsService,
                            CodeTableEndpointsService,
                            CodeTableListEndpointsService,
                            LocationAddressService,
                            LocationContactService,
                            OrgUnitService,
                            OrgUnitAreaService,
                            OrgUnitAreaListService,
                            OrgUnitListService,
                            OrgUnitLocationService,
                            OrgUnitLocationListService,
                            OrgUnitTypeConfigService,
                            TopLevelService
                        ]
                    },] },
        ];
        /** @nocollapse */
        ApiModule.ctorParameters = function () {
            return [
                { type: ApiModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] }
            ];
        };
        return ApiModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.APIS = APIS;
    exports.CodeHierarchyEndpointsService = CodeHierarchyEndpointsService;
    exports.CodeHierarchyListEndpointsService = CodeHierarchyListEndpointsService;
    exports.CodeTableEndpointsService = CodeTableEndpointsService;
    exports.CodeTableListEndpointsService = CodeTableListEndpointsService;
    exports.LocationAddressService = LocationAddressService;
    exports.LocationContactService = LocationContactService;
    exports.OrgUnitService = OrgUnitService;
    exports.OrgUnitAreaService = OrgUnitAreaService;
    exports.OrgUnitAreaListService = OrgUnitAreaListService;
    exports.OrgUnitListService = OrgUnitListService;
    exports.OrgUnitLocationService = OrgUnitLocationService;
    exports.OrgUnitLocationListService = OrgUnitLocationListService;
    exports.OrgUnitTypeConfigService = OrgUnitTypeConfigService;
    exports.TopLevelService = TopLevelService;
    exports.BASE_PATH = BASE_PATH;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.OrgUnitConfiguration = OrgUnitConfiguration;
    exports.ApiModule = ApiModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,