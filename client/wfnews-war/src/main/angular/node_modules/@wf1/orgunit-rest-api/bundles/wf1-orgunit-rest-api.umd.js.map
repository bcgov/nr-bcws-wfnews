{"version":3,"file":"wf1-orgunit-rest-api.umd.js.map","sources":[null,"ng://@wf1/orgunit-rest-api/encoder.ts","ng://@wf1/orgunit-rest-api/variables.ts","ng://@wf1/orgunit-rest-api/configuration.ts","ng://@wf1/orgunit-rest-api/api/codeHierarchyEndpoints.service.ts","ng://@wf1/orgunit-rest-api/api/codeHierarchyListEndpoints.service.ts","ng://@wf1/orgunit-rest-api/api/codeTableEndpoints.service.ts","ng://@wf1/orgunit-rest-api/api/codeTableListEndpoints.service.ts","ng://@wf1/orgunit-rest-api/api/locationAddress.service.ts","ng://@wf1/orgunit-rest-api/api/locationContact.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnit.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitArea.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitAreaList.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitList.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitLocation.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitLocationList.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitTypeConfig.service.ts","ng://@wf1/orgunit-rest-api/api/topLevel.service.ts","ng://@wf1/orgunit-rest-api/api/api.ts","ng://@wf1/orgunit-rest-api/api.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class OrgUnitConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link OrgUnitConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link OrgUnitConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CodeHierarchyResource } from '../model/codeHierarchyResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CodeHierarchyEndpointsService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get CodeHierarchy resource by code table name.\n     * Get CodeHierarchy resource by code table name.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeHierarchy1(codeHierarchyName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeHierarchyResource>;\n    public getCodeHierarchy1(codeHierarchyName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeHierarchyResource>>;\n    public getCodeHierarchy1(codeHierarchyName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeHierarchyResource>>;\n    public getCodeHierarchy1(codeHierarchyName: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (codeHierarchyName === null || codeHierarchyName === undefined) {\n            throw new Error('Required parameter codeHierarchyName was null or undefined when calling getCodeHierarchy1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CodeHierarchyResource>(`${this.basePath}/codeHierarchies/${encodeURIComponent(String(codeHierarchyName))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update CodeHierarchy resource by code table name.\n     * Update CodeHierarchy by code table name.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param codeHierarchy The CodeHierarchy resource containing the new values.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCodeHierarchy1(codeHierarchyName: string, codeHierarchy: CodeHierarchyResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeHierarchyResource>;\n    public updateCodeHierarchy1(codeHierarchyName: string, codeHierarchy: CodeHierarchyResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeHierarchyResource>>;\n    public updateCodeHierarchy1(codeHierarchyName: string, codeHierarchy: CodeHierarchyResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeHierarchyResource>>;\n    public updateCodeHierarchy1(codeHierarchyName: string, codeHierarchy: CodeHierarchyResource, ifMatch: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (codeHierarchyName === null || codeHierarchyName === undefined) {\n            throw new Error('Required parameter codeHierarchyName was null or undefined when calling updateCodeHierarchy1.');\n        }\n        if (codeHierarchy === null || codeHierarchy === undefined) {\n            throw new Error('Required parameter codeHierarchy was null or undefined when calling updateCodeHierarchy1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeHierarchy1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<CodeHierarchyResource>(`${this.basePath}/codeHierarchies/${encodeURIComponent(String(codeHierarchyName))}`,\n            codeHierarchy,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CodeHierarchyListResource } from '../model/codeHierarchyListResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CodeHierarchyListEndpointsService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get Code Hierarchy List Resource\n     * Get Code Hierarchy List Resource\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeHierarchyName Filter the results by the codeHierarchyName.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeHierarchyList1(effectiveAsOfDate?: string, codeHierarchyName?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeHierarchyListResource>;\n    public getCodeHierarchyList1(effectiveAsOfDate?: string, codeHierarchyName?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeHierarchyListResource>>;\n    public getCodeHierarchyList1(effectiveAsOfDate?: string, codeHierarchyName?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeHierarchyListResource>>;\n    public getCodeHierarchyList1(effectiveAsOfDate?: string, codeHierarchyName?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (codeHierarchyName !== undefined) {\n            queryParameters = queryParameters.set('codeHierarchyName', <any>codeHierarchyName);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CodeHierarchyListResource>(`${this.basePath}/codeHierarchies`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CodeTableResource } from '../model/codeTableResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CodeTableEndpointsService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get CodeTable resource by code table name.\n     * Get CodeTable resource by code table name.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeTable1(codeTableName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeTableResource>;\n    public getCodeTable1(codeTableName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeTableResource>>;\n    public getCodeTable1(codeTableName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeTableResource>>;\n    public getCodeTable1(codeTableName: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (codeTableName === null || codeTableName === undefined) {\n            throw new Error('Required parameter codeTableName was null or undefined when calling getCodeTable1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CodeTableResource>(`${this.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update CodeTable resource by code table name.\n     * Update CodeTable by code table name.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param codeTable The CodeTable resource containing the new values.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCodeTable1(codeTableName: string, codeTable: CodeTableResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeTableResource>;\n    public updateCodeTable1(codeTableName: string, codeTable: CodeTableResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeTableResource>>;\n    public updateCodeTable1(codeTableName: string, codeTable: CodeTableResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeTableResource>>;\n    public updateCodeTable1(codeTableName: string, codeTable: CodeTableResource, ifMatch: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (codeTableName === null || codeTableName === undefined) {\n            throw new Error('Required parameter codeTableName was null or undefined when calling updateCodeTable1.');\n        }\n        if (codeTable === null || codeTable === undefined) {\n            throw new Error('Required parameter codeTable was null or undefined when calling updateCodeTable1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeTable1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<CodeTableResource>(`${this.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`,\n            codeTable,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CodeTableListResource } from '../model/codeTableListResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CodeTableListEndpointsService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get Code Table List Resource\n     * Get Code Table List Resource\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeTableName Filter the results by the codeTableName.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeTableList1(effectiveAsOfDate?: string, codeTableName?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeTableListResource>;\n    public getCodeTableList1(effectiveAsOfDate?: string, codeTableName?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeTableListResource>>;\n    public getCodeTableList1(effectiveAsOfDate?: string, codeTableName?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeTableListResource>>;\n    public getCodeTableList1(effectiveAsOfDate?: string, codeTableName?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (codeTableName !== undefined) {\n            queryParameters = queryParameters.set('codeTableName', <any>codeTableName);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CodeTableListResource>(`${this.basePath}/codeTables`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { LocationAddressResource } from '../model/locationAddressResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class LocationAddressService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get a Location Address by ID.\n     * Get a Location Address by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param locationAddressId The identifier of the Location Address resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getLocationAddress(orgUnitId: string, orgUnitLocationId: string, locationAddressId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<LocationAddressResource>;\n    public getLocationAddress(orgUnitId: string, orgUnitLocationId: string, locationAddressId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationAddressResource>>;\n    public getLocationAddress(orgUnitId: string, orgUnitLocationId: string, locationAddressId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationAddressResource>>;\n    public getLocationAddress(orgUnitId: string, orgUnitLocationId: string, locationAddressId: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getLocationAddress.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getLocationAddress.');\n        }\n        if (locationAddressId === null || locationAddressId === undefined) {\n            throw new Error('Required parameter locationAddressId was null or undefined when calling getLocationAddress.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n\n        return this.httpClient.get<LocationAddressResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}/addresses/${encodeURIComponent(String(locationAddressId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { LocationContactResource } from '../model/locationContactResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class LocationContactService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get a Location Contact by ID.\n     * Get a Location Contact by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param locationContactId The identifier of the Location Contact resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getLocationContact1(orgUnitId: string, orgUnitLocationId: string, locationContactId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<LocationContactResource>;\n    public getLocationContact1(orgUnitId: string, orgUnitLocationId: string, locationContactId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationContactResource>>;\n    public getLocationContact1(orgUnitId: string, orgUnitLocationId: string, locationContactId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationContactResource>>;\n    public getLocationContact1(orgUnitId: string, orgUnitLocationId: string, locationContactId: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getLocationContact1.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getLocationContact1.');\n        }\n        if (locationContactId === null || locationContactId === undefined) {\n            throw new Error('Required parameter locationContactId was null or undefined when calling getLocationContact1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<LocationContactResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}/contacts/${encodeURIComponent(String(locationContactId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitDetailsResource } from '../model/orgUnitDetailsResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get the org unit by id.\n     * Get the org unit by id.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnit1(orgUnitId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitDetailsResource>;\n    public getOrgUnit1(orgUnitId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitDetailsResource>>;\n    public getOrgUnit1(orgUnitId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitDetailsResource>>;\n    public getOrgUnit1(orgUnitId: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnit1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitDetailsResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitAreaResource } from '../model/orgUnitAreaResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitAreaService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete an Area defined for an Org Unit by ID.\n     * Delete an Area defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitAreaId The identifier of the Org Unit Area resource.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param effectiveDate Delete the resource for the period effective as of the effectiveDate or as of today if not provided.\n     * @param expiryDate Delete the resource for the period expiring as of the expiryDate or open ended if not provided.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling deleteOrgUnitArea1.');\n        }\n        if (orgUnitAreaId === null || orgUnitAreaId === undefined) {\n            throw new Error('Required parameter orgUnitAreaId was null or undefined when calling deleteOrgUnitArea1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling deleteOrgUnitArea1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveDate', <any>effectiveDate);\n        }\n        if (expiryDate !== undefined) {\n            queryParameters = queryParameters.set('expiryDate', <any>expiryDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas/${encodeURIComponent(String(orgUnitAreaId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an Area defined for an Org Unit by ID.\n     * Get an Area defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitAreaId The identifier of the Org Unit Area resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param includeGeometryInd Indicates if the geometry should be returned with the results.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaResource>;\n    public getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaResource>>;\n    public getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaResource>>;\n    public getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitArea1.');\n        }\n        if (orgUnitAreaId === null || orgUnitAreaId === undefined) {\n            throw new Error('Required parameter orgUnitAreaId was null or undefined when calling getOrgUnitArea1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (includeGeometryInd !== undefined) {\n            queryParameters = queryParameters.set('includeGeometryInd', <any>includeGeometryInd);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitAreaResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas/${encodeURIComponent(String(orgUnitAreaId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update an Area defined for an Org Unit by ID.\n     * Update an Area defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitAreaId The identifier of the Org Unit Area resource.\n     * @param orgUnitArea The UserEditableData resource containing the new values.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaResource>;\n    public updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaResource>>;\n    public updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaResource>>;\n    public updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling updateOrgUnitArea1.');\n        }\n        if (orgUnitAreaId === null || orgUnitAreaId === undefined) {\n            throw new Error('Required parameter orgUnitAreaId was null or undefined when calling updateOrgUnitArea1.');\n        }\n        if (orgUnitArea === null || orgUnitArea === undefined) {\n            throw new Error('Required parameter orgUnitArea was null or undefined when calling updateOrgUnitArea1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateOrgUnitArea1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<OrgUnitAreaResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas/${encodeURIComponent(String(orgUnitAreaId))}`,\n            orgUnitArea,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitAreaListResource } from '../model/orgUnitAreaListResource';\nimport { OrgUnitAreaResource } from '../model/orgUnitAreaResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitAreaListService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add an Area Resource to the list of Areas defined for an Org Unit.\n     * Add an Area Resource to the list of Areas defined for an Org Unit.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitArea The Area resource containing the new values.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaResource>;\n    public createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaResource>>;\n    public createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaResource>>;\n    public createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling createOrgUnitArea1.');\n        }\n        if (orgUnitArea === null || orgUnitArea === undefined) {\n            throw new Error('Required parameter orgUnitArea was null or undefined when calling createOrgUnitArea1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<OrgUnitAreaResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas`,\n            orgUnitArea,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the list of Areas defined for an Org Unit.\n     * Get the list of Areas defined for an Org Unit.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param orgUnitAreaTypeCode Filter the results by the orgUnitAreaTypeCode.\n     * @param includeGeometryInd Indicates if the geometry should be returned with the results.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaListResource>;\n    public getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaListResource>>;\n    public getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaListResource>>;\n    public getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitAreaList1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (orgUnitAreaTypeCode !== undefined) {\n            queryParameters = queryParameters.set('orgUnitAreaTypeCode', <any>orgUnitAreaTypeCode);\n        }\n        if (includeGeometryInd !== undefined) {\n            queryParameters = queryParameters.set('includeGeometryInd', <any>includeGeometryInd);\n        }\n        if (pageNumber !== undefined) {\n            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);\n        }\n        if (pageRowCount !== undefined) {\n            queryParameters = queryParameters.set('pageRowCount', <any>pageRowCount);\n        }\n        if (orderBy !== undefined) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitAreaListResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitListResource } from '../model/orgUnitListResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitListService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get list of Org Units.\n     * Get list of Org Units.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param orgUnitName Filter the results by the orgUnitName.\n     * @param integerAlias Filter the results by the integerAlias.\n     * @param characterAlias Filter the results by the characterAlias.\n     * @param orgUnitTypeCode Filter the results by the orgUnitTypeCode.\n     * @param orgUnitAreaTypeCode Filter the results by the orgUnitAreaTypeCode.\n     * @param point Filter the results by the point.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitListResource>;\n    public getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitListResource>>;\n    public getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitListResource>>;\n    public getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (orgUnitName !== undefined) {\n            queryParameters = queryParameters.set('orgUnitName', <any>orgUnitName);\n        }\n        if (integerAlias !== undefined) {\n            queryParameters = queryParameters.set('integerAlias', <any>integerAlias);\n        }\n        if (characterAlias !== undefined) {\n            queryParameters = queryParameters.set('characterAlias', <any>characterAlias);\n        }\n        if (orgUnitTypeCode !== undefined) {\n            queryParameters = queryParameters.set('orgUnitTypeCode', <any>orgUnitTypeCode);\n        }\n        if (orgUnitAreaTypeCode !== undefined) {\n            queryParameters = queryParameters.set('orgUnitAreaTypeCode', <any>orgUnitAreaTypeCode);\n        }\n        if (point !== undefined) {\n            queryParameters = queryParameters.set('point', <any>point);\n        }\n        if (pageNumber !== undefined) {\n            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);\n        }\n        if (pageRowCount !== undefined) {\n            queryParameters = queryParameters.set('pageRowCount', <any>pageRowCount);\n        }\n        if (orderBy !== undefined) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitListResource>(`${this.basePath}/orgUnits`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitLocationResource } from '../model/orgUnitLocationResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitLocationService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete an Location defined for an Org Unit by ID.\n     * Delete an Location defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param effectiveDate Delete the resource for the period effective as of the effectiveDate or as of today if not provided.\n     * @param expiryDate Delete the resource for the period expiring as of the expiryDate or open ended if not provided.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling deleteOrgUnitLocation1.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling deleteOrgUnitLocation1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling deleteOrgUnitLocation1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveDate', <any>effectiveDate);\n        }\n        if (expiryDate !== undefined) {\n            queryParameters = queryParameters.set('expiryDate', <any>expiryDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an Org Unit Location by ID.\n     * Get an Org Unit Location by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;\n    public getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;\n    public getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;\n    public getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitLocation1.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getOrgUnitLocation1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitLocationResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a Location defined for an Org Unit by ID.\n     * Update a Location defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param orgUnitLocation The UserEditableData resource containing the new values.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;\n    public updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;\n    public updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;\n    public updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling updateOrgUnitLocation1.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling updateOrgUnitLocation1.');\n        }\n        if (orgUnitLocation === null || orgUnitLocation === undefined) {\n            throw new Error('Required parameter orgUnitLocation was null or undefined when calling updateOrgUnitLocation1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateOrgUnitLocation1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<OrgUnitLocationResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}`,\n            orgUnitLocation,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitLocationListResource } from '../model/orgUnitLocationListResource';\nimport { OrgUnitLocationResource } from '../model/orgUnitLocationResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitLocationListService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add a Location Resource to the list of Locations defined for an Org Unit.\n     * Add an Location Resource to the list of Locations defined for an Org Unit.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocation The Location resource containing the new values.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;\n    public createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;\n    public createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;\n    public createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling createOrgUnitLocation1.');\n        }\n        if (orgUnitLocation === null || orgUnitLocation === undefined) {\n            throw new Error('Required parameter orgUnitLocation was null or undefined when calling createOrgUnitLocation1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<OrgUnitLocationResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations`,\n            orgUnitLocation,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the list of Org Unit Locations.\n     * Get the list of Org Unit Locations.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param orgUnitLocationTypeCode Filter the results by the orgUnitLocationTypeCode.\n     * @param locationName Filter the results by the locationName.\n     * @param primaryInd Filter the results by the primaryInd.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationListResource>;\n    public getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationListResource>>;\n    public getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationListResource>>;\n    public getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitLocationList1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (orgUnitLocationTypeCode !== undefined) {\n            queryParameters = queryParameters.set('orgUnitLocationTypeCode', <any>orgUnitLocationTypeCode);\n        }\n        if (locationName !== undefined) {\n            queryParameters = queryParameters.set('locationName', <any>locationName);\n        }\n        if (primaryInd !== undefined) {\n            queryParameters = queryParameters.set('primaryInd', <any>primaryInd);\n        }\n        if (pageNumber !== undefined) {\n            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);\n        }\n        if (pageRowCount !== undefined) {\n            queryParameters = queryParameters.set('pageRowCount', <any>pageRowCount);\n        }\n        if (orderBy !== undefined) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitLocationListResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitTypeConfigResource } from '../model/orgUnitTypeConfigResource';\nimport { OrgUnitTypeConfigResultResource } from '../model/orgUnitTypeConfigResultResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitTypeConfigService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get the configuration for an Org Unit Type.\n     * Get the configuration for an Org Unit Type.\n     * @param orgUnitTypeCode The identifier of the Org Unit Type.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitTypeConfigResource>;\n    public getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitTypeConfigResource>>;\n    public getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitTypeConfigResource>>;\n    public getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitTypeCode === null || orgUnitTypeCode === undefined) {\n            throw new Error('Required parameter orgUnitTypeCode was null or undefined when calling getOrgUnitTypeConfig1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitTypeConfigResource>(`${this.basePath}/orgUnitTypeConfigs/${encodeURIComponent(String(orgUnitTypeCode))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add or update the configuration for an Org Unit Type\n     * Add or update the configuration for an Org Unit Type\n     * @param orgUnitTypeConfig The OrgUnitTypeConfig resource containing the new values.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitTypeConfigResultResource>;\n    public upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitTypeConfigResultResource>>;\n    public upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitTypeConfigResultResource>>;\n    public upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitTypeConfig === null || orgUnitTypeConfig === undefined) {\n            throw new Error('Required parameter orgUnitTypeConfig was null or undefined when calling upsertOrgUnitTypeConfig1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<OrgUnitTypeConfigResultResource>(`${this.basePath}/orgUnitTypeConfigs`,\n            orgUnitTypeConfig,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EndpointsResource } from '../model/endpointsResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class TopLevelService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get Top Level Resources.\n     * Get Top Level Resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTopLevel1(restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<EndpointsResource>;\n    public getTopLevel1(restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EndpointsResource>>;\n    public getTopLevel1(restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EndpointsResource>>;\n    public getTopLevel1(restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EndpointsResource>(`${this.basePath}/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './codeHierarchyEndpoints.service';\nimport { CodeHierarchyEndpointsService } from './codeHierarchyEndpoints.service';\nexport * from './codeHierarchyListEndpoints.service';\nimport { CodeHierarchyListEndpointsService } from './codeHierarchyListEndpoints.service';\nexport * from './codeTableEndpoints.service';\nimport { CodeTableEndpointsService } from './codeTableEndpoints.service';\nexport * from './codeTableListEndpoints.service';\nimport { CodeTableListEndpointsService } from './codeTableListEndpoints.service';\nexport * from './locationAddress.service';\nimport { LocationAddressService } from './locationAddress.service';\nexport * from './locationContact.service';\nimport { LocationContactService } from './locationContact.service';\nexport * from './orgUnit.service';\nimport { OrgUnitService } from './orgUnit.service';\nexport * from './orgUnitArea.service';\nimport { OrgUnitAreaService } from './orgUnitArea.service';\nexport * from './orgUnitAreaList.service';\nimport { OrgUnitAreaListService } from './orgUnitAreaList.service';\nexport * from './orgUnitList.service';\nimport { OrgUnitListService } from './orgUnitList.service';\nexport * from './orgUnitLocation.service';\nimport { OrgUnitLocationService } from './orgUnitLocation.service';\nexport * from './orgUnitLocationList.service';\nimport { OrgUnitLocationListService } from './orgUnitLocationList.service';\nexport * from './orgUnitTypeConfig.service';\nimport { OrgUnitTypeConfigService } from './orgUnitTypeConfig.service';\nexport * from './topLevel.service';\nimport { TopLevelService } from './topLevel.service';\nexport const APIS = [CodeHierarchyEndpointsService, CodeHierarchyListEndpointsService, CodeTableEndpointsService, CodeTableListEndpointsService, LocationAddressService, LocationContactService, OrgUnitService, OrgUnitAreaService, OrgUnitAreaListService, OrgUnitListService, OrgUnitLocationService, OrgUnitLocationListService, OrgUnitTypeConfigService, TopLevelService];\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { OrgUnitConfiguration } from './configuration';\n\nimport { CodeHierarchyEndpointsService } from './api/codeHierarchyEndpoints.service';\nimport { CodeHierarchyListEndpointsService } from './api/codeHierarchyListEndpoints.service';\nimport { CodeTableEndpointsService } from './api/codeTableEndpoints.service';\nimport { CodeTableListEndpointsService } from './api/codeTableListEndpoints.service';\nimport { LocationAddressService } from './api/locationAddress.service';\nimport { LocationContactService } from './api/locationContact.service';\nimport { OrgUnitService } from './api/orgUnit.service';\nimport { OrgUnitAreaService } from './api/orgUnitArea.service';\nimport { OrgUnitAreaListService } from './api/orgUnitAreaList.service';\nimport { OrgUnitListService } from './api/orgUnitList.service';\nimport { OrgUnitLocationService } from './api/orgUnitLocation.service';\nimport { OrgUnitLocationListService } from './api/orgUnitLocationList.service';\nimport { OrgUnitTypeConfigService } from './api/orgUnitTypeConfig.service';\nimport { TopLevelService } from './api/topLevel.service';\n\n@NgModule({\n  imports:      [ CommonModule, HttpClientModule ],\n  declarations: [],\n  exports:      [],\n  providers: [\n    CodeHierarchyEndpointsService,\n    CodeHierarchyListEndpointsService,\n    CodeTableEndpointsService,\n    CodeTableListEndpointsService,\n    LocationAddressService,\n    LocationContactService,\n    OrgUnitService,\n    OrgUnitAreaService,\n    OrgUnitAreaListService,\n    OrgUnitListService,\n    OrgUnitLocationService,\n    OrgUnitLocationListService,\n    OrgUnitTypeConfigService,\n    TopLevelService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => OrgUnitConfiguration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: OrgUnitConfiguration, useFactory: configurationFactory } ]\n        }\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import your base AppModule only.');\n        }\n    }\n}\n"],"names":["tslib_1.__extends","HttpUrlEncodingCodec","InjectionToken","HttpHeaders","tslib_1.__values","HttpParams","Injectable","HttpClient","Optional","Inject","NgModule","CommonModule","HttpClientModule","SkipSelf"],"mappings":"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"}
