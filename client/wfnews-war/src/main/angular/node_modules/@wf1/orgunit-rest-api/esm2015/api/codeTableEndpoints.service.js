/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Wildfire Org Unit REST API
 * The Wildfire Org Unit REST API.
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { OrgUnitConfiguration } from '../configuration';
export class CodeTableEndpointsService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new OrgUnitConfiguration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param {?} consumes string[] mime-types
     * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        /** @type {?} */
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} codeTableName
     * @param {?=} effectiveAsOfDate
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getCodeTable1(codeTableName, effectiveAsOfDate, restVersion, observe = 'body', reportProgress = false) {
        if (codeTableName === null || codeTableName === undefined) {
            throw new Error('Required parameter codeTableName was null or undefined when calling getCodeTable1.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (effectiveAsOfDate !== undefined) {
            queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let consumes = [];
        return this.httpClient.get(`${this.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} codeTableName
     * @param {?} codeTable
     * @param {?} ifMatch
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    updateCodeTable1(codeTableName, codeTable, ifMatch, restVersion, observe = 'body', reportProgress = false) {
        if (codeTableName === null || codeTableName === undefined) {
            throw new Error('Required parameter codeTableName was null or undefined when calling updateCodeTable1.');
        }
        if (codeTable === null || codeTable === undefined) {
            throw new Error('Required parameter codeTable was null or undefined when calling updateCodeTable1.');
        }
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeTable1.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }
        return this.httpClient.put(`${this.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`, codeTable, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
CodeTableEndpointsService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
CodeTableEndpointsService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: OrgUnitConfiguration, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    CodeTableEndpointsService.prototype.basePath;
    /** @type {?} */
    CodeTableEndpointsService.prototype.defaultHeaders;
    /** @type {?} */
    CodeTableEndpointsService.prototype.configuration;
    /** @type {?} */
    CodeTableEndpointsService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,