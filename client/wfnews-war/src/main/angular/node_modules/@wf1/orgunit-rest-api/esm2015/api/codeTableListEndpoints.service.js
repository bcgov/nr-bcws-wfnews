/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Wildfire Org Unit REST API
 * The Wildfire Org Unit REST API.
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { OrgUnitConfiguration } from '../configuration';
export class CodeTableListEndpointsService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new OrgUnitConfiguration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param {?} consumes string[] mime-types
     * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        /** @type {?} */
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?=} effectiveAsOfDate
     * @param {?=} codeTableName
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getCodeTableList1(effectiveAsOfDate, codeTableName, restVersion, observe = 'body', reportProgress = false) {
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (effectiveAsOfDate !== undefined) {
            queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
        }
        if (codeTableName !== undefined) {
            queryParameters = queryParameters.set('codeTableName', /** @type {?} */ (codeTableName));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let consumes = [];
        return this.httpClient.get(`${this.basePath}/codeTables`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
CodeTableListEndpointsService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
CodeTableListEndpointsService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: OrgUnitConfiguration, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    CodeTableListEndpointsService.prototype.basePath;
    /** @type {?} */
    CodeTableListEndpointsService.prototype.defaultHeaders;
    /** @type {?} */
    CodeTableListEndpointsService.prototype.configuration;
    /** @type {?} */
    CodeTableListEndpointsService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,