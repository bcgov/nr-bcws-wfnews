/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Wildfire Org Unit REST API
 * The Wildfire Org Unit REST API.
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { OrgUnitConfiguration } from '../configuration';
export class OrgUnitAreaListService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new OrgUnitConfiguration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param {?} consumes string[] mime-types
     * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        /** @type {?} */
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} orgUnitId
     * @param {?} orgUnitArea
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    createOrgUnitArea1(orgUnitId, orgUnitArea, restVersion, observe = 'body', reportProgress = false) {
        if (orgUnitId === null || orgUnitId === undefined) {
            throw new Error('Required parameter orgUnitId was null or undefined when calling createOrgUnitArea1.');
        }
        if (orgUnitArea === null || orgUnitArea === undefined) {
            throw new Error('Required parameter orgUnitArea was null or undefined when calling createOrgUnitArea1.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas`, orgUnitArea, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} orgUnitId
     * @param {?=} effectiveAsOfDate
     * @param {?=} orgUnitAreaTypeCode
     * @param {?=} includeGeometryInd
     * @param {?=} pageNumber
     * @param {?=} pageRowCount
     * @param {?=} orderBy
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getOrgUnitAreaList1(orgUnitId, effectiveAsOfDate, orgUnitAreaTypeCode, includeGeometryInd, pageNumber, pageRowCount, orderBy, restVersion, observe = 'body', reportProgress = false) {
        if (orgUnitId === null || orgUnitId === undefined) {
            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitAreaList1.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (effectiveAsOfDate !== undefined) {
            queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
        }
        if (orgUnitAreaTypeCode !== undefined) {
            queryParameters = queryParameters.set('orgUnitAreaTypeCode', /** @type {?} */ (orgUnitAreaTypeCode));
        }
        if (includeGeometryInd !== undefined) {
            queryParameters = queryParameters.set('includeGeometryInd', /** @type {?} */ (includeGeometryInd));
        }
        if (pageNumber !== undefined) {
            queryParameters = queryParameters.set('pageNumber', /** @type {?} */ (pageNumber));
        }
        if (pageRowCount !== undefined) {
            queryParameters = queryParameters.set('pageRowCount', /** @type {?} */ (pageRowCount));
        }
        if (orderBy !== undefined) {
            queryParameters = queryParameters.set('orderBy', /** @type {?} */ (orderBy));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let consumes = [];
        return this.httpClient.get(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
OrgUnitAreaListService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
OrgUnitAreaListService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: OrgUnitConfiguration, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    OrgUnitAreaListService.prototype.basePath;
    /** @type {?} */
    OrgUnitAreaListService.prototype.defaultHeaders;
    /** @type {?} */
    OrgUnitAreaListService.prototype.configuration;
    /** @type {?} */
    OrgUnitAreaListService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,