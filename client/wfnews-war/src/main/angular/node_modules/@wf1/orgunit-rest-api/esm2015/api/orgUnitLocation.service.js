/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Wildfire Org Unit REST API
 * The Wildfire Org Unit REST API.
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { OrgUnitConfiguration } from '../configuration';
export class OrgUnitLocationService {
    /**
     * @param {?} httpClient
     * @param {?} basePath
     * @param {?} configuration
     */
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new OrgUnitConfiguration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param {?} consumes string[] mime-types
     * @return {?} true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        /** @type {?} */
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} orgUnitId
     * @param {?} orgUnitLocationId
     * @param {?} ifMatch
     * @param {?=} effectiveDate
     * @param {?=} expiryDate
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    deleteOrgUnitLocation1(orgUnitId, orgUnitLocationId, ifMatch, effectiveDate, expiryDate, restVersion, observe = 'body', reportProgress = false) {
        if (orgUnitId === null || orgUnitId === undefined) {
            throw new Error('Required parameter orgUnitId was null or undefined when calling deleteOrgUnitLocation1.');
        }
        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {
            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling deleteOrgUnitLocation1.');
        }
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling deleteOrgUnitLocation1.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (effectiveDate !== undefined) {
            queryParameters = queryParameters.set('effectiveDate', /** @type {?} */ (effectiveDate));
        }
        if (expiryDate !== undefined) {
            queryParameters = queryParameters.set('expiryDate', /** @type {?} */ (expiryDate));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAccepts = [];
        /** @type {?} */
        let httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let consumes = [];
        return this.httpClient.delete(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} orgUnitId
     * @param {?} orgUnitLocationId
     * @param {?=} effectiveAsOfDate
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    getOrgUnitLocation1(orgUnitId, orgUnitLocationId, effectiveAsOfDate, restVersion, observe = 'body', reportProgress = false) {
        if (orgUnitId === null || orgUnitId === undefined) {
            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitLocation1.');
        }
        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {
            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getOrgUnitLocation1.');
        }
        /** @type {?} */
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (effectiveAsOfDate !== undefined) {
            queryParameters = queryParameters.set('effectiveAsOfDate', /** @type {?} */ (effectiveAsOfDate));
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let consumes = [];
        return this.httpClient.get(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    /**
     * @param {?} orgUnitId
     * @param {?} orgUnitLocationId
     * @param {?} orgUnitLocation
     * @param {?} ifMatch
     * @param {?=} restVersion
     * @param {?=} observe
     * @param {?=} reportProgress
     * @return {?}
     */
    updateOrgUnitLocation1(orgUnitId, orgUnitLocationId, orgUnitLocation, ifMatch, restVersion, observe = 'body', reportProgress = false) {
        if (orgUnitId === null || orgUnitId === undefined) {
            throw new Error('Required parameter orgUnitId was null or undefined when calling updateOrgUnitLocation1.');
        }
        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {
            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling updateOrgUnitLocation1.');
        }
        if (orgUnitLocation === null || orgUnitLocation === undefined) {
            throw new Error('Required parameter orgUnitLocation was null or undefined when calling updateOrgUnitLocation1.');
        }
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling updateOrgUnitLocation1.');
        }
        /** @type {?} */
        let headers = this.defaultHeaders;
        if (restVersion !== undefined && restVersion !== null) {
            headers = headers.set('Rest-Version', String(restVersion));
        }
        if (ifMatch !== undefined && ifMatch !== null) {
            headers = headers.set('If-Match', String(ifMatch));
        }
        /** @type {?} */
        let httpHeaderAccepts = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }
        /** @type {?} */
        let consumes = [
            'application/json',
            'application/xml'
        ];
        /** @type {?} */
        let httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }
        return this.httpClient.put(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}`, orgUnitLocation, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
OrgUnitLocationService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
OrgUnitLocationService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: OrgUnitConfiguration, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    OrgUnitLocationService.prototype.basePath;
    /** @type {?} */
    OrgUnitLocationService.prototype.defaultHeaders;
    /** @type {?} */
    OrgUnitLocationService.prototype.configuration;
    /** @type {?} */
    OrgUnitLocationService.prototype.httpClient;
}

//# sourceMappingURL=data:application/json;base64,