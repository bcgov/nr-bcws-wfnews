/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule, SkipSelf, Optional } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { OrgUnitConfiguration } from './configuration';
import { CodeHierarchyEndpointsService } from './api/codeHierarchyEndpoints.service';
import { CodeHierarchyListEndpointsService } from './api/codeHierarchyListEndpoints.service';
import { CodeTableEndpointsService } from './api/codeTableEndpoints.service';
import { CodeTableListEndpointsService } from './api/codeTableListEndpoints.service';
import { LocationAddressService } from './api/locationAddress.service';
import { LocationContactService } from './api/locationContact.service';
import { OrgUnitService } from './api/orgUnit.service';
import { OrgUnitAreaService } from './api/orgUnitArea.service';
import { OrgUnitAreaListService } from './api/orgUnitAreaList.service';
import { OrgUnitListService } from './api/orgUnitList.service';
import { OrgUnitLocationService } from './api/orgUnitLocation.service';
import { OrgUnitLocationListService } from './api/orgUnitLocationList.service';
import { OrgUnitTypeConfigService } from './api/orgUnitTypeConfig.service';
import { TopLevelService } from './api/topLevel.service';
var ApiModule = /** @class */ (function () {
    function ApiModule(parentModule) {
        if (parentModule) {
            throw new Error('ApiModule is already loaded. Import your base AppModule only.');
        }
    }
    /**
     * @param {?} configurationFactory
     * @return {?}
     */
    ApiModule.forRoot = /**
     * @param {?} configurationFactory
     * @return {?}
     */
    function (configurationFactory) {
        return {
            ngModule: ApiModule,
            providers: [{ provide: OrgUnitConfiguration, useFactory: configurationFactory }]
        };
    };
    ApiModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, HttpClientModule],
                    declarations: [],
                    exports: [],
                    providers: [
                        CodeHierarchyEndpointsService,
                        CodeHierarchyListEndpointsService,
                        CodeTableEndpointsService,
                        CodeTableListEndpointsService,
                        LocationAddressService,
                        LocationContactService,
                        OrgUnitService,
                        OrgUnitAreaService,
                        OrgUnitAreaListService,
                        OrgUnitListService,
                        OrgUnitLocationService,
                        OrgUnitLocationListService,
                        OrgUnitTypeConfigService,
                        TopLevelService
                    ]
                },] },
    ];
    /** @nocollapse */
    ApiModule.ctorParameters = function () { return [
        { type: ApiModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return ApiModule;
}());
export { ApiModule };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B3ZjEvb3JndW5pdC1yZXN0LWFwaS8iLCJzb3VyY2VzIjpbImFwaS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXZELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzdGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0lBOEJyRCxtQkFBcUMsWUFBdUI7UUFDeEQsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStELENBQUMsQ0FBQztTQUNwRjtLQUNKOzs7OztJQVhhLGlCQUFPOzs7O2NBQUMsb0JBQWdEO1FBQ2xFLE1BQU0sQ0FBQztZQUNILFFBQVEsRUFBRSxTQUFTO1lBQ25CLFNBQVMsRUFBRSxDQUFFLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxDQUFFO1NBQ3JGLENBQUE7OztnQkF6QlIsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBTyxDQUFFLFlBQVksRUFBRSxnQkFBZ0IsQ0FBRTtvQkFDaEQsWUFBWSxFQUFFLEVBQUU7b0JBQ2hCLE9BQU8sRUFBTyxFQUFFO29CQUNoQixTQUFTLEVBQUU7d0JBQ1QsNkJBQTZCO3dCQUM3QixpQ0FBaUM7d0JBQ2pDLHlCQUF5Qjt3QkFDekIsNkJBQTZCO3dCQUM3QixzQkFBc0I7d0JBQ3RCLHNCQUFzQjt3QkFDdEIsY0FBYzt3QkFDZCxrQkFBa0I7d0JBQ2xCLHNCQUFzQjt3QkFDdEIsa0JBQWtCO3dCQUNsQixzQkFBc0I7d0JBQ3RCLDBCQUEwQjt3QkFDMUIsd0JBQXdCO3dCQUN4QixlQUFlO3FCQUFFO2lCQUNwQjs7OztnQkFTc0QsU0FBUyx1QkFBOUMsUUFBUSxZQUFJLFFBQVE7O29CQWhEdEM7O1NBd0NhLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgU2tpcFNlbGYsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9yZ1VuaXRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9jb25maWd1cmF0aW9uJztcblxuaW1wb3J0IHsgQ29kZUhpZXJhcmNoeUVuZHBvaW50c1NlcnZpY2UgfSBmcm9tICcuL2FwaS9jb2RlSGllcmFyY2h5RW5kcG9pbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29kZUhpZXJhcmNoeUxpc3RFbmRwb2ludHNTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvY29kZUhpZXJhcmNoeUxpc3RFbmRwb2ludHMuc2VydmljZSc7XG5pbXBvcnQgeyBDb2RlVGFibGVFbmRwb2ludHNTZXJ2aWNlIH0gZnJvbSAnLi9hcGkvY29kZVRhYmxlRW5kcG9pbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29kZVRhYmxlTGlzdEVuZHBvaW50c1NlcnZpY2UgfSBmcm9tICcuL2FwaS9jb2RlVGFibGVMaXN0RW5kcG9pbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9jYXRpb25BZGRyZXNzU2VydmljZSB9IGZyb20gJy4vYXBpL2xvY2F0aW9uQWRkcmVzcy5zZXJ2aWNlJztcbmltcG9ydCB7IExvY2F0aW9uQ29udGFjdFNlcnZpY2UgfSBmcm9tICcuL2FwaS9sb2NhdGlvbkNvbnRhY3Quc2VydmljZSc7XG5pbXBvcnQgeyBPcmdVbml0U2VydmljZSB9IGZyb20gJy4vYXBpL29yZ1VuaXQuc2VydmljZSc7XG5pbXBvcnQgeyBPcmdVbml0QXJlYVNlcnZpY2UgfSBmcm9tICcuL2FwaS9vcmdVbml0QXJlYS5zZXJ2aWNlJztcbmltcG9ydCB7IE9yZ1VuaXRBcmVhTGlzdFNlcnZpY2UgfSBmcm9tICcuL2FwaS9vcmdVbml0QXJlYUxpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBPcmdVbml0TGlzdFNlcnZpY2UgfSBmcm9tICcuL2FwaS9vcmdVbml0TGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IE9yZ1VuaXRMb2NhdGlvblNlcnZpY2UgfSBmcm9tICcuL2FwaS9vcmdVbml0TG9jYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBPcmdVbml0TG9jYXRpb25MaXN0U2VydmljZSB9IGZyb20gJy4vYXBpL29yZ1VuaXRMb2NhdGlvbkxpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBPcmdVbml0VHlwZUNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2FwaS9vcmdVbml0VHlwZUNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IFRvcExldmVsU2VydmljZSB9IGZyb20gJy4vYXBpL3RvcExldmVsLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiAgICAgIFsgQ29tbW9uTW9kdWxlLCBIdHRwQ2xpZW50TW9kdWxlIF0sXG4gIGRlY2xhcmF0aW9uczogW10sXG4gIGV4cG9ydHM6ICAgICAgW10sXG4gIHByb3ZpZGVyczogW1xuICAgIENvZGVIaWVyYXJjaHlFbmRwb2ludHNTZXJ2aWNlLFxuICAgIENvZGVIaWVyYXJjaHlMaXN0RW5kcG9pbnRzU2VydmljZSxcbiAgICBDb2RlVGFibGVFbmRwb2ludHNTZXJ2aWNlLFxuICAgIENvZGVUYWJsZUxpc3RFbmRwb2ludHNTZXJ2aWNlLFxuICAgIExvY2F0aW9uQWRkcmVzc1NlcnZpY2UsXG4gICAgTG9jYXRpb25Db250YWN0U2VydmljZSxcbiAgICBPcmdVbml0U2VydmljZSxcbiAgICBPcmdVbml0QXJlYVNlcnZpY2UsXG4gICAgT3JnVW5pdEFyZWFMaXN0U2VydmljZSxcbiAgICBPcmdVbml0TGlzdFNlcnZpY2UsXG4gICAgT3JnVW5pdExvY2F0aW9uU2VydmljZSxcbiAgICBPcmdVbml0TG9jYXRpb25MaXN0U2VydmljZSxcbiAgICBPcmdVbml0VHlwZUNvbmZpZ1NlcnZpY2UsXG4gICAgVG9wTGV2ZWxTZXJ2aWNlIF1cbn0pXG5leHBvcnQgY2xhc3MgQXBpTW9kdWxlIHtcbiAgICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlndXJhdGlvbkZhY3Rvcnk6ICgpID0+IE9yZ1VuaXRDb25maWd1cmF0aW9uKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogQXBpTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbIHsgcHJvdmlkZTogT3JnVW5pdENvbmZpZ3VyYXRpb24sIHVzZUZhY3Rvcnk6IGNvbmZpZ3VyYXRpb25GYWN0b3J5IH0gXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogQXBpTW9kdWxlKSB7XG4gICAgICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXBpTW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgeW91ciBiYXNlIEFwcE1vZHVsZSBvbmx5LicpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19