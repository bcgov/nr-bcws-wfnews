{"version":3,"file":"wf1-orgunit-rest-api.js.map","sources":["ng://@wf1/orgunit-rest-api/encoder.ts","ng://@wf1/orgunit-rest-api/variables.ts","ng://@wf1/orgunit-rest-api/configuration.ts","ng://@wf1/orgunit-rest-api/api/codeHierarchyEndpoints.service.ts","ng://@wf1/orgunit-rest-api/api/codeHierarchyListEndpoints.service.ts","ng://@wf1/orgunit-rest-api/api/codeTableEndpoints.service.ts","ng://@wf1/orgunit-rest-api/api/codeTableListEndpoints.service.ts","ng://@wf1/orgunit-rest-api/api/locationAddress.service.ts","ng://@wf1/orgunit-rest-api/api/locationContact.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnit.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitArea.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitAreaList.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitList.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitLocation.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitLocationList.service.ts","ng://@wf1/orgunit-rest-api/api/orgUnitTypeConfig.service.ts","ng://@wf1/orgunit-rest-api/api/topLevel.service.ts","ng://@wf1/orgunit-rest-api/api/api.ts","ng://@wf1/orgunit-rest-api/api.module.ts"],"sourcesContent":["    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class OrgUnitConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link OrgUnitConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link OrgUnitConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CodeHierarchyResource } from '../model/codeHierarchyResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CodeHierarchyEndpointsService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get CodeHierarchy resource by code table name.\n     * Get CodeHierarchy resource by code table name.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeHierarchy1(codeHierarchyName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeHierarchyResource>;\n    public getCodeHierarchy1(codeHierarchyName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeHierarchyResource>>;\n    public getCodeHierarchy1(codeHierarchyName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeHierarchyResource>>;\n    public getCodeHierarchy1(codeHierarchyName: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (codeHierarchyName === null || codeHierarchyName === undefined) {\n            throw new Error('Required parameter codeHierarchyName was null or undefined when calling getCodeHierarchy1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CodeHierarchyResource>(`${this.basePath}/codeHierarchies/${encodeURIComponent(String(codeHierarchyName))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update CodeHierarchy resource by code table name.\n     * Update CodeHierarchy by code table name.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param codeHierarchy The CodeHierarchy resource containing the new values.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCodeHierarchy1(codeHierarchyName: string, codeHierarchy: CodeHierarchyResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeHierarchyResource>;\n    public updateCodeHierarchy1(codeHierarchyName: string, codeHierarchy: CodeHierarchyResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeHierarchyResource>>;\n    public updateCodeHierarchy1(codeHierarchyName: string, codeHierarchy: CodeHierarchyResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeHierarchyResource>>;\n    public updateCodeHierarchy1(codeHierarchyName: string, codeHierarchy: CodeHierarchyResource, ifMatch: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (codeHierarchyName === null || codeHierarchyName === undefined) {\n            throw new Error('Required parameter codeHierarchyName was null or undefined when calling updateCodeHierarchy1.');\n        }\n        if (codeHierarchy === null || codeHierarchy === undefined) {\n            throw new Error('Required parameter codeHierarchy was null or undefined when calling updateCodeHierarchy1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeHierarchy1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<CodeHierarchyResource>(`${this.basePath}/codeHierarchies/${encodeURIComponent(String(codeHierarchyName))}`,\n            codeHierarchy,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CodeHierarchyListResource } from '../model/codeHierarchyListResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CodeHierarchyListEndpointsService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get Code Hierarchy List Resource\n     * Get Code Hierarchy List Resource\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeHierarchyName Filter the results by the codeHierarchyName.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeHierarchyList1(effectiveAsOfDate?: string, codeHierarchyName?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeHierarchyListResource>;\n    public getCodeHierarchyList1(effectiveAsOfDate?: string, codeHierarchyName?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeHierarchyListResource>>;\n    public getCodeHierarchyList1(effectiveAsOfDate?: string, codeHierarchyName?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeHierarchyListResource>>;\n    public getCodeHierarchyList1(effectiveAsOfDate?: string, codeHierarchyName?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (codeHierarchyName !== undefined) {\n            queryParameters = queryParameters.set('codeHierarchyName', <any>codeHierarchyName);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CodeHierarchyListResource>(`${this.basePath}/codeHierarchies`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CodeTableResource } from '../model/codeTableResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CodeTableEndpointsService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get CodeTable resource by code table name.\n     * Get CodeTable resource by code table name.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeTable1(codeTableName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeTableResource>;\n    public getCodeTable1(codeTableName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeTableResource>>;\n    public getCodeTable1(codeTableName: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeTableResource>>;\n    public getCodeTable1(codeTableName: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (codeTableName === null || codeTableName === undefined) {\n            throw new Error('Required parameter codeTableName was null or undefined when calling getCodeTable1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CodeTableResource>(`${this.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update CodeTable resource by code table name.\n     * Update CodeTable by code table name.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param codeTable The CodeTable resource containing the new values.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCodeTable1(codeTableName: string, codeTable: CodeTableResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeTableResource>;\n    public updateCodeTable1(codeTableName: string, codeTable: CodeTableResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeTableResource>>;\n    public updateCodeTable1(codeTableName: string, codeTable: CodeTableResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeTableResource>>;\n    public updateCodeTable1(codeTableName: string, codeTable: CodeTableResource, ifMatch: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (codeTableName === null || codeTableName === undefined) {\n            throw new Error('Required parameter codeTableName was null or undefined when calling updateCodeTable1.');\n        }\n        if (codeTable === null || codeTable === undefined) {\n            throw new Error('Required parameter codeTable was null or undefined when calling updateCodeTable1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateCodeTable1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<CodeTableResource>(`${this.basePath}/codeTables/${encodeURIComponent(String(codeTableName))}`,\n            codeTable,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { CodeTableListResource } from '../model/codeTableListResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CodeTableListEndpointsService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get Code Table List Resource\n     * Get Code Table List Resource\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeTableName Filter the results by the codeTableName.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCodeTableList1(effectiveAsOfDate?: string, codeTableName?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<CodeTableListResource>;\n    public getCodeTableList1(effectiveAsOfDate?: string, codeTableName?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CodeTableListResource>>;\n    public getCodeTableList1(effectiveAsOfDate?: string, codeTableName?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CodeTableListResource>>;\n    public getCodeTableList1(effectiveAsOfDate?: string, codeTableName?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (codeTableName !== undefined) {\n            queryParameters = queryParameters.set('codeTableName', <any>codeTableName);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CodeTableListResource>(`${this.basePath}/codeTables`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { LocationAddressResource } from '../model/locationAddressResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class LocationAddressService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get a Location Address by ID.\n     * Get a Location Address by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param locationAddressId The identifier of the Location Address resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getLocationAddress(orgUnitId: string, orgUnitLocationId: string, locationAddressId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<LocationAddressResource>;\n    public getLocationAddress(orgUnitId: string, orgUnitLocationId: string, locationAddressId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationAddressResource>>;\n    public getLocationAddress(orgUnitId: string, orgUnitLocationId: string, locationAddressId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationAddressResource>>;\n    public getLocationAddress(orgUnitId: string, orgUnitLocationId: string, locationAddressId: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getLocationAddress.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getLocationAddress.');\n        }\n        if (locationAddressId === null || locationAddressId === undefined) {\n            throw new Error('Required parameter locationAddressId was null or undefined when calling getLocationAddress.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n\n        return this.httpClient.get<LocationAddressResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}/addresses/${encodeURIComponent(String(locationAddressId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { LocationContactResource } from '../model/locationContactResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class LocationContactService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get a Location Contact by ID.\n     * Get a Location Contact by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param locationContactId The identifier of the Location Contact resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getLocationContact1(orgUnitId: string, orgUnitLocationId: string, locationContactId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<LocationContactResource>;\n    public getLocationContact1(orgUnitId: string, orgUnitLocationId: string, locationContactId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LocationContactResource>>;\n    public getLocationContact1(orgUnitId: string, orgUnitLocationId: string, locationContactId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LocationContactResource>>;\n    public getLocationContact1(orgUnitId: string, orgUnitLocationId: string, locationContactId: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getLocationContact1.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getLocationContact1.');\n        }\n        if (locationContactId === null || locationContactId === undefined) {\n            throw new Error('Required parameter locationContactId was null or undefined when calling getLocationContact1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<LocationContactResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}/contacts/${encodeURIComponent(String(locationContactId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitDetailsResource } from '../model/orgUnitDetailsResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get the org unit by id.\n     * Get the org unit by id.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnit1(orgUnitId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitDetailsResource>;\n    public getOrgUnit1(orgUnitId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitDetailsResource>>;\n    public getOrgUnit1(orgUnitId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitDetailsResource>>;\n    public getOrgUnit1(orgUnitId: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnit1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitDetailsResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitAreaResource } from '../model/orgUnitAreaResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitAreaService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete an Area defined for an Org Unit by ID.\n     * Delete an Area defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitAreaId The identifier of the Org Unit Area resource.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param effectiveDate Delete the resource for the period effective as of the effectiveDate or as of today if not provided.\n     * @param expiryDate Delete the resource for the period expiring as of the expiryDate or open ended if not provided.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling deleteOrgUnitArea1.');\n        }\n        if (orgUnitAreaId === null || orgUnitAreaId === undefined) {\n            throw new Error('Required parameter orgUnitAreaId was null or undefined when calling deleteOrgUnitArea1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling deleteOrgUnitArea1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveDate', <any>effectiveDate);\n        }\n        if (expiryDate !== undefined) {\n            queryParameters = queryParameters.set('expiryDate', <any>expiryDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas/${encodeURIComponent(String(orgUnitAreaId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an Area defined for an Org Unit by ID.\n     * Get an Area defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitAreaId The identifier of the Org Unit Area resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param includeGeometryInd Indicates if the geometry should be returned with the results.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaResource>;\n    public getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaResource>>;\n    public getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaResource>>;\n    public getOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, effectiveAsOfDate?: string, includeGeometryInd?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitArea1.');\n        }\n        if (orgUnitAreaId === null || orgUnitAreaId === undefined) {\n            throw new Error('Required parameter orgUnitAreaId was null or undefined when calling getOrgUnitArea1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (includeGeometryInd !== undefined) {\n            queryParameters = queryParameters.set('includeGeometryInd', <any>includeGeometryInd);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitAreaResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas/${encodeURIComponent(String(orgUnitAreaId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update an Area defined for an Org Unit by ID.\n     * Update an Area defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitAreaId The identifier of the Org Unit Area resource.\n     * @param orgUnitArea The UserEditableData resource containing the new values.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaResource>;\n    public updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaResource>>;\n    public updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaResource>>;\n    public updateOrgUnitArea1(orgUnitId: string, orgUnitAreaId: string, orgUnitArea: OrgUnitAreaResource, ifMatch: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling updateOrgUnitArea1.');\n        }\n        if (orgUnitAreaId === null || orgUnitAreaId === undefined) {\n            throw new Error('Required parameter orgUnitAreaId was null or undefined when calling updateOrgUnitArea1.');\n        }\n        if (orgUnitArea === null || orgUnitArea === undefined) {\n            throw new Error('Required parameter orgUnitArea was null or undefined when calling updateOrgUnitArea1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateOrgUnitArea1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<OrgUnitAreaResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas/${encodeURIComponent(String(orgUnitAreaId))}`,\n            orgUnitArea,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitAreaListResource } from '../model/orgUnitAreaListResource';\nimport { OrgUnitAreaResource } from '../model/orgUnitAreaResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitAreaListService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add an Area Resource to the list of Areas defined for an Org Unit.\n     * Add an Area Resource to the list of Areas defined for an Org Unit.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitArea The Area resource containing the new values.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaResource>;\n    public createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaResource>>;\n    public createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaResource>>;\n    public createOrgUnitArea1(orgUnitId: string, orgUnitArea: OrgUnitAreaResource, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling createOrgUnitArea1.');\n        }\n        if (orgUnitArea === null || orgUnitArea === undefined) {\n            throw new Error('Required parameter orgUnitArea was null or undefined when calling createOrgUnitArea1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<OrgUnitAreaResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas`,\n            orgUnitArea,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the list of Areas defined for an Org Unit.\n     * Get the list of Areas defined for an Org Unit.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param orgUnitAreaTypeCode Filter the results by the orgUnitAreaTypeCode.\n     * @param includeGeometryInd Indicates if the geometry should be returned with the results.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitAreaListResource>;\n    public getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitAreaListResource>>;\n    public getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitAreaListResource>>;\n    public getOrgUnitAreaList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitAreaTypeCode?: string, includeGeometryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitAreaList1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (orgUnitAreaTypeCode !== undefined) {\n            queryParameters = queryParameters.set('orgUnitAreaTypeCode', <any>orgUnitAreaTypeCode);\n        }\n        if (includeGeometryInd !== undefined) {\n            queryParameters = queryParameters.set('includeGeometryInd', <any>includeGeometryInd);\n        }\n        if (pageNumber !== undefined) {\n            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);\n        }\n        if (pageRowCount !== undefined) {\n            queryParameters = queryParameters.set('pageRowCount', <any>pageRowCount);\n        }\n        if (orderBy !== undefined) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitAreaListResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/areas`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitListResource } from '../model/orgUnitListResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitListService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get list of Org Units.\n     * Get list of Org Units.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param orgUnitName Filter the results by the orgUnitName.\n     * @param integerAlias Filter the results by the integerAlias.\n     * @param characterAlias Filter the results by the characterAlias.\n     * @param orgUnitTypeCode Filter the results by the orgUnitTypeCode.\n     * @param orgUnitAreaTypeCode Filter the results by the orgUnitAreaTypeCode.\n     * @param point Filter the results by the point.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitListResource>;\n    public getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitListResource>>;\n    public getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitListResource>>;\n    public getOrgUnitList1(effectiveAsOfDate?: string, orgUnitName?: string, integerAlias?: string, characterAlias?: string, orgUnitTypeCode?: string, orgUnitAreaTypeCode?: string, point?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (orgUnitName !== undefined) {\n            queryParameters = queryParameters.set('orgUnitName', <any>orgUnitName);\n        }\n        if (integerAlias !== undefined) {\n            queryParameters = queryParameters.set('integerAlias', <any>integerAlias);\n        }\n        if (characterAlias !== undefined) {\n            queryParameters = queryParameters.set('characterAlias', <any>characterAlias);\n        }\n        if (orgUnitTypeCode !== undefined) {\n            queryParameters = queryParameters.set('orgUnitTypeCode', <any>orgUnitTypeCode);\n        }\n        if (orgUnitAreaTypeCode !== undefined) {\n            queryParameters = queryParameters.set('orgUnitAreaTypeCode', <any>orgUnitAreaTypeCode);\n        }\n        if (point !== undefined) {\n            queryParameters = queryParameters.set('point', <any>point);\n        }\n        if (pageNumber !== undefined) {\n            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);\n        }\n        if (pageRowCount !== undefined) {\n            queryParameters = queryParameters.set('pageRowCount', <any>pageRowCount);\n        }\n        if (orderBy !== undefined) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitListResource>(`${this.basePath}/orgUnits`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitLocationResource } from '../model/orgUnitLocationResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitLocationService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete an Location defined for an Org Unit by ID.\n     * Delete an Location defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param effectiveDate Delete the resource for the period effective as of the effectiveDate or as of today if not provided.\n     * @param expiryDate Delete the resource for the period expiring as of the expiryDate or open ended if not provided.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, ifMatch: string, effectiveDate?: string, expiryDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling deleteOrgUnitLocation1.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling deleteOrgUnitLocation1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling deleteOrgUnitLocation1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveDate', <any>effectiveDate);\n        }\n        if (expiryDate !== undefined) {\n            queryParameters = queryParameters.set('expiryDate', <any>expiryDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an Org Unit Location by ID.\n     * Get an Org Unit Location by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;\n    public getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;\n    public getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;\n    public getOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitLocation1.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling getOrgUnitLocation1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitLocationResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a Location defined for an Org Unit by ID.\n     * Update a Location defined for an Org Unit by ID.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocationId The identifier of the Org Unit Location resource.\n     * @param orgUnitLocation The UserEditableData resource containing the new values.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;\n    public updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;\n    public updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;\n    public updateOrgUnitLocation1(orgUnitId: string, orgUnitLocationId: string, orgUnitLocation: OrgUnitLocationResource, ifMatch: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling updateOrgUnitLocation1.');\n        }\n        if (orgUnitLocationId === null || orgUnitLocationId === undefined) {\n            throw new Error('Required parameter orgUnitLocationId was null or undefined when calling updateOrgUnitLocation1.');\n        }\n        if (orgUnitLocation === null || orgUnitLocation === undefined) {\n            throw new Error('Required parameter orgUnitLocation was null or undefined when calling updateOrgUnitLocation1.');\n        }\n        if (ifMatch === null || ifMatch === undefined) {\n            throw new Error('Required parameter ifMatch was null or undefined when calling updateOrgUnitLocation1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n        if (ifMatch !== undefined && ifMatch !== null) {\n            headers = headers.set('If-Match', String(ifMatch));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<OrgUnitLocationResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations/${encodeURIComponent(String(orgUnitLocationId))}`,\n            orgUnitLocation,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitLocationListResource } from '../model/orgUnitLocationListResource';\nimport { OrgUnitLocationResource } from '../model/orgUnitLocationResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitLocationListService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add a Location Resource to the list of Locations defined for an Org Unit.\n     * Add an Location Resource to the list of Locations defined for an Org Unit.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param orgUnitLocation The Location resource containing the new values.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationResource>;\n    public createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationResource>>;\n    public createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationResource>>;\n    public createOrgUnitLocation1(orgUnitId: string, orgUnitLocation: OrgUnitLocationResource, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling createOrgUnitLocation1.');\n        }\n        if (orgUnitLocation === null || orgUnitLocation === undefined) {\n            throw new Error('Required parameter orgUnitLocation was null or undefined when calling createOrgUnitLocation1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<OrgUnitLocationResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations`,\n            orgUnitLocation,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the list of Org Unit Locations.\n     * Get the list of Org Unit Locations.\n     * @param orgUnitId The identifier of the Org Unit resource.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param orgUnitLocationTypeCode Filter the results by the orgUnitLocationTypeCode.\n     * @param locationName Filter the results by the locationName.\n     * @param primaryInd Filter the results by the primaryInd.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitLocationListResource>;\n    public getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitLocationListResource>>;\n    public getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitLocationListResource>>;\n    public getOrgUnitLocationList1(orgUnitId: string, effectiveAsOfDate?: string, orgUnitLocationTypeCode?: string, locationName?: string, primaryInd?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitId === null || orgUnitId === undefined) {\n            throw new Error('Required parameter orgUnitId was null or undefined when calling getOrgUnitLocationList1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n        if (orgUnitLocationTypeCode !== undefined) {\n            queryParameters = queryParameters.set('orgUnitLocationTypeCode', <any>orgUnitLocationTypeCode);\n        }\n        if (locationName !== undefined) {\n            queryParameters = queryParameters.set('locationName', <any>locationName);\n        }\n        if (primaryInd !== undefined) {\n            queryParameters = queryParameters.set('primaryInd', <any>primaryInd);\n        }\n        if (pageNumber !== undefined) {\n            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);\n        }\n        if (pageRowCount !== undefined) {\n            queryParameters = queryParameters.set('pageRowCount', <any>pageRowCount);\n        }\n        if (orderBy !== undefined) {\n            queryParameters = queryParameters.set('orderBy', <any>orderBy);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitLocationListResource>(`${this.basePath}/orgUnits/${encodeURIComponent(String(orgUnitId))}/locations`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Messages } from '../model/messages';\nimport { OrgUnitTypeConfigResource } from '../model/orgUnitTypeConfigResource';\nimport { OrgUnitTypeConfigResultResource } from '../model/orgUnitTypeConfigResultResource';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OrgUnitTypeConfigService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get the configuration for an Org Unit Type.\n     * Get the configuration for an Org Unit Type.\n     * @param orgUnitTypeCode The identifier of the Org Unit Type.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitTypeConfigResource>;\n    public getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitTypeConfigResource>>;\n    public getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitTypeConfigResource>>;\n    public getOrgUnitTypeConfig1(orgUnitTypeCode: string, effectiveAsOfDate?: string, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitTypeCode === null || orgUnitTypeCode === undefined) {\n            throw new Error('Required parameter orgUnitTypeCode was null or undefined when calling getOrgUnitTypeConfig1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (effectiveAsOfDate !== undefined) {\n            queryParameters = queryParameters.set('effectiveAsOfDate', <any>effectiveAsOfDate);\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<OrgUnitTypeConfigResource>(`${this.basePath}/orgUnitTypeConfigs/${encodeURIComponent(String(orgUnitTypeCode))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add or update the configuration for an Org Unit Type\n     * Add or update the configuration for an Org Unit Type\n     * @param orgUnitTypeConfig The OrgUnitTypeConfig resource containing the new values.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitTypeConfigResultResource>;\n    public upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitTypeConfigResultResource>>;\n    public upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitTypeConfigResultResource>>;\n    public upsertOrgUnitTypeConfig1(orgUnitTypeConfig: OrgUnitTypeConfigResource, restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (orgUnitTypeConfig === null || orgUnitTypeConfig === undefined) {\n            throw new Error('Required parameter orgUnitTypeConfig was null or undefined when calling upsertOrgUnitTypeConfig1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<OrgUnitTypeConfigResultResource>(`${this.basePath}/orgUnitTypeConfigs`,\n            orgUnitTypeConfig,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Wildfire Org Unit REST API\n * The Wildfire Org Unit REST API.\n *\n * OpenAPI spec version: 1.0.0-SNAPSHOT\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { EndpointsResource } from '../model/endpointsResource';\nimport { Messages } from '../model/messages';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { OrgUnitConfiguration }                                     from '../configuration';\n\n\n@Injectable()\nexport class TopLevelService {\n\n    protected basePath = 'https://https://d1api.vividsolutions.com/wforg-org-unit-api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new OrgUnitConfiguration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: OrgUnitConfiguration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get Top Level Resources.\n     * Get Top Level Resources\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTopLevel1(restVersion?: number, observe?: 'body', reportProgress?: boolean): Observable<EndpointsResource>;\n    public getTopLevel1(restVersion?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EndpointsResource>>;\n    public getTopLevel1(restVersion?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EndpointsResource>>;\n    public getTopLevel1(restVersion?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n        if (restVersion !== undefined && restVersion !== null) {\n            headers = headers.set('Rest-Version', String(restVersion));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/xml'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EndpointsResource>(`${this.basePath}/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './codeHierarchyEndpoints.service';\nimport { CodeHierarchyEndpointsService } from './codeHierarchyEndpoints.service';\nexport * from './codeHierarchyListEndpoints.service';\nimport { CodeHierarchyListEndpointsService } from './codeHierarchyListEndpoints.service';\nexport * from './codeTableEndpoints.service';\nimport { CodeTableEndpointsService } from './codeTableEndpoints.service';\nexport * from './codeTableListEndpoints.service';\nimport { CodeTableListEndpointsService } from './codeTableListEndpoints.service';\nexport * from './locationAddress.service';\nimport { LocationAddressService } from './locationAddress.service';\nexport * from './locationContact.service';\nimport { LocationContactService } from './locationContact.service';\nexport * from './orgUnit.service';\nimport { OrgUnitService } from './orgUnit.service';\nexport * from './orgUnitArea.service';\nimport { OrgUnitAreaService } from './orgUnitArea.service';\nexport * from './orgUnitAreaList.service';\nimport { OrgUnitAreaListService } from './orgUnitAreaList.service';\nexport * from './orgUnitList.service';\nimport { OrgUnitListService } from './orgUnitList.service';\nexport * from './orgUnitLocation.service';\nimport { OrgUnitLocationService } from './orgUnitLocation.service';\nexport * from './orgUnitLocationList.service';\nimport { OrgUnitLocationListService } from './orgUnitLocationList.service';\nexport * from './orgUnitTypeConfig.service';\nimport { OrgUnitTypeConfigService } from './orgUnitTypeConfig.service';\nexport * from './topLevel.service';\nimport { TopLevelService } from './topLevel.service';\nexport const APIS = [CodeHierarchyEndpointsService, CodeHierarchyListEndpointsService, CodeTableEndpointsService, CodeTableListEndpointsService, LocationAddressService, LocationContactService, OrgUnitService, OrgUnitAreaService, OrgUnitAreaListService, OrgUnitListService, OrgUnitLocationService, OrgUnitLocationListService, OrgUnitTypeConfigService, TopLevelService];\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { OrgUnitConfiguration } from './configuration';\n\nimport { CodeHierarchyEndpointsService } from './api/codeHierarchyEndpoints.service';\nimport { CodeHierarchyListEndpointsService } from './api/codeHierarchyListEndpoints.service';\nimport { CodeTableEndpointsService } from './api/codeTableEndpoints.service';\nimport { CodeTableListEndpointsService } from './api/codeTableListEndpoints.service';\nimport { LocationAddressService } from './api/locationAddress.service';\nimport { LocationContactService } from './api/locationContact.service';\nimport { OrgUnitService } from './api/orgUnit.service';\nimport { OrgUnitAreaService } from './api/orgUnitArea.service';\nimport { OrgUnitAreaListService } from './api/orgUnitAreaList.service';\nimport { OrgUnitListService } from './api/orgUnitList.service';\nimport { OrgUnitLocationService } from './api/orgUnitLocation.service';\nimport { OrgUnitLocationListService } from './api/orgUnitLocationList.service';\nimport { OrgUnitTypeConfigService } from './api/orgUnitTypeConfig.service';\nimport { TopLevelService } from './api/topLevel.service';\n\n@NgModule({\n  imports:      [ CommonModule, HttpClientModule ],\n  declarations: [],\n  exports:      [],\n  providers: [\n    CodeHierarchyEndpointsService,\n    CodeHierarchyListEndpointsService,\n    CodeTableEndpointsService,\n    CodeTableListEndpointsService,\n    LocationAddressService,\n    LocationContactService,\n    OrgUnitService,\n    OrgUnitAreaService,\n    OrgUnitAreaListService,\n    OrgUnitListService,\n    OrgUnitLocationService,\n    OrgUnitLocationListService,\n    OrgUnitTypeConfigService,\n    TopLevelService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => OrgUnitConfiguration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: OrgUnitConfiguration, useFactory: configurationFactory } ]\n        }\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import your base AppModule only.');\n        }\n    }\n}\n"],"names":[],"mappings":"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"}
