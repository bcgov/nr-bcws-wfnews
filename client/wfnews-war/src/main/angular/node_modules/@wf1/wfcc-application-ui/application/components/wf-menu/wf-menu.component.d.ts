import { EventEmitter } from "@angular/core";
import { Router, UrlTree } from "@angular/router";
import { WfMenuState } from "../../application.config";
import { BaseComponent } from "../base.component";
import * as i0 from "@angular/core";
export declare class WfMenuComponent extends BaseComponent {
    _menu: WfMenuItems;
    set menuItems(m: WfMenuItems);
    get menuItems(): WfMenuItems;
    activeItemChanged: EventEmitter<WfMenuItem>;
    get animation(): WfMenuState;
    tooltipShowDelay: number;
    constructor();
    get isHidden(): boolean;
    get isCollapsed(): boolean;
    get isExpanded(): boolean;
    get toggleTitle(): "Collapse" | "Expand" | "Hide";
    onToggleClick(): void;
    onItemClick(item: WfMenuItem): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<WfMenuComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WfMenuComponent, "wf-menu", never, { "menuItems": "menuItems"; }, { "activeItemChanged": "activeItemChanged"; }, never, ["[menu-footer]"], false, never>;
}
export declare type WfMenuItem = RouterLink | ActionTrigger;
export declare type WfMenuItems = Array<WfMenuItem>;
export declare class RouterLink {
    title: string;
    route: string | UrlTree;
    iconName: string;
    menuStateAfterActive: WfMenuState;
    private router;
    routerLinkExactMatch: boolean;
    indented: boolean;
    readonly type = "router-link";
    private active;
    private activeChangedCallback;
    constructor(title: string, route: string | UrlTree, iconName: string, menuStateAfterActive: WfMenuState, router: Router, routerLinkExactMatch?: boolean, indented?: boolean);
    get isActive(): boolean;
    setActive(active: boolean): void;
    OnActiveChanged(cb: () => void): void;
}
export declare class ActionTrigger {
    title: string;
    iconName: string;
    menuStateAfterActive: WfMenuState;
    indented: boolean;
    readonly type = "action-trigger";
    actionTriggered: EventEmitter<ActionTrigger>;
    constructor(title: string, iconName?: string, menuStateAfterActive?: WfMenuState, indented?: boolean);
    OnActiveChanged(cb: () => void): void;
    onClick(): void;
}
