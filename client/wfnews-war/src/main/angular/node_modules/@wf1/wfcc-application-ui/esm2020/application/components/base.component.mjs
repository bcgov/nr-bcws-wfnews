import { Directive, EventEmitter, Input, Output } from "@angular/core";
import * as i0 from "@angular/core";
export class BaseComponent {
    constructor() {
        this.stateChange = new EventEmitter();
        this._state = {
            menu: null
        };
    }
    get title() { return this.config.title; }
    get environment() { return this.config.environment; }
    get userName() { return this.config.userName; }
    get actingOnBehalfOf() { return this.config.actingOnBehalfOf; }
    get version() { return this.config.version; }
    set state(s) {
        this._state = s;
        this.menuState = s.menu;
    }
    get menuState() { return this._state.menu; }
    set menuState(m) {
        if (m == this.menuState)
            return;
        this._state.menu = m;
        // copying the state object is important to ensure that the change is detected
        this.stateChange.emit({ ...this._state });
    }
}
BaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: BaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });
BaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.9", type: BaseComponent, inputs: { config: "config", state: "state" }, outputs: { stateChange: "stateChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: BaseComponent, decorators: [{
            type: Directive
        }], propDecorators: { config: [{
                type: Input
            }], state: [{
                type: Input
            }], stateChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy93ZmNjLWFwcGxpY2F0aW9uLXVpL3NyYy9hcHBsaWNhdGlvbi9jb21wb25lbnRzL2Jhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSXZFLE1BQU0sT0FBZ0IsYUFBYTtJQURuQztRQWVjLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUE7UUFFOUQsV0FBTSxHQUF1QjtZQUN6QixJQUFJLEVBQUUsSUFBSTtTQUNiLENBQUE7S0FTSjtJQXZCRyxJQUFJLEtBQUssS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBLENBQUMsQ0FBQztJQUN4QyxJQUFJLFdBQVcsS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFBLENBQUMsQ0FBQztJQUNwRCxJQUFJLFFBQVEsS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFBLENBQUMsQ0FBQztJQUM5QyxJQUFJLGdCQUFnQixLQUFLLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQSxDQUFDLENBQUM7SUFDOUQsSUFBSSxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUM7SUFFNUMsSUFBYSxLQUFLLENBQUMsQ0FBcUI7UUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFBO0lBQzNCLENBQUM7SUFNRCxJQUFJLFNBQVMsS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFBLENBQUMsQ0FBQztJQUMzQyxJQUFJLFNBQVMsQ0FBQyxDQUFjO1FBQ3hCLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTO1lBQUUsT0FBTTtRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUE7UUFFcEIsOEVBQThFO1FBQzlFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUM3QyxDQUFDOzswR0ExQmlCLGFBQWE7OEZBQWIsYUFBYTsyRkFBYixhQUFhO2tCQURsQyxTQUFTOzhCQUdHLE1BQU07c0JBQWQsS0FBSztnQkFRTyxLQUFLO3NCQUFqQixLQUFLO2dCQUlJLFdBQVc7c0JBQXBCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBXZkFwcGxpY2F0aW9uQ29uZmlndXJhdGlvbiwgV2ZBcHBsaWNhdGlvblN0YXRlLCBXZk1lbnVTdGF0ZSB9IGZyb20gXCIuLi9hcHBsaWNhdGlvbi5jb25maWdcIjtcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUNvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoKSBjb25maWc6IFdmQXBwbGljYXRpb25Db25maWd1cmF0aW9uXG4gICAgXG4gICAgZ2V0IHRpdGxlKCkgeyByZXR1cm4gdGhpcy5jb25maWcudGl0bGUgfVxuICAgIGdldCBlbnZpcm9ubWVudCgpIHsgcmV0dXJuIHRoaXMuY29uZmlnLmVudmlyb25tZW50IH1cbiAgICBnZXQgdXNlck5hbWUoKSB7IHJldHVybiB0aGlzLmNvbmZpZy51c2VyTmFtZSB9XG4gICAgZ2V0IGFjdGluZ09uQmVoYWxmT2YoKSB7IHJldHVybiB0aGlzLmNvbmZpZy5hY3RpbmdPbkJlaGFsZk9mIH1cbiAgICBnZXQgdmVyc2lvbigpIHsgcmV0dXJuIHRoaXMuY29uZmlnLnZlcnNpb24gfVxuXG4gICAgQElucHV0KCkgc2V0IHN0YXRlKHM6IFdmQXBwbGljYXRpb25TdGF0ZSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IHM7XG4gICAgICAgIHRoaXMubWVudVN0YXRlID0gcy5tZW51XG4gICAgfVxuICAgIEBPdXRwdXQoKSBzdGF0ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8V2ZBcHBsaWNhdGlvblN0YXRlPigpXG5cbiAgICBfc3RhdGU6IFdmQXBwbGljYXRpb25TdGF0ZSA9IHtcbiAgICAgICAgbWVudTogbnVsbFxuICAgIH1cbiAgICBnZXQgbWVudVN0YXRlKCkgeyByZXR1cm4gdGhpcy5fc3RhdGUubWVudSB9XG4gICAgc2V0IG1lbnVTdGF0ZShtOiBXZk1lbnVTdGF0ZSkge1xuICAgICAgICBpZiAobSA9PSB0aGlzLm1lbnVTdGF0ZSkgcmV0dXJuXG4gICAgICAgIHRoaXMuX3N0YXRlLm1lbnUgPSBtXG5cbiAgICAgICAgLy8gY29weWluZyB0aGUgc3RhdGUgb2JqZWN0IGlzIGltcG9ydGFudCB0byBlbnN1cmUgdGhhdCB0aGUgY2hhbmdlIGlzIGRldGVjdGVkXG4gICAgICAgIHRoaXMuc3RhdGVDaGFuZ2UuZW1pdCh7IC4uLnRoaXMuX3N0YXRlIH0pXG4gICAgfVxufVxuIl19