/**
 * WFDM Document Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CodeHierarchyListRsrc } from '../model/models';
import { CodeHierarchyRsrc } from '../model/models';
import { CodeTableListRsrc } from '../model/models';
import { CodeTableRsrc } from '../model/models';
import { EndpointsRsrc } from '../model/models';
import { FileCheckoutRsrc } from '../model/models';
import { FileDetailsRsrc } from '../model/models';
import { FileListRsrc } from '../model/models';
import { FormDataBodyPart } from '../model/models';
import { HealthCheckResponseRsrc } from '../model/models';
import { LockListRsrc } from '../model/models';
import { LockRsrc } from '../model/models';
import { Configuration } from '../configuration';
export declare class DefaultService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * @param documentId The documentId of the Document resource.
     * @param fileCheckoutRsrc The Checkout rsrc
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addDocumentCheckout(documentId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileCheckoutRsrc>;
    addDocumentCheckout(documentId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileCheckoutRsrc>>;
    addDocumentCheckout(documentId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileCheckoutRsrc>>;
    /**
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param lockId The lockId being updated.
     * @param requestBody fileid of file to add
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addFilesToLock(ifMatch: string, lockId: string, requestBody: Array<string>, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<LockRsrc>;
    addFilesToLock(ifMatch: string, lockId: string, requestBody: Array<string>, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<LockRsrc>>;
    addFilesToLock(ifMatch: string, lockId: string, requestBody: Array<string>, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<LockRsrc>>;
    /**
     * @param lockRsrc The lock rsrc
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addLock(lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<LockRsrc>;
    addLock(lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<LockRsrc>>;
    addLock(lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<LockRsrc>>;
    /**
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param documentId The documentId of the Document resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param targetFilePath The target file path for the copy.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    copyDocument(ifMatch: string, documentId: string, restVersion?: number, targetFilePath?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileDetailsRsrc>;
    copyDocument(ifMatch: string, documentId: string, restVersion?: number, targetFilePath?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileDetailsRsrc>>;
    copyDocument(ifMatch: string, documentId: string, restVersion?: number, targetFilePath?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileDetailsRsrc>>;
    /**
     * Delete Document by Document ID
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param documentId The documentId of the Document resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param recursiveInd Is the delete recursive?
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteDocumentByDocumentID(ifMatch: string, documentId: string, restVersion?: number, recursiveInd?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteDocumentByDocumentID(ifMatch: string, documentId: string, restVersion?: number, recursiveInd?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteDocumentByDocumentID(ifMatch: string, documentId: string, restVersion?: number, recursiveInd?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete a document checkout
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param documentId The documentId being updated.
     * @param documentCheckoutId The documentCheckoutId of the checkout resource.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Delete a lock
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param lockId The lockId of the lock resource.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteLock(ifMatch: string, lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<any>;
    deleteLock(ifMatch: string, lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<any>>;
    deleteLock(ifMatch: string, lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<any>>;
    /**
     * Get Code Hierarchy List Resource
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param codeHierarchyName Filter the results by the codeHierarchyName.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeHierarchyListRsrc>;
    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeHierarchyListRsrc>>;
    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeHierarchyListRsrc>>;
    /**
     * Get CodeHierarchy resource by code table name.
     * @param codeHierarchyName The identifier of the CodeHierarchy resource.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeHierarchyRsrc>;
    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeHierarchyRsrc>>;
    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeHierarchyRsrc>>;
    /**
     * Get Code Table List Resource
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param codeTableName Filter the results by the codeTableName.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeTableListRsrc>;
    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeTableListRsrc>>;
    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeTableListRsrc>>;
    /**
     * Get CodeTable resource by code table name.
     * @param codeTableName The identifier of the CodeTable resource.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeTableRsrc>;
    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeTableRsrc>>;
    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeTableRsrc>>;
    /**
     * @param documentId The documentId of the Document resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDocumentById(documentId: string, restVersion?: number, cacheControl?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileDetailsRsrc>;
    getDocumentById(documentId: string, restVersion?: number, cacheControl?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileDetailsRsrc>>;
    getDocumentById(documentId: string, restVersion?: number, cacheControl?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileDetailsRsrc>>;
    /**
     * @param documentId The documentId of the Document resource.
     * @param documentCheckoutId The documentCheckoutId of the checkout resource.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDocumentCheckout(documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileCheckoutRsrc>;
    getDocumentCheckout(documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileCheckoutRsrc>>;
    getDocumentCheckout(documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileCheckoutRsrc>>;
    /**
     * Get Document Checkout List
     * @param documentId The document resource id.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDocumentCheckoutList(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileListRsrc>;
    getDocumentCheckoutList(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileListRsrc>>;
    getDocumentCheckoutList(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileListRsrc>>;
    /**
     * @param documentId The documentId of the Document resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param versionNumber The versionId of the Document resource.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDocumentFileBytesById(documentId: string, restVersion?: number, versionNumber?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<string>;
    getDocumentFileBytesById(documentId: string, restVersion?: number, versionNumber?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpResponse<string>>;
    getDocumentFileBytesById(documentId: string, restVersion?: number, versionNumber?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: '*/*';
    }): Observable<HttpEvent<string>>;
    /**
     * Get Document List
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param parentId Parent Id
     * @param recursive ChildrenRecursive
     * @param lockId Lock Id
     * @param metadata metadata
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDocumentList(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, parentId?: string, recursive?: string, lockId?: string, metadata?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileListRsrc>;
    getDocumentList(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, parentId?: string, recursive?: string, lockId?: string, metadata?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileListRsrc>>;
    getDocumentList(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, parentId?: string, recursive?: string, lockId?: string, metadata?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileListRsrc>>;
    /**
     * @param documentId The documentId of the Document resource.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDocumentLock(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<LockListRsrc>;
    getDocumentLock(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<LockListRsrc>>;
    getDocumentLock(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<LockListRsrc>>;
    /**
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param searchText searchText
     * @param pageNumber The page number of the results to be returned.
     * @param pageRowCount The number of results per page.
     * @param orderBy Comma separated list of property names to order the result set by.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getListOfLocks(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<LockListRsrc>;
    getListOfLocks(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<LockListRsrc>>;
    getListOfLocks(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<LockListRsrc>>;
    /**
     * @param lockId The lockId of the lock resource.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getLock(lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<LockRsrc>;
    getLock(lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<LockRsrc>>;
    getLock(lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<LockRsrc>>;
    /**
     * Get Swagger Document
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSwaggerDocument(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<EndpointsRsrc>;
    getSwaggerDocument(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<EndpointsRsrc>>;
    getSwaggerDocument(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<EndpointsRsrc>>;
    /**
     * Get Top Level Resources
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getTopLevelResources(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<EndpointsRsrc>;
    getTopLevelResources(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<EndpointsRsrc>>;
    getTopLevelResources(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<EndpointsRsrc>>;
    /**
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param documentId The documentId of the Document resource.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param newFilePath The new file path of the File.
     * @param recursiveInd Is the delete recursive?
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    moveDocument(ifMatch: string, documentId: string, restVersion?: number, newFilePath?: string, recursiveInd?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileDetailsRsrc>;
    moveDocument(ifMatch: string, documentId: string, restVersion?: number, newFilePath?: string, recursiveInd?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileDetailsRsrc>>;
    moveDocument(ifMatch: string, documentId: string, restVersion?: number, newFilePath?: string, recursiveInd?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileDetailsRsrc>>;
    /**
     * Query the health of the service.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param callstack A comm separated list of the identifier of the calling components.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HealthCheckResponseRsrc>;
    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<HealthCheckResponseRsrc>>;
    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<HealthCheckResponseRsrc>>;
    /**
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param lockId The lockId being updated.
     * @param body fileId of file to remove
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    removeFileFromLock(ifMatch: string, lockId: string, body: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<LockRsrc>;
    removeFileFromLock(ifMatch: string, lockId: string, body: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<LockRsrc>>;
    removeFileFromLock(ifMatch: string, lockId: string, body: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<LockRsrc>>;
    /**
     * Update CodeHierarchy by code table name.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param codeHierarchyName The identifier of the CodeHierarchy resource.
     * @param codeHierarchyRsrc The CodeHierarchy resource containing the new values.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeHierarchyRsrc>;
    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeHierarchyRsrc>>;
    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeHierarchyRsrc>>;
    /**
     * Update CodeTable by code table name.
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param codeTableName The identifier of the CodeTable resource.
     * @param codeTableRsrc The CodeTable resource containing the new values.
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<CodeTableRsrc>;
    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<CodeTableRsrc>>;
    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<CodeTableRsrc>>;
    /**
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param documentId The documentId of the Document resource.
     * @param resource
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateDocument1(ifMatch: string, documentId: string, resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileDetailsRsrc>;
    updateDocument1(ifMatch: string, documentId: string, resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileDetailsRsrc>>;
    updateDocument1(ifMatch: string, documentId: string, resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileDetailsRsrc>>;
    /**
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param documentId The checkoutId being updated.
     * @param documentCheckoutId The documentCheckoutId of the checkout resource.
     * @param fileCheckoutRsrc The new values in checkoutRsrc
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileCheckoutRsrc>;
    updateDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileCheckoutRsrc>>;
    updateDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileCheckoutRsrc>>;
    /**
     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.
     * @param lockId The lockId being updated.
     * @param lockRsrc The new values in lock rsrc
     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param cacheControl Used to specify directives for caches along the request-response chain
     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.
     * @param authorization Contains the credentials to authenticate a user agent with a server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateLock(ifMatch: string, lockId: string, lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<LockRsrc>;
    updateLock(ifMatch: string, lockId: string, lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<LockRsrc>>;
    updateLock(ifMatch: string, lockId: string, lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<LockRsrc>>;
    /**
     * Add Document Resource to the List of Document resources
     * @param resource
     * @param restVersion The version of the Rest API supported by the requesting client.
     * @param file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    uploadDocument(resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<FileDetailsRsrc>;
    uploadDocument(resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpResponse<FileDetailsRsrc>>;
    uploadDocument(resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/xml';
    }): Observable<HttpEvent<FileDetailsRsrc>>;
}
