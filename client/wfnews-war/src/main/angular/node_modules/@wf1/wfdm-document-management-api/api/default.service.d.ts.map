{"version":3,"file":"default.service.d.ts","sources":["default.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * WFDM Document Management API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.2.0-SNAPSHOT\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CodeHierarchyListRsrc } from '../model/models';\nimport { CodeHierarchyRsrc } from '../model/models';\nimport { CodeTableListRsrc } from '../model/models';\nimport { CodeTableRsrc } from '../model/models';\nimport { EndpointsRsrc } from '../model/models';\nimport { FileCheckoutRsrc } from '../model/models';\nimport { FileDetailsRsrc } from '../model/models';\nimport { FileListRsrc } from '../model/models';\nimport { FormDataBodyPart } from '../model/models';\nimport { HealthCheckResponseRsrc } from '../model/models';\nimport { LockListRsrc } from '../model/models';\nimport { LockRsrc } from '../model/models';\nimport { Configuration } from '../configuration';\nexport declare class DefaultService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: Configuration;\n    encoder: HttpParameterCodec;\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm;\n    private addToHttpParams;\n    private addToHttpParamsRecursive;\n    /**\n     * @param documentId The documentId of the Document resource.\n     * @param fileCheckoutRsrc The Checkout rsrc\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    addDocumentCheckout(documentId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileCheckoutRsrc>;\n    addDocumentCheckout(documentId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileCheckoutRsrc>>;\n    addDocumentCheckout(documentId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileCheckoutRsrc>>;\n    /**\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param lockId The lockId being updated.\n     * @param requestBody fileid of file to add\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    addFilesToLock(ifMatch: string, lockId: string, requestBody: Array<string>, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<LockRsrc>;\n    addFilesToLock(ifMatch: string, lockId: string, requestBody: Array<string>, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<LockRsrc>>;\n    addFilesToLock(ifMatch: string, lockId: string, requestBody: Array<string>, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<LockRsrc>>;\n    /**\n     * @param lockRsrc The lock rsrc\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    addLock(lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<LockRsrc>;\n    addLock(lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<LockRsrc>>;\n    addLock(lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<LockRsrc>>;\n    /**\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param documentId The documentId of the Document resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param targetFilePath The target file path for the copy.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    copyDocument(ifMatch: string, documentId: string, restVersion?: number, targetFilePath?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileDetailsRsrc>;\n    copyDocument(ifMatch: string, documentId: string, restVersion?: number, targetFilePath?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileDetailsRsrc>>;\n    copyDocument(ifMatch: string, documentId: string, restVersion?: number, targetFilePath?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileDetailsRsrc>>;\n    /**\n     * Delete Document by Document ID\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param documentId The documentId of the Document resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param recursiveInd Is the delete recursive?\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteDocumentByDocumentID(ifMatch: string, documentId: string, restVersion?: number, recursiveInd?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteDocumentByDocumentID(ifMatch: string, documentId: string, restVersion?: number, recursiveInd?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteDocumentByDocumentID(ifMatch: string, documentId: string, restVersion?: number, recursiveInd?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete a document checkout\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param documentId The documentId being updated.\n     * @param documentCheckoutId The documentCheckoutId of the checkout resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Delete a lock\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param lockId The lockId of the lock resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    deleteLock(ifMatch: string, lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<any>;\n    deleteLock(ifMatch: string, lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<any>>;\n    deleteLock(ifMatch: string, lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<any>>;\n    /**\n     * Get Code Hierarchy List Resource\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeHierarchyName Filter the results by the codeHierarchyName.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeHierarchyListRsrc>;\n    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeHierarchyListRsrc>>;\n    getCodeHierarchyListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeHierarchyName?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeHierarchyListRsrc>>;\n    /**\n     * Get CodeHierarchy resource by code table name.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeHierarchyRsrc>;\n    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeHierarchyRsrc>>;\n    getCodeHierarchyResourceByCodeTableName(codeHierarchyName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeHierarchyRsrc>>;\n    /**\n     * Get Code Table List Resource\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param codeTableName Filter the results by the codeTableName.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeTableListRsrc>;\n    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeTableListRsrc>>;\n    getCodeTableListResource(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, codeTableName?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeTableListRsrc>>;\n    /**\n     * Get CodeTable resource by code table name.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param effectiveAsOfDate Return the results as of the effectiveAsOfDate.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeTableRsrc>;\n    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeTableRsrc>>;\n    getCodeTableResourceByCodeTableName(codeTableName: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, effectiveAsOfDate?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeTableRsrc>>;\n    /**\n     * @param documentId The documentId of the Document resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getDocumentById(documentId: string, restVersion?: number, cacheControl?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileDetailsRsrc>;\n    getDocumentById(documentId: string, restVersion?: number, cacheControl?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileDetailsRsrc>>;\n    getDocumentById(documentId: string, restVersion?: number, cacheControl?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileDetailsRsrc>>;\n    /**\n     * @param documentId The documentId of the Document resource.\n     * @param documentCheckoutId The documentCheckoutId of the checkout resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getDocumentCheckout(documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileCheckoutRsrc>;\n    getDocumentCheckout(documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileCheckoutRsrc>>;\n    getDocumentCheckout(documentId: string, documentCheckoutId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileCheckoutRsrc>>;\n    /**\n     * Get Document Checkout List\n     * @param documentId The document resource id.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getDocumentCheckoutList(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileListRsrc>;\n    getDocumentCheckoutList(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileListRsrc>>;\n    getDocumentCheckoutList(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileListRsrc>>;\n    /**\n     * @param documentId The documentId of the Document resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param versionNumber The versionId of the Document resource.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getDocumentFileBytesById(documentId: string, restVersion?: number, versionNumber?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<string>;\n    getDocumentFileBytesById(documentId: string, restVersion?: number, versionNumber?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpResponse<string>>;\n    getDocumentFileBytesById(documentId: string, restVersion?: number, versionNumber?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: '*/*';\n    }): Observable<HttpEvent<string>>;\n    /**\n     * Get Document List\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param parentId Parent Id\n     * @param recursive ChildrenRecursive\n     * @param lockId Lock Id\n     * @param metadata metadata\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getDocumentList(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, parentId?: string, recursive?: string, lockId?: string, metadata?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileListRsrc>;\n    getDocumentList(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, parentId?: string, recursive?: string, lockId?: string, metadata?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileListRsrc>>;\n    getDocumentList(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, parentId?: string, recursive?: string, lockId?: string, metadata?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileListRsrc>>;\n    /**\n     * @param documentId The documentId of the Document resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getDocumentLock(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<LockListRsrc>;\n    getDocumentLock(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<LockListRsrc>>;\n    getDocumentLock(documentId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<LockListRsrc>>;\n    /**\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param searchText searchText\n     * @param pageNumber The page number of the results to be returned.\n     * @param pageRowCount The number of results per page.\n     * @param orderBy Comma separated list of property names to order the result set by.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getListOfLocks(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<LockListRsrc>;\n    getListOfLocks(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<LockListRsrc>>;\n    getListOfLocks(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, searchText?: Array<string>, pageNumber?: string, pageRowCount?: string, orderBy?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<LockListRsrc>>;\n    /**\n     * @param lockId The lockId of the lock resource.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getLock(lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<LockRsrc>;\n    getLock(lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<LockRsrc>>;\n    getLock(lockId: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<LockRsrc>>;\n    /**\n     * Get Swagger Document\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getSwaggerDocument(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<EndpointsRsrc>;\n    getSwaggerDocument(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<EndpointsRsrc>>;\n    getSwaggerDocument(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<EndpointsRsrc>>;\n    /**\n     * Get Top Level Resources\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getTopLevelResources(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<EndpointsRsrc>;\n    getTopLevelResources(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<EndpointsRsrc>>;\n    getTopLevelResources(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<EndpointsRsrc>>;\n    /**\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param documentId The documentId of the Document resource.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param newFilePath The new file path of the File.\n     * @param recursiveInd Is the delete recursive?\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    moveDocument(ifMatch: string, documentId: string, restVersion?: number, newFilePath?: string, recursiveInd?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileDetailsRsrc>;\n    moveDocument(ifMatch: string, documentId: string, restVersion?: number, newFilePath?: string, recursiveInd?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileDetailsRsrc>>;\n    moveDocument(ifMatch: string, documentId: string, restVersion?: number, newFilePath?: string, recursiveInd?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileDetailsRsrc>>;\n    /**\n     * Query the health of the service.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param callstack A comm separated list of the identifier of the calling components.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HealthCheckResponseRsrc>;\n    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<HealthCheckResponseRsrc>>;\n    queryTheHealthOfTheService(requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, callstack?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<HealthCheckResponseRsrc>>;\n    /**\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param lockId The lockId being updated.\n     * @param body fileId of file to remove\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    removeFileFromLock(ifMatch: string, lockId: string, body: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<LockRsrc>;\n    removeFileFromLock(ifMatch: string, lockId: string, body: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<LockRsrc>>;\n    removeFileFromLock(ifMatch: string, lockId: string, body: string, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<LockRsrc>>;\n    /**\n     * Update CodeHierarchy by code table name.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param codeHierarchyName The identifier of the CodeHierarchy resource.\n     * @param codeHierarchyRsrc The CodeHierarchy resource containing the new values.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeHierarchyRsrc>;\n    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeHierarchyRsrc>>;\n    updateCodeHierarchyResourceByCodeTableName(ifMatch: string, codeHierarchyName: string, codeHierarchyRsrc: CodeHierarchyRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeHierarchyRsrc>>;\n    /**\n     * Update CodeTable by code table name.\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param codeTableName The identifier of the CodeTable resource.\n     * @param codeTableRsrc The CodeTable resource containing the new values.\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<CodeTableRsrc>;\n    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<CodeTableRsrc>>;\n    updateCodeTableResourceByCodeTableName(ifMatch: string, codeTableName: string, codeTableRsrc: CodeTableRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<CodeTableRsrc>>;\n    /**\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param documentId The documentId of the Document resource.\n     * @param resource\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param file\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateDocument1(ifMatch: string, documentId: string, resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileDetailsRsrc>;\n    updateDocument1(ifMatch: string, documentId: string, resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileDetailsRsrc>>;\n    updateDocument1(ifMatch: string, documentId: string, resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileDetailsRsrc>>;\n    /**\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param documentId The checkoutId being updated.\n     * @param documentCheckoutId The documentCheckoutId of the checkout resource.\n     * @param fileCheckoutRsrc The new values in checkoutRsrc\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileCheckoutRsrc>;\n    updateDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileCheckoutRsrc>>;\n    updateDocumentCheckout(ifMatch: string, documentId: string, documentCheckoutId: string, fileCheckoutRsrc: FileCheckoutRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileCheckoutRsrc>>;\n    /**\n     * @param ifMatch The If-Match request-header must match the current eTag of the resource or the request will fail.\n     * @param lockId The lockId being updated.\n     * @param lockRsrc The new values in lock rsrc\n     * @param requestId The unique identity of the request assigned by the originator to help trace the request through the logs.\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param cacheControl Used to specify directives for caches along the request-response chain\n     * @param pragma An implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present.\n     * @param authorization Contains the credentials to authenticate a user agent with a server.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateLock(ifMatch: string, lockId: string, lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<LockRsrc>;\n    updateLock(ifMatch: string, lockId: string, lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<LockRsrc>>;\n    updateLock(ifMatch: string, lockId: string, lockRsrc: LockRsrc, requestId?: string, restVersion?: number, cacheControl?: string, pragma?: string, authorization?: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<LockRsrc>>;\n    /**\n     * Add Document Resource to the List of Document resources\n     * @param resource\n     * @param restVersion The version of the Rest API supported by the requesting client.\n     * @param file\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    uploadDocument(resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<FileDetailsRsrc>;\n    uploadDocument(resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpResponse<FileDetailsRsrc>>;\n    uploadDocument(resource: FileDetailsRsrc, restVersion?: number, file?: FormDataBodyPart, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/xml';\n    }): Observable<HttpEvent<FileDetailsRsrc>>;\n}\n"]}