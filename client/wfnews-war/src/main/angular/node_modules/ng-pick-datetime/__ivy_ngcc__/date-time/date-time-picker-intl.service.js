import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var OwlDateTimeIntl = (function () {
    function OwlDateTimeIntl() {
        this.changes = new Subject();
        this.upSecondLabel = 'Add a second';
        this.downSecondLabel = 'Minus a second';
        this.upMinuteLabel = 'Add a minute';
        this.downMinuteLabel = 'Minus a minute';
        this.upHourLabel = 'Add a hour';
        this.downHourLabel = 'Minus a hour';
        this.prevMonthLabel = 'Previous month';
        this.nextMonthLabel = 'Next month';
        this.prevYearLabel = 'Previous year';
        this.nextYearLabel = 'Next year';
        this.prevMultiYearLabel = 'Previous 21 years';
        this.nextMultiYearLabel = 'Next 21 years';
        this.switchToMonthViewLabel = 'Change to month view';
        this.switchToMultiYearViewLabel = 'Choose month and year';
        this.cancelBtnLabel = 'Cancel';
        this.setBtnLabel = 'Set';
        this.rangeFromLabel = 'From';
        this.rangeToLabel = 'To';
        this.hour12AMLabel = 'AM';
        this.hour12PMLabel = 'PM';
    }
    OwlDateTimeIntl.ngInjectableDef = i0.defineInjectable({ factory: function OwlDateTimeIntl_Factory() { return new OwlDateTimeIntl(); }, token: OwlDateTimeIntl, providedIn: "root" });
OwlDateTimeIntl.ɵfac = function OwlDateTimeIntl_Factory(t) { return new (t || OwlDateTimeIntl)(); };
OwlDateTimeIntl.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OwlDateTimeIntl, factory: function (t) { return OwlDateTimeIntl.ɵfac(t); }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OwlDateTimeIntl, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return OwlDateTimeIntl;
}());
export { OwlDateTimeIntl };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLXBpY2tlci1pbnRsLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbImRhdGUtdGltZS1waWNrZXItaW50bC5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FHTTtBQUNOOzs7Ozs7Z0RBQXlMO0FBQ3pMO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCAqIGFzIGkwIGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG52YXIgT3dsRGF0ZVRpbWVJbnRsID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPd2xEYXRlVGltZUludGwoKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgIHRoaXMudXBTZWNvbmRMYWJlbCA9ICdBZGQgYSBzZWNvbmQnO1xuICAgICAgICB0aGlzLmRvd25TZWNvbmRMYWJlbCA9ICdNaW51cyBhIHNlY29uZCc7XG4gICAgICAgIHRoaXMudXBNaW51dGVMYWJlbCA9ICdBZGQgYSBtaW51dGUnO1xuICAgICAgICB0aGlzLmRvd25NaW51dGVMYWJlbCA9ICdNaW51cyBhIG1pbnV0ZSc7XG4gICAgICAgIHRoaXMudXBIb3VyTGFiZWwgPSAnQWRkIGEgaG91cic7XG4gICAgICAgIHRoaXMuZG93bkhvdXJMYWJlbCA9ICdNaW51cyBhIGhvdXInO1xuICAgICAgICB0aGlzLnByZXZNb250aExhYmVsID0gJ1ByZXZpb3VzIG1vbnRoJztcbiAgICAgICAgdGhpcy5uZXh0TW9udGhMYWJlbCA9ICdOZXh0IG1vbnRoJztcbiAgICAgICAgdGhpcy5wcmV2WWVhckxhYmVsID0gJ1ByZXZpb3VzIHllYXInO1xuICAgICAgICB0aGlzLm5leHRZZWFyTGFiZWwgPSAnTmV4dCB5ZWFyJztcbiAgICAgICAgdGhpcy5wcmV2TXVsdGlZZWFyTGFiZWwgPSAnUHJldmlvdXMgMjEgeWVhcnMnO1xuICAgICAgICB0aGlzLm5leHRNdWx0aVllYXJMYWJlbCA9ICdOZXh0IDIxIHllYXJzJztcbiAgICAgICAgdGhpcy5zd2l0Y2hUb01vbnRoVmlld0xhYmVsID0gJ0NoYW5nZSB0byBtb250aCB2aWV3JztcbiAgICAgICAgdGhpcy5zd2l0Y2hUb011bHRpWWVhclZpZXdMYWJlbCA9ICdDaG9vc2UgbW9udGggYW5kIHllYXInO1xuICAgICAgICB0aGlzLmNhbmNlbEJ0bkxhYmVsID0gJ0NhbmNlbCc7XG4gICAgICAgIHRoaXMuc2V0QnRuTGFiZWwgPSAnU2V0JztcbiAgICAgICAgdGhpcy5yYW5nZUZyb21MYWJlbCA9ICdGcm9tJztcbiAgICAgICAgdGhpcy5yYW5nZVRvTGFiZWwgPSAnVG8nO1xuICAgICAgICB0aGlzLmhvdXIxMkFNTGFiZWwgPSAnQU0nO1xuICAgICAgICB0aGlzLmhvdXIxMlBNTGFiZWwgPSAnUE0nO1xuICAgIH1cbiAgICBPd2xEYXRlVGltZUludGwuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlLCBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfSxdIH0sXG4gICAgXTtcbiAgICBPd2xEYXRlVGltZUludGwubmdJbmplY3RhYmxlRGVmID0gaTAuZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE93bERhdGVUaW1lSW50bF9GYWN0b3J5KCkgeyByZXR1cm4gbmV3IE93bERhdGVUaW1lSW50bCgpOyB9LCB0b2tlbjogT3dsRGF0ZVRpbWVJbnRsLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcbiAgICByZXR1cm4gT3dsRGF0ZVRpbWVJbnRsO1xufSgpKTtcbmV4cG9ydCB7IE93bERhdGVUaW1lSW50bCB9O1xuIl19