{"version":3,"file":"native-date-time-adapter.class.d.ts","sources":["native-date-time-adapter.class.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Platform } from '@angular/cdk/platform';\nimport { DateTimeAdapter } from './date-time-adapter.class';\nexport declare class NativeDateTimeAdapter extends DateTimeAdapter<Date> {\n    private owlDateTimeLocale;\n    private readonly _clampDate;\n    useUtcForDisplay: boolean;\n    constructor(owlDateTimeLocale: string, platform: Platform);\n    getYear(date: Date): number;\n    getMonth(date: Date): number;\n    getDay(date: Date): number;\n    getDate(date: Date): number;\n    getHours(date: Date): number;\n    getMinutes(date: Date): number;\n    getSeconds(date: Date): number;\n    getTime(date: Date): number;\n    getNumDaysInMonth(date: Date): number;\n    differenceInCalendarDays(dateLeft: Date, dateRight: Date): number;\n    getYearName(date: Date): string;\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDateNames(): string[];\n    toIso8601(date: Date): string;\n    isEqual(dateLeft: Date, dateRight: Date): boolean;\n    isSameDay(dateLeft: Date, dateRight: Date): boolean;\n    isValid(date: Date): boolean;\n    invalid(): Date;\n    isDateInstance(obj: any): boolean;\n    addCalendarYears(date: Date, amount: number): Date;\n    addCalendarMonths(date: Date, amount: number): Date;\n    addCalendarDays(date: Date, amount: number): Date;\n    setHours(date: Date, amount: number): Date;\n    setMinutes(date: Date, amount: number): Date;\n    setSeconds(date: Date, amount: number): Date;\n    createDate(year: number, month: number, date: number, hours?: number, minutes?: number, seconds?: number): Date;\n    clone(date: Date): Date;\n    now(): Date;\n    format(date: Date, displayFormat: any): string;\n    parse(value: any, parseFormat: any): Date | null;\n    deserialize(value: any): Date | null;\n    private createDateWithOverflow(year, month, date, hours?, minutes?, seconds?);\n    private stripDirectionalityCharacters(str);\n    private _format(dtf, date);\n}\n"]}