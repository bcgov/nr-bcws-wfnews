{"version":3,"file":"date-time-picker-input.directive.d.ts","sources":["date-time-picker-input.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { OwlDateTimeComponent } from './date-time-picker.component';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\nimport { SelectMode } from './date-time.class';\nexport declare const OWL_DATETIME_VALUE_ACCESSOR: any;\nexport declare const OWL_DATETIME_VALIDATORS: any;\nexport declare class OwlDateTimeInputDirective<T> implements OnInit, AfterContentInit, OnDestroy, ControlValueAccessor, Validator {\n    private elmRef;\n    private renderer;\n    private dateTimeAdapter;\n    private dateTimeFormats;\n    owlDateTime: OwlDateTimeComponent<T>;\n    owlDateTimeFilter: (date: T | null) => boolean;\n    private _dateTimeFilter;\n    readonly dateTimeFilter: (date: T) => boolean;\n    private _disabled;\n    disabled: boolean;\n    private _min;\n    min: T | null;\n    private _max;\n    max: T | null;\n    private _selectMode;\n    selectMode: SelectMode;\n    rangeSeparator: string;\n    private _value;\n    value: T | null;\n    private _values;\n    values: T[];\n    dateTimeChange: EventEmitter<any>;\n    dateTimeInput: EventEmitter<any>;\n    readonly elementRef: ElementRef;\n    readonly isInSingleMode: boolean;\n    readonly isInRangeMode: boolean;\n    dtPicker: OwlDateTimeComponent<T>;\n    private dtPickerSub;\n    private localeSub;\n    private lastValueValid;\n    private onModelChange;\n    private onModelTouched;\n    private validatorOnChange;\n    private parseValidator;\n    private minValidator;\n    private maxValidator;\n    private filterValidator;\n    private rangeValidator;\n    private validator;\n    valueChange: EventEmitter<T | T[]>;\n    disabledChange: EventEmitter<boolean>;\n    readonly owlDateTimeInputAriaHaspopup: boolean;\n    readonly owlDateTimeInputAriaOwns: string;\n    readonly minIso8601: string;\n    readonly maxIso8601: string;\n    readonly owlDateTimeInputDisabled: boolean;\n    constructor(elmRef: ElementRef, renderer: Renderer2, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    validate(c: AbstractControl): {\n        [key: string]: any;\n    };\n    registerOnValidatorChange(fn: () => void): void;\n    handleKeydownOnHost(event: KeyboardEvent): void;\n    handleBlurOnHost(event: Event): void;\n    handleInputOnHost(event: any): void;\n    handleChangeOnHost(event: any): void;\n    formatNativeInputValue(): void;\n    private registerDateTimePicker(picker);\n    private getValidDate(obj);\n    private convertTimeStringToDateTimeString(timeString, dateTime);\n    private changeInputInSingleMode(inputValue);\n    private changeInputInRangeFromToMode(inputValue);\n    private changeInputInRangeMode(inputValue);\n    private isSameValue(first, second);\n}\n"]}