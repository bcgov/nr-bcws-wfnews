{"version":3,"file":"date-time.class.d.ts","sources":["date-time.class.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nimport { OwlDateTimeFormats } from './adapter/date-time-format.class';\nexport declare type PickerType = 'both' | 'calendar' | 'timer';\nexport declare type PickerMode = 'popup' | 'dialog' | 'inline';\nexport declare type SelectMode = 'single' | 'range' | 'rangeFrom' | 'rangeTo';\nexport declare abstract class OwlDateTime<T> {\n    protected dateTimeAdapter: DateTimeAdapter<T>;\n    protected dateTimeFormats: OwlDateTimeFormats;\n    private _showSecondsTimer;\n    showSecondsTimer: boolean;\n    private _hour12Timer;\n    hour12Timer: boolean;\n    startView: 'month' | 'year' | 'multi-years';\n    private _stepHour;\n    stepHour: number;\n    private _stepMinute;\n    stepMinute: number;\n    private _stepSecond;\n    stepSecond: number;\n    private _firstDayOfWeek;\n    firstDayOfWeek: number;\n    private _hideOtherMonths;\n    hideOtherMonths: boolean;\n    private _id;\n    readonly id: string;\n    readonly abstract selected: T | null;\n    readonly abstract selecteds: T[] | null;\n    readonly abstract dateTimeFilter: (date: T | null) => boolean;\n    readonly abstract maxDateTime: T | null;\n    readonly abstract minDateTime: T | null;\n    readonly abstract selectMode: SelectMode;\n    readonly abstract startAt: T | null;\n    readonly abstract opened: boolean;\n    readonly abstract pickerMode: PickerMode;\n    readonly abstract pickerType: PickerType;\n    readonly abstract isInSingleMode: boolean;\n    readonly abstract isInRangeMode: boolean;\n    abstract select(date: T | T[]): void;\n    abstract yearSelected: EventEmitter<T>;\n    abstract monthSelected: EventEmitter<T>;\n    abstract selectYear(normalizedYear: T): void;\n    abstract selectMonth(normalizedMonth: T): void;\n    readonly formatString: string;\n    dateTimeChecker: (dateTime: T) => boolean;\n    readonly disabled: boolean;\n    constructor(dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);\n    protected getValidDate(obj: any): T | null;\n}\n"]}