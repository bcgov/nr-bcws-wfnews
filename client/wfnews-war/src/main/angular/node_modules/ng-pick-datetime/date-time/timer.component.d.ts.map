{"version":3,"file":"timer.component.d.ts","sources":["timer.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnInit } from '@angular/core';\nimport { OwlDateTimeIntl } from './date-time-picker-intl.service';\nimport { DateTimeAdapter } from './adapter/date-time-adapter.class';\nexport declare class OwlTimerComponent<T> implements OnInit {\n    private ngZone;\n    private elmRef;\n    private pickerIntl;\n    private cdRef;\n    private dateTimeAdapter;\n    private _pickerMoment;\n    pickerMoment: T;\n    private _minDateTime;\n    minDateTime: T | null;\n    private _maxDateTime;\n    maxDateTime: T | null;\n    private isPM;\n    showSecondsTimer: boolean;\n    hour12Timer: boolean;\n    stepHour: number;\n    stepMinute: number;\n    stepSecond: number;\n    readonly hourValue: number;\n    readonly hourBoxValue: number;\n    readonly minuteValue: number;\n    readonly secondValue: number;\n    readonly upHourButtonLabel: string;\n    readonly downHourButtonLabel: string;\n    readonly upMinuteButtonLabel: string;\n    readonly downMinuteButtonLabel: string;\n    readonly upSecondButtonLabel: string;\n    readonly downSecondButtonLabel: string;\n    readonly hour12ButtonLabel: string;\n    selectedChange: EventEmitter<T>;\n    readonly owlDTTimerClass: boolean;\n    readonly owlDTTimeTabIndex: number;\n    constructor(ngZone: NgZone, elmRef: ElementRef, pickerIntl: OwlDateTimeIntl, cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>);\n    ngOnInit(): void;\n    focus(): void;\n    setHourValueViaInput(hours: number): void;\n    setHourValue(hours: number): void;\n    setMinuteValue(minutes: number): void;\n    setSecondValue(seconds: number): void;\n    setMeridiem(event: any): void;\n    upHourEnabled(): boolean;\n    downHourEnabled(): boolean;\n    upMinuteEnabled(): boolean;\n    downMinuteEnabled(): boolean;\n    upSecondEnabled(): boolean;\n    downSecondEnabled(): boolean;\n    private compareHours(amount, comparedDate);\n    private compareMinutes(amount, comparedDate);\n    private compareSeconds(amount, comparedDate);\n    private getValidDate(obj);\n}\n"]}