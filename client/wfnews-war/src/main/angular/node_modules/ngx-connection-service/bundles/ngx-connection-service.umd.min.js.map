{"version":3,"sources":["ng://ngx-connection-service/lib/connection-service.service.ts","ng://ngx-connection-service/lib/connection-service.module.ts"],"sourcesContent":["import {EventEmitter, Inject, Injectable, InjectionToken, OnDestroy, Optional} from '@angular/core';\nimport {fromEvent, Observable, Subscription, timer} from 'rxjs';\nimport {debounceTime, delay, retryWhen, startWith, switchMap, tap} from 'rxjs/operators';\nimport {HttpClient} from '@angular/common/http';\nimport * as _ from 'lodash';\n\n/**\n * Instance of this interface is used to report current connection status.\n */\nexport interface ConnectionState {\n  /**\n   * \"True\" if browser has network connection. Determined by Window objects \"online\" / \"offline\" events.\n   */\n  hasNetworkConnection: boolean;\n  /**\n   * \"True\" if browser has Internet access. Determined by heartbeat system which periodically makes request to heartbeat Url.\n   */\n  hasInternetAccess: boolean;\n}\n\n/**\n * Instance of this interface could be used to configure \"ConnectionService\".\n */\nexport interface ConnectionServiceOptions {\n  /**\n   * Controls the Internet connectivity heartbeat system. Default value is 'true'.\n   */\n  enableHeartbeat?: boolean;\n  /**\n   * Url used for checking Internet connectivity, heartbeat system periodically makes \"HEAD\" requests to this URL to determine Internet\n   * connection status. Default value is \"//server.test-cors.org\".\n   */\n  heartbeatUrl?: string;\n  /**\n   * Callback function to used for executing heartbeat requests. Defaults to HttpClient.request(...) function.\n   */\n  heartbeatExecutor?: (options?: ConnectionServiceOptions) => Observable<any>;\n  /**\n   * Interval used to check Internet connectivity specified in milliseconds. Default value is \"30000\".\n   */\n  heartbeatInterval?: number;\n  /**\n   * Interval used to retry Internet connectivity checks when an error is detected (when no Internet connection). Default value is \"1000\".\n   */\n  heartbeatRetryInterval?: number;\n  /**\n   * HTTP method used for requesting heartbeat Url. Default is 'head'.\n   */\n  requestMethod?: 'get' | 'post' | 'head' | 'options';\n\n}\n\n/**\n * InjectionToken for specifing ConnectionService options.\n */\nexport const ConnectionServiceOptionsToken: InjectionToken<ConnectionServiceOptions> = new InjectionToken('ConnectionServiceOptionsToken');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectionService implements OnDestroy {\n  private static DEFAULT_OPTIONS: ConnectionServiceOptions = {\n    enableHeartbeat: true,\n    heartbeatUrl: '//server.test-cors.org/server?id=' + Date.now() + '&enable=true&status=200&credentials=false',\n    heartbeatInterval: 30000,\n    heartbeatRetryInterval: 1000,\n    requestMethod: 'head',\n  };\n\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\n\n  private currentState: ConnectionState = {\n    hasInternetAccess: false,\n    hasNetworkConnection: window.navigator.onLine\n  };\n  private offlineSubscription: Subscription;\n  private onlineSubscription: Subscription;\n  private httpSubscription: Subscription;\n  private serviceOptions: ConnectionServiceOptions;\n\n  /**\n   * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\n   * You should use \"updateOptions\" function.\n   */\n  get options(): ConnectionServiceOptions {\n    return _.clone(this.serviceOptions);\n  }\n\n  constructor(private http: HttpClient, @Inject(ConnectionServiceOptionsToken) @Optional() options: ConnectionServiceOptions) {\n    this.serviceOptions = _.defaults(\n      {},\n      options,\n      ConnectionService.DEFAULT_OPTIONS,\n      {\n        heartbeatExecutor: () => this.http.request(\n          this.serviceOptions.requestMethod,\n          this.serviceOptions.heartbeatUrl,\n          {responseType: 'text'}\n        ),\n      });\n\n    this.checkNetworkState();\n    this.checkInternetState();\n  }\n\n  private checkInternetState() {\n\n    if (!_.isNil(this.httpSubscription)) {\n      this.httpSubscription.unsubscribe();\n    }\n\n    if (this.serviceOptions.enableHeartbeat) {\n      this.httpSubscription = timer(0, this.serviceOptions.heartbeatInterval)\n        .pipe(\n          switchMap(() => this.serviceOptions.heartbeatExecutor(this.serviceOptions)),\n          retryWhen(errors =>\n            errors.pipe(\n              // log error message\n              tap(val => {\n                console.error('Http error:', val);\n                this.currentState.hasInternetAccess = false;\n                this.emitEvent();\n              }),\n              // restart after 5 seconds\n              delay(this.serviceOptions.heartbeatRetryInterval)\n            )\n          )\n        )\n        .subscribe(result => {\n          this.currentState.hasInternetAccess = true;\n          this.emitEvent();\n        });\n    } else {\n      this.currentState.hasInternetAccess = false;\n      this.emitEvent();\n    }\n  }\n\n  private checkNetworkState() {\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\n      this.currentState.hasNetworkConnection = true;\n      this.checkInternetState();\n      this.emitEvent();\n    });\n\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\n      this.currentState.hasNetworkConnection = false;\n      this.checkInternetState();\n      this.emitEvent();\n    });\n  }\n\n  private emitEvent() {\n    this.stateChangeEventEmitter.emit(this.currentState);\n  }\n\n  ngOnDestroy(): void {\n    try {\n      this.offlineSubscription.unsubscribe();\n      this.onlineSubscription.unsubscribe();\n      this.httpSubscription.unsubscribe();\n    } catch (e) {\n    }\n  }\n\n  /**\n   * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\n   * function will not report current status of the connections when initially subscribed.\n   * @param reportCurrentState Report current state when initial subscription. Default is \"true\"\n   */\n  monitor(reportCurrentState = true): Observable<ConnectionState> {\n    return reportCurrentState ?\n      this.stateChangeEventEmitter.pipe(\n        debounceTime(300),\n        startWith(this.currentState),\n      )\n      :\n      this.stateChangeEventEmitter.pipe(\n        debounceTime(300)\n      );\n  }\n\n  /**\n   * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\n   * option values.\n   * @param options Partial option values.\n   */\n  updateOptions(options: Partial<ConnectionServiceOptions>) {\n    this.serviceOptions = _.defaults({}, options, this.serviceOptions);\n    this.checkInternetState();\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {ConnectionService} from './connection-service.service';\nimport {HttpClientModule} from '@angular/common/http';\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [ConnectionService]\n})\nexport class ConnectionServiceModule {\n}\n"],"names":["ConnectionServiceOptionsToken","InjectionToken","ConnectionService","Object","defineProperty","prototype","_.clone","this","serviceOptions","checkInternetState","_this","_.isNil","httpSubscription","unsubscribe","enableHeartbeat","timer","heartbeatInterval","pipe","switchMap","heartbeatExecutor","retryWhen","errors","tap","val","console","error","currentState","hasInternetAccess","emitEvent","delay","heartbeatRetryInterval","subscribe","result","checkNetworkState","onlineSubscription","fromEvent","window","hasNetworkConnection","offlineSubscription","stateChangeEventEmitter","emit","ngOnDestroy","e","monitor","reportCurrentState","debounceTime","startWith","updateOptions","options","_.defaults","DEFAULT_OPTIONS","heartbeatUrl","Date","now","requestMethod","Injectable","args","providedIn","HttpClient","Inject","type","Optional","http","EventEmitter","navigator","onLine","request","responseType","ConnectionServiceModule","NgModule","imports","HttpClientModule","providers"],"mappings":"meAuDA,IAAaA,EAA0E,IAAIC,EAAAA,eAAe,iCAE1GC,GA2BEC,OAAAC,eAAIF,EAAAG,UAAA,UAAO,C,IAAX,WACE,OAAOC,EAAAA,MAAQC,KAAKC,iB,gCAoBdN,EAAAG,UAAAI,mBAAR,WAAA,IAAAC,EAAAH,KAEOI,EAAAA,MAAQJ,KAAKK,mBAChBL,KAAKK,iBAAiBC,cAGpBN,KAAKC,eAAeM,gBACtBP,KAAKK,iBAAmBG,EAAAA,MAAM,EAAGR,KAAKC,eAAeQ,mBAClDC,KACCC,EAAAA,UAAS,WAAO,OAAAR,EAAKF,eAAeW,kBAAkBT,EAAKF,kBAC3DY,EAAAA,UAAS,SAACC,GACR,OAAAA,EAAOJ,KAELK,EAAAA,IAAG,SAACC,GACFC,QAAQC,MAAM,cAAeF,GAC7Bb,EAAKgB,aAAaC,mBAAoB,EACtCjB,EAAKkB,cAGPC,EAAAA,MAAMnB,EAAKF,eAAesB,4BAI/BC,UAAS,SAACC,GACTtB,EAAKgB,aAAaC,mBAAoB,EACtCjB,EAAKkB,eAGTrB,KAAKmB,aAAaC,mBAAoB,EACtCpB,KAAKqB,cAID1B,EAAAG,UAAA4B,kBAAR,WAAA,IAAAvB,EAAAH,KACEA,KAAK2B,mBAAqBC,EAAAA,UAAUC,OAAQ,UAAUL,UAAS,WAC7DrB,EAAKgB,aAAaW,sBAAuB,EACzC3B,EAAKD,qBACLC,EAAKkB,cAGPrB,KAAK+B,oBAAsBH,EAAAA,UAAUC,OAAQ,WAAWL,UAAS,WAC/DrB,EAAKgB,aAAaW,sBAAuB,EACzC3B,EAAKD,qBACLC,EAAKkB,eAID1B,EAAAG,UAAAuB,UAAR,WACErB,KAAKgC,wBAAwBC,KAAKjC,KAAKmB,eAGzCxB,EAAAG,UAAAoC,YAAA,WACE,IACElC,KAAK+B,oBAAoBzB,cACzBN,KAAK2B,mBAAmBrB,cACxBN,KAAKK,iBAAiBC,cACtB,MAAO6B,MASXxC,EAAAG,UAAAsC,QAAA,SAAQC,GACN,YADM,IAAAA,IAAAA,GAAA,GACCA,EACLrC,KAAKgC,wBAAwBtB,KAC3B4B,EAAAA,aAAa,KACbC,EAAAA,UAAUvC,KAAKmB,eAGjBnB,KAAKgC,wBAAwBtB,KAC3B4B,EAAAA,aAAa,OASnB3C,EAAAG,UAAA0C,cAAA,SAAcC,GACZzC,KAAKC,eAAiByC,EAAAA,SAAW,GAAID,EAASzC,KAAKC,gBACnDD,KAAKE,sBAhIQP,EAAAgD,gBAA4C,CACzDpC,iBAAiB,EACjBqC,aAAc,oCAAsCC,KAAKC,MAAQ,4CACjErC,kBAAmB,IACnBc,uBAAwB,IACxBwB,cAAe,Q,oBATlBC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,W,yCAvDNC,EAAAA,Y,kCAqFiCC,EAAAA,OAAMH,KAAA,CAACxD,IAA6B,CAAA4D,KAAGC,EAAAA,c,4IAA9E,SAAA3D,EAAoB4D,EAAqEd,GAAzF,IAAAtC,EAAAH,KAAoBA,KAAAuD,KAAAA,EAnBZvD,KAAAgC,wBAA0B,IAAIwB,EAAAA,aAE9BxD,KAAAmB,aAAgC,CACtCC,mBAAmB,EACnBU,qBAAsBD,OAAO4B,UAAUC,QAgBvC1D,KAAKC,eAAiByC,EAAAA,SACpB,GACAD,EACA9C,EAAkBgD,gBAClB,CACE/B,kBAAiB,WAAQ,OAAAT,EAAKoD,KAAKI,QACjCxD,EAAKF,eAAe8C,cACpB5C,EAAKF,eAAe2C,aACpB,CAACgB,aAAc,YAIrB5D,KAAK0B,oBACL1B,KAAKE,qBCtGT,IAAA2D,G,oBAICC,EAAAA,SAAQb,KAAA,CAAC,CACRc,QAAS,CAACC,EAAAA,kBACVC,UAAW,CAACtE,OAGdkE,GALA,SAAAA,K"}