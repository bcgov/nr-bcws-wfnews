{"version":3,"file":"mask-applier.service.d.ts","sources":["mask-applier.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IConfig } from './config';\nexport declare class MaskApplierService {\n    protected _config: IConfig;\n    dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    showTemplate: IConfig['showTemplate'];\n    clearIfNotMatch: IConfig['clearIfNotMatch'];\n    maskExpression: string;\n    maskSpecialCharacters: IConfig['specialCharacters'];\n    maskAvailablePatterns: IConfig['patterns'];\n    prefix: IConfig['prefix'];\n    sufix: IConfig['sufix'];\n    customPattern: IConfig['patterns'];\n    private _shift;\n    constructor(_config: IConfig);\n    applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string;\n    applyMask(inputValue: string, maskExpression: string, position?: number, cb?: Function): string;\n    _findSpecialChar(inputSymbol: string): undefined | string;\n    private _checkSymbolMask;\n}\n"]}