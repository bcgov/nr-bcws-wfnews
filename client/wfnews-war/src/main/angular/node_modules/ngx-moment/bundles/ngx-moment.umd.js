(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('moment')) :
	typeof define === 'function' && define.amd ? define('ngx-moment', ['exports', '@angular/core', 'moment'], factory) :
	(factory((global['ngx-moment'] = {}),global.ng.core,global.moment));
}(this, (function (exports,core,moment) { 'use strict';

var momentConstructor = moment;
var AddPipe = /** @class */ (function () {
    function AddPipe() {
    }
    AddPipe.prototype.transform = function (value, amount, unit) {
        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {
            throw new Error('AddPipe: missing required arguments');
        }
        return momentConstructor(value).add(amount, unit);
    };
    return AddPipe;
}());
AddPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amAdd' },] },
];
var momentConstructor$1 = moment;
var CalendarPipe = /** @class */ (function () {
    function CalendarPipe(cdRef, ngZone) {
        var _this = this;
        this.cdRef = cdRef;
        this.ngZone = ngZone;
        CalendarPipe.initTimer(ngZone);
        CalendarPipe.refs++;
        this.midnightSub = CalendarPipe.midnight.subscribe(function () {
            _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });
        });
    }
    CalendarPipe.prototype.transform = function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var formats = null;
        var referenceTime = null;
        for (var i = 0, len = args.length; i < len; i++) {
            if (args[i] !== null) {
                if (typeof args[i] === 'object' && !moment.isMoment(args[i])) {
                    formats = args[i];
                }
                else {
                    referenceTime = momentConstructor$1(args[i]);
                }
            }
        }
        return momentConstructor$1(value).calendar(referenceTime, formats);
    };
    CalendarPipe.prototype.ngOnDestroy = function () {
        if (CalendarPipe.refs > 0) {
            CalendarPipe.refs--;
        }
        if (CalendarPipe.refs === 0) {
            CalendarPipe.removeTimer();
        }
        this.midnightSub.unsubscribe();
    };
    CalendarPipe.initTimer = function (ngZone) {
        if (!CalendarPipe.midnight) {
            CalendarPipe.midnight = new core.EventEmitter();
            if (typeof window !== 'undefined') {
                var timeToUpdate_1 = CalendarPipe._getMillisecondsUntilUpdate();
                CalendarPipe.timer = ngZone.runOutsideAngular(function () {
                    return window.setTimeout(function () {
                        CalendarPipe.midnight.emit(new Date());
                        CalendarPipe.removeTimer();
                        CalendarPipe.initTimer(ngZone);
                    }, timeToUpdate_1);
                });
            }
        }
    };
    CalendarPipe.removeTimer = function () {
        if (CalendarPipe.timer) {
            window.clearTimeout(CalendarPipe.timer);
            CalendarPipe.timer = null;
            CalendarPipe.midnight = null;
        }
    };
    CalendarPipe._getMillisecondsUntilUpdate = function () {
        var now = momentConstructor$1();
        var tomorrow = momentConstructor$1().startOf('day').add(1, 'days');
        var timeToMidnight = tomorrow.valueOf() - now.valueOf();
        return timeToMidnight + 1000;
    };
    return CalendarPipe;
}());
CalendarPipe.refs = 0;
CalendarPipe.timer = null;
CalendarPipe.midnight = null;
CalendarPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amCalendar', pure: false },] },
];
CalendarPipe.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: core.NgZone, },
]; };
var momentConstructor$2 = moment;
var DateFormatPipe = /** @class */ (function () {
    function DateFormatPipe() {
    }
    DateFormatPipe.prototype.transform = function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!value) {
            return '';
        }
        return momentConstructor$2(value).format(args[0]);
    };
    return DateFormatPipe;
}());
DateFormatPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amDateFormat' },] },
];
var momentConstructor$3 = moment;
var DifferencePipe = /** @class */ (function () {
    function DifferencePipe() {
    }
    DifferencePipe.prototype.transform = function (value, otherValue, unit, precision) {
        var date = momentConstructor$3(value);
        var date2 = (otherValue !== null) ? momentConstructor$3(otherValue) : momentConstructor$3();
        return date.diff(date2, unit, precision);
    };
    return DifferencePipe;
}());
DifferencePipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amDifference' },] },
];
var DurationPipe = /** @class */ (function () {
    function DurationPipe() {
    }
    DurationPipe.prototype.transform = function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (typeof args === 'undefined' || args.length !== 1) {
            throw new Error('DurationPipe: missing required time unit argument');
        }
        return moment.duration(value, (args[0])).humanize();
    };
    return DurationPipe;
}());
DurationPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amDuration' },] },
];
var FromUnixPipe = /** @class */ (function () {
    function FromUnixPipe() {
    }
    FromUnixPipe.prototype.transform = function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (typeof value === 'string') {
            value = +value;
        }
        return moment.unix(value);
    };
    return FromUnixPipe;
}());
FromUnixPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amFromUnix' },] },
];
var momentConstructor$4 = moment;
var ParsePipe = /** @class */ (function () {
    function ParsePipe() {
    }
    ParsePipe.prototype.transform = function (value, format) {
        return momentConstructor$4(value, format);
    };
    return ParsePipe;
}());
ParsePipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amParse' },] },
];
var momentConstructor$5 = moment;
var SubtractPipe = /** @class */ (function () {
    function SubtractPipe() {
    }
    SubtractPipe.prototype.transform = function (value, amount, unit) {
        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {
            throw new Error('SubtractPipe: missing required arguments');
        }
        return momentConstructor$5(value).subtract(amount, unit);
    };
    return SubtractPipe;
}());
SubtractPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amSubtract' },] },
];
var momentConstructor$6 = moment;
var TimeAgoPipe = /** @class */ (function () {
    function TimeAgoPipe(cdRef, ngZone) {
        this.cdRef = cdRef;
        this.ngZone = ngZone;
    }
    TimeAgoPipe.prototype.transform = function (value, omitSuffix) {
        if (this.hasChanged(value, omitSuffix)) {
            this.lastTime = this.getTime(value);
            this.lastValue = value;
            this.lastOmitSuffix = omitSuffix;
            this.lastLocale = this.getLocale(value);
            this.removeTimer();
            this.createTimer();
            this.lastText = momentConstructor$6(value).from(momentConstructor$6(), omitSuffix);
        }
        else {
            this.createTimer();
        }
        return this.lastText;
    };
    TimeAgoPipe.prototype.ngOnDestroy = function () {
        this.removeTimer();
    };
    TimeAgoPipe.prototype.createTimer = function () {
        var _this = this;
        if (this.currentTimer) {
            return;
        }
        var momentInstance = momentConstructor$6(this.lastValue);
        var timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;
        this.currentTimer = this.ngZone.runOutsideAngular(function () {
            if (typeof window !== 'undefined') {
                return window.setTimeout(function () {
                    _this.lastText = momentConstructor$6(_this.lastValue).from(momentConstructor$6(), _this.lastOmitSuffix);
                    _this.currentTimer = null;
                    _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });
                }, timeToUpdate);
            }
        });
    };
    TimeAgoPipe.prototype.removeTimer = function () {
        if (this.currentTimer) {
            window.clearTimeout(this.currentTimer);
            this.currentTimer = null;
        }
    };
    TimeAgoPipe.prototype.getSecondsUntilUpdate = function (momentInstance) {
        var howOld = Math.abs(momentConstructor$6().diff(momentInstance, 'minute'));
        if (howOld < 1) {
            return 1;
        }
        else if (howOld < 60) {
            return 30;
        }
        else if (howOld < 180) {
            return 300;
        }
        else {
            return 3600;
        }
    };
    TimeAgoPipe.prototype.hasChanged = function (value, omitSuffix) {
        return this.getTime(value) !== this.lastTime
            || this.getLocale(value) !== this.lastLocale
            || omitSuffix !== this.lastOmitSuffix;
    };
    TimeAgoPipe.prototype.getTime = function (value) {
        if (moment.isDate(value)) {
            return value.getTime();
        }
        else if (moment.isMoment(value)) {
            return value.valueOf();
        }
        else {
            return momentConstructor$6(value).valueOf();
        }
    };
    TimeAgoPipe.prototype.getLocale = function (value) {
        return moment.isMoment(value) ? value.locale() : null;
    };
    return TimeAgoPipe;
}());
TimeAgoPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amTimeAgo', pure: false },] },
];
TimeAgoPipe.ctorParameters = function () { return [
    { type: core.ChangeDetectorRef, },
    { type: core.NgZone, },
]; };
var momentConstructor$7 = moment;
var UtcPipe = /** @class */ (function () {
    function UtcPipe() {
    }
    UtcPipe.prototype.transform = function (value) {
        return momentConstructor$7(value).utc();
    };
    return UtcPipe;
}());
UtcPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amUtc' },] },
];
var FromUtcPipe = /** @class */ (function () {
    function FromUtcPipe() {
    }
    FromUtcPipe.prototype.transform = function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return moment.utc(value);
    };
    return FromUtcPipe;
}());
FromUtcPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amFromUtc' },] },
];
var momentConstructor$8 = moment;
var LocalTimePipe = /** @class */ (function () {
    function LocalTimePipe() {
    }
    LocalTimePipe.prototype.transform = function (value) {
        return momentConstructor$8(value).local();
    };
    return LocalTimePipe;
}());
LocalTimePipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amLocal' },] },
];
var momentConstructor$9 = moment;
var LocalePipe = /** @class */ (function () {
    function LocalePipe() {
    }
    LocalePipe.prototype.transform = function (value, locale) {
        return momentConstructor$9(value).locale(locale);
    };
    return LocalePipe;
}());
LocalePipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amLocale' },] },
];
var ParseZonePipe = /** @class */ (function () {
    function ParseZonePipe() {
    }
    ParseZonePipe.prototype.transform = function (value) {
        return moment.parseZone(value);
    };
    return ParseZonePipe;
}());
ParseZonePipe.decorators = [
    { type: core.Pipe, args: [{ name: 'amParseZone' },] },
];
var ANGULAR_MOMENT_PIPES = [
    AddPipe,
    CalendarPipe,
    DateFormatPipe,
    DifferencePipe,
    DurationPipe,
    FromUnixPipe,
    ParsePipe,
    SubtractPipe,
    TimeAgoPipe,
    UtcPipe,
    FromUtcPipe,
    LocalTimePipe,
    LocalePipe,
    ParseZonePipe
];
var MomentModule = /** @class */ (function () {
    function MomentModule() {
    }
    return MomentModule;
}());
MomentModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: ANGULAR_MOMENT_PIPES,
                exports: ANGULAR_MOMENT_PIPES
            },] },
];

exports.AddPipe = AddPipe;
exports.CalendarPipe = CalendarPipe;
exports.DateFormatPipe = DateFormatPipe;
exports.DifferencePipe = DifferencePipe;
exports.DurationPipe = DurationPipe;
exports.FromUnixPipe = FromUnixPipe;
exports.ParsePipe = ParsePipe;
exports.MomentModule = MomentModule;
exports.SubtractPipe = SubtractPipe;
exports.TimeAgoPipe = TimeAgoPipe;
exports.UtcPipe = UtcPipe;
exports.FromUtcPipe = FromUtcPipe;
exports.LocalTimePipe = LocalTimePipe;
exports.LocalePipe = LocalePipe;
exports.ParseZonePipe = ParseZonePipe;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-moment.umd.js.map
