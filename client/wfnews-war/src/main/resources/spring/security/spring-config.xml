<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:sec="http://www.springframework.org/schema/security" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	                    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
	                    http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">
	
	<!-- No additional authentication-manager config required for a resource server.  The authentication will be handled by the authorization server. -->
	<sec:authentication-manager />
	
	<bean id="tokenClient" class="ca.bc.gov.webade.oauth2.rest.v1.token.client.impl.TokenServiceImpl">
		<constructor-arg value="WFIM_INCIDENT_MANAGER_UI"/>
		<constructor-arg value="${webade-oauth2.wfim-incident-manager-ui.client.secrett}" />
		<constructor-arg value="${webade-oauth2.check.token.v2.url}" />
		<constructor-arg value="${webade-oauth2.token.url}" />
	</bean>
	
	<!-- The token client is made hot swappable to support JUNIT tests. -->
	<bean id="swappableTokenClient" class="org.springframework.aop.target.HotSwappableTargetSource">
    	<constructor-arg ref="tokenClient" />
	</bean>
	
	<!-- The swappable token client is proxied to support JUNIT tests. -->
	<bean id="tokenClientProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="targetSource" ref="swappableTokenClient" />
	</bean>
	
	<!-- Token services are used to verify and decode OAUTH tokens.  The remote token services use the check token endpoint provided by the authorization -->
	<!-- server to perform the verification and decoding.  The credentials (clientId and clientSecret) must corrispond to a client that has been granted access -->
	<!-- to the 'checkToken' end point.  The resource server security filter will use the token services to verify and decode OAUTH tokens that it receives in  -->
	<!-- the URL of resource access requests. -->
	<bean id="tokenServices" class="ca.bc.gov.webade.oauth2.RemoteTokenServices">
		<constructor-arg ref="tokenClientProxy" />
	</bean>
	
	<!-- The resource-server defines a security filter for the specified resource.  The resource-payPeriodId should corrispond to a resource that -->
	<!-- has been configured on the authorization server.  The token service that will be used to decode the oauth token is also specified. -->
	<oauth:resource-server id="resourceServerFilter" resource-id="wfim" token-services-ref="tokenServices" />
	
	 <bean id="basicAuthenticationFilter" class="ca.bc.gov.webade.oauth2.spring.security.authentication.www.BasicAuthenticationFilter">         
		<constructor-arg index="0" ref="basicAuthenticationManager"/>
		<constructor-arg index="1" ref="authenticationEntryPoint"/>
	</bean>

	<bean id="basicAuthenticationManager"
		class="ca.bc.gov.webade.oauth2.spring.security.authentication.BasicAuthenticationManager">
		<property name="resourceId" value="wfim" />
		<property name="tokenEndpointUrl" value="${webade-oauth2.token.url}" />
		<property name="tokenServices" ref="tokenServices"/>
	</bean>
		
 	<!-- If a token or basic authentication is not provided then we will return 401. -->
	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<property name="realmName" value="wfim-incident-manager-ui-war"/>
	</bean>
 
 	<!-- The http tag sets up the standard security filters for the specified URL pattern in the correct order.  The request-matcher attribute specifies -->
 	<!-- that the url patterns will be interpreted using regular expressions rather than the default 'ant path' expressions. The use-expressions attribute -->
 	<!-- specifies that the 'access' rules will be interpreted as expressions rather than just a list of required authorities.  The entry-point-ref attribute -->
 	<!-- specifies the bean that will be used to authenticate users. -->
	<!--sec:http pattern="/v1.*" request-matcher="regex"  use-expressions="true" create-session="never" entry-point-ref="authenticationEntryPoint"--> 
	<sec:http pattern="/checkToken" request-matcher="regex"  use-expressions="true" create-session="never" entry-point-ref="authenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager">
		<sec:anonymous enabled="true" />
		<sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<sec:custom-filter ref="basicAuthenticationFilter" position="BASIC_AUTH_FILTER"/>
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>
	
	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
			</list>
		</constructor-arg>
	</bean>

	<bean id='webadeAuthenticationHolder' class='ca.bc.gov.webade.oauth2.spring.security.core.WebAdeAuthenticationHolder' />

	<bean scope="request" factory-bean="webadeAuthenticationHolder"
		factory-method="getWebAdeAuthentication">
		<aop:scoped-proxy />
	</bean>
	
</beans>
