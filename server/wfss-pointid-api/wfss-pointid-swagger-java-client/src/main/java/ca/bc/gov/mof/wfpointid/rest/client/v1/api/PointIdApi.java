/*
 * Wildfire Point ID REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ca.bc.gov.mof.wfpointid.rest.client.v1.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import ca.bc.gov.mof.wfpointid.rest.client.v1.ApiCallback;
import ca.bc.gov.mof.wfpointid.rest.client.v1.ApiClient;
import ca.bc.gov.mof.wfpointid.rest.client.v1.ApiException;
import ca.bc.gov.mof.wfpointid.rest.client.v1.ApiResponse;
import ca.bc.gov.mof.wfpointid.rest.client.v1.Configuration;
import ca.bc.gov.mof.wfpointid.rest.client.v1.Pair;
import ca.bc.gov.mof.wfpointid.rest.client.v1.ProgressRequestBody;
import ca.bc.gov.mof.wfpointid.rest.client.v1.ProgressResponseBody;
import ca.bc.gov.mof.wfpointid.rest.client.v1.model.GeographyResource;
import ca.bc.gov.mof.wfpointid.rest.client.v1.model.NearbyResource;
import ca.bc.gov.mof.wfpointid.rest.client.v1.model.OwnershipResource;
import ca.bc.gov.mof.wfpointid.rest.client.v1.model.WeatherResource;

public class PointIdApi {
    private ApiClient apiClient;

    public PointIdApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PointIdApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getGeographyData
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGeographyDataCall(String lat, String lon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geography";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lat", lat));
        if (lon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lon", lon));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getGeographyDataValidateBeforeCall(String lat, String lon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getGeographyData(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getGeographyData(Async)");
        }
        

        com.squareup.okhttp.Call call = getGeographyDataCall(lat, lon, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of geography features that are near by the provided coordinates
     * Get list of geography features that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @return GeographyResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeographyResource getGeographyData(String lat, String lon) throws ApiException {
        ApiResponse<GeographyResource> resp = getGeographyDataWithHttpInfo(lat, lon);
        return resp.getData();
    }

    /**
     * Get list of geography features that are near by the provided coordinates
     * Get list of geography features that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @return ApiResponse&lt;GeographyResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeographyResource> getGeographyDataWithHttpInfo(String lat, String lon) throws ApiException {
        com.squareup.okhttp.Call call = getGeographyDataValidateBeforeCall(lat, lon, null, null);
        Type localVarReturnType = new TypeToken<GeographyResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of geography features that are near by the provided coordinates (asynchronously)
     * Get list of geography features that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGeographyDataAsync(String lat, String lon, final ApiCallback<GeographyResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGeographyDataValidateBeforeCall(lat, lon, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeographyResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNearby
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param radius The radius used to calculate what is near by. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNearbyCall(String lat, String lon, String radius, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nearby";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lat", lat));
        if (lon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lon", lon));
        if (radius != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("radius", radius));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getNearbyValidateBeforeCall(String lat, String lon, String radius, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getNearby(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getNearby(Async)");
        }
        

        com.squareup.okhttp.Call call = getNearbyCall(lat, lon, radius, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of features that are near by the provided coordinates
     * Get list of features that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param radius The radius used to calculate what is near by. (optional)
     * @return NearbyResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NearbyResource getNearby(String lat, String lon, String radius) throws ApiException {
        ApiResponse<NearbyResource> resp = getNearbyWithHttpInfo(lat, lon, radius);
        return resp.getData();
    }

    /**
     * Get list of features that are near by the provided coordinates
     * Get list of features that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param radius The radius used to calculate what is near by. (optional)
     * @return ApiResponse&lt;NearbyResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NearbyResource> getNearbyWithHttpInfo(String lat, String lon, String radius) throws ApiException {
        com.squareup.okhttp.Call call = getNearbyValidateBeforeCall(lat, lon, radius, null, null);
        Type localVarReturnType = new TypeToken<NearbyResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of features that are near by the provided coordinates (asynchronously)
     * Get list of features that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param radius The radius used to calculate what is near by. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNearbyAsync(String lat, String lon, String radius, final ApiCallback<NearbyResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNearbyValidateBeforeCall(lat, lon, radius, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NearbyResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOwnershipData
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOwnershipDataCall(String lat, String lon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ownership";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lat", lat));
        if (lon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lon", lon));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getOwnershipDataValidateBeforeCall(String lat, String lon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getOwnershipData(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getOwnershipData(Async)");
        }
        

        com.squareup.okhttp.Call call = getOwnershipDataCall(lat, lon, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of owned features that are near by the provided coordinates
     * Get list of owned features that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @return OwnershipResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OwnershipResource getOwnershipData(String lat, String lon) throws ApiException {
        ApiResponse<OwnershipResource> resp = getOwnershipDataWithHttpInfo(lat, lon);
        return resp.getData();
    }

    /**
     * Get list of owned features that are near by the provided coordinates
     * Get list of owned features that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @return ApiResponse&lt;OwnershipResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OwnershipResource> getOwnershipDataWithHttpInfo(String lat, String lon) throws ApiException {
        com.squareup.okhttp.Call call = getOwnershipDataValidateBeforeCall(lat, lon, null, null);
        Type localVarReturnType = new TypeToken<OwnershipResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of owned features that are near by the provided coordinates (asynchronously)
     * Get list of owned features that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOwnershipDataAsync(String lat, String lon, final ApiCallback<OwnershipResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOwnershipDataValidateBeforeCall(lat, lon, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OwnershipResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWeatherData
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param hour The hour of day used to filter weather events. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWeatherDataCall(String lat, String lon, String hour, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/weather";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lat", lat));
        if (lon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lon", lon));
        if (hour != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hour", hour));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getWeatherDataValidateBeforeCall(String lat, String lon, String hour, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling getWeatherData(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling getWeatherData(Async)");
        }
        

        com.squareup.okhttp.Call call = getWeatherDataCall(lat, lon, hour, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of weather events that are near by the provided coordinates
     * Get list of weather events that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param hour The hour of day used to filter weather events. (optional)
     * @return WeatherResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WeatherResource getWeatherData(String lat, String lon, String hour) throws ApiException {
        ApiResponse<WeatherResource> resp = getWeatherDataWithHttpInfo(lat, lon, hour);
        return resp.getData();
    }

    /**
     * Get list of weather events that are near by the provided coordinates
     * Get list of weather events that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param hour The hour of day used to filter weather events. (optional)
     * @return ApiResponse&lt;WeatherResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WeatherResource> getWeatherDataWithHttpInfo(String lat, String lon, String hour) throws ApiException {
        com.squareup.okhttp.Call call = getWeatherDataValidateBeforeCall(lat, lon, hour, null, null);
        Type localVarReturnType = new TypeToken<WeatherResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of weather events that are near by the provided coordinates (asynchronously)
     * Get list of weather events that are near by the provided coordinates.
     * @param lat The longitude of the point used to calculate. (required)
     * @param lon The latitude of the point used to calculate. (required)
     * @param hour The hour of day used to filter weather events. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWeatherDataAsync(String lat, String lon, String hour, final ApiCallback<WeatherResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWeatherDataValidateBeforeCall(lat, lon, hour, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WeatherResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
