/*
 * Wildfire Point ID REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasProperty;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

import org.junit.Ignore;
import org.junit.Test;

import ca.bc.gov.mof.wfpointid.rest.client.v1.ApiException;
import ca.bc.gov.mof.wfpointid.rest.client.v1.api.PointIdApi;
import ca.bc.gov.mof.wfpointid.rest.client.v1.model.GeographyResource;
import ca.bc.gov.mof.wfpointid.rest.client.v1.model.NearbyResource;
import ca.bc.gov.mof.wfpointid.rest.client.v1.model.OwnershipResource;
import ca.bc.gov.mof.wfpointid.rest.client.v1.model.WeatherResource;

/**
 * API tests for PointIdApi
 */
public class PointIdApiTest {

    private final PointIdApi api = new PointIdApi();
    
    String lat = "51";
    String lon = "-121";
    	
    /**
     * Get list of geography features that are near by the provided coordinates
     *
     * Get list of geography features that are near by the provided coordinates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGeographyDataTest() throws ApiException {
        
		GeographyResource response = api.getGeographyData(lat, lon);
        assertNotNull(response);
        assertThat(response, hasProperty("bioGeoClimaticZone", equalTo("Interior Douglas-fir")));
        assertThat(response, hasProperty("elevation", equalTo(1255)));
        assertThat(response, hasProperty("aspect", equalTo(295)));
    }
    
    /**
     * Get list of features that are near by the provided coordinates
     *
     * Get list of features that are near by the provided coordinates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore
    public void getNearbyTest() throws ApiException {
        String radius = "10";
        NearbyResource response = api.getNearby(lat, lon, radius);
        if (response==null)
        	radius = null;

    }
    
    /**
     * Get list of owned features that are near by the provided coordinates
     *
     * Get list of owned features that are near by the provided coordinates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOwnershipDataTest() throws ApiException {
		OwnershipResource response = api.getOwnershipData(lat, lon);
        assertNotNull(response);
        assertThat(response, hasProperty("regionalDistrict", equalTo("Thompson-Nicola Regional District")));
        assertThat(response, hasProperty("fireCentre", equalTo("Kamloops Fire Centre")));
        assertThat(response, hasProperty("fireZone", equalTo("K2-Kamloops Zone (Kamloops)")));
    }
    
    /**
     * Get list of weather events that are near by the provided coordinates
     *
     * Get list of weather events that are near by the provided coordinates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWeatherDataTest() throws ApiException {
        String hour = "2023050411";
		WeatherResource response = api.getWeatherData(lat, lon, hour);
        assertNotNull(response);
        assertThat(response, hasProperty("stations"));

    }
    
}
